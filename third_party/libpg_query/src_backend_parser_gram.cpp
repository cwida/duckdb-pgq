/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 113,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 114,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 115,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 116,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 117,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 118,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 119,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 120,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 121,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 122,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 123,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 124,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 125,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 126,              /* DESTINATION  */
  YYSYMBOL_DETACH = 127,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 128,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 129,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 130,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 131,                 /* DISTINCT  */
  YYSYMBOL_DO = 132,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 133,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 134,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 135,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 136,                     /* DROP  */
  YYSYMBOL_EACH = 137,                     /* EACH  */
  YYSYMBOL_EDGE = 138,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 139,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 146,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 147,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 148,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 149,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 150,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 151,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 152,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 153,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 154,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 155,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 156,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 157,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 181,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 182,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 183,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 184,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 185,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 186,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 187,                  /* HANDLER  */
  YYSYMBOL_HAVING = 188,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 189,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 190,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 191,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 192,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 193,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 194,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 195,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 196,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 197,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 198,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 199,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 200,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 201,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 202,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 203,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 204,                /* INCREMENT  */
  YYSYMBOL_INDEX = 205,                    /* INDEX  */
  YYSYMBOL_INDEXES = 206,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 207,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 208,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 209,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 210,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 211,                  /* INNER_P  */
  YYSYMBOL_INOUT = 212,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 213,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 214,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 215,                   /* INSERT  */
  YYSYMBOL_INSTALL = 216,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 217,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 218,                    /* INT_P  */
  YYSYMBOL_INTEGER = 219,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 220,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 221,                 /* INTERVAL  */
  YYSYMBOL_INTO = 222,                     /* INTO  */
  YYSYMBOL_INVOKER = 223,                  /* INVOKER  */
  YYSYMBOL_IS = 224,                       /* IS  */
  YYSYMBOL_ISNULL = 225,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 226,                /* ISOLATION  */
  YYSYMBOL_JOIN = 227,                     /* JOIN  */
  YYSYMBOL_JSON = 228,                     /* JSON  */
  YYSYMBOL_KEEP = 229,                     /* KEEP  */
  YYSYMBOL_KEY = 230,                      /* KEY  */
  YYSYMBOL_LABEL = 231,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LOAD = 243,                     /* LOAD  */
  YYSYMBOL_LOCAL = 244,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 245,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 246,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 247,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 248,                   /* LOGGED  */
  YYSYMBOL_MACRO = 249,                    /* MACRO  */
  YYSYMBOL_MAP = 250,                      /* MAP  */
  YYSYMBOL_MAPPING = 251,                  /* MAPPING  */
  YYSYMBOL_MATCH = 252,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 253,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 254,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 255,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 256,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 257,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 258,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 259,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 260,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 261,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 262,                 /* MINVALUE  */
  YYSYMBOL_MODE = 263,                     /* MODE  */
  YYSYMBOL_MONTH_P = 264,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 265,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 266,                     /* MOVE  */
  YYSYMBOL_NAME_P = 267,                   /* NAME_P  */
  YYSYMBOL_NAMES = 268,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 269,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 270,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 271,                    /* NCHAR  */
  YYSYMBOL_NEW = 272,                      /* NEW  */
  YYSYMBOL_NEXT = 273,                     /* NEXT  */
  YYSYMBOL_NO = 274,                       /* NO  */
  YYSYMBOL_NODE = 275,                     /* NODE  */
  YYSYMBOL_NONE = 276,                     /* NONE  */
  YYSYMBOL_NOT = 277,                      /* NOT  */
  YYSYMBOL_NOTHING = 278,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 279,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 280,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 281,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 282,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 283,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 284,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 285,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 286,                 /* OBJECT_P  */
  YYSYMBOL_OF = 287,                       /* OF  */
  YYSYMBOL_OFF = 288,                      /* OFF  */
  YYSYMBOL_OFFSET = 289,                   /* OFFSET  */
  YYSYMBOL_OIDS = 290,                     /* OIDS  */
  YYSYMBOL_OLD = 291,                      /* OLD  */
  YYSYMBOL_ON = 292,                       /* ON  */
  YYSYMBOL_ONLY = 293,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 294,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 295,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 296,                  /* OPTIONS  */
  YYSYMBOL_OR = 297,                       /* OR  */
  YYSYMBOL_ORDER = 298,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 299,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 300,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 301,                  /* OUTER_P  */
  YYSYMBOL_OVER = 302,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 303,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 304,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 305,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 306,                    /* OWNED  */
  YYSYMBOL_OWNER = 307,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 308,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 309,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 310,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 311,                /* PARTITION  */
  YYSYMBOL_PASSING = 312,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 313,                 /* PASSWORD  */
  YYSYMBOL_PATH = 314,                     /* PATH  */
  YYSYMBOL_PATHS = 315,                    /* PATHS  */
  YYSYMBOL_PERCENT = 316,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 317,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 318,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 319,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 320,                  /* PLACING  */
  YYSYMBOL_PLANS = 321,                    /* PLANS  */
  YYSYMBOL_POLICY = 322,                   /* POLICY  */
  YYSYMBOL_POSITION = 323,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 324,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 325,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 326,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 327,                /* PRECISION  */
  YYSYMBOL_PREPARE = 328,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 329,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 330,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 331,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 332,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 333,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 334,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 335,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 336,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 337,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 338,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 339,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 340,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 341,                    /* QUOTE  */
  YYSYMBOL_RANGE = 342,                    /* RANGE  */
  YYSYMBOL_READ_P = 343,                   /* READ_P  */
  YYSYMBOL_REAL = 344,                     /* REAL  */
  YYSYMBOL_REASSIGN = 345,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 346,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 347,                /* RECURSIVE  */
  YYSYMBOL_REF = 348,                      /* REF  */
  YYSYMBOL_REFERENCES = 349,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 350,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 351,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 352,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 353,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 354,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 355,                  /* RELEASE  */
  YYSYMBOL_RENAME = 356,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 357,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 358,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 359,                  /* REPLICA  */
  YYSYMBOL_RESET = 360,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 361,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 362,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 363,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 364,                /* RETURNING  */
  YYSYMBOL_RETURNS = 365,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 366,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 367,                    /* RIGHT  */
  YYSYMBOL_ROLE = 368,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 369,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 370,                   /* ROLLUP  */
  YYSYMBOL_ROW = 371,                      /* ROW  */
  YYSYMBOL_ROWS = 372,                     /* ROWS  */
  YYSYMBOL_RULE = 373,                     /* RULE  */
  YYSYMBOL_SAMPLE = 374,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 375,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 376,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 377,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 378,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 379,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 380,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 381,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 382,                 /* SECURITY  */
  YYSYMBOL_SELECT = 383,                   /* SELECT  */
  YYSYMBOL_SEMI = 384,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 385,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 386,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 387,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 388,                   /* SERVER  */
  YYSYMBOL_SESSION = 389,                  /* SESSION  */
  YYSYMBOL_SET = 390,                      /* SET  */
  YYSYMBOL_SETOF = 391,                    /* SETOF  */
  YYSYMBOL_SETS = 392,                     /* SETS  */
  YYSYMBOL_SHARE = 393,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 394,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 395,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 396,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 397,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 398,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 399,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 400,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 401,                     /* SOME  */
  YYSYMBOL_SOURCE = 402,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 403,                    /* SQL_P  */
  YYSYMBOL_STABLE = 404,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 405,             /* STANDALONE_P  */
  YYSYMBOL_START = 406,                    /* START  */
  YYSYMBOL_STATEMENT = 407,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 408,               /* STATISTICS  */
  YYSYMBOL_STDIN = 409,                    /* STDIN  */
  YYSYMBOL_STDOUT = 410,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 411,                  /* STORAGE  */
  YYSYMBOL_STORED = 412,                   /* STORED  */
  YYSYMBOL_STRICT_P = 413,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 414,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 415,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 416,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 417,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 418,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 419,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 420,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 421,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 422,                    /* TABLE  */
  YYSYMBOL_TABLES = 423,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 424,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 425,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 426,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 427,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 428,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 429,                   /* TEXT_P  */
  YYSYMBOL_THEN = 430,                     /* THEN  */
  YYSYMBOL_TIME = 431,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 432,                /* TIMESTAMP  */
  YYSYMBOL_TO = 433,                       /* TO  */
  YYSYMBOL_TRAIL = 434,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 435,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 436,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 437,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 438,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 439,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 440,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 441,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 442,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 443,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 444,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 445,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 446,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 447,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 448,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 449,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 450,                    /* UNION  */
  YYSYMBOL_UNIQUE = 451,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 452,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 453,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 454,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 455,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 456,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 457,                   /* UPDATE  */
  YYSYMBOL_USE_P = 458,                    /* USE_P  */
  YYSYMBOL_USER = 459,                     /* USER  */
  YYSYMBOL_USING = 460,                    /* USING  */
  YYSYMBOL_VACUUM = 461,                   /* VACUUM  */
  YYSYMBOL_VALID = 462,                    /* VALID  */
  YYSYMBOL_VALIDATE = 463,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 464,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 465,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 466,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 467,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 468,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 469,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 470,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 471,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 472,                   /* VERTEX  */
  YYSYMBOL_VIEW = 473,                     /* VIEW  */
  YYSYMBOL_VIEWS = 474,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 475,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 476,                 /* VOLATILE  */
  YYSYMBOL_WALK = 477,                     /* WALK  */
  YYSYMBOL_WHEN = 478,                     /* WHEN  */
  YYSYMBOL_WHERE = 479,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 480,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 481,                   /* WINDOW  */
  YYSYMBOL_WITH = 482,                     /* WITH  */
  YYSYMBOL_WITHIN = 483,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 484,                  /* WITHOUT  */
  YYSYMBOL_WORK = 485,                     /* WORK  */
  YYSYMBOL_WRAPPER = 486,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 487,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 488,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 489,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 490,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 491,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 492,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 493,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 494,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 495,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 496,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 497,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 498,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 499,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 500,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 501,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 502,                    /* YES_P  */
  YYSYMBOL_ZONE = 503,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 504,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 505,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 506,                  /* WITH_LA  */
  YYSYMBOL_507_ = 507,                     /* '<'  */
  YYSYMBOL_508_ = 508,                     /* '>'  */
  YYSYMBOL_509_ = 509,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 510,                /* POSTFIXOP  */
  YYSYMBOL_511_ = 511,                     /* '+'  */
  YYSYMBOL_512_ = 512,                     /* '-'  */
  YYSYMBOL_513_ = 513,                     /* '*'  */
  YYSYMBOL_514_ = 514,                     /* '/'  */
  YYSYMBOL_515_ = 515,                     /* '%'  */
  YYSYMBOL_516_ = 516,                     /* '^'  */
  YYSYMBOL_UMINUS = 517,                   /* UMINUS  */
  YYSYMBOL_518_ = 518,                     /* '['  */
  YYSYMBOL_519_ = 519,                     /* ']'  */
  YYSYMBOL_520_ = 520,                     /* '('  */
  YYSYMBOL_521_ = 521,                     /* ')'  */
  YYSYMBOL_522_ = 522,                     /* '.'  */
  YYSYMBOL_523_ = 523,                     /* ';'  */
  YYSYMBOL_524_ = 524,                     /* ','  */
  YYSYMBOL_525_ = 525,                     /* '|'  */
  YYSYMBOL_526_ = 526,                     /* '?'  */
  YYSYMBOL_527_ = 527,                     /* '{'  */
  YYSYMBOL_528_ = 528,                     /* '}'  */
  YYSYMBOL_529_ = 529,                     /* '&'  */
  YYSYMBOL_530_ = 530,                     /* '!'  */
  YYSYMBOL_531_ = 531,                     /* ':'  */
  YYSYMBOL_532_ = 532,                     /* '#'  */
  YYSYMBOL_533_ = 533,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 534,                 /* $accept  */
  YYSYMBOL_stmtblock = 535,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 536,                /* stmtmulti  */
  YYSYMBOL_stmt = 537,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 538,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 539,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 540,               /* SeqOptList  */
  YYSYMBOL_opt_with = 541,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 542,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 543,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 544,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 545,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 546,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 547, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 548,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 549, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 550, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 551,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 552,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 553, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 554,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 555,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 556,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 557,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 558,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 559,               /* DetachStmt  */
  YYSYMBOL_opt_database = 560,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 561,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 562,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 563,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 564,               /* opt_col_id  */
  YYSYMBOL_CopyStmt = 565,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 566,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 567,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 568, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 569,                /* opt_using  */
  YYSYMBOL_opt_as = 570,                   /* opt_as  */
  YYSYMBOL_opt_program = 571,              /* opt_program  */
  YYSYMBOL_copy_options = 572,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 573,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 574,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 575,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 576,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 577,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 578,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 579, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 580,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 581,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 582,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 583,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 584,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 585, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 586,       /* generic_option_arg  */
  YYSYMBOL_key_action = 587,               /* key_action  */
  YYSYMBOL_ColConstraint = 588,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 589,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 590,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 591,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 592,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 593,      /* generic_option_elem  */
  YYSYMBOL_key_update = 594,               /* key_update  */
  YYSYMBOL_key_actions = 595,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 596,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 597,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 598,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 599,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 600,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 601,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 602,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 603,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 604,                  /* OptWith  */
  YYSYMBOL_definition = 605,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 606,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 607,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 608,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 609,                /* columnDef  */
  YYSYMBOL_def_list = 610,                 /* def_list  */
  YYSYMBOL_index_name = 611,               /* index_name  */
  YYSYMBOL_TableElement = 612,             /* TableElement  */
  YYSYMBOL_def_elem = 613,                 /* def_elem  */
  YYSYMBOL_opt_definition = 614,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 615,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 616,               /* columnElem  */
  YYSYMBOL_opt_column_list = 617,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 618,              /* ColQualList  */
  YYSYMBOL_key_delete = 619,               /* key_delete  */
  YYSYMBOL_reloption_elem = 620,           /* reloption_elem  */
  YYSYMBOL_columnList = 621,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 622,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 623,                /* func_type  */
  YYSYMBOL_ConstraintElem = 624,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 625,         /* TableElementList  */
  YYSYMBOL_key_match = 626,                /* key_match  */
  YYSYMBOL_TableLikeClause = 627,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 628,                  /* OptTemp  */
  YYSYMBOL_generated_when = 629,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 630,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 631,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 632,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 633,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 634,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 635,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 636,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 637,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 638,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 639,         /* reserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 640,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateDatabaseStmt = 641,       /* CreateDatabaseStmt  */
  YYSYMBOL_opt_extension_name = 642,       /* opt_extension_name  */
  YYSYMBOL_CreateFunctionStmt = 643,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 644,              /* macro_alias  */
  YYSYMBOL_param_list = 645,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 646,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 647,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 648,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 649,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 650,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 651,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 652,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 653,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 654,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 655,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 656,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 657,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 658,             /* using_clause  */
  YYSYMBOL_DropStmt = 659,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 660,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 661,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 662,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 663,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 664, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 665,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 666,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 667,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 668,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 669,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 670,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 671,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 672,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 673, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 674,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 675,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 676,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 677,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 678,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 679,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 680,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 681,                /* IndexStmt  */
  YYSYMBOL_access_method = 682,            /* access_method  */
  YYSYMBOL_access_method_clause = 683,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 684,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 685,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 686,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 687,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 688,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 689,              /* insert_rest  */
  YYSYMBOL_insert_target = 690,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 691,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 692,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 693,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 694,       /* insert_column_item  */
  YYSYMBOL_set_clause = 695,               /* set_clause  */
  YYSYMBOL_opt_or_action = 696,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 697,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 698,               /* index_elem  */
  YYSYMBOL_returning_clause = 699,         /* returning_clause  */
  YYSYMBOL_override_kind = 700,            /* override_kind  */
  YYSYMBOL_set_target_list = 701,          /* set_target_list  */
  YYSYMBOL_opt_collate = 702,              /* opt_collate  */
  YYSYMBOL_opt_class = 703,                /* opt_class  */
  YYSYMBOL_insert_column_list = 704,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 705,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 706, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 707,             /* index_params  */
  YYSYMBOL_set_target = 708,               /* set_target  */
  YYSYMBOL_LoadStmt = 709,                 /* LoadStmt  */
  YYSYMBOL_file_name = 710,                /* file_name  */
  YYSYMBOL_PGQ_IDENT = 711,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 712,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 713,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 714,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 715,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 716, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 717,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 718,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 719,             /* KeyReference  */
  YYSYMBOL_LabelList = 720,                /* LabelList  */
  YYSYMBOL_Discriminator = 721,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 722,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 723,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 724,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 725,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 726,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 727,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 728,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 729,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 730,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 731,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 732,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableStmt = 733,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 734,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 735,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 736,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 737,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 738,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 739,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 740,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 741,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 742,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 743,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 744,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 745,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 746, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 747,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 748,                  /* CostNum  */
  YYSYMBOL_CostDefault = 749,              /* CostDefault  */
  YYSYMBOL_CostOptional = 750,             /* CostOptional  */
  YYSYMBOL_SubPath = 751,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 752,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 753,              /* PathElement  */
  YYSYMBOL_PathSequence = 754,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 755,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 756,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 757,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 758,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 759,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 760,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 761,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 762,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 763,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 764,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 765,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 766,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 767,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 768,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 769,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 770,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 771,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 772,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 773,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 774,               /* RenameStmt  */
  YYSYMBOL_opt_column = 775,               /* opt_column  */
  YYSYMBOL_SelectStmt = 776,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 777,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 778,         /* select_no_parens  */
  YYSYMBOL_select_clause = 779,            /* select_clause  */
  YYSYMBOL_opt_select = 780,               /* opt_select  */
  YYSYMBOL_simple_select = 781,            /* simple_select  */
  YYSYMBOL_value_or_values = 782,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 783,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 784,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 785,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 786, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 787,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 788,              /* with_clause  */
  YYSYMBOL_cte_list = 789,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 790,        /* common_table_expr  */
  YYSYMBOL_into_clause = 791,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 792,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 793,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 794,          /* all_or_distinct  */
  YYSYMBOL_by_name = 795,                  /* by_name  */
  YYSYMBOL_distinct_clause = 796,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 797,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 798,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 799,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 800,              /* sort_clause  */
  YYSYMBOL_sortby_list = 801,              /* sortby_list  */
  YYSYMBOL_sortby = 802,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 803,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 804,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 805,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 806,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 807,             /* limit_clause  */
  YYSYMBOL_offset_clause = 808,            /* offset_clause  */
  YYSYMBOL_sample_count = 809,             /* sample_count  */
  YYSYMBOL_sample_clause = 810,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 811,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 812,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 813,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 814,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 815,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 816,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 817,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 818, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 819,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 820,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 821,            /* first_or_next  */
  YYSYMBOL_group_clause = 822,             /* group_clause  */
  YYSYMBOL_group_by_list = 823,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 824,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 825,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 826,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 827,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 828,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 829,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 830,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 831,            /* having_clause  */
  YYSYMBOL_qualify_clause = 832,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 833,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 834,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 835,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 836,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 837,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 838,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 839,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 840,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 841,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 842,              /* from_clause  */
  YYSYMBOL_from_list = 843,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 844,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 845,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 846,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 847,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 848,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 849,             /* pivot_header  */
  YYSYMBOL_pivot_value = 850,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 851,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 852,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 853,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 854,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 855,             /* joined_table  */
  YYSYMBOL_alias_clause = 856,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 857,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 858,        /* func_alias_clause  */
  YYSYMBOL_join_type = 859,                /* join_type  */
  YYSYMBOL_join_outer = 860,               /* join_outer  */
  YYSYMBOL_join_qual = 861,                /* join_qual  */
  YYSYMBOL_relation_expr = 862,            /* relation_expr  */
  YYSYMBOL_func_table = 863,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 864,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 865,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 866,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 867,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 868,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 869,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 870,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 871,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 872,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 873,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 874,             /* opt_Typename  */
  YYSYMBOL_Typename = 875,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 876,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 877,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 878,            /* ConstTypename  */
  YYSYMBOL_GenericType = 879,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 880,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 881,                  /* Numeric  */
  YYSYMBOL_opt_float = 882,                /* opt_float  */
  YYSYMBOL_Bit = 883,                      /* Bit  */
  YYSYMBOL_ConstBit = 884,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 885,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 886,         /* BitWithoutLength  */
  YYSYMBOL_Character = 887,                /* Character  */
  YYSYMBOL_ConstCharacter = 888,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 889,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 890,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 891,                /* character  */
  YYSYMBOL_opt_varying = 892,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 893,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 894,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 895,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 896,             /* year_keyword  */
  YYSYMBOL_month_keyword = 897,            /* month_keyword  */
  YYSYMBOL_day_keyword = 898,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 899,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 900,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 901,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 902,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 903,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 904,             /* opt_interval  */
  YYSYMBOL_a_expr = 905,                   /* a_expr  */
  YYSYMBOL_b_expr = 906,                   /* b_expr  */
  YYSYMBOL_c_expr = 907,                   /* c_expr  */
  YYSYMBOL_d_expr = 908,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 909,         /* indirection_expr  */
  YYSYMBOL_func_application = 910,         /* func_application  */
  YYSYMBOL_func_expr = 911,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 912,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 913, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 914,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 915,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 916,            /* filter_clause  */
  YYSYMBOL_export_clause = 917,            /* export_clause  */
  YYSYMBOL_window_clause = 918,            /* window_clause  */
  YYSYMBOL_window_definition_list = 919,   /* window_definition_list  */
  YYSYMBOL_window_definition = 920,        /* window_definition  */
  YYSYMBOL_over_clause = 921,              /* over_clause  */
  YYSYMBOL_window_specification = 922,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 923, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 924,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 925,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 926,             /* frame_extent  */
  YYSYMBOL_frame_bound = 927,              /* frame_bound  */
  YYSYMBOL_qualified_row = 928,            /* qualified_row  */
  YYSYMBOL_row = 929,                      /* row  */
  YYSYMBOL_dict_arg = 930,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 931,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 932, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 933,                  /* map_arg  */
  YYSYMBOL_map_arguments = 934,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 935,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 936, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 937,                 /* sub_type  */
  YYSYMBOL_all_Op = 938,                   /* all_Op  */
  YYSYMBOL_MathOp = 939,                   /* MathOp  */
  YYSYMBOL_qual_Op = 940,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 941,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 942,              /* subquery_Op  */
  YYSYMBOL_any_operator = 943,             /* any_operator  */
  YYSYMBOL_c_expr_list = 944,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 945,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 946,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 947,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 948,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 949,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 950,            /* func_arg_expr  */
  YYSYMBOL_type_list = 951,                /* type_list  */
  YYSYMBOL_extract_list = 952,             /* extract_list  */
  YYSYMBOL_extract_arg = 953,              /* extract_arg  */
  YYSYMBOL_overlay_list = 954,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 955,          /* overlay_placing  */
  YYSYMBOL_position_list = 956,            /* position_list  */
  YYSYMBOL_substr_list = 957,              /* substr_list  */
  YYSYMBOL_substr_from = 958,              /* substr_from  */
  YYSYMBOL_substr_for = 959,               /* substr_for  */
  YYSYMBOL_trim_list = 960,                /* trim_list  */
  YYSYMBOL_in_expr = 961,                  /* in_expr  */
  YYSYMBOL_case_expr = 962,                /* case_expr  */
  YYSYMBOL_when_clause_list = 963,         /* when_clause_list  */
  YYSYMBOL_when_clause = 964,              /* when_clause  */
  YYSYMBOL_case_default = 965,             /* case_default  */
  YYSYMBOL_case_arg = 966,                 /* case_arg  */
  YYSYMBOL_columnref = 967,                /* columnref  */
  YYSYMBOL_indirection_el = 968,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 969,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 970,              /* indirection  */
  YYSYMBOL_opt_indirection = 971,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 972,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 973,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 974, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 975,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 976, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 977,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 978,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 979,                /* target_el  */
  YYSYMBOL_except_list = 980,              /* except_list  */
  YYSYMBOL_opt_except_list = 981,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 982,          /* replace_list_el  */
  YYSYMBOL_replace_list = 983,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 984,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 985,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 986,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 987,           /* qualified_name  */
  YYSYMBOL_name_list = 988,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 989,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 990, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 991,                     /* name  */
  YYSYMBOL_attr_name = 992,                /* attr_name  */
  YYSYMBOL_func_name = 993,                /* func_name  */
  YYSYMBOL_AexprConst = 994,               /* AexprConst  */
  YYSYMBOL_Iconst = 995,                   /* Iconst  */
  YYSYMBOL_Sconst = 996,                   /* Sconst  */
  YYSYMBOL_ColId = 997,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 998,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 999,       /* type_function_name  */
  YYSYMBOL_function_name_token = 1000,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1001,         /* type_name_token  */
  YYSYMBOL_any_name = 1002,                /* any_name  */
  YYSYMBOL_attrs = 1003,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1004,           /* opt_name_list  */
  YYSYMBOL_param_name = 1005,              /* param_name  */
  YYSYMBOL_ColLabel = 1006,                /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 1007,        /* ColLabelOrString  */
  YYSYMBOL_named_param = 1008,             /* named_param  */
  YYSYMBOL_TransactionStmt = 1009,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1010,         /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 1011,              /* UpdateStmt  */
  YYSYMBOL_UseStmt = 1012,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1013,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1014,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1015,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1016,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1017,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1018,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1019,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1020,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1021,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1022,                /* set_rest  */
  YYSYMBOL_generic_set = 1023,             /* generic_set  */
  YYSYMBOL_var_value = 1024,               /* var_value  */
  YYSYMBOL_zone_value = 1025,              /* zone_value  */
  YYSYMBOL_var_list = 1026,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1027,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1028,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1029,              /* opt_tables  */
  YYSYMBOL_var_name = 1030,                /* var_name  */
  YYSYMBOL_table_id = 1031,                /* table_id  */
  YYSYMBOL_ViewStmt = 1032,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1033         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  746
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   73591

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  534
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  500
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2267
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3801

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   763


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   530,     2,   532,   533,   515,   529,     2,
     520,   521,   513,   511,   524,   512,   522,   514,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   531,   523,
     507,   509,   508,   526,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   518,     2,   519,   516,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   527,   525,   528,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   510,   517
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   548,   548,   564,   576,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   627,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    71,    72,    73,    77,    86,    95,   102,
     103,   108,   120,   125,   150,   155,   160,   166,   176,   186,
     192,   203,   214,   229,   230,   236,   237,   242,   243,   249,
     250,   254,   255,   260,   262,   268,   269,   273,   274,   277,
     278,   283,     7,    16,    25,    46,    47,    50,    54,     7,
      14,    22,     9,    15,    22,    28,    34,    41,    48,    59,
       9,    19,    29,    42,    43,     7,    14,    31,    51,    52,
       9,    17,    29,    30,    34,    35,    36,    41,    42,    43,
      48,    52,    56,    60,    64,    68,    72,    76,    80,    84,
      88,    92,    97,   101,   105,   112,   113,   117,   118,   119,
       2,     9,    15,    21,    28,    35,    45,    46,    47,     2,
      40,    41,    42,    50,    64,    66,    70,    72,    76,    89,
      92,    96,   100,   104,   108,   109,   113,   122,   132,   146,
     149,   153,   176,   177,   182,   184,   188,   190,   194,   196,
     201,   204,   208,   214,   218,   220,   223,   232,   234,   238,
     264,   268,   270,   274,   276,   280,   280,   280,   284,   286,
     288,   292,   294,   298,   300,   302,   304,   306,   310,   312,
     316,   328,   340,   352,   364,   377,   391,   393,   398,   423,
     425,   429,   431,   436,   445,   454,   463,   473,   483,   485,
     489,   491,   495,   506,   515,   527,   536,   538,   542,   565,
     567,   571,   573,   584,   586,   597,   599,   610,   612,   621,
     632,   640,   649,   653,   655,   659,   661,   667,   669,   671,
     675,   677,   681,   687,   695,   697,   701,   712,   728,   755,
     788,   789,   791,   799,   814,   816,   818,   820,   822,   824,
     826,   828,   830,   832,   834,   836,   838,   840,   842,   845,
     847,   849,   851,   853,   855,   860,   865,   872,   877,   884,
     889,   896,   901,   909,   917,   925,   933,   951,   959,   967,
     975,   983,   991,   999,  1003,  1019,  1027,  1035,  1043,  1051,
    1059,  1067,  1071,  1075,  1079,  1083,  1091,  1099,  1107,  1115,
    1135,     7,    21,    36,    56,    57,    84,    85,    86,    87,
      88,    89,    93,    94,    99,   104,   105,   106,   107,   108,
     113,   120,   121,   122,   139,   146,   153,   163,   173,   185,
     193,   202,   220,   221,   225,   226,   230,   239,   262,   276,
     283,   288,   290,   292,   294,   297,   300,   301,   302,   303,
     308,   312,   313,   318,   325,   330,   331,   332,   333,   334,
     335,   336,   337,   343,   344,   348,   353,   360,   367,   374,
     386,   387,   388,   389,   393,   398,   399,   400,   405,   410,
     411,   412,   413,   414,   415,   420,   440,   469,   470,   474,
     478,   479,   480,   484,   488,   496,   497,   502,   503,   504,
     508,   516,   517,   522,   523,   527,   532,   536,   540,   545,
     553,   554,   558,   559,   563,   564,   570,   581,   594,   608,
     622,   636,   650,   673,   677,   684,   688,   696,   701,   708,
     718,   719,   720,   721,   722,   729,   736,   737,   742,   743,
       9,    19,    29,    39,    49,    59,    69,    79,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   115,   116,   117,   118,
     119,   120,   125,   126,   131,   132,   133,   138,   139,   140,
     143,   144,     8,    20,    33,    46,    58,    70,    86,    87,
      91,    95,     7,     1,    30,    53,    54,    59,    63,    68,
      72,    80,    81,    85,    86,    91,    92,    96,    97,   102,
     103,   104,   105,   106,   111,   119,   123,   128,   129,   134,
     138,   143,   147,   151,   155,   159,   163,   167,   171,   175,
     179,   183,   187,   191,   195,   199,   203,   211,   217,   218,
     219,   224,   228,    47,    48,    52,    53,    68,    69,    76,
      84,    92,   100,   108,   116,   127,   128,   155,   160,   168,
     184,   201,   218,   235,   236,   255,   259,   263,   267,   271,
     280,   290,   299,   308,   318,   328,   339,   353,   370,   370,
     374,   374,   378,   378,   382,   388,   395,   399,   400,   404,
     405,   419,   426,   433,   443,   444,   447,   459,   470,   478,
     483,   488,   493,   498,   506,   514,   519,   524,   531,   532,
     536,   537,   538,   542,   549,   550,   554,   555,   559,   560,
     561,   565,   566,   570,   571,   587,   588,   591,   600,   611,
     612,   613,   616,   617,   618,   622,   623,   624,   625,   629,
     630,   634,   636,   652,   654,   659,   662,   670,   674,   678,
     682,   686,   690,   697,   702,   709,   710,   714,   719,   723,
     727,   735,   742,   743,   748,   749,   753,   754,   759,   761,
     763,   768,   788,   789,   791,   796,   797,   801,   802,   805,
     806,   831,   832,   837,   841,   842,   846,   847,   851,   852,
     853,   854,   855,   859,   872,   879,   886,   893,   894,   898,
     899,   903,   904,   908,   909,   913,   914,   918,   919,   923,
     934,   935,   936,   937,   941,   942,   947,   948,   949,   958,
     964,   973,   974,   987,   988,   992,   993,   997,   998,  1004,
    1010,  1018,  1027,  1035,  1044,  1053,  1057,  1062,  1072,  1082,
    1090,  1091,  1094,  1095,  1096,  1099,  1107,  1117,  1118,  1121,
    1129,  1138,  1142,  1149,  1150,  1154,  1163,  1167,  1192,  1196,
    1209,  1223,  1238,  1250,  1263,  1277,  1291,  1304,  1319,  1338,
    1344,  1349,  1355,  1362,  1363,  1371,  1375,  1379,  1385,  1392,
    1397,  1398,  1399,  1400,  1401,  1402,  1406,  1407,  1419,  1420,
    1425,  1432,  1439,  1446,  1478,  1489,  1502,  1507,  1508,  1511,
    1512,  1515,  1516,  1521,  1522,  1527,  1531,  1537,  1558,  1566,
    1579,  1582,  1586,  1586,  1589,  1590,  1592,  1597,  1604,  1609,
    1615,  1620,  1626,  1632,  1638,  1647,  1649,  1652,  1656,  1657,
    1658,  1659,  1660,  1661,  1666,  1686,  1687,  1688,  1689,  1700,
    1714,  1715,  1721,  1726,  1731,  1736,  1741,  1746,  1751,  1756,
    1762,  1768,  1774,  1781,  1803,  1812,  1816,  1824,  1828,  1836,
    1848,  1869,  1873,  1879,  1883,  1896,  1904,  1914,  1916,  1918,
    1920,  1922,  1924,  1929,  1930,  1937,  1946,  1954,  1963,  1974,
    1982,  1983,  1984,  1988,  1988,  1991,  1991,  1994,  1994,  1997,
    1997,  2000,  2000,  2003,  2003,  2006,  2006,  2009,  2009,  2012,
    2014,  2016,  2018,  2020,  2022,  2024,  2026,  2028,  2033,  2038,
    2044,  2051,  2056,  2062,  2068,  2099,  2101,  2103,  2111,  2126,
    2128,  2130,  2132,  2134,  2136,  2138,  2140,  2142,  2144,  2146,
    2148,  2150,  2152,  2154,  2156,  2159,  2161,  2163,  2166,  2168,
    2170,  2172,  2174,  2179,  2184,  2191,  2196,  2203,  2208,  2215,
    2220,  2228,  2236,  2244,  2252,  2270,  2278,  2286,  2294,  2302,
    2310,  2318,  2322,  2338,  2346,  2354,  2362,  2370,  2378,  2386,
    2390,  2394,  2398,  2402,  2410,  2418,  2426,  2434,  2454,  2476,
    2487,  2494,  2508,  2516,  2524,  2544,  2546,  2548,  2550,  2552,
    2554,  2556,  2558,  2560,  2562,  2564,  2566,  2568,  2570,  2572,
    2574,  2576,  2578,  2580,  2582,  2584,  2586,  2590,  2594,  2598,
    2612,  2613,  2617,  2631,  2632,  2633,  2640,  2644,  2648,  2651,
    2662,  2667,  2669,  2680,  2704,  2715,  2726,  2730,  2737,  2741,
    2746,  2763,  2769,  2773,  2780,  2788,  2796,  2807,  2827,  2863,
    2874,  2875,  2882,  2888,  2890,  2892,  2896,  2905,  2910,  2917,
    2932,  2939,  2943,  2947,  2951,  2955,  2965,  2974,  2996,  2997,
    3001,  3002,  3003,  3007,  3008,  3015,  3016,  3020,  3021,  3026,
    3034,  3036,  3050,  3053,  3080,  3081,  3084,  3085,  3096,  3102,
    3109,  3118,  3135,  3180,  3188,  3196,  3204,  3212,  3233,  3234,
    3237,  3238,  3242,  3252,  3253,  3257,  3258,  3262,  3269,  3270,
    3275,  3276,  3281,  3282,  3285,  3286,  3287,  3290,  3291,  3294,
    3295,  3296,  3297,  3298,  3299,  3300,  3301,  3302,  3303,  3304,
    3305,  3306,  3307,  3310,  3312,  3317,  3319,  3324,  3326,  3328,
    3330,  3332,  3334,  3336,  3338,  3352,  3354,  3359,  3363,  3370,
    3375,  3381,  3385,  3392,  3397,  3404,  3409,  3417,  3421,  3427,
    3431,  3440,  3451,  3452,  3456,  3460,  3467,  3468,  3469,  3470,
    3471,  3472,  3473,  3474,  3475,  3476,  3486,  3490,  3497,  3504,
    3505,  3521,  3525,  3530,  3534,  3549,  3554,  3558,  3561,  3564,
    3565,  3566,  3569,  3576,  3586,  3600,  3601,  3605,  3616,  3617,
    3620,  3621,  3624,  3628,  3635,  3639,  3647,  3658,  3659,  3663,
    3664,  3668,  3669,  3673,  3674,  3675,  3679,  3688,  3696,  3712,
    3713,  3718,  3719,  3729,  3730,  3734,  3735,  3739,  3740,  3743,
    3759,  3767,  3777,  3778,  3781,  3782,  3785,  3789,  3790,  3794,
    3795,  3798,  3799,  3800,  3810,  3811,  3822,  3826,  3854,  3856,
    3862,  3863,  3867,  3868,  3871,  3873,  3883,  3886,  3897,  3901,
    3905,  3917,  3921,  3930,  3937,  3975,  3979,  3983,  3987,  3991,
    3995,  3999,  4005,  4006,  4022,  4023,  4024,  4027,  4028,  4034,
    4035,  4036,  4039,  4040,  4041,  4044,  4045,  4046,  4049,  4050,
    4053,  4055,  4060,  4061,  4064,  4072,  4073,  4074,  4075,  4078,
    4079,  4082,     7,    18,    19,    23,    24,    25,    26,    27,
       7,    26,    50,    73,    80,    85,    86,    87,    88,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     7,    16,    25,    34,    43,    52,     5,    12,
      22,    23,     7,    19,    33,     9,    16,    26,    33,    44,
      45,    50,    51,    52,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    90,    91,    92,    97,    98,   103,
     107,   115,   116,   121,   122,   123,   129,   134,   142,   143,
      10,    16,    22,    28,    38,    39,    47,    58,    70,    78,
      86,    93,   103,   105,   111,   115,   119,   134,   141,   142,
     143,   147,   148,     7,    14,    20,    28,    29,     8,    22,
      36,    48,    56,    70,    71,    72,    73,    74,    87,    88,
      93,    94,    98,    99,     7,    18,    31,    35,    42,    53,
      54,    60,    61,     9,    19,     7,    18,    25,    34,    35,
      39,    40,     2,     7,    15,    26,    27,    34,     3,    10,
      17,    24,    31,    38,    45,    52,    61,    61,    63,    63,
      65,    66,    70,    71,     6,     8,    21,    34,    47,    65,
      87,    88,    89,    90,    11,    24,    37,    54,    55,    56,
      61,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DESTINATION", "DETACH",
  "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P",
  "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID",
  "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE",
  "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
  "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
  "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "JSON", "KEEP", "KEY",
  "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
  "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE",
  "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
  "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
  "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
  "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PATH", "PATHS", "PERCENT", "PIVOT",
  "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION",
  "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY", "PUBLICATION",
  "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK",
  "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX",
  "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
  "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SET", "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_col_name_keyword", "CreateDatabaseStmt", "opt_extension_name",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "PGQ_IDENT",
  "DropPropertyGraphStmt", "VertexOrNode", "EdgeOrRelationship",
  "CreatePropertyGraphStmt", "VertexTableDefinitionList",
  "KeySpecification", "KeyDefinition", "KeyReference", "LabelList",
  "Discriminator", "VertexTableDefinition", "EdgeTableDefinitionList",
  "EdgeTableDefinition", "AreOptional", "IdentOptionalAs",
  "QualifiednameOptionalAs", "PropertiesList", "ExceptOptional",
  "PropertiesSpec", "PropertiesClause", "GraphTableWhereOptional",
  "GraphTableStmt", "ColumnSpec", "ColumnList", "KeepOptional",
  "PathOrPathsOptional", "GroupOrGroupsOptional", "PathVariableOptional",
  "PathModeOptional", "TopKOptional", "PathPrefix", "PathPatternList",
  "PathPattern", "PatternUnion", "KleeneQuantifierOptional",
  "KleeneOptional", "CostNum", "CostDefault", "CostOptional", "SubPath",
  "EnclosedSubPath", "PathElement", "PathSequence", "PathConcatenation",
  "OrLabelExpression", "AndLabelExpression", "ComposedLabelExpression",
  "LabelExpression", "LabelExpressionOptional", "IsOrColon", "ArrowRight",
  "ArrowLeftBracket", "AbbreviatedEdge", "VariableOptional",
  "FullElementSpec", "EdgePattern", "VertexPattern", "pgq_expr",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "qualified_name", "name_list",
  "name_list_opt_comma", "name_list_opt_comma_opt_bracket", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "TransactionStmt",
  "opt_transaction", "UpdateStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "opt_tables", "var_name",
  "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3305)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2142)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7108,   -16,  1118, -3305, -3305,   325,   -16, 50629, 65644,   -16,
     186,  1494, 52633, -3305,   357,  9360,   -16, 55639, 73054,   394,
     431, 32173,   435, 56140, 56140, -3305, -3305, -3305, 65644, 55639,
   56641,   -16,   422, 66145, -3305,   -16, 34177, 53134,   347, -3305,
   55639,    74,   470, 57142, 55639, 34678,  1024,   510, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
     575, -3305, -3305, -3305, -3305,   264, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305,   178, -3305,   686,   181, 32173, 32173,
    1912,   527, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   33676, -3305, -3305, -3305, -3305, 57643, 55639, 58144, 53635, 58645,
   -3305,  1081, -3305,   190, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305,   209, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305,   210, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,   213,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
     215, -3305, -3305, -3305,   604,   398, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305,  4471, 55639, -3305, 59146,
     812,   829,   783,   974, 59647, -3305, -3305, 55639, -3305, -3305,
     845,  1131,  1084, -3305, -3305, -3305, 54136, -3305, -3305, -3305,
    1109,  1333,  1113, -3305, -3305, -3305,   935, -3305,   154, -3305,
   -3305,   978,   936, -3305,  1239, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305,  1062, -3305, 69652, -3305, 66646, 60148, 60649, -3305,
     937,  1809,  9007, 73071, 31168, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305,   575, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, 56140, 65644, 56140,
     945,   948,  1340,   972,   997, 32674,  1004, 35180,  1010,  1049,
    1371,  1064,  1074,  1094,  1098,   470, 30667, 61150, 61150,   400,
    3553, -3305, 61150, 61651, -3305,  1120, -3305,  1123,   398, -3305,
    1081, -3305, -3305, -3305, -3305,   598,  1102, -3305,  1128,  1415,
   -3305, -3305, -3305,  1149, -3305, -3305,  1365, 20697, 20697, 67147,
   67147,  1081, 67147,  1150, -3305, -3305,    88, -3305,  4471, -3305,
    1912, -3305,  1154, -3305,   398, -3305, 53134, -3305, -3305,   320,
    1553, 20697, 55639,  1206, -3305,  1225,  1206, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,   470, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305,  1495,  1228,  1230, -3305,  7108, -3305, 55639,
    1583,  1463, 53134,   790,   790,  1705,   790,  1061,  1132,  4463,
    5136, -3305,  2259, -3305,  1248,  1372,  1313,  1576, -3305,  1154,
    1673,  1162,  1487,  1692,  2032,  1721,  1362,  1725,  1423,  1816,
   11670, 20697, 48124, -3305,   398,  1360,  1369,  1608,  1728, -3305,
   -3305, -3305, -3305,   817, 55639,  1632, -3305,  1894, -3305, -3305,
    1476, 62152, 62653, 63154, 63655, 55639,  1857, -3305, -3305,  1797,
   -3305, -3305, -3305,  1465, -3305, -3305, -3305, 55639,   319, -3305,
   -3305, -3305, -3305, -3305, -3305,  1486, -3305,  1486,  1486, -3305,
   -3305, -3305, -3305,  1436,  1436,  1631,  1439, -3305, -3305, -3305,
    1807, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305,  1442,  1147, -3305,  1486, -3305,  1436, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, 72598, -3305, -3305, -3305, -3305,   678,
     752, -3305,  1443, -3305, -3305, -3305, -3305,   169,  1448, -3305,
    1929, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,  1453,
   -3305,  2681,  1436,  1826,   202,  1458, -3305,  1829,   359, -3305,
    1830,  1698, 20697, -3305,  1634, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305,   470, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305,   364, -3305, -3305, 44870, 73071,  1477,  1560, -3305, -3305,
   20697, 20697,  1482,  2461, 70138, -3305, 61150, 61651, 20697, 55639,
   -3305, 20697, 24945,  1485, 20697, 20697, 12201, 20697, 29665, 61150,
    3553,  1475, 55639, -3305,  1582,  1489,  1582,   422, 32173,  1788,
   -3305,   901,  1784,  1718, -3305, 32173,  1718,  1038,  1502,  1796,
    1718, -3305,   233,  1801,  1582, 35681, -3305,  1582,  1504,  1726,
   -3305, -3305,   866, -3305, 44870, 14856, 70639,  1988, -3305,  1792,
   65644,  1513, -3305, -3305, -3305, -3305, -3305, -3305,   873,  2029,
     188,  2030, 20697,   188,   188,  1519,   216,   216, -3305,  1525,
   -3305,   218,  1526,  1528,  2039,  2049,   200,   163,  1147,   188,
   20697, -3305,   216,  1536,  2052,  1540,  2058,   172,   205, -3305,
     219, 20697, 20697, 20697,  1922, 20697, 11139, -3305, 55639,  2063,
    2073,   398,  1559,  1081, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305,   208,  8764, -3305, -3305, -3305,  1597, -3305, -3305,
   -3305, -3305,  1778, 20697, -3305, -3305,  1561,  1788, -3305,   222,
   -3305, -3305, -3305,   770,  1788, -3305, -3305, -3305, -3305, -3305,
     266,  1979, 43868, 44369, 65644,   398, -3305, 67648, -3305, -3305,
   -3305, -3305, -3305, -3305,   905, -3305,   575, 46483,  1565,  1566,
    1206, 55639, 55639,  2048, 70138, -3305, -3305, -3305,  1225, 53134,
     176,  1869,  1703, -3305, -3305,  1912,  1912, 15918,   989,   695,
     859, 16449, 21228,  1928,  1808,   234,   880,  1931, -3305,  1812,
    2041, 24945, 20697, 20697,  1061,  1132, 20697, -3305, -3305, -3305,
    1861, 55639, 51130,  1045,  1106,  1587,  1676,  1588,    58,  2018,
   -3305,  1590, -3305,  1679, 55639, 72598,   268, -3305,  2054,   268,
     268,   720,  2055,  1684,   270,  1852,    53,   670,  2543, -3305,
    1590, 53134,   201,    85,  1590, 55639,  1687,   645,  1590, 65644,
    1477,   171, 14856, -3305,  1256,  1308,  1334,  1030,   237,  1343,
    1366, 14856,  1401,  1422,   174,  1473,  1537,  1563,  1678,  1771,
    1776,  1787,  1798,   160,  1825,  1838,  1850,  1870,  1874,  1878,
   -3305,  1884,   193,  1889,   239, 14856,  1892, -3305,   198, -3305,
   46483,    20, -3305, -3305,  1898, 10047,  1592, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,  1688, 65644,
    1648,  1980,  1081, 55639, 55639,  1031,    77,  1984,  2042, 71125,
   55639,  1855,  2543,  1864,  2102,  1625,  1872,  1369,  1875,  1626,
   -3305, -3305, 68149,  2150, -3305,   252, -3305, -3305, -3305, -3305,
   -3305,  1636, -3305, -3305, 20697, -3305, -3305, -3305,  2148, -3305,
   70639, 70639,  1486,  1486, -3305, -3305,  2117,  1730,  1731,  2148,
   -3305,  2148, -3305, 65644, -3305, -3305, 70639, -3305, 65644,  1641,
    1645,  2148, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,  2148,  1732,
   -3305,  1734,  1737,  1739, -3305, -3305, -3305, -3305, -3305, 65644,
   65644, -3305, 48124,  1642, 55639, 55639, -3305, 55639, 65644,  1652,
    1267, 73071, 49627, -3305, -3305, -3305, -3305,  1255,  1282, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, 48124, -3305,
    4789,  1081, 45491,  1653, 20697, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305,  1654,  2004, -3305, -3305, -3305, -3305,
    8467,  1656, 45541,  1659, 24945, 24945,  1166, -3305, -3305, 24945,
    1668,   398, 50128, 45409,  1658,  1672, 45890, 16980, 20697, 16980,
   16980, 45931, -3305,  1680, 46021, 61150,  1674, 54637, -3305, -3305,
   55639, -3305, 20697, 20697,  3553, 55138,  1720, -3305, 32173, -3305,
    1970, 32173, -3305, -3305,  4489, -3305, 32173,  1976, 20697, 32173,
   -3305,  1921,  1923,  1691, 32173, -3305, 55639,  1707, -3305, 55639,
   -3305, -3305, -3305, -3305,  1699,   951, -3305,   961,  3250, -3305,
   -3305, 20697, 20697, -3305, 46483,  1747, 20697, -3305, 20697, 46657,
   40192, 17511, 46657,  2221,  2221, 38186, -3305,  1876, 46063, -3305,
    1723,  3803,  9065,  1719, -3305,  1722,  1716,  1717, -3305, -3305,
   -3305,   398, 20697, -3305, 20697,  3095,  3095, -3305,   257, 70639,
   20697, 20697, 20697, 20697, 20697, 20697, 20697, 20697, 47623,  1819,
     189, 65644, 20697, 20697,  1727,   944, -3305, 20697,  1973, -3305,
    1736, 20697,  1828,  1050, 20697, 20697, 20697, 20697, 20697, 20697,
   20697, 20697, 20697, -3305, -3305, 28118,   367,   782,  2069,  2095,
     107,   299, 20697,  2087, 11670, -3305,   398, 42365,   166,  2087,
   -3305, -3305, -3305, -3305,   223, -3305, -3305, -3305, -3305,  1699,
   -3305,  1699, -3305, 65644, -3305, 55639,   320, 52132, 20697, -3305,
   -3305,  1738,  1743,  1745,  1757,   194,    27, -3305, -3305,  1810,
   -3305, -3305, 55639, 38687,  2047, -3305,   350,  1744, -3305, 45368,
    2002,  2047,  1912, -3305, -3305, 26007,  1879,  2044,  1978, -3305,
   -3305,  1959,  1960, -3305,  1753, 46575, 21759, 21759, -3305,   941,
   46483,  1542, -3305, -3305, -3305, -3305, -3305, -3305,    89, -3305,
   55639,   537, 36182, -3305,  1754,   102, -3305,  1846,  2097,  2059,
    1928,   880,  1761, -3305,  1481,  1763, 68650, 55639,  2057,  2007,
    2060,   -19, -3305, -3305, -3305, 70639, -3305, 55639, 65644, 64156,
   69151, 48625, 55639, 48124, -3305, -3305, -3305, -3305, 55639,   864,
   55639,  2932, -3305, -3305, -3305,   268, -3305, -3305, -3305, -3305,
   -3305, 65644, 55639, -3305, -3305,   268, 65644, 55639,   268, -3305,
    1605, 55639, 55639, 55639, 55639,  1661, 55639, 55639, -3305, -3305,
      51,    51,  1987, 12732,   164, -3305, 20697, 20697, -3305, 20697,
    1952, -3305,   981, -3305,  1999,   141, 55639, -3305,  2121, -3305,
    1823, 55639, 55639, 55639, 55639, -3305, -3305,  1877, 55639,  1675,
   -3305, -3305, -3305, -3305, -3305,  1777, -3305,  1781,  2145,  2543,
   -3305,  2149,  3745, 51631,   926,  2151,  1821,  2152, 13263,  2265,
    2031, -3305,  2017, -3305, -3305, -3305, 20697,  1789,  1800,   169,
    1034, -3305, -3305,  1811,  1645,  1815,  1833,  1805,  1818,  1039,
   70639, -3305,  1041,  2148,   230,  1820,  1822,  1651,  1023,   712,
    1543,   202, -3305, -3305, 48124,   359, -3305,  2040,   252, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305,  1057, 31672, -3305,
   -3305,  2289,  1081,  2289,   831, -3305, -3305,  2289, -3305,  2272,
    2289, -3305,  1477, 70639, -3305,  9704, -3305, 20697, 20697, -3305,
   20697,  2165, -3305,  2329,  2329, 70639, 24945, 24945, 24945, 24945,
   24945, 24945,   792,  1536, 24945, 24945, 24945, 24945, 24945, 24945,
   24945, 24945, 24945, 26538,   388, -3305, -3305,  1065,  2300, 20697,
   20697,  2177,  2165, 20697, -3305, 70639,  1824, -3305,  1835,  1842,
   20697, -3305, 70639, -3305, 55639,    22,    25,  1831,  1844, -3305,
   -3305,  1845,  1788, -3305,  1014,  1235, 55639,  6075,  7348,  7534,
   -3305, -3305, 20697,  2166,  4489, 32173, -3305, 20697,  1849, -3305,
   -3305, 32173,  2183, -3305, -3305, -3305, 36683,  4489,  1069, -3305,
   70639, 55639,  1077, 70639, 44870, -3305, 14856, -3305, 70639, -3305,
   -3305, -3305, -3305, -3305, -3305,  1851,  1854, 20697,   108, -3305,
   10002,  3796, -3305,  1847, -3305,  1848, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305,  1853,  1859, -3305,  1856, 55639, -3305, 22290, -3305,
   65644, -3305, -3305, 20697, 55639, -3305, 20697,  1862, 40701, -3305,
   -3305, -3305,   247,   380,  7684,   299,  2895,  2895,  2895, 46657,
   -3305, -3305, -3305,  1881, -3305, 24945, 24945, -3305,  5130,  3025,
   11139, -3305, -3305,  2203, -3305,   991, -3305,  1865, -3305, -3305,
    3598, -3305, 40192, 46606, 20697,   217, -3305, 20697,  1727, 20697,
    1956,  2895,  2895,  2895,   309,   309,   247,   247,   247,   380,
     299, -3305, -3305, -3305,  1871, 20697, 48124, -3305,  1873,  1882,
    2234,  1540, 20697, -3305, -3305, 32173,  1720,    20, -3305,  1922,
    1720,  2148,  3095, -3305,  1225, -3305, -3305,  1225, 46483, 55639,
   -3305,  3250, -3305,   828,   236,  2386,   345,   194, 70138,  1917,
   32173,  1918,  2337,  2357, 65644, -3305,  1880,  2087,  1896, -3305,
   -3305, -3305,  1901, 20697,  1020,  1901, -3305,  2047,    11,  2108,
    1311,  1311,   941,  2110, -3305, -3305,  1951, -3305, -3305, -3305,
   20697, 13794,  1546, -3305,  1557, -3305, -3305, -3305, -3305,  1885,
   -3305, -3305,  2163, -3305, 55639, -3305, -3305, 24945,  2350, 20697,
   37184,  2351,  2147, -3305, -3305, -3305,  1986,  1590, 20697,  2153,
   -3305,   152,  1905,  2274,   436,  2223, 65644, -3305,   344,   348,
   -3305,   192,  2280,   252,  2283,   252, 48124, 48124, 48124,  1079,
   -3305, -3305,  1081, -3305, -3305,  1085, -3305,   540, -3305, -3305,
   -3305,  2006,   714,  2543,  1590, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305,   229,   833,  1590,  2010, -3305,  2011, -3305,  2013,
     872,  1590, -3305, -3305,   164,   164,   164, 14856, -3305,  2164,
    2167,  1916, 46483, 46483, 46483,  1934, -3305,   420, -3305, 65644,
   -3305, -3305, -3305,  1952,  2275,  1081,  2042, 55639,  2543,  2408,
    1935,  1369,  1626,  1936, -3305,  2096,   580,   250, -3305, 65644,
   55639, 55639, 55639,  1981, 55639, -3305, -3305, -3305,  1939,  1938,
   -3305, 64657,     7,  2179,  2175, 55639,  1588,  2429, 55639, -3305,
    1089, 18042,  2319, 55639,  1954, -3305, -3305, -3305, -3305,  2148,
   -3305, -3305,   -66,   -66, -3305, 65644, -3305, -3305,  1958, -3305,
    1961, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, 65644, -3305, -3305, 48124, -3305, 49126, -3305,
   -3305, -3305, -3305,  1081, -3305,  1081,  2196, 65644, 42866,  1081,
   43367,  1081, -3305,  1962, -3305, 46483, 40742, 46483,  2177, -3305,
     271,  2329,   324,   324,   324,  2599,  2310,   242,  1964,   324,
     324,   324,   439,   439,   271,   271,   271,  2329,   388,  1120,
   50128,  1966, -3305, 46483, 46483, -3305, -3305,  1967, -3305, -3305,
   -3305, -3305,  1968,  1971, -3305, -3305, -3305, -3305, -3305, 65644,
    1351, -3305,  1720,   347,   347,   347,   347, -3305, 55639, 55639,
   55639, 46483,  2426,  2303, -3305,  4489, 46483, 55639, -3305, 28649,
   55639,  2326, -3305, -3305, -3305, 55639,  2414,  1099, -3305, -3305,
   -3305, -3305, -3305, 46186, 20697, -3305,  2352, -3305, 20697, 20697,
   -3305, -3305, 40192, -3305,  1982, 11139, 46412, -3305,  2298, 40783,
   -3305, 46483, -3305,  3095, 20697,  4164,  4260, 20697,  1983, 20697,
    2330, -3305, -3305,  1985, -3305, -3305, 70639, 20697,  1989,  4680,
   24945, 24945,  5677, -3305,  5842, 20697, 11139, -3305, 41784,  1975,
    1991,  1987, 18573, -3305,  2199,  1990, -3305,  2166,   164,  1876,
    2166,  1992, -3305, -3305, -3305,  1997,  1616, -3305, -3305,   816,
    1616,  1616,  1616, -3305, -3305, -3305,   816,   816,   816, -3305,
     158,   607, 70138, 70138,   345,   345,  1994, -3305, -3305, 70138,
     784, -3305, -3305, -3305, -3305, 24414,  2425, -3305, 20697,  2156,
     664,  4445, 65644,  1116, -3305, 38687,  1918, 20697,   398,   304,
   -3305, -3305,  2003, -3305,  1901, -3305, -3305, -3305,  2231, -3305,
   -3305, -3305, 55639, -3305,  2005, -3305, 36182,  2342, 11139, -3305,
   36182, 55639, 55639, 40824,  2374, -3305, 65644, 65644, 65644, -3305,
   65644,  2014,  2019,   757,  2022,   871, -3305,  1622,   757,  2355,
     259,  1588,   270,  3165,    95, -3305, -3305, -3305,  2094, 55639,
   -3305, 65644, -3305, -3305, -3305, -3305, -3305, 48625, -3305, -3305,
   -3305, 48124, 39690, 48124, 55639, 55639, 55639, 55639, 55639, 55639,
   55639, 55639, 55639, 55639,  2020,  2025,  2026,  1987, -3305, -3305,
   -3305, -3305, -3305, -3305,   670, -3305, -3305,   420,  1081, -3305,
    2023, -3305,  4471, 51631,  1821,  2507, 55639,  2042,  1322, 65143,
    2033,  2028, -3305,  1127,  2543,  2508,  2035,   937,   261, -3305,
   -3305,   926, 51631, -3305, -3305, -3305,  2467, -3305,  1369, -3305,
    4471,  1626, -3305,  4471, 46483, 65644,  2098, -3305,  1645,  2043,
   -3305, -3305,  1645, 70639,  1645, -3305, -3305,   252, -3305,  1135,
   -3305, -3305, -3305, -3305, 65644,  2036, -3305,  2036, -3305, -3305,
    2036, -3305, -3305, -3305, -3305, 24945,  2387,  2045, 70639, -3305,
   -3305, 55639, -3305, -3305, -3305,  1177,  2051,  2166, 55639, 55639,
   55639, 55639, -3305, -3305, -3305, 19104, 20697,  2082, -3305,  2053,
   15387,  2365, -3305, 27600, -3305,   227,  2056, 36683, -3305, 65644,
   -3305, -3305, 20697, 46483, -3305, 46483, -3305, -3305, -3305,  8990,
   -3305,  2062,  2066, 65644, 20697, -3305, -3305,   781, 20697, 20697,
    5130, -3305, 47046, 20697, 70639,  1179,  5130,   374, 20697,  4498,
    4542, 20697, 20697,  6393, 40866, -3305, 20697, 14325, -3305,  2068,
   20697, 41222, 39188, -3305, 32173,  2303,  2070, -3305,  2303,  1081,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,  1524,   662,
   -3305, -3305, -3305,   816,  2050, -3305,    30,  2074, -3305, -3305,
    2064,   345,  2061, -3305, -3305, -3305,  2559, -3305, 24414, 24414,
   24414, 24414,  3864, -3305,  2273,  2077, 46483, 20697, -3305, -3305,
   -3305,  2112,   -29, 34177,  2287, -3305, -3305,  2072, 65644, -3305,
    2156, 46483, -3305, -3305, 40192, -3305, -3305, -3305, -3305, -3305,
    2522,  1902,  2083,  2085, -3305,  1469, -3305, -3305, 65644,  2088,
   -3305,  2090,   757, -3305, 65644,  2126, -3305,   737,  2405,   118,
   -3305, 20697, -3305,  2498,  2583,  1622,  2106, 65644, 55639, 24945,
   -3305,   810,   195, -3305,  2397, 55639,  2126,  2540, -3305, -3305,
   -3305,   871, -3305,  2436,  2364, -3305,   268, -3305, 20697,   871,
    2366,   333, 65644, -3305, -3305,  2211, -3305, 70639,   252,   252,
   -3305, -3305,  2140,  2141,  2142,  2158,  2159,  2172,  2176,  2178,
    2181,  2182,  2184, -3305,  2185,  2186,  2188,  2190,  2191,  2192,
    2193,  2201,  1442,  2205, -3305,  2209,  2003,  2212,  2213,  2217,
    2222,  2226, 71611,  2228,  2229,  2238,  2241,  1443,  2242,  1255,
    1282, -3305, -3305, -3305,  2244, -3305, -3305, -3305, -3305,  1458,
    2123, -3305, -3305,  2236, -3305,  2254, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305,   164,  1477,   127, -3305, 65644,  1981,
    2146,  2633, 19635,  2245,   644,  2646,   844,  2424,  2225, -3305,
    1081,  1821, -3305,  4065, 51631,  1981, -3305,  2661,   862,  2175,
   -3305,   287,  1821,  2271,  2728, -3305,  2479, 65644,  2252, -3305,
   -3305, -3305, -3305, 49126,  2036,  2639, 24945, 70639,  1187,  1188,
   -3305,  2764,  2417,  2303, -3305, -3305, -3305, -3305, -3305,  2256,
     -44,  2262, 10608,  2255, -3305, -3305, -3305, -3305, -3305, -3305,
   46483, 46483, 65644,  2444, -3305, -3305,  2261,  2266, 37685,  2731,
    2277, -3305, 14856, -3305,  2594, -3305, 30166, -3305, 46483, 20697,
   -3305, -3305, 41826,  2602,  5130,  5130, 47046,  1192, -3305,  5130,
   20697, 20697,  5130,  5130, 20697, -3305,  2281, -3305,  1202, -3305,
   41263, -3305, 72097, -3305, -3305,  2082,  1081,  2082, -3305, -3305,
   -3305, -3305, -3305,   345,   784, -3305, -3305,  1917, 29161, -3305,
    2278, -3305,   212, -3305,  2282, 47087, 47087,  2791,  2791, 70639,
   24414, 24414, 24414, 24414, 24414, 24414, 24414,  2376,   256, 65644,
   24414, 24414,  1727,  1194, -3305, 24414,  2526, -3305, 24414,  2377,
     939, 24414, 24414, 24414, 24414, 24414, 24414, 24414, 24414, 24414,
   24414,   107, 20697,  2285, -3305, -3305, -3305,  2346, -3305,  1204,
   -3305,  2721,  2156, 20697, -3305, -3305,  2292, 36182, -3305, -3305,
   -3305, -3305, 36182,   757, -3305,  2465,  2126,  2295, -3305, -3305,
   -3305, -3305, -3305, -3305, 41304, -3305,    64, 20697, -3305,  1303,
    2599, -3305, -3305, -3305, -3305,  2126,  1369, -3305, 55639,  2776,
    2666, -3305, -3305, 46483, -3305, -3305,  2148,  2148, -3305, -3305,
    2414, -3305, -3305, -3305, -3305,  1458,   685, 39690, 55639, 55639,
    2299, -3305, -3305,   670,  2699,  1211, -3305,   926,  4471,  4471,
   46483, 55639,  2301,  2487,   149,  2595, 70138, 55639,  2672, 51631,
   -3305,  2786, 55639,  1981,  2308, -3305, -3305,  1702,  1702, -3305,
    2458, -3305,  2471,  2802,   306, -3305, 20166, 55639, -3305, -3305,
   33175, -3305,  2639,  1219, -3305, -3305,  2324,  2327, -3305,  2082,
   20697,  2328, 20697, -3305, 22821,  2322, -3305,  2808, 20697,  2391,
   27069, -3305, 20697, -3305, 55639, 61150,    51,  2333, 61150, -3305,
   -3305, -3305, 20697, -3305,  5130,  5130,  5130, -3305, -3305, -3305,
    2545, -3305,  2444, -3305,  2444,  1917, -3305,  2755, 29161, 29161,
   -3305, -3305, -3305,  2349,   784,  2559, -3305,  1043, 46737,   335,
    3963,  3963,  3963, 47087,  2358, 24945, 24945, -3305,  8135,  4972,
   -3305,  2686, -3305,  1586, -3305,  2345, -3305, -3305,  6507, -3305,
   47000, 24414,   260, 24414,  1727, 24414,  2437,  3963,  3963,  3963,
     433,   433,   289,   289,   289,  1043,   335, -3305, -3305,  1232,
   -3305, 20697,  4471,  3449, 65644,   398,    10, -3305, 46483, -3305,
   -3305, -3305, 55639, -3305, 48124, -3305,   757,   620,  2354, 20697,
   41346,  2589, -3305, -3305,  2623, -3305,  2683, -3305,  2418,   741,
    2432, -3305, -3305, -3305, -3305,  1477,  1081,  1821,  2175,  2271,
   -3305,  2245,   228, -3305, -3305, 70138,  2848, -3305, 70138, -3305,
    2361, 55639,  4471,   937, -3305,   926, -3305, -3305, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, -3305, -3305, -3305,  4471,  2810,
    2587,  2811,  4471, 46483,  2098, 20697, -3305,  1240,  2803,   249,
   -3305, -3305,  2879,  2444,  2368, 22821,  2371, -3305, 65644,  2378,
   46483,  2520, -3305, -3305,  2380, -3305, -3305,   164, 20697, -3305,
   41867,  2836,  1987,  2391,  2391,  2755, 24945, -3305,  2381,   799,
   -3305, -3305,  2384, 24414,  6490,  6827, 24414, 24414,  2732, -3305,
   -3305,  2393, -3305, -3305, 70639, 24414,  6686, 24945, 24945,  7601,
   -3305,  8055, 24414,  2396, 20697, -3305,   -29, -3305, -3305,  2825,
   33175,  2787,  1369,   757,  1241, -3305,  2411, -3305, -3305, -3305,
   -3305,  2543, -3305, 41387,  2647,   253,  2630,  2354, 20697, -3305,
    2478, -3305, -3305, -3305,  2883, -3305, -3305, -3305, -3305, -3305,
    2503,  2888, -3305,  1257,  2844,  2730, 51631,  2412,  2271,  1981,
    2175,  2271,  2640, -3305,  2641, -3305,  2427, 41743,  1821, 33175,
   65644, 65644, 65644,  2413,  2391, -3305,  2423, -3305, -3305, -3305,
   54637, -3305,  2430,  2431, -3305, 20697,   726, -3305, -3305, -3305,
    2021, -3305, 29161, 29161, -3305,   903, 24414, 24414,  8135, 47128,
   24414, 70639,  1286,  8135, 24414,  7435,  8117, 24414, 24414,  8093,
   55639, -3305,  2483, 55639,  1299,    76,  2623, -3305, 48124, 39690,
    1321,   620,  2746, -3305, -3305, -3305, -3305,   255,  2662, -3305,
    2663, -3305, 46483, -3305,  4471,  2438, 70138, -3305, 70138,  2812,
   55639, -3305, 51631, -3305, -3305, -3305, -3305, -3305, -3305, 33175,
    2803,  1720, -3305, -3305,   350, -3305,   350, -3305, -3305, -3305,
   -3305,  1081, -3305,  1658, 23352, 23352,  2435,  1361, -3305, -3305,
    2441, -3305,  2434,  8135,  8135, 47128,  1300, -3305,  8135, 24414,
   24414,  8135,  8135, 24414, -3305,  4471, -3305,  1720, -3305,  2577,
    2630, -3305, -3305, -3305, -3305, -3305,   499,   499,  2849, -3305,
    2511, -3305,  2271, 55639, -3305, -3305,  2450, -3305,  2451,  1306,
   65644, -3305,  1901,  1901, 25476,  2601,   221, 45450, -3305, -3305,
   -3305, -3305, -3305, -3305, -3305, 29161, 29161, -3305,  8135,  8135,
    8135, -3305, -3305, 38687, -3305, -3305,  2948, -3305,   385, -3305,
   -3305, -3305,  2452,  2575, 70138, 70138,  1821,   350, -3305, -3305,
    2941, -3305, -3305, -3305, -3305, -3305, -3305, -3305,  1720,   757,
   -3305, -3305, -3305, 55639,  2459,  2749,  1325, -3305,  1335,  1720,
    1901, 23883, -3305,  2452, -3305,  2462,  2632, 55639, -3305, -3305,
   70138, -3305, -3305, -3305, -3305, 55639, -3305, -3305,  2462, -3305,
    1348,  2857, -3305,  2749, 55639,  2462,   644,  2753, 70138,  2730,
   -3305
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     140,   238,     0,  1502,  1501,  1569,   238,     0,  1451,   238,
     640,   557,     0,  1587,  1569,     0,   238,     0,   140,     0,
       0,     0,     0,     0,     0,   700,   703,   701,     0,     0,
       0,   238,   737,     0,  1586,   238,     0,     0,   729,   702,
       0,  1549,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    23,    10,    11,    12,    19,    13,
      14,    15,    17,    18,    20,    21,    22,    25,    26,    27,
    1460,    28,    30,    31,    32,     0,    33,    24,    16,    29,
      34,    35,    36,    37,   676,   663,   742,   675,     0,     0,
     139,   841,   683,    38,    39,    40,    41,    42,    43,    44,
    1585,    45,   237,   236,   230,     0,     0,     0,     0,     0,
    1568,     0,   231,  1384,  1611,  1612,  1613,  1614,  1615,  1616,
    1617,  1618,  1619,  1620,  1621,  1972,  1622,  1623,  1624,  1625,
    1626,  1973,  1627,  1628,  1629,  1918,  1919,  1974,  1920,  1921,
    1630,  1631,  1632,  1633,  1634,  1635,  1636,  1637,  1922,  1923,
    1638,  1639,  1640,  1641,  1642,  1924,  1975,  1925,  1643,  1644,
    1645,  1646,  1647,  1976,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,  1655,  1977,  1656,  1657,  1658,  1659,  1660,  1661,  1662,
    1663,  1664,  1665,  1926,  1927,  1666,  1667,  1668,  1669,  1670,
    1671,  1672,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,
    1681,  1682,  1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,
    1691,  1692,  1693,  1928,  1694,  1695,  1696,  1697,  1698,  1929,
    1699,  1700,  1701,  1930,  1702,  1703,  1704,  1978,  1979,  1705,
    1706,  1931,  1981,  1707,  1708,  1932,  1933,  1709,  1710,  1711,
    1712,  1713,  1714,  1715,  1716,  1982,  1717,  1718,  1719,  1720,
    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1983,  1934,
    1729,  1730,  1731,  1732,  1733,  1935,  1936,  1937,  1734,  1984,
    1985,  1735,  1986,  1736,  1737,  1738,  1739,  1740,  1741,  1742,
    1987,  1743,  1988,  1744,  1745,  1746,  1747,  1748,  1749,  1750,
    1751,  1938,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,
    1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,
    1939,  1990,  1940,  1770,  1771,  1772,  1941,  1773,  1774,  1991,
    1775,  1942,  1776,  1943,  1777,  1778,  1779,  1780,  1781,  1782,
    1783,  1784,  1785,  1944,  1992,  1786,  1993,  1945,  1787,  1788,
    1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,
    1946,  1994,  1799,  1800,  1947,  1801,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1809,  1810,  1811,  1812,  1948,  1813,  1814,
    1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,
    1825,  1826,  1827,  1828,  1829,  1830,  1831,  1995,  1832,  1833,
    1834,  1949,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,
    1843,  1844,  1845,  1846,  1847,  1848,  1849,  1850,  1851,  1950,
    1852,  1853,  1854,  1996,  1855,  1951,  1856,  1857,  1858,  1859,
    1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1952,
    1869,  1953,  1870,  1871,  1872,  1873,  1998,  1874,  1875,  1876,
    1877,  1878,  1954,  1955,  1879,  1880,  1956,  1881,  1957,  1882,
    1883,  1958,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,
    1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1959,
    1960,  1901,  1999,  1902,  1903,  1904,  1905,  1906,  1907,  1908,
    1909,  1910,  1911,  1912,  1913,  1961,  1962,  1963,  1964,  1965,
    1966,  1967,  1968,  1969,  1970,  1971,  1914,  1915,  1916,  1917,
    1385,  1386,  1394,  1594,     0,     0,  1366,  1384,  1931,  1938,
    1952,  1449,  1385,  1450,   233,   639,     0,     0,  1383,     0,
       0,     0,     0,     0,     0,   551,   550,     0,  1440,   556,
       0,     0,     0,   189,  1388,   108,  1801,   106,  1387,  1364,
    1568,     0,     0,   578,   579,   569,     0,   588,     0,   571,
     576,   572,     0,   597,     0,   590,   598,   580,   570,   591,
     581,   568,     0,   599,     0,   574,     0,     0,     0,   234,
     199,   557,     0,   140,     0,  1464,  1465,  1466,  1467,  1468,
    1469,  1474,  1470,  1471,  1472,  1473,  1475,  1476,  1477,  1478,
    1479,  1455,  1460,  1480,  1481,  1482,  1483,  1484,  1485,  1486,
    1487,  1488,  1489,  1490,  1491,  1492,  1493,     0,  1451,     0,
       0,  1924,  1975,  1929,     0,     0,  1942,     0,  1945,  1946,
    1835,  1953,  1956,  1957,  1958,  1959,     0,   894,     0,   678,
     845,   855,   894,   899,  1160,   922,  1161,   910,  1387,  1356,
       0,  1534,  1536,  1537,  1533,   179,  1414,  1574,  1954,  1879,
    1590,  1575,  1572,  1573,   235,   736,   734,     0,  1334,  1707,
    1746,  1839,  1850,  1954,  1510,  1514,     0,   232,     0,  1579,
       0,  1592,  1580,   684,  1387,   728,     0,   239,  1548,     0,
    1553,     0,  1815,   711,   714,  1403,   712,   240,  2215,  2216,
    2217,  2218,  2219,  2220,  2221,  2222,  2223,  2224,  2225,  2226,
    2227,  2228,  2229,  2230,  2231,  2232,  2233,  2234,  2235,  2236,
    2237,  2238,  2239,  2240,  2241,  2242,  2243,  2244,  2245,  2246,
    2247,  2248,  2249,  2250,  2251,  2252,  2253,  2254,  2255,  2256,
    2257,  2258,  2259,  2260,  2261,  2262,  2263,  2264,  2265,  2266,
    2267,   241,   242,     0,   676,     0,     1,   140,  1459,  1563,
       0,   146,     0,   732,   732,     0,   732,     0,   668,     0,
       0,   676,   671,   675,   842,  1589,  1954,  1879,  1578,  1581,
    1715,     0,     0,  1715,     0,  1715,     0,  1715,     0,  1571,
       0,  1318,     0,  1319,  1367,     0,   522,  1715,   182,   555,
     554,   553,   552,   557,     0,  1715,  1424,     0,   608,   609,
       0,     0,     0,     0,     0,     0,  1435,   109,   107,     0,
    1566,   586,   587,     0,   577,   573,   575,     0,     0,  1395,
    2000,  2001,  2002,   965,  2003,   994,   972,   994,   994,  2004,
    2005,  2006,  2007,   961,   961,  1681,   974,  2008,  2009,  2010,
    1715,  2011,  2012,   962,   963,   999,  2013,  2014,  2015,  2016,
    2017,     0,     0,  2018,   994,  2019,   961,  2020,  2021,  2022,
     966,  2023,   932,  2024,     0,  2025,   964,   933,  2026,  1002,
    1002,  2027,     0,   989,  2028,  1396,  1397,   596,     0,   600,
     947,   948,   949,   950,   975,   976,   951,   981,   982,   986,
     952,  1034,   961,  1715,   596,  1398,   592,  1715,   596,  1358,
    1715,     0,     0,   195,     0,  1457,  1494,  2029,  2030,  2031,
    2032,  2033,  2034,  2035,  2036,  2038,  2037,  2039,  2040,  2041,
    2042,  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,
    2052,  2053,  2054,  2055,  2056,  2057,  2060,  2058,  2059,  2061,
    2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,
    2072,  2073,  2075,  2074,  2076,  2077,  2078,  2079,  2080,  2081,
    2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2090,  2091,
    2092,  2093,  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,
    2102,  2103,  2104,  2105,  2106,  2107,  2108,  2109,  1495,  1496,
    1508,     0,  1509,  1499,  1463,   140,   638,     0,  1448,  1535,
       0,     0,     0,  1275,     0,   859,   894,   899,     0,     0,
     912,     0,  1290,     0,  1296,     0,     0,     0,   894,   683,
       0,   855,     0,   893,   783,   892,   783,   737,     0,   718,
     904,     0,     0,   907,   905,     0,   907,     0,     0,     0,
     907,   903,   864,     0,   783,     0,   895,   783,   892,     0,
     914,   911,  1357,  1454,     0,     0,     0,     0,  1576,     0,
       0,     0,  1369,  1371,  1372,  1243,  1382,  1147,     0,  1919,
    1920,  1921,  1311,  1922,  1923,  1925,  1926,  1927,  1101,  1928,
    1380,  1930,  1932,  1933,  1935,  1936,  1937,  1938,  1939,  1940,
       0,  1381,  1943,  1782,  1948,  1949,  1951,  1954,  1955,  1379,
    1960,     0,     0,     0,  1345,  1266,     0,  1146,     0,     0,
       0,  1142,     0,     0,   955,   956,   977,   978,   957,   983,
     984,   958,     0,  1341,  1035,  1130,  1329,  1179,  1151,  1159,
    1138,  1210,  1131,     0,  1141,  1133,  1337,   718,  1335,     0,
    1134,  1368,  1321,  1312,   718,  1333,  1513,  1511,  1517,  1512,
       0,     0,     0,     0,     0,  1357,  1555,  1556,  1547,  1545,
    1546,  1544,  1543,  1550,     0,  1552,  1460,  1261,  1263,     0,
     713,     0,     0,     0,   292,   666,   665,     3,  1403,     0,
       0,     0,     0,   730,   731,     0,     0,     0,     0,     0,
       0,     0,     0,   826,   757,   758,   760,   823,   827,   835,
       0,     0,     0,     0,     0,   672,     0,  1588,  1584,  1582,
       0,     0,     0,   124,   124,     0,     0,     0,     0,     0,
     100,    49,    93,     0,     0,     0,     0,   213,   226,     0,
       0,     0,     0,     0,   223,     0,     0,   206,   200,   202,
      51,     0,   124,     0,    47,     0,     0,     0,    53,     0,
     638,  1384,     0,  2110,  1972,  1973,  1974,  1975,  1925,  1976,
    1977,     0,  1978,  1979,  1931,  1981,  1982,  1983,  1984,  1985,
    1986,  1987,  1988,  1938,  1990,  1991,  1992,  1993,  1994,  1995,
    2136,  1996,  1952,  1998,  1958,     0,  1999,  1152,  1385,  1391,
    1269,   742,  1267,  1404,     0,  1317,     0,  1405,  2142,  2143,
    2144,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,  2153,
    2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,
    2164,  2165,  2166,  2167,  2168,  2169,  2170,  2171,  2172,  2173,
    2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,
    2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,  2192,  2193,
    2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,  2202,  2203,
    2204,  2205,  2206,  2207,  2208,  2209,  2096,  2210,  2211,  2212,
    2213,  2214,  1407,  1406,  1408,  1314,  1365,  1320,     0,     0,
     636,     0,     0,     0,     0,     0,     0,     0,  1420,     0,
       0,  1715,   194,  1715,     0,   522,  1715,   522,  1715,     0,
     183,  1434,  1437,     0,   589,   596,   585,   583,   582,   584,
     993,   980,   988,   987,  1266,   970,   969,   968,     0,   967,
       0,     0,   994,   994,   992,   971,   947,     0,     0,     0,
     998,     0,   996,     0,   594,   595,     0,   566,     0,   940,
     936,     0,  1007,  1008,  1009,  1010,  1017,  1018,  1015,  1016,
    1011,  1012,  1005,  1006,  1013,  1014,  1003,  1004,     0,  1019,
    1020,  1021,  1022,  1023,  1024,  1025,  1026,   953,   959,     0,
       0,   561,     0,  1399,     0,     0,   563,     0,     0,     0,
     557,   140,     0,   207,  1504,  1505,  1503,     0,     0,  1462,
     210,  1507,  1497,  1506,  1461,   227,  1498,  1456,     0,  1452,
     627,     0,     0,     0,     0,  1276,  1277,  1278,  1279,  1280,
    1281,  1282,  1283,  1284,     0,     0,  1285,  2255,   854,   852,
       0,     0,     0,     0,     0,     0,     0,  1105,  1131,     0,
       0,  1312,     0,  1261,  1295,     0,     0,     0,     0,     0,
       0,  1261,  1301,     0,     0,   878,   890,   776,   782,   853,
       0,   851,     0,  1334,   846,     0,   924,   904,     0,   903,
       0,     0,   906,   900,     0,   901,     0,     0,     0,     0,
     902,     0,     0,     0,     0,   849,     0,   890,   850,     0,
     921,  1523,  1522,  1531,   180,     0,  1272,     0,   140,  1577,
    1591,     0,  1266,  1139,  1310,     0,     0,  1144,  1223,  1060,
       0,     0,  1061,  1039,  1040,     0,  1344,  1353,  1261,  1265,
       0,  1142,  1261,     0,  1213,  1215,     0,     0,  1135,  1411,
    1136,  1143,     0,  1375,     0,  1034,  1034,  1340,  1243,     0,
    1233,  1236,     0,     0,  1240,  1241,  1242,     0,     0,     0,
    1332,     0,  1251,  1253,     0,     0,  1076,  1249,     0,  1079,
       0,     0,     0,     0,  1237,  1238,  1239,  1229,  1230,  1231,
    1232,  1234,  1235,  1247,  1228,  1057,     0,  1132,     0,  1182,
       0,  1056,  1338,   844,     0,  1373,  1370,     0,  1313,   844,
    1525,  1529,  1530,  1528,     0,  1524,  1516,  1515,  1520,  1518,
    1521,  1519,  1593,     0,  1557,  1541,     0,  1538,  1264,   839,
     715,  1360,     0,     0,     0,   305,   284,   306,  1564,  1562,
     145,   144,     0,     0,   688,   687,   751,   743,   745,   751,
       0,   686,     0,   799,   800,     0,     0,     0,     0,   832,
     830,  1369,  1382,   787,   761,   786,     0,     0,   765,     0,
     791,  1035,   825,   670,   755,   756,   759,   669,     0,   828,
       0,   838,     0,   707,   709,   692,   706,   704,   689,   697,
     826,   760,     0,  1583,     0,     0,     0,     0,     0,  1715,
       0,     0,    84,    65,   474,   935,   123,     0,     0,     0,
       0,     0,     0,     0,    92,    89,    90,    91,     0,     0,
       0,     0,   211,   212,   225,     0,   216,   217,   214,   218,
     219,     0,     0,   204,   205,     0,     0,     0,     0,   203,
       0,     0,     0,     0,     0,     0,     0,     0,  1570,  1565,
     742,   742,   742,     0,   740,   741,     0,     0,  1315,  1318,
     626,   530,     0,   520,     0,     0,     0,   186,   185,  1424,
       0,     0,     0,     0,     0,   245,   244,     0,     0,   557,
    1425,  1423,  1427,  1426,  1428,  1687,   174,     0,     0,   193,
     190,     0,     0,   519,   493,     0,  1439,     0,     0,     0,
    1715,  1436,     0,   509,  1567,   243,     0,     0,     0,   596,
       0,   991,   990,   941,   937,     0,     0,     0,     0,     0,
       0,   601,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   596,   593,  1400,     0,   596,  1359,     0,   596,   198,
    1458,  1500,   208,   228,   209,   229,   661,     0,   633,   641,
     646,   624,     0,   624,     0,   643,   647,   624,   642,     0,
     624,   637,   638,     0,  1175,     0,  1165,     0,     0,   913,
       0,     0,  1166,  1107,  1108,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1125,  1124,  1167,   917,     0,   920,     0,
       0,  1293,  1294,     0,  1168,     0,     0,  1300,     0,     0,
       0,  1173,     0,   856,     0,     0,   771,   778,     0,   781,
     775,     0,   718,   677,  1707,  1746,     0,   729,   729,   729,
     717,   727,     0,   803,     0,     0,   879,     0,     0,   881,
     883,     0,     0,   886,   863,   862,     0,     0,     0,   925,
       0,     0,     0,  1364,     0,   181,     0,  1413,     0,  1418,
    1419,  1416,  1412,  1415,  1417,     0,     0,     0,  1309,  1305,
       0,     0,  1218,  1220,  1222,     0,  1227,  1233,  1236,  1240,
    1241,  1242,  1237,  1238,  1239,  1229,  1230,  1231,  1232,  1234,
    1235,  1255,     0,     0,  1209,     0,     0,  1343,     0,  1103,
       0,  1137,  1148,     0,  1216,  1149,     0,     0,     0,  1377,
    1378,  1036,  1045,  1048,  1080,  1081,  1052,  1053,  1054,  1058,
    1410,  1409,  1339,     0,  1331,     0,     0,  1037,  1062,  1067,
       0,  1302,  1097,     0,  1085,     0,  1075,     0,  1083,  1087,
    1063,  1078,     0,  1059,     0,  1332,  1252,  1254,     0,  1250,
       0,  1049,  1050,  1051,  1041,  1042,  1043,  1044,  1046,  1047,
    1055,  1226,  1224,  1225,     0,  1318,     0,  1330,     0,     0,
    1184,     0,     0,  1082,  1336,     0,   924,   742,  1322,  1345,
     924,     0,  1034,  1558,  1403,  1551,  1540,  1403,  1262,  1361,
    1402,   140,   291,   287,   299,     0,   330,   305,   292,   278,
       0,  1560,   135,   131,     0,   165,   167,   844,     0,  1321,
     749,   750,   754,     0,     0,   754,   733,   685,  1949,  1835,
       0,     0,     0,     0,   792,   833,     0,   824,   789,   790,
       0,   788,  1369,   793,  1368,   794,   797,   798,   766,   834,
    1354,   836,     0,   829,     0,  1362,   691,   710,     0,     0,
       0,     0,     0,   674,   673,   840,     0,    50,     0,  1715,
      67,     0,     0,     0,     0,     0,     0,   424,     0,   524,
     424,   105,  1715,   596,  1715,   596,  1615,  1682,  1851,     0,
      63,    96,     0,   498,   117,     0,   483,   527,    86,   101,
     110,     0,     0,   201,    52,   215,   220,   113,   224,   221,
    1444,   222,   124,     0,    48,     0,   111,     0,  1442,     0,
       0,    54,   115,  1446,   740,   740,   740,     0,  1268,     0,
       0,     0,  1270,  1271,  1317,     0,   625,     0,   521,     0,
     635,   615,   616,   626,   184,     0,  1422,     0,   194,     0,
     522,   522,     0,     0,  1424,     0,     0,   176,   172,     0,
       0,     0,     0,  1609,     0,   512,   510,   543,     0,   517,
     511,   520,     0,     0,   469,     0,     0,     0,     0,   610,
       0,     0,     0,     0,     0,   960,   973,   567,   947,     0,
    1001,  1000,  1002,  1002,   947,     0,   930,   947,     0,   945,
       0,   985,   954,  1027,  1028,  1029,  1030,  1031,  1032,  1033,
     560,  1401,   562,     0,   564,   628,     0,   631,     0,   630,
     634,   629,   623,     0,   656,     0,     0,     0,     0,     0,
       0,     0,  1453,     0,  1162,  1274,     0,  1288,  1287,  1106,
    1113,  1116,  1120,  1121,  1122,  1289,     0,     0,     0,  1117,
    1118,  1119,  1109,  1110,  1111,  1112,  1114,  1115,  1123,   922,
       0,     0,   916,  1298,  1297,  1291,  1292,     0,  1170,  1171,
    1172,  1299,     0,     0,   769,   767,   770,   772,   768,     0,
       0,   891,   924,   729,   729,   729,   729,   726,     0,     0,
       0,   923,     0,   820,   885,     0,   909,     0,   882,     0,
       0,     0,   873,   880,   896,     0,   929,     0,   898,  1532,
    1273,   735,  1140,     0,     0,  1306,     0,  1102,     0,  1221,
    1150,  1244,     0,  1208,     0,     0,     0,  1352,     0,  1262,
    1214,  1212,  1145,  1034,     0,     0,     0,     0,     0,     0,
       0,  1086,  1077,     0,  1084,  1088,     0,     0,     0,  1071,
       0,     0,  1069,  1098,  1065,     0,     0,  1099,  1317,     0,
    1323,     0,     0,  1183,  1192,   847,   843,   803,   740,  1353,
     803,     0,  1526,  1542,  1539,     0,   287,   285,   286,   287,
     287,   287,   287,   297,   303,   298,   287,   287,   287,   349,
       0,   347,   292,   355,   330,   330,   331,   308,   353,   355,
     317,   327,   326,   283,   307,     0,     0,  1561,     0,   154,
       0,     0,     0,     0,   157,   168,  1560,     0,   171,     0,
     744,   746,     0,  1245,   754,   748,   796,   795,     0,   764,
     831,   762,     0,   837,     0,   708,     0,   694,     0,   866,
       0,     0,     0,     0,     0,   473,     0,     0,     0,   424,
       0,   532,     0,   539,     0,     0,   524,   505,    85,     0,
       0,     0,    59,   104,    77,    69,    55,    83,     0,     0,
      88,     0,    81,    98,    99,    97,   102,     0,   459,   434,
     470,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   742,   738,   739,
    1153,  1316,   659,   660,   206,   658,   531,     0,     0,   188,
       0,   192,     0,   519,  1439,     0,     0,  1421,   557,     0,
       0,   175,   177,     0,   194,     0,   522,   199,     0,  1604,
     497,   493,   518,   491,   490,   492,     0,  1610,   522,  1438,
       0,     0,   611,     0,   605,     0,  1433,   979,   943,     0,
     997,   995,   944,     0,   942,   938,   946,   596,   662,     0,
     619,   657,   644,   649,     0,   655,   651,   650,   645,   653,
     652,   648,  1163,  1174,  1286,     0,     0,     0,     0,   915,
     918,     0,  1169,  1164,   889,     0,     0,   803,     0,     0,
       0,     0,   720,   719,   725,     0,     0,  1186,   884,     0,
       0,     0,   871,   861,   867,     0,     0,     0,   926,     0,
     927,   897,     0,  1308,  1304,  1217,  1219,  1256,  1342,  1261,
    1347,  1349,     0,     0,     0,  1211,  1376,  1038,     0,     0,
    1068,  1303,  1089,     0,     0,     0,  1064,  1244,     0,     0,
       0,     0,     0,  1073,     0,  1327,  1318,     0,  1326,     0,
       0,     0,     0,  1158,   848,   820,     0,  1104,   820,     0,
     716,   296,   302,   295,   294,   293,   300,   304,   290,   347,
     352,   348,   350,   287,     0,   354,   344,     0,   328,   329,
     309,   330,     0,   314,   313,   315,   312,   357,     0,     0,
       0,     0,   277,   360,  1131,     0,  1559,     0,  1554,   133,
     134,     0,     0,     0,   149,   126,   132,     0,     0,   166,
     154,   142,   752,   753,     0,   747,   763,  1355,  1363,   693,
       0,  1142,     0,     0,   690,     0,   118,   424,     0,     0,
      66,     0,   541,   485,   533,   516,   500,     0,     0,     0,
     425,     0,   558,     0,     0,   506,     0,     0,     0,     0,
     486,     0,     0,   445,     0,     0,   516,     0,   523,   441,
     442,     0,    58,    78,     0,    74,     0,   103,     0,     0,
       0,     0,     0,    61,    73,     0,    56,     0,   596,   596,
      64,   484,  1395,  2000,  2001,  2002,  2003,  2004,  2005,  2006,
    2007,  2008,  2009,  2120,  2010,  2011,  2012,  2013,  2014,  2015,
    2016,  2017,  2129,  2018,   431,  2019,  1782,  2020,  2021,  2022,
    2023,  2024,     0,  2025,   933,  2026,  2027,  2206,  2028,  1229,
    1230,   429,   526,   426,  1396,   427,   534,   428,   430,     0,
     529,   114,  1445,     0,   112,     0,  1443,   121,   119,   116,
    1447,  1156,  1157,  1154,   740,   638,   618,   187,     0,  1609,
       0,     0,     0,   250,   276,   266,     0,  1715,     0,   173,
       0,  1439,   191,     0,   519,  1609,  1607,     0,   549,   469,
     544,     0,  1439,  1603,     0,   602,     0,     0,     0,   939,
     931,   565,   632,     0,   654,  1126,     0,     0,     0,     0,
     779,     0,   785,   820,   724,   723,   722,   721,   802,  1657,
    1932,  1834,     0,   806,   801,   804,   809,   811,   810,   812,
     808,   819,     0,   822,   908,  1257,  1259,     0,     0,     0,
       0,   872,     0,   874,     0,   876,     0,   928,  1307,  1350,
    1351,  1346,     0,  1035,  1095,  1093,  1090,     0,  1091,  1072,
       0,     0,  1070,  1066,     0,  1100,     0,  1324,     0,  1178,
       0,  1181,  1195,  1190,  1191,  1186,  1153,  1186,  1527,   288,
     289,   301,   351,   330,   317,   345,   346,   278,     0,   359,
       0,   332,     0,   311,     0,   382,   383,   364,   365,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1332,     0,
       0,     0,     0,     0,   398,     0,     0,   401,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   153,   130,   156,   155,     0,   163,     0,
    1321,     0,   154,     0,   158,   612,     0,     0,   705,   865,
     698,   699,     0,   537,    68,     0,   516,     0,   424,   502,
     501,   504,   499,   503,     0,   559,     0,     0,   443,     0,
     450,   488,   489,   487,   444,   516,   522,   446,     0,     0,
       0,    70,    60,    57,    62,    71,     0,     0,    72,    75,
     929,    87,    80,  2129,  2138,     0,     0,     0,     0,     0,
       0,   614,   621,   206,     0,     0,  1606,   493,     0,     0,
     607,     0,     0,     0,   263,     0,     0,     0,     0,   519,
     178,     0,     0,  1609,     0,   196,  1608,     0,     0,   421,
       0,   466,     0,     0,     0,  1595,     0,     0,  1432,  1431,
       0,   620,  1127,     0,  1128,   919,     0,     0,   777,  1186,
       0,     0,     0,   813,   807,  1185,  1187,     0,     0,   774,
    1260,   868,     0,   870,     0,   894,   742,     0,   894,   877,
    1348,  1176,     0,  1092,  1096,  1094,  1074,  1328,  1325,  1180,
    1197,  1194,   822,  1374,   822,   278,   325,   323,     0,     0,
     340,   343,   310,   347,   317,   312,   361,   372,   402,   403,
     376,   377,   378,   380,     0,     0,     0,   362,   384,   389,
     419,     0,   407,     0,   397,     0,   405,   409,   385,   400,
     381,     0,  1332,     0,     0,     0,     0,   373,   374,   375,
     366,   367,   368,   369,   370,   371,   379,   404,   281,     0,
     280,     0,     0,     0,     0,   141,   138,   125,   143,  1246,
     695,   696,     0,   424,     0,   515,   538,   455,   433,     0,
       0,     0,   440,   447,   548,   449,     0,    79,    95,     0,
       0,   528,   122,   120,  1155,   638,     0,  1439,   469,  1603,
     604,   250,     0,   274,   262,     0,     0,   275,     0,   267,
       0,     0,     0,   199,  1605,   493,   482,   475,   476,   477,
     478,   479,   480,   481,   496,   495,   467,   468,     0,     0,
       0,     0,     0,   606,  1433,     0,   169,     0,   160,   160,
    1129,   780,     0,   822,     0,     0,     0,   805,     0,     0,
     821,     0,   681,  1258,     0,   860,   857,   740,     0,   858,
       0,     0,   742,   774,   774,   323,     0,   356,     0,   337,
     341,   358,     0,     0,     0,     0,     0,     0,     0,   408,
     399,     0,   406,   410,     0,     0,   393,     0,     0,   391,
     420,   387,     0,     0,     0,   127,     0,   128,   164,     0,
       0,     0,   522,   540,     0,   507,   514,   453,   452,   454,
     458,     0,   456,     0,   472,     0,   465,   433,     0,    82,
       0,   535,   613,   617,     0,   423,  1597,   249,   246,   247,
       0,   264,   268,     0,     0,   257,   519,     0,  1603,  1609,
     469,  1603,     0,  1600,     0,   603,     0,     0,  1439,     0,
       0,   162,   162,     0,   774,   815,     0,   814,  1188,  1189,
     776,   869,     0,     0,  1177,     0,  1200,   680,   679,   324,
     321,   342,     0,     0,   316,   363,     0,     0,   390,   411,
       0,     0,     0,   386,     0,     0,     0,     0,     0,   395,
       0,   282,     0,     0,     0,     0,   548,   494,     0,     0,
       0,   455,     0,   448,   545,   546,   547,     0,   461,   451,
     462,    76,    94,   536,     0,     0,     0,   273,     0,   271,
       0,   258,   519,  1598,   197,   422,  1596,  1601,  1602,     0,
     160,   924,   170,   159,   751,   161,   751,   784,   682,   816,
     773,     0,   875,  1196,     0,     0,     0,     0,   322,   338,
     333,   339,   335,   417,   415,   412,     0,   413,   394,     0,
       0,   392,   388,     0,   279,     0,   137,   924,   148,     0,
     465,   508,   513,   432,   457,   471,     0,     0,     0,   463,
       0,   464,  1603,     0,   265,   269,     0,   272,     0,     0,
     162,  1429,   754,   754,  1918,  1658,  1886,     0,  1198,  1201,
    1199,  1193,   319,   318,   320,     0,     0,   414,   418,   416,
     396,   129,   136,     0,   424,   437,     0,   436,     0,   525,
     460,  1599,   260,     0,     0,     0,  1439,   751,   151,   150,
       0,  1205,  1204,  1203,  1207,  1206,   334,   336,   924,   542,
     435,   439,   438,     0,     0,     0,     0,   254,     0,   924,
     754,     0,   147,   260,   248,     0,     0,     0,   270,   256,
       0,  1430,   152,  1202,   259,     0,   252,   253,     0,   255,
       0,     0,   251,     0,     0,     0,   276,     0,     0,   257,
     261
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3305, -3305, -3305,  2240,    94,   111,  -769, -1191,  -988, -1204,
   -3305,    54,   117, -3305, -3305,   365, -3305,  1199, -3305,   353,
    -632,   750, -3305,  1295, -3305, -3305,  2979, -3305,   119,   120,
    2389,    17, -3305, -3305, -3305, -3305,  -561,   692, -1217, -3305,
     623, -3305, -3305, -3305, -3305,   -42,   338, -3305,    13, -2173,
   -3015,  -530, -3305,  -691, -3305,  -201, -3305,  -612, -3305,  -797,
    -620,  -678, -2863, -1126, -3305,  1802,  -255, -3305,   785, -3305,
   -2562, -3305, -3305,   768, -3305, -1159, -3305, -2233,   326,  -601,
   -2624, -2585, -2140,  -755,   404,  -607,   381, -2122,  -941, -3305,
     793, -3305,  -593, -3305,  -746, -1754,   121, -2842, -1650,    -8,
   -3305, -3305, -3305,  -531, -3305, -2555, -3305, -3305, -3305,   123,
    1640, -2118,   124, -1595, -3305,    14, -2068,   128, -3305, -3305,
     130,    41,  -544,   450, -3305,   131, -3305, -3305,  1558,  -791,
   -3305,  1610,   132, -2535, -3305,  -429, -3305,  -492,  -485, -3305,
   -3305,    24,  -955,  1550, -3305, -3305, -3305,    18, -3305,  -426,
   -3305, -3305, -2589, -3305,    56, -3305, -3305, -3305, -3305, -3305,
    -350,   462, -3305, -3305,  -527, -2611,  -472, -3305, -3128, -3205,
   -3305, -3305,  -690, -3056, -2025,   133,   136,   -37, -3305, -3305,
   -3305, -3305,  -376, -2587, -3305,  -737, -3305,  -742,  -193,  -714,
    -703, -3305,  -573, -2683,  -681, -3305, -3305,  -730, -2811,  2455,
    -443, -3305, -3305, -1103, -3305,   523, -2049, -3305,   909, -3305,
     911, -3305,  -258, -2816, -3305, -3305,  -404, -3305, -3305, -3305,
   -2256,   -41,  -642,  -641, -3305, -2964, -3305, -3305, -2392, -3305,
   -3305, -3305,   525, -3305, -3305,  3904,   134,   135, -3305,   925,
     137, -1138,    80,  3967,     5,   -38, -3305,   -32, -3305, -3305,
   -3305,   870, -3305, -3305,    72,   109,  1919, -1032, -3305, -1503,
     980, -3305,  2065,  2067, -2202,  -750,   -62, -3305,   906, -1670,
   -2125,  -556,  1327,  1903,  1899,   657, -2547, -3305,  -481, -3305,
     235, -3305, -3305,   900,  1376, -1551, -1549, -3305, -2177, -3305,
    -363,  -185, -3305, -3305, -3305, -3305, -3305, -2407, -2946,  -473,
    1356, -3305,  1920, -3305, -3305, -3305, -3305,    81, -1479,  3097,
     949,   -78, -3305, -3305, -3305, -3305,   358, -3305,  1107,    36,
   -3305,  2499,  -515,  -606,  2119,  -575,   423, -1728,    33,  2509,
     707, -3305, -3305,   709, -2072, -1506,   665,  -101,  1695, -3305,
   -3305,  -456, -1331,  -837, -3305, -3305,   204,  2809, -3305, -3305,
   -3305,  2866,  3413, -3305, -3305,  3692,  3941, -3305,  -672,  4157,
    1357,  -808,  2131,  -888,  2134,  -910,  -894,  -907,  2135,  2136,
   -1475,  5288,  -617,  4859, -2186, -3305,    50, -3305, -1494,   -20,
   -3305, -3305, -3305, -3305, -2311, -3305,  -328, -3305,  -327, -3305,
   -3305, -3305,  -521, -3304, -3305,  6968,  1071, -3305, -3305,   677,
   -3305, -3305, -3305, -3305, -1523, -3305,  6318,   965, -3305, -2002,
   -3305, -3305,  -984,  -616,  -948, -1015, -1210, -1377, -3305, -3305,
   -3305, -3305, -3305, -3305, -1514, -1775,   -24, -2055, -3305, -3305,
    1119, -3305, -3305, -3305,  -761, -1723,  -502, -2124, -3305, -3305,
   -3305, -2061,  1606,   301,  -591, -1624, -3305,  1011, -2331, -3305,
   -3305,   632, -3305,  3328,  -565, -1108, -2439,   187, -1347,    38,
   -3305,  -792,  2885,  2649,   402, -2556, -3305, -3305,  -559, -2709,
   -1099, -3305, -1447, -3305, -3305,   140,  1813,    61, -3305,   143,
    1466, -3305, -3305, -3305,   145, -3305, -3305,   147,   861, -3305,
    1140, -3305,   788,   148, -3305, -3305,  3135,  3067,    19, -3110
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   575,   576,  1859,  1805,  1581,  1239,
    1795,  1490,   577,  2624,  2625,  2626,  2249,  1220,  3539,  2250,
    1221,  1222,  2628,    52,    53,    54,   111,  1250,   578,   579,
     511,   580,  2303,  3243,  2719,  3244,  2383,  2297,  1499,  2380,
    1916,  1835,  1500,   517,  1931,  2720,  2664,  1917,   581,  2613,
    2982,  3532,  2638,  3739,  2918,  2919,  3529,  3530,  2616,  2251,
    3628,  3629,  2697,  1787,  3623,  2325,  3444,  2255,  2237,  2920,
    2334,  3395,  3028,  2252,  2900,  2326,  3524,  1871,  2327,  3525,
    3198,  2328,  1831,  1864,  2617,  3630,  2256,  1832,  2612,  2983,
    1774,  2329,  3536,  2330,   530,  2904,   582,  2689,  1394,   500,
     501,   502,   876,  1373,  1289,  1374,   742,    60,   531,   583,
     804,  1869,   584,  1388,  1851,   585,  1860,   586,  2680,  2681,
     587,   588,  1156,  2569,  2171,   589,   566,   567,   894,  1437,
     568,   877,   590,   903,    69,   749,  1491,   591,  1492,  1493,
     991,    70,  1582,   993,   994,    71,    72,   593,  3278,  3038,
    1402,  1872,  2337,   532,   594,  2864,  2172,  2571,  3521,    75,
    3178,  2175,  1181,  3182,  3456,  2858,  3177,  2573,  3571,  3654,
    3179,  2176,  2177,  3457,  2178,   595,   641,  3330,    77,  1847,
    3550,    78,  3252,  3786,  3776,  3777,  3768,  3641,  3013,  3764,
    3742,  3426,  3552,  3014,  3553,  3707,  3427,  3255,  2566,    79,
    3378,  3379,  2169,  2543,  3121,  1705,  2544,  2547,  2166,  1706,
    1707,  2841,  3134,  2847,  3724,  3668,  3487,  2834,  2554,  2555,
    2556,  2557,  3669,  3671,  3488,  3670,  3127,  3128,  2558,  2559,
    2560,  2836,  2837,  2561,  2562,  2852,   596,   597,  1057,  2032,
     598,  1778,   599,  1111,    85,    86,  1029,    87,  3192,    88,
      89,  1753,  1754,  1755,   670,   683,   684,  1556,  2000,   676,
    1185,  1722,   657,   658,  2291,   757,  1825,  1717,  1718,  2182,
    2580,  1746,  1747,  1194,  1195,  1987,  3472,  1988,  1989,  1548,
    1549,  3288,  1734,  1738,  1739,  2203,  2193,  1725,  2453,  3063,
    3064,  3065,  3066,  3067,  3068,  3069,  1112,  2757,  3299,  1742,
    1743,  1197,  1198,  1199,  1751,  2213,    91,    92,  2146,  2525,
    2526,   630,  3080,  1573,  1756,  2761,  2762,  2763,  3084,  3085,
    3086,   631,  1023,  1024,  1047,  1043,  1563,  2009,   632,   633,
    1966,  1967,  2422,  1050,  2003,  2018,  2019,  2770,  1889,   878,
    2238,  1586,  1440,   880,  1113,   881,  1415,  1114,  1419,   883,
    1115,  1116,  1117,   886,  1118,  1119,  1120,   889,  1411,  1121,
    1122,  1430,  1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,
    1467,  1167,  1757,  1124,  1125,  1126,  1127,  1128,   635,  1129,
    1130,  1669,  2140,  2524,  3073,  3295,  3296,  2813,  3113,  3320,
    3482,  3666,  3718,  3719,  1131,  1132,  1614,  1615,  1616,  2042,
    2043,  2044,  2045,  2134,  1663,  1664,  1133,  2987,  1666,  2062,
    3076,  3077,  1168,  1542,  1610,  1291,  1292,  1587,  1514,  1515,
    1523,  1941,  1530,  1535,  1971,  1972,  1543,  2102,  1134,  2038,
    2039,  2476,  1595,  1135,   783,  1296,  1621,  1676,  2808,  2137,
    1667,  2096,  1144,  1136,  1145,  1138,  1606,  1607,  2487,  2781,
    2782,  2069,  2209,   637,  1701,  2215,  2216,   899,  1375,  1139,
    1140,  1141,  1142,  1143,   639,  1293,   506,   892,  3655,  1473,
    1173,  1294,  1376,  2092,  1620,   600,   104,   601,    95,   602,
    1163,   680,  1164,  1166,   603,   651,   652,   604,   664,   665,
    1583,  1686,  1584,   605,   100,  1208,   666,   672,   606,  3275
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     512,   636,   898,   784,   512,  1238,  1489,   896,   743,   512,
     759,   760,  1204,    58,    63,   512,   512,    57,    73,   101,
     512,   512,   512,  1377,   758,   512,  1044,  1426,   512,   512,
    1534,  1380,   512,  1819,  1809,   512,   512,   741,  1968,  1494,
    1585,    66,   592,   989,  1880,   504,  1808,  1385,  2144,  2185,
     745,  1918,   762,  1773,  2511,  2578,    74,   503,   763,   504,
    2585,    94,  1432,  2513,  1702,  1169,  1137,  2618,   636,   636,
     673,   634,    90,  2022,  2527,  1822,  1780,  2061,  2530,  1708,
      83,   905,  2654,  2655,  2656,  3011,  2989,  2985,  3010,   990,
      90,  1784,   512,  1509,    49,  1884,  1511,   512,   512,   512,
     512,   512,   628,  1471,  1813,  1673,  2295,  1476,   879,  1510,
    2508,    50,  1679,  1026,  2611,  1507,   669,    51,  1046,    55,
      56,    59,  1613,    61,    62,  1903,   504,   504,    64,  3029,
      65,    67,    68,    76,    80,    81,  1052,    82,   634,   634,
      93,   776,  1240,    96,  1244,    97,  1248,    98,    99,  2574,
    2079,  2080,  3025,   686,  2780,  1412,  1413,  2879,  2830,  2666,
     644,  2884,  1683,   995,  3331, -1989,  3269,  3246, -1989,   628,
     628, -1367,  1155, -2129, -2129,  2549, -1392, -1002,  -664, -1980,
     768,  -667,  1424,  3265, -1389, -1389,  2205, -2120, -2120,  3424,
    2208,  2091,  2309,  -994,  2675, -1392,  2425,  2683, -1997,   537,
    2150,  1193,  1495, -1393,   570,  -999, -2138, -2138,  1182,  -999,
   -1002, -1390, -1390,   518, -1980, -1989,   646,  1066, -1997,  2619,
   -1393,  -961,  3411,  -974,  -989,  2163,  1765,   518,   518,  2549,
     685,   685,   518,  2164,  1434,  3202,  2094,  1820,  1793,  1066,
    2671,  1796,  1797,   515,  2306,  2545,  1821,   678,  2474,  -622,
   -2115, -2115, -2140, -2140,  3125,   518,  2167,  3398,  1629,  3185,
    1151,   813,  1495,  1631,  2094,  2725,  2727,  1434,  2730,  1680,
    1483,   518,  1483,  2764,  -206,  1066,  2454,  1066,  -664,  -206,
    3236,  -667,  1945,  1776,  1196,  2218,  1479,  1947, -1227,  2463,
    1432,  1377,  3217,   772,  1811,  1639, -1227,  2693,  2838,  2839,
    3139,  1785,  3519,  2094,  -797,  3140,  1785,  2094,  3326,  3546,
    1629,  1776,  3213,  2301,  1630,  1631,  3327,  1434,   755,  1726,
    1629,  1768,  2646,  1158,  1630,  1631,  2816,  1641,  2620,  3570,
    1625,  3572,  1065,  1785,  2253,  1945,  2257,  3147,  2434,  1946,
    1947,  2436,  1066, -2142, -2142, -2142,  3139,  1639,  3291,   755,
    2815,  3140,  1845,  2818,  3688,     3,     4,  1639,  1495,  2289,
    1495,  1495,  2549,  1727,  3489,  3490,  3548,  3656,  3026,  3149,
    2747,  1710,  3449,  2736,  2922,  3696,  3483,  2893,  3484,  1641,
    3450,  1681,  1571,  3147,   750,  1503,  2614,  3752,  1792,  1641,
    -934,  1629,  3175,  2180,  1377,  1526,  1189,  2437,  2131,  1945,
    1518,  1412,  1413,  1946,  1947, -1248,  2132,  3270,  3115,  1406,
    3750,  3117,  2519, -1248,   539,  3149,  3235,  1424,  1427,   539,
     102,  3434,    21,  3271,  1434,   518,  3624,  2398,  1639,  1807,
    3176,   539,  3261,   110,  1495,  1572,  2892,  1495,  1495,  3264,
    1428,  2235,  1991,  3273,  3139,   539,   539,  1407,  3643,  3140,
    1945,  3646,  2923,   655,  1946,  1947,  1560,  2622,  2426,  2875,
    1641,  1814,  1567,   989,  3614,   540,  1877,  3783,  2872,   103,
    -664,  1991,  3036,  -667,  2181,  1191,  -817,  3214,  2141,   751,
    2777,  3147,  1729,  1770,  2611,  2935,  2611,   845,  1215,  1609,
    2822,  1159,  1046,  1160,  2448,  2449,  2450,  2826,  2827,  2828,
    3761,  2236,   607,  1497,  1026,  3747,   608,  1786,   539,   512,
    1682,   512,  1786,  3149,  3485,  2467,   512,  3574,  3491,   512,
    2615,  1152,  3710,   989,  -934,  2290,  3409,  1783,   512,  2737,
    3520,  1601,  1435,  3689,  1711,  3027,  2924,  2435,  2873,  1786,
    2438,  1824,  -664,   640,  1823,  -667,  1730,  3753,  1020,  1846,
    3451,  2168,  2621,   656,  2622,  3545,   875,  2371,   512,   512,
     512,  3126,  2219,  3625,  3735,  1435,   988,    25,    26,    27,
    3053,  3387,  3393,  1783,  2302,  2026,   814,  2764,  1783,   745,
    3203,  3549,  2623,  3034,  3399,  3131,  2037,  3242,  2165,  2061,
    1762,  3403,  3741,  3709,   679,   636,   785,  1153,   992,   512,
     512,   512,  3044,  1771,  3692,  1783,   636,  2230,  2095,   512,
    1060,  1758,  1759,  2288,  1875,  1435,  3022,  3272,  1953,   512,
     512,   989,   989,  2734,   512,   512,  1878,  2142,  1408,  3672,
    2546,   745,   762,    32,  1812,  1709,  2510,  1887,   763,  1888,
    2205,  1678,  1866,  2588,  2036,    90,  3289,   609,  1760,  1895,
    3626,   512,   512,   504,   512,  1809,  1427,  1410, -1227,  2147,
    -664,  2583,  2647,  -667,   504,   634,  1896,  3762,   512,  3425,
    2829,  2685,    37,   745,   512,  3345,   634,  2532,  1428,  3507,
   -1989,  2989,  2985, -1989,   781,  3418, -1367,  1598,   782,  1427,
    1598, -1392,  1429,  1436, -1980,  1913,  1915,  3645,  2576,  -664,
    1205,  -664,  -667,  1162,  -667,    39,   516,  1019,  -994,  1157,
   -1392,  1428,  3697, -1997,  3193,  2392,    42,  3644, -1393,  2677,
    -999,   752,  1435,   808,  3333,  1431,  1470,  2758,  1624, -1980,
   -1989,  1761,    43, -1997,  1385, -1393,  1414,  1697,  1418,  -989,
    3334,   512,  1674,  2151,   512,   999,  1409,  3082,  3390,  2359,
    1881,  1882,  1803,  3391,  2666,   901,    44,  1596,  3310,  1017,
      58,    63,  3672,  1662,    57,    73,   101,   781,  2133,   675,
     668,   782,  1288,  3736,  1372, -1248,  1804,  1487,  1488,  1487,
    1488,  -206,  -206,  1027,  3123,  1157,   512,  1962,    66,  2520,
    1161,  1170,  1629,   512,   512,   512,   512,   512,  1609,  2253,
    2253,  2253,  3240,    74,  3322,  3169,  3324,  2265,    94,   512,
    1657,  1658,  1659,  1660,  1661,  1662,  2288,  2268,  2211,    90,
    2271,  1183,  1659,  1660,  1661,  1662,  1798,    83,  3544,  2662,
    2663, -2142, -2142, -2142,   753,  1957,  1958,  1959,  1960,  1961,
    1962,    49,  2536,  3184,  3226,  3227,  3164,  3165,  3166,  3167,
    3168,  3169,  2550,  2340,  2536,  3199,   875,  2551,    50,  1723,
    1377,  1641,  3737,  2552,    51,  2553,    55,    56,    59,   685,
      61,    62,  3186,  3560,  2896,    64,  2433,    65,    67,    68,
      76,    80,    81,  1475,    82,  1481,  3245,    93,  1482,  3738,
      96,  1212,    97,  1785,    98,    99,  2235,  1213,  3559,  1957,
    1958,  1959,  1960,  1961,  1962,  2902,   754,  1943,  1944,  1905,
     896,  1902,  1964,  2433,  3139,  2148,   781,  1377,  3253,  1908,
     782,  1184,  1977,  2406,  1028,  1383,  1968,   800,  3211,  1918,
    2379,  2859,  2903,  1856,  3200,  2212,  3587,  3588,   539,  1557,
    2748,  2749,  2750,  2751,  2204,  2204,  3166,  3167,  3168,  3169,
    1554,   989,  1959,  1960,  1961,  1962,  2608,  1564,  2484,  2061,
    2442,  1992,  1785,  2381,   879,   801,  2897,   743,  1724,   539,
     539,  3010,  1450,  1451,  1799,  2035,  1609,  2012,  3463,  3651,
    1891,  3254,  1800,  3149,   755,  2065,   988,  2860,  2364,  1910,
     681,  2366,  2368,  2369,  3362,   520,   741,   990,   512,   512,
    1214,   512,  2679,  1495,  2365,  2367,  2077,  3212,   636,  2363,
     512,   512,  3267,  1495,   512,   636,  1495,  2708,  2786,   798,
    3743,  1817,  2263,  2712,   746,  3396,  2714,  3658,  2046,  1678,
    1983,  2898,  3527,   747,  2899,  2047,  2048,   512,  1416,  2049,
    2050,  2051,  1189, -2114, -2114,   748,   988,  1288,   875,  2642,
    1720,   764,   512,   803,  3139,  2533,  3385,  3264,  2534,  1809,
    1425,   521,  2643,  2989,  2985,  3268,   504,    90,  3664,  2407,
    2284,  2285,  2286,   504,  1033,  2103,  1557,  2657,   634,  2408,
    3743,  1785,  2097,  3106,   539,   634,   518,  3346,  2347,  1726,
    2645,  3147,  1454,  1455,   799,  3528,  1468,  3350,  3665,  1786,
     512,  2358,  2360,  2316,  2104,  2115,  2594,  1054,  2386,   628,
    2370,   745,  1034,  2387,  2372,  2831,   628,  2374,  1055,  2583,
    1785,  1191,  2500,  3149,   780,  2832,  1495,  1776,  1558,  2795,
    2537,  2538,  2227,  1727,  2648,  3363,   756,  1704,  1777,  1036,
    3364,   793,  2537,  2538,   988,   988,   512,  1714,  1715,   512,
    1721,  2501,  1803,   763,   763,   794,   763,  3769,  1613,  2264,
    1215,    21,  1427,   512,   512,  1783,   741,  3219,  1786,  1192,
    2831,   512,  2388,  2081,  1065,  3224,  1804,  1945,  2274,  3365,
    3122,  1946,  1947,  2281,  1428,  1948,  1949,  1950,  1776,  1212,
    2253,  1840,   800,  1384,  2257,  1213,  2990,  1002,  1429,  1779,
    3410,  3791,  1728,   512,   512,   798,  2694,  1904,  3796,  2649,
    2699,  1033,  1157,  2540,  1444,  1445,   512,   875,  1422,  1423,
    3523,  2105,  2539,  1189,  1217,  2540,  2106,  2116,  1190,  1841,
     801,  2107,  1495,   512,  1783,  3049,  1427,   512,   789,   805,
     790,   512,  2266,   525,  1288,   526,  2117,  2269,  2653,  1034,
    2541,  2118,  1729,  1288,  1218,   791,  3540,   792,  1428,  1912,
    2344,  1551,  2541,  1904,  1066,  1566,  3257,   802,  1040, -2111,
   -2111,   529,  1431,  2502,  1810,  3582,  1036,  1288,  2503,  1575,
     799,  1416,  1578,  1450,  1451,  1559,  1914,  1786,   781,   806,
    2119,  1066,  1677,  2542,  -741,  2843,  1425,  2844,  1214,  -741,
    2135,  3508,  1191,   809,  2136,  2542,    25,    26,    27,  3510,
    2845,  2846,  2206,  2207,  2582,  2586,  1730,  1843,   803,  2239,
    1066, -2112, -2112,   105,  3592,  3351,  1786,  1219,  3593,  2400,
    2401,  2402,  2403,  2404,  2405,  3366,   810,  2409,  2410,  2411,
    2412,  2413,  2414,  2415,  2416,  2417,  2418, -2113, -2113,  2759,
    1192,  2061,  2766,  1783,  3352,  1985, -2116, -2116,   685,  2531,
    1986,  3048,  2385,  1225,  2431,  3722,  2389,  1951,   811,  2391,
    3723,   512,    32,  -741,   812,   512,   512,  2906,  1840, -2117,
   -2117,   875,   512,  1226,   781,  2108, -1367,   989,   782,  1212,
    1952,  1592,  1783,   668,   512,  1213,  2109,  2528,  2587,  2587,
     815,  1850,  1852,  1454,  1455,  1040,  1853,  1854,  2332,   816,
    2333,    37,   875,   875, -2118, -2118,  1841,  3097,  2909,  2933,
     817,  -741,  1559,  2721,  1546,   512,  1695,  1227,   875,  1696,
     512,  2926,  2504,  2821,  2356, -2119, -2119,  2823,  2824,  2825,
    2443,   818,  2444,  2505,    39,   520,  2120,  1577,  2890,  2633,
    1212,  2635,  2630,  1842,  2632,    42,  1213,   902,  1215,  1565,
    1953,   512,   512,  1570,  1372,  1000,   512,   512,  1001,   512,
     512,  3353,  2025,  3005,   988,  2026,  3354,  2393,  2495,  2496,
    2004,  3355,  2027,  2006,  2498,  2028, -2121, -2121,  2010,  2399,
    1372,  2013,  1003,   989,   106,  2925,  2017,  2934,  1214,   518,
     520,  1613,  2298,   107,  1843,  2299,   992,  1002,  1212,   668,
    1617,   521,   636,  1976,  1213,  1978,  1979,  1004,  1216,  2427,
    1146,  1147,  1217,  1149,  1008,  1228,  2432,  2052,  2053,  2054,
    1011,  2055,  2056,  2057,  2058,  2059,  2060,   512,   636,   512,
     108,   636,   512,  1013,  2710,  2711,   636,   512,  3380,   636,
   -2122, -2122,  1218,    90,   636,  2348,  2674,  2709,  2028,  1214,
    2354,  3759,  2357,  2355,  2466,  2355,   521,  2466,   512,  1012,
     504,   512,  2470,   539,   539,  1229, -2123, -2123,  2375,  3711,
    3401,  2376,   634,  1230,  1014,  2913,  2419,  3748,  3749,  2420,
    2464,   109,   512,  2465,  1015,  1231,   504,   512,  2468,   504,
    2636,  2465,   519,  2637,   504,  2029,  2640,   504,   634,  2641,
    2702,   634,   504,  2026,  1016,  3732,   634,  1214,  1017,   634,
    2771,   875,  1056,  2465,   634,  1219,  1049,  1232,  2597,  2030,
    1372,  1058,  1212,   512,  2914,  3356,  1051,  2867,  1213,   628,
    2868,  1059,   628,  1384,  2031,  3782,  3357,   628,  3021,  2034,
     628,  2299,  2915,  1150,  2981,   628,  3042,  1061,  1215,  3043,
      90,  2445,  1906,  2446,  1907,  2889,  1288,  2891,  2033,  1372,
    3283,  1060,   520,  1954,  1955,  1956,  1154,  1957,  1958,  1959,
    1960,  1961,  1962,  1234,  2187,   512,  3772,   512,  1212,   512,
     763, -2124, -2124,   525,  1213,   526,  2906,  3781,  3050, -1441,
    3098,  3051,  2907,  2028,   512,   512,  1235,  3119,  3284,  3285,
    3120,  2028,  2465,  3313,  2583,  2908,  2028,  3498,  1242,  1215,
    1162,   529,  1217,  3318,  1165,  3383,  2026,  1237,  3384,  3194,
    1171,  2933,  3417,  3436,  1186,  2299,  1188,  2909,   521,  2910,
    3460,  1214,   512,  2028,   512,  1172,  3499,  1174,   525,  1175,
     526,  1176,  1243,  3513,  2916,  1179,  3514,  2144,   512,   512,
    1180,  3568,  3617,  2917,  3569,  3618,  1187,   875,  1206,   512,
     512,   512,   512,  1372,   512,  1372,   529,  1215,  3637,  1246,
     512,  3638,   512,  1217, -2125, -2125,  3458,  3437,  3241, -2126,
   -2126,   522,  3108,   512,   512,  1207,  3438,  1214,   512,   512,
   -2127, -2127,  1210,   512,   512,   512,   512,  3677,   512,   512,
    2028, -2128, -2128,  1247,  2717,  1288,  1209,  2148,  3439,   112,
    3687,  3727,   514,  3569,  2028,  1219,  1211,  3746,   512,   569,
    3569,  2911,   523,   512,   512,   512,   512,  2226, -2130, -2130,
     512,  1217,  3693,  1223,   654,  1224,  3778,   989,   667,  3638,
    1495, -2131, -2131,   520,  1065,   512,  3779,  1945,  1249,  3780,
    1288,  1946,  1947, -2132, -2132,  1948,  1949,  1950,  3500,  3792,
     524,  1218,  1475,  3501,  1241,  2239,   539,   539,  1245,   539,
   -1441,  1378,   875, -2133, -2133,  1381,  1219, -2134, -2134,  1379,
    3380, -2135, -2135,  2799,  2800,  3440,  1372, -2137, -2137,  2912,
    1382,  1215, -2139, -2139,  2913, -2141, -2141,  3004,  3441,  1387,
     988,  1826,  1827,  -792,  -792,  1452,  1453,  -796,  -796,   521,
     525,   891,   526,  1454,  1455,   875,  3041,  2455,  -795,  -795,
    2537,  2538,  3016,  2458,  3190,  3191,  1389,   875,  3222,   527,
    1689,  1691,  2323,  3032,  1219,   528,  1401,  3526,   529,  1390,
    1403,  1404,   539,  2914,  2231,  1410,  1414,  1215,  1417,  1418,
    1420,  2272,  1421,  1433,  2240,  1217,  2243,   875,  1438,  2254,
    1439,  2915,  2315,  1441,   875,  2258,   512,  2260,  2020,  1469,
    1472,  2023,  1474,  1477,  3712,   636,  3713,   520,   512,  2267,
    1478,   636,  1480,  1501,  2270,  2273,  1545,  1498,  2275,  2276,
    2277,  2278,  1504,  2282,  2283,  1532,  1547,  2883,   512,  1550,
    1555,  1561,   875,   512, -1441,   875,   988,  2279,  1288,  1562,
     875,  1217,  1568,  1569,  1579,  1580,  3458,  3502,  1574,  1065,
    1588,  1589,  1945,  1591,  -965,  -972,  1946,  1947,  3503,  1596,
    1948,  1949,  1950,   504,  -962,   668,  -817,  2220,  -818,   504,
    -676,  2280,  3415,   521,  -963,   634,  1600,  -966,   512,  1212,
    1601,   634,   512,  -964,  -676,  1213,   512,  3306,  1219,  -676,
    1952,  1605,  1618,  2916,  1225,  3458,  1619,  3770,  1613,  1622,
    1668,  1670,  2917,  1687,    21,  1672,   628,  1699,  2721,  1698,
    1703,  1712,   628,  1713,  1226,  1190,  2583,  1192,  1748,  1750,
    1763,   525,  1752,   526,   512,   745,   904,  1781,  1783,  1782,
    3442,  1788,  1790,  3443,  1789,  1794,  1801,  1802,  3045,  1806,
    1816,  1830,  -676,  1829,  1219,   636,   528,  3602,  1372,   529,
    1834,  1704,  1858,  1836,  1495,  1426,  3667,  1848,  1227,  1495,
    1953,  1861,  1849,  -676,  1862,  1863,  1868,  3231,  3232,  1865,
     636,   512,  1867,  1874,   539,  3458,  1876,  1066,  1883,  1893,
     741,  1885,  1886,  1894,  1904,  1897,   512,  1898,  1214,   539,
    1899,  3526,  1900,  1909,  1934,  1936,  1937,  1939,  2029,   539,
    1942,   539,  1973,   504,   539,   524,  2986,  1913,  1915,  1965,
     539,  -676,   539,  1974,  1984,   634,  3475,  2005,  3542,  2002,
    -676,  1981,  2030,  2011,   539,  2014,   512,  2015,   504,   539,
    3087,  2016,   512,   539,   539,   539,   539,  2031,   539,   539,
     634,   891,  2034,  2024,  3676,  2037,   628,  2021,   512,    25,
      26,    27,  1629,    90,  2068,   525,  1228,   526,  1372,  1372,
    1372,  2033,  2071,  2073,  2075,  1952,  2074,  2100,  2076,  2981,
    2093,   628,  2138,  1225,   527,  2111,  2112,  3040,  2139,  2145,
     528,  2114,  2159,   529,  2160,  2161,  2162,   754,  2183,  2186,
    2170,  2197,  2195,  1226,  2196,  2198,  2199,  2200,  2217,  1288,
    2221,  2222,  2225,  2228,  2233,   755,  1229,  2232,  2296,  2300,
    2234,   512,  3210,  2305,  1230,    32,  2307,  2317,  2320,   512,
    2313,  2319,  2321,  2336,  2335,  2338,  1231,  2341,  2342,  2343,
    2345,   512,   512,   512,   512,  1953,   512,  1227,  2350,  1850,
    1852,  2346,   745,   875,  1853,  1854,  2352,   512,  1215,  2349,
     512,  2382,  2373,  2390,    37,   512,  2351,  1970,  1232,  2353,
    1945,  2361,  2421,  2362,  1969,  2428,  1906,   512,  3208,  2452,
    2459,  2439,  -676,  1954,  1955,  1956,  2429,  1957,  1958,  1959,
    1960,  1961,  1962,  2430,  2440,   512,  2441,    39,  1372,  2457,
     988,  2479,  2471,  2472,  2481,  2499,  2480,  2483,    42,   512,
     512,  2482,   512,  2492,  2494,  2506,   539,  2929,  1233,  2515,
    2523,  2516,  1217,  2521,  1234,  2548,  2565,  2568,  2570,  2572,
     636,  -798,  2522,  2589,  2575,  2577,  2579,   753,  2590,  2592,
    2593,  2596,  2600,   891,  2601,  1228,  1809,  1235,  2462,  2602,
     781,  -742,  1236,  2023,   782,  2606,  -742,  2607,  2610,  3282,
    2604,   512,   668,  2629,  1913,  1915,  2631,  2660,  1237,  2644,
     512,   512,   512,  2650,  2651,  1495,  2652,  2668,  2658,   512,
    2672,  2659,   512,  2661,  2678,  2673,  2676,   512,   504,  2809,
    2691,  3404,  2692,  2688,  1505,  1229,   518,  2696,   539,  2695,
     634,  2700,  2705,  1230,   512,  2707,  1617,  2715,  2724,   754,
    2716,  3230,  2735,  2732,  2738,  1231,  2741,  2755,  2742,  2743,
     745,  2756,  2744,  2767,  2769,  1219,  2774,  2765,   875,  2784,
    -742,  2812,  2793,  2778,  2791,  2794,  2806,  1684,  2855,  2687,
    2797,  2807,   989,  2819,  2814,  1704,  2835,  1232,  2820,  2840,
    2857,   745,  2835,  2874,  2876,  2880,  2878,  2888,  1954,  1955,
    1956,  2921,  1957,  1958,  1959,  1960,  1961,  1962,  2894,  2937,
    2895,  3001,  2901,  3008,   741,   741,  3002,  3003,  -742,  3012,
    3023,   741,  3020,  3031,  3019,  3024,  3477,   755,  3037,  3046,
    2299,   539,  3039,  3072,   512,  3047,  3078,   512,  3133,  3124,
    1442,  1443,  3052,  1234,  3074,  3130,  3171,  3083,  3174,  3181,
    3132,  3183,   891,  3187,   512,  1225,  3089,  3090,   512,  3109,
    3347,  3116,   512,   512,   512,  3129,  1235,  3172,   512,   512,
     512,  3663,   512,  2882,  3188,  1226,  3189,  1065,  3197,  3195,
    1945,  3196,  3201,  3205,  1946,  1947,   539,  1237,  1948,  1949,
    1950,   512,  2599,   512,  2148,  3206,  3207,  3215,  3218,  1372,
    3220,  2981,  3237,  1372,  2984,  1372,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,  3221,  1065,  3225,  1227,
    1945,  2865,  1444,  1445,  1946,  1947,   505,   513,  1948,  1949,
    1950,   538, -1389, -2110, -2111,   512,   538,  3247,   512,  3238,
     638,   512,   643,   643,  3464,  3248,  3466,   645,   538,   650,
   -2112, -2113,   650,  3336,   512,   671,   674,  3239,  3256,   674,
    1850,  1852,   538,   538, -2114,  1853,  1854,   512, -2115,  3476,
   -2116,  3258,  3479, -2117, -2118,   875, -2119, -2121, -2122,   756,
   -2123,  3474, -2124, -2125, -2126, -2127,   512,  1446,  1447,  1448,
    1449,  1450,  1451, -2128,   539,  1452,  1453, -2130,  3494,  3495,
     875, -2131,  3586,   512, -2132, -2133,  1554,   638,   638, -2134,
     512,   512,   512,   512, -2135,  3259,   891,  1228, -2136,   671,
   -2137, -2138,  3009,  3274,   674,   538,   674,   674,   674,   512,
   -2139,   512,  3620, -2140, -2141,   745, -1390,  3616,  3266,  3251,
    3276,  3277,  3280,  3286,  3287,   512,  3290,   891,   891,  3294,
    3033,  2986,  3292,  3035,  3298,  3300,   875,  3301,  2885,  2886,
    1442,  1443,  3304,   891,   636,  3307,  3312,  1229,  3305,  1288,
    3317,  2765,  3139,  3332,   512,  1230,  3335,  3344,  3359,  3381,
    3361,  3382,  3386,  3389,  3392,  3394,  2938,  1231,  3406,  3407,
    3414,  3416,  3422,  1952,  3423,  3431,  3428,  1495,  3432,  3435,
    3446,  2991,  2992,  2993,  2994,  2995,  2996,  2997,  2998,  2999,
    3000,  1454,  1455,  3447,  3448,  3461,  3468,  3462,  3465,  1232,
    3469,  3471,   504,  3478,  3486,   512,  3481,  2831,  3497,   539,
     512,  3493,   539, -2142,   634,  3504,   512,  2020,   745,  3590,
    3512,  3214,  1444,  1445,  3531,  3535,  3537,  3541,  3538,  3554,
     512,  3556,  3563,  3570,  3562,  3564,   512,  3583,  3573,  3575,
    3605,  3606,  3577,  1953,  3580,   628,   533,  3585,  3112,   512,
     512,  3581,  3591,  1628,  3600,  1234,  1629,   512,   642,   642,
    1630,  1631,  3594,  3601, -2142, -2142, -2142,  3610,  3613,  3615,
    3619,  3622,  3627,  3633,   512,  3634,  3635,  3639,  1235,   875,
    3636,  3640,  3642,  1953,  3657,  3647,  3648,  1446,  1447,  1448,
    1449,  1450,  1451,  1639,  3659,  1452,  1453,  3649,  3685,  1237,
    1640,  3661,  3662,  3695,  3698,  3700,  3721,   784,  3703,  1212,
    3706,  1456,  1457,  3726,  2984,  1213,  3725,  3733,  3697,  3696,
    3744,  3745,  3751,  3760,  1225,  1641,  3763,  3765,  3771,  3775,
    3774,  3787,  3785,  3793,  3798,  3228,   891,  1177,  2259,  2936,
    2940,  2627,  2156,   541,  1226,  2667,   779,   998,   539,  2718,
     512,  3281,   539,   539,   539,  3006,  3740,  3631,  3402,  3694,
    3701,  3653,  3734,  3445,  1772,  2634,   512,  3691,  3030,  2609,
    2905,  3699,  2941,  3690,  2605,  1844,  2870,  1901,  3566,   512,
    1879,   539,  1911,  1628,  3518,   988,  1629,  2869,  1227,   875,
    1630,  1631,  3652,  3758,  3612,  3547,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,  3794,  3800,  3421,  3784,
    3773,  1454,  1455,  3766,   512,  3705,  3797,   745,  1214,  1005,
     512,  3611,  1642,  1639,  1288,  2833,  2563,  3492,   512,  2564,
   -2142,  3589,  3325,  3756,  2842,  3757,  2535,  2595,  2224,  2581,
    1700,  1643,  1552,  1744,  1553,  3209,  1644,  2746,  1745,  3660,
    2591,  2192,  3576,  3263,   512,  1641,  1954,  1955,  1956,  3467,
    1957,  1958,  1959,  1960,  1961,  1962,  2223,  1749,   629,  2567,
     741,  3081,  3309,  2461,  1007,  1021,  1519,  2740,  2739,  3408,
    2768,   875,   891,  1892,  1506,  1647,  1228,  1508,  1512,  1513,
    3578,   512,  3579,  2020,  3720,  2490,  1954,  1955,  1956,  2584,
    1957,  1958,  1959,  1960,  1961,  1962,  2776,  2475,  3173,  1993,
    2529,  2817,  2155,  2986,  2469,   653,   674,   769,   674,  2462,
       0,  2497,     0,   674,     0,     0,   674,     0,     0,   512,
       0,  1456,  1457,     0,   512,   538,  1229,     0,     0,  1650,
       0,     0,     0,     0,  1230,     0,     0,     0,     0,     0,
       0,  1458, -2142,     0,  1442,  1443,  1231,  1225,     0,     0,
     512,     0,     0,     0,     0,   895,   538,   538,     0,  3429,
    3790, -2142,     0,     0,     0,     0, -2142,  1226,  1215,  2984,
     512,   512,     0,     0,     0,     0,     0,     0,  1232,     0,
       0,     0,     0,   512,     0,     0,     0,   891,   741,   512,
       0,   512,     0,     0,   512,     0,   997,   513,   643,     0,
     636,     0,     0,     0,   505, -2142,   674,     0,     0,   512,
       0,  1227,  2927,     0,     0,   638,  1025,  1025,     0,     0,
    2928,  1025,  1048,     0,     0,     0,  1444,  1445,  2261,     0,
     891,  1652,  1217,     0,  1234,     0,   512,   512,     0,     0,
     512,     0,   891,     0,     0,     0,     0,     0,   650,   650,
     539,   650,     0,     0,     0,     0,     0,  1235,   504,  1650,
     741,   741,  2262,     0,     0,   674,     0,     0,  3419,  3420,
     634,   538,   891,     0,     0,     0,     0,     0,  1237,   891,
       0,  2929,     0,     0,     0,     0,     0,     0,    10,     0,
       0,  1446,  1447,  1448,  1449,  1450,  1451,     0,     0,  1452,
    1453,     0,     0,     0,     0,     0,     0,     0,   677,  1228,
       0,     0,     0,   882,     0,     0,   512,   891,     0,     0,
     891,     0,     0,     0,   512,   891,  1372,     0,  3551,     0,
       0,  3555,     0,     0,     0,  1219,     0,     0,   674,  1653,
       0,   674, -2142, -2142, -2142,  3405,  1657,  1658,  1659,  1660,
    1661,  1662,     0,     0,     0,     0,     0,   741,     0,  1229,
     741, -2142,    21,   512,     0,  3412,  3413,  1230,     0,     0,
     884,     0,     0,   771,     0,   774,     0,   778,     0,  1231,
       0,     0,  2930,   674,     0,     0,     0,     0,     0,  3433,
     674,   674,   674,   674,   674,     0,     0,     0,     0,     0,
     512,     0,  3515,  3517,     0,     0,   674,     0,     0,     0,
       0,  1232,     0,     0,     0,  1454,  1455,     0,     0,     0,
    3303,     0,     0,     0,     0,     0,     0,     0,  2462,     0,
       0,     0,   996,     0,   642,     0,   875,     0,     0,     0,
     636,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1053,     0,  1234,  3561, -2142,
       0,     0,  3565,     0,     0,     0,  1657,  1658,  1659,  1660,
    1661,  1662,     0,     0,     0,     0,  1148,     0,   512,   636,
    1235,     0,     0,     0,     0,     0,     0,     0,   504,     0,
       0,     0,   512,   512,   512,     0,     0,    25,    26,    27,
     634,  1237,   512,  2931,     0,     0,  2932,     0,     0,     0,
       0,     0,     0,     0,   741,   741,     0,     0,     0,   539,
       0,  1030,     0,   875,   539,  1456,  1457,  1031,     0,  3704,
       0,  3551,   512,     0,     0,   512,  1628,   504,     0,  1629,
    1372,  2984,     0,  1630,  1631,     0,     0,     0,     0,   634,
     539,    21,     0,     0,     0,     0,     0,     0,   741,   636,
     741,     0,   512,    32,   512,     0,     0,     0,     0,     0,
     539,   539,     0,     0,     0,     0,  1639,     0,     0,     0,
       0,     0,     0, -2142,  1032,  1025,  1048,     0,   674,     0,
       0,  1531,     0,     0,   539,     0,     0,  1025,  1025,     0,
       0,   538,    37,   882,     0,     0,     0,   638,  1641,     0,
       0,     0,     0,     0,   638,  1783,     0,   504,   891,     0,
       0,     0,    38,     0,   538,   512,     0,     0,     0,   634,
       0,     0,   512,     0,     0,    39,   539,  3551,  3767,  1590,
       0,     0,     0,     0,  3702,     0,    42,   741,   741,     0,
       0,     0,     0,     0,     0,   512,  1033,     0,     0,     0,
     884,     0,    43,     0,     0,     0,   741,   741,     0,     0,
       0,     0,     0,  3789,  2507,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3516,   512,    44,   538,     0,     0,
       0,  3799,     0,     0,  1034,  3731,    25,    26,    27,   512,
     668,     0,   741,     0,     0, -2142,     0,   512,     0,     0,
    1035,     0,     0,     0,     0,     0,   512,     0,     0,     0,
     741,  1036,     0,     0, -2142,     0,     0,     0,     0, -2142,
    3686,     0,     0,  1692,  1628,     0,  1694,  1629,     0,     0,
       0,  1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,     0,
     538,   538,     0,  1037,     0,     0,     0,     0,   674,     0,
       0,     0,    32,  1637,     0,     0,     0,     0, -2142,     0,
       0,     0,     0,     0,  1639,   786,     0,   788,     0,     0,
    1531,  1640,   796,     0,     0,   797,     0,     0,     0,     0,
     674,  1775,     0,   891,     0,   882,     0,     0,     0,     0,
    1038,    37,  1065,   674,     0,  3139,  1641,  1039,     0,  1496,
    3140,  3141,  3142,  3143,  3144,  3145,     0,     0,  1516,     0,
     674,     0,  1650,     0,   674,     0,     0,  2322,  1818,     0,
       0,  3146,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,  3147,     0,     0,    42,     0,    21,     0,  3148,
    1040,     0,   884,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,  1041,     0,  1496,
       0,     0,     0,     0,  3149,  1010,     0,     0,     0,     0,
       0,  -676,     0,     0,     0,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -676,     0,    84,     0,   668,
    -676,  1065,     0,  1642,  3139,     0,     0,   885,     0,  3140,
       0,     0, -2142, -2142, -2142,    84,     0,     0,   627,     0,
       0,     0,  1643,     0, -2142,     0,     0,  1644,  1623,   891,
       0,     0,     0,    84,     0,     0,     0,  1626,  1042,     0,
       0,  3147,   744,     0,     0,   539,     0,     0,  3148,     0,
    1645,  1646,     0,  -676,  1675,     0,     0,     0,  1833,     0,
       0,     0,   674,   674,   882,  1685,  1647,  1496,  1496,   674,
       0,  3150,     0,  3149,  -676,     0,     0,     0,     0,     0,
       0,  1873,     0,     0,     0,   627,   627,   761,     0,     0,
    3151,     0,    25,    26,    27,  3152,     0,    84,     0,     0,
     891,     0,     0,  1648,     0,     0,  1649,  1178,     0,     0,
       0,     0,  1890,     0,     0,     0,     0,  1890,  3153,  3154,
    1650,   884,  -676,  1651,     0,   891,     0,     0,     0,     0,
       0,  -676, -2142,     0,  3155,     0,     0,     0,     0,  1657,
    1658,  1659,  1660,  1661,  1662,     0,     0,     0,   895,   895,
       0,     0,  1386,   538,   538,     0,   538,   895,    32,  1392,
    1395,  1397,  1399,  1400,     0,     0,     0,     0,     0,     0,
    3150,  3156,     0,     0,  3157,  1405,     0,     0,     0,     0,
       0,   891,     0,     0,     0,     0,     0,     0,  1953,  3151,
       0,  3158,     0,     0,  3152,     0,     0,    37,     0,     0,
       0,     0,  1065,  1531,  1531,  1945,     0,     0,  1531,  1946,
    1947,   505,     0,  1948,  1949,  1950,     0,   539,     0,     0,
       0,     0,  1652,     0,  1025,     0,  1990,     0,   882,   538,
      39,  2788,     0,  3155,   674,     0,     0,   638,     0,     0,
     638,    42,     0,     0,     0,   638,     0,  3262,   638,     0,
       0,     0,     0,   638,     0,   538,     0,    43,   538,   882,
     882,     0,     0,     0,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,     0,  2063,
       0,    44,     0,  -676,  2067,   884,   887,  1953,     0,     0,
    3159,     0,     0,     0,     0,   668,     0,  1837,  1065,     0,
       0,  1945,     0,     0,     0,  1946,  1947,   885,     0,  1948,
    1949,  1950,     0,     0,     0,     0,   884,   884,     0,     0,
     895,     0,     0,     0,   891,     0,     0,  2789,     0,     0,
    1653,     0,   884,  1654,  1655,  1656,     0,  1657,  1658,  1659,
    1660,  1661,  1662,     0,     0,     0,     0,     0,     0,     0,
       0,   781,     0,     0,  1175,   782,     0,  2478,     0,   891,
       0,     0,     0,     0,     0,     0,     0,  1521,     0,     0,
       0,     0,  2153,     0,   674,     0,   674,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3159,
       0,   674,  2179,     0,     0,     0,     0,     0,  3160,     0,
       0,  3161,  3162,  3163,  1531,  3164,  3165,  3166,  3167,  3168,
    3169,     0,    25,    26,    27,     0,  1932,     0,  1952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   674,
       0,   538,     0,     0,   891,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1775,   538,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   538,  2241,   538,  2245,
       0,   538,     0,     0,     0,     0,     0,   538,   882,   538,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
     895,   538,     0,     0,     0,   895,   538,     0,  1953,     0,
     538,   538,   538,   538,     0,   538,   538,  3160,     0,   885,
   -2142, -2142, -2142,     0,  3164,  3165,  3166,  3167,  3168,  3169,
       0,     0,     0,    84,  1952,   674,     0,    37,     0,     0,
     674,   674,   674,   674,     0,   884,   891,   674,     0,     0,
       0,  1030,     0,     0,     0,   888,  1065,  1031,     0,  1945,
       0,     0,  2331,  1946,  1947,     0,     0,  1948,  1949,  1950,
      39,     0,     0,     0,     0,     0,     0,  1030,     0,     0,
       0,    42,     0,  1031,     0,  3100,     0,     0,     0,  1764,
      84,   744,     0,     0,     0,     0,     0,    43,     0,     0,
    1065,     0,  1791,  1945,  1953,     0,   887,  1946,  1947,     0,
    2861,  1948,  1949,  1950,  1032,     0,     0,     0,     0,  2152,
       0,    44,     0,  1815,     0,     0,     0,     0,     0,  3101,
       0,     0,  1006,     0,   882,   668,     0,     0,     0,     0,
    1032,     0,     0,  1018,   891,  1531,  1531,  1531,  1531,  1531,
    1531,     0,     0,  1531,  1531,  1531,  1531,  1531,  1531,  1531,
    1531,  1531,  1531,     0,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   538,     0,   744,  1033,   761,   885,     0,
       0,   884,     0,    21,     0,   674,  1200,     0,     0,     0,
       0,     0,     0,     0,   638,     0,     0,     0,     0,     0,
     638,     0,  1033,     0,     0,   538,     0,     0,     0,     0,
     538,  1954,  1955,  1956,  1034,  1957,  1958,  1959,  1960,  1961,
    1962,     0,     0,     0,     0,     0,     0,     0,  1628,     0,
    1035,  1629,     0,     0,     0,  1630,  1631,     0,     0,   882,
    1034,  1036,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1838,  1839,     0,    84,   538,  1035,     0,  1857,  2488,
       0,   890,  1952,   538,     0,     0,     0,  1036,  1639,     0,
       0,     0,     0,  1037,     0, -2142,     0,     0,     0,     0,
       0,     0,   882,     0,  1531,  1531,     0,     0,   887,     0,
    2862,     0,     0,     0,   882,  1201,   884,     0,     0,  1037,
    1641,  2063,    25,    26,    27,     0,  1952,  1954,  1955,  1956,
       0,  1957,  1958,  1959,  1960,  1961,  1962,     0,     0,     0,
    1038,  2007,     0,     0,   882,     0,     0,  1039,    25,    26,
      27,   882,  1953,     0,   638,     0,     0,     0,     0,   884,
       0,     0,   885,  1496,     0,   888,  1038,  2384,   538,     0,
       0,   884,     0,  1039,     0,     0,     0,     0,     0,   638,
       0,     0,     0,  2179,     0,     0,  2798,     0,    32,   882,
    1040,     0,   882,   885,   885,     0,  1953,   882,     0,     0,
       0,   884,     0,     0,     0,     0,  1919,  1041,   884,   885,
       0,     0,     0,     0,    32,     0,  1040, -2142,     0,     0,
       0,   891,     0,   538,     0,     0,  1531,    37,     0,   538,
       0,     0,     0,  1041,     0,     0, -2142,     0,     0,     0,
       0, -2142,     0,  2001,     0,  1833,   884,     0,     0,   884,
       0,  1920,     0,    37,   884,     0,     0,     0,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,  1496,
    1921,    42,     0,     0,     0,     0,     0,   887,  1042,     0,
   -2142,     0,     0,  1202,     0,     0,    39,    43,     0,     0,
       0,  1922,     0,     0,     0,  1923,     0,    42,     0,     0,
       0,     0,     0,     0,  1042,     0,     0,     0,  1833,  2008,
       0,    44,     0,    43,     0,     0,   674,  1924,   891,     0,
    1925,     0,    84,     0,     0,  2863,     0,     0,  1833,   674,
     674,   538,     0,   674,  1650,     0,   891,    44,  1926,     0,
    1065,     0,     0,  3139,   674,     0,     0,   674,  3140,     0,
       0,   668,   674,     0,     0,   627,     0,   888,     0,     0,
       0,     0,   627,     0,  2713,  1954,  1955,  1956,     0,  1957,
    1958,  1959,  1960,  1961,  1962,     0,     0,     0,     0,     0,
    3147,   890,   895,  2154,     0,  2157,     0, -2142,     0,     0,
       0,     0,     0,     0,     0,  1593,  1833,  1833,     0,  1833,
    2173,     0,   885,     0,     0,     0,  1597,     0,     0,  1954,
    1955,  1956,  3149,  1957,  1958,  1959,  1960,  1961,  1962,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
       0,  1927,     0,  1611,     0,     0, -2142,     0,  2210,  1928,
       0,   887,     0,     0,     0,     0,     0,     0,  2745,     0,
       0,     0,     0,     0,     0,     0,     0,   674,   674,   674,
    1929,     0,     0,     0,     0,     0,   538,     0,  1531,   538,
       0,     0,   887,   887,   538,     0,     0,     0,  3496,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   887,     0,
    1930,  2063,     0,     0,     0,     0,     0,  2639,  1628,     0,
     882,  1629,     0,     0,     0,  1630,  1631,     0,     0, -2142,
       0,     0,   761,   761,     0,   761,     0,     0,     0,  1531,
    1531,     0,     0,     0,  2304,     0,   888,     0, -2142,  2308,
    2310,  2311,  2312, -2142,  1030,     0,  2314,     0,  1639,     0,
    1031,     0,  2665,     0, -2142, -2142,     0,     0,   885,     0,
    2669,  1657,  1658,  1659,  1660,  1661,  1662,   884,     0,     0,
       0,     0,  2682,     0,     0,     0,     0,     0,     0,     0,
    1641,     0, -2142,   890,  1531,     0,     0,     0,     0,     0,
       0,  2866,     0,     0,  2179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1032,     0,     0,
       0,   674,     0,     0,     0,   538,     0,     0,     0,   538,
     538,   538,     0,     0,     0,  1833,  1775,  1833,     0,  1873,
       0,     0,     0,  1496,     0,     0,  1953,     0,  2722,     0,
    2723,     0,     0,     0,  2728,     0,  2731,     0,   538,     0,
    2939,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   885,     0,     0,     0, -2142,     0,  1033,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,   887,  2331,     0,  2447,   674, -2142,     0,   674,     0,
     888, -2142,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1775,     0,     0,     0,     0,   885,  1034,     0,     0,
       0,     0,     0,     0,  1873,     0,     0,     0,   885,     0,
       0,   888,   888,  1035,     0,     0,     0,     0, -2142,     0,
   -2142,     0,   884,  1833,  1036,     0,     0,   888,     0,     0,
       0,     0,   890,     0,  1531,     0,     0,     0,   885,     0,
     538,     0,     0,     0,     0,   885,     0,   674,   674,   674,
     674,     0,     0,     0,     0,     0,  1037,     0,     0,  1531,
       0,     0,  1531,     0,     0,     0,   538,     0,   895,     0,
       0,     0,     0,     0,  1650,     0,     0,     0,  1203,     0,
       0,     0,  3091,   885,     0,     0,   885,     0,     0,     0,
       0,   885,     0,     0,     0,     0,     0,     0,    84,     0,
       0,   882,     0,  1038,     0,     0,     0,     0,     0,     0,
    1039,  3114,     0,   638,     0,     0,     0,   887,     0,     0,
       0,     0,     0,     0,     0,     0, -2142,     0,     0,     0,
       0,     0,     0,  3164,  3165,  3166,  3167,  3168,  3169,     0,
       0,     0,     0,     0,     0,     0,     0,  1531,  1531,  1531,
    1531,     0,     0,  1040,     0,     0,     0,     0,   884,     0,
       0,     0,  3180,     0,     0,     0,     0,  2179,     0,     0,
    1041,     0,   882,  2063,     0,   627, -2142,  2988,   627,     0,
       0,     0,     0,   627,     0,     0,   627,  1775,     0,     0,
       0,   627,     0,  1833,     0,     0,   890,   882,     0,     0,
       0,     0,  2665,  3007,     0,    84,   895,   538,  1531,     0,
       0,     0,     0,     0,   674,     0,     0,     0,     0,     0,
     888,     0,     0,     0,     0,     0,     0,   890,   890,   884,
       0,  3229,   887,     0,     0,     0,     0,     0,     0,     0,
       0,  1042,     0,   890,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   882,   884,     0,     0,     0,     0,     0,
       0,  2101,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   887,     0,     0,     0,     0,
       0,     0,     0,     0, -2142,  2670,     0,   887,     0,     0,
       0,  1657,  1658,  1659,  1660,  1661,  1662,     0,  2684,  2686,
    1675,     0,  2690,     0,     0,     0,     0,  1833,     0,     0,
     884,     0,     0,  2698,     0,     0,  2701,   887,     0,     0,
       0,  2706,     0,  2331,   887,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1628,  3279,     0,  1629,   761,
       0,     0,  1630,  1631,     0,  1531,     0,     0,     0,     0,
       0,     0,     0,     0,  3118,     0,     0,     0,     0,     0,
       0,     0,   887,     0,     0,   887,   888,     0,     0,     0,
     887,  3297,     0,     0,     0,  1639,     0,   538,     0,     0,
       0,     0, -2142,     0,     0,   538,     0,     0,     0,     0,
       0,     0,     0,     0,   885,     0,   882,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1641,     0,     0,
       0,  3321,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2752,  2753,  2754,     0,
       0,   882,     0,     0,     0,     0,   890,     0,     0,  1531,
    1531,  1531,  1531,  1531,  1531,  1531,     0,     0,   895,  1531,
    1531,     0,     0,   884,  1531,     0,     0,  1531,     0,     0,
    1531,  1531,  1531,  1531,  1531,  1531,  1531,  1531,  1531,  1531,
       0,     0,  2318,  2801,     0,     0,     0,     0,     0,    84,
       0,   888,     0,     0,     0,     0,   538,     0,   884,     0,
       0,   538,     0,     0,     0,     0,     0,     0,     0,     0,
    1628,     0,     0,  1629, -2142,     0,   882,  1630,  1631,     0,
       0,     0,     0,     0,     0,     0,     0,   538,     0,     0,
       0,  1527,     0, -2142,   888,     0,     0,     0, -2142,     0,
       0,     0,     0,     0,     0,     0,   888,   538,   538,     0,
    1639,     0,     0,     0,     0,     0,     0, -2142,     0,     0,
     674,     0,     0,     0,     0,  3260,   674,     0,  1775,     0,
       0,   538,     0,   884,     0,     0,   888, -2142,     0,   885,
    2877,     0,  1641,   888,     0,     0,   674,     0,  1496,  3459,
       0,     0,   890,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1123,  1123,     0,   882,  1531,
       0,     0,     0,   538,  1025,     0,     0,  1025,     0,     0,
       0,   888,     0,     0,   888,     0,     0,     0,     0,   888,
       0,  1650,   627,     0,     0,     0,     0,     0,   627,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2802,     0,
       0,     0,     0,     0,  1531,  1531,     0,     0,     0,     0,
       0,  3323,     0,     0,  3015,   884,     0,  3018,     0,     0,
    1531,     0,  1531,     0,  1531,     0,     0,     0,     0, -2142,
       0,     0,     0,   887,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3180,     0,     0,     0,     0, -2142,     0,
       0,   674,     0, -2142,     0,     0,   882,   890,     0,     0,
       0,  1741,     0,     0,     0,   885,     0,     0,     0,     0,
    1527,     0,     0,     0,     0,     0,     0,  1611,  1290,  1295,
       0,     0,     0, -2142,     0, -1875,  3054,  3055,  3056,  3057,
     674,     0, -2142,     0,     0,  2101,     0,     0,     0,     0,
     890,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2517,   890,   884,     0,     0,     0,     0,     0,     0,
       0,     0,   627,     0,     0,     0,     0,  3297,     0,     0,
       0,     0,  2988,     0,     0,     0,   885,     0,    84,     0,
       0,     0,   890,     0,     0,  1531,  1650,   627,     0,   890,
       0,     0,  1531,     0,     0,  1531,  1531,     0,     0,     0,
       0,   885,     0,     0,  1531,     0,  1531,  1531,     0,     0,
       0,  1531,     0,     0,     0,     0,     0,     0,     0,  3459,
       0,     0,     0,     0,     0, -1875,     0,   890,     0,     0,
     890, -2142,     0,     0,     0,   890,     0,     0,  1657,  1658,
    1659,  1660,  1661,  1662,     0,     0,     0,     0,   887,     0,
       0,     0,     0,     0,     0,  1775,     0,   885,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3459,   895,
     895,   895,     0, -1875,     0,     0,     0,     0,     0,  1990,
       0,     0,     0,     0,     0,     0,     0, -1875, -2142,     0,
       0,     0, -1875,  3216,     0,  1531,  1531, -1875,     0,  1531,
       0,     0,     0,  1531,     0,     0,  1531,  1531, -1875,   674,
       0,     0,   538, -1875,     0,     0,     0,     0,     0,     0,
       0,     0,   888,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   744,     0,     0,     0,  1502,   674,
       0,  1775,     0,     0,     0, -1875,  1520,     0,  3459,  1522,
       0,  3543,  1533,  1536,  1541,  1544,     0,     0,     0,     0,
       0,     0,     0,   882,     0,     0, -1875,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1531,  1531,
       0,     0,  1531,     0,   887,     0,     0,     0,     0,     0,
       0,     0,     0,  1290,     0,     0, -2142,     0,     0,     0,
     885,     0,   674,  1657,  1658,  1659,  1660,  1661,  1662,   895,
    1594,     0,     0,     0, -1875,     0,     0, -1875,     0,     0,
     884,     0,     0, -1875,     0,     0,     0,     0,  1599,     0,
       0,     0,  2179,  1527,  1527,   885,     0,     0,  1527,  1602,
    1603,  1604,     0,  1608,  1612,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,  1629,   887,     0,     0,  1630,  1631,
     882,     0,   674,     0,     0, -1875,     0,     0,     0,     0,
       0,  1671,     0,     0,     0,     0,   674,     0,   882,     0,
     887,     0,     0,     0,   538,     0,     0,     0,     0, -1875,
       0,  1639,     0,   674,     0,     0,     0,   888, -2142,     0,
       0,     0,  1611,     0,     0,     0,     0,     0,     0,     0,
     885,     0,     0,     0,     0,     0,     0,   884,     0,     0,
       0,     0,     0,  1641,     0,  1719,     0,     0,     0,  1735,
    1740,     0,     0,  1611,     0,   884,   887,     0,   890,     0,
    1123,  1123,     0,     0,     0,     0,     0,   675,  1065,     0,
       0,  1945,     0,     0,  2988,  1946,  1947,     0,     0,  1948,
    1949,  1950,     0,     0,     0,  1065,     0,     0,  3139,     0,
       0,     0,     0,  3140,     0, -1875,     0,  3596,     0,     0,
       0,     0,     0,     0,     0, -1875,     0,     0,    84,  3104,
    1290,     0,     0,     0,     0,     0,  3323,     0,     0,  1290,
       0,     0,   885,     0, -1875,  3147, -1875, -1875,     0,     0,
       0,     0, -2142,     0,     0,  2881,     0,     0,     0,     0,
   -2142,     0,     0,  1290,     0,     0,     0,     0,     0,  3015,
       0,     0,     0,   888,  2194,  3430,     0,  3149,     0, -2142,
       0,     0,     0, -1875, -2142,     0, -1875, -1875, -1875,     0,
       0,     0,     0,     0,     0,  3454,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   887,
       0,     0,     0, -2142,     0,     0,     0,     0,     0,    84,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     885,     0,     0,  3505,   888,     0,     0,     0,     0,     0,
       0,     0,     0,   890,   887,     0,     0,    84,     0,     0,
      84,     0,     0,     0,     0,     0,     0,     0,     0,   888,
       0,     0,     0,     0, -2142,     0,     0,  1650,     0,     0,
       0,     0,     0,     0,  1065,     0,     0,  3139,     0,     0,
       0,     0,  3140, -2142,     0,     0,     0,     0, -2142,     0,
       0,     0,     0,     0,  1952,     0,     0,     0,     0,     0,
    3522,     0,     0,     0,     0,     0,     0,  1611,     0,     0,
       0,     0,     0,     0,  3147,   888,     0,     0,     0,   887,
       0, -2142,     0,     0,     0,     0,     0, -2142,     0,     0,
       0,     0,  3135,  3136,  3137,  3138,     0,     0,     0,  3557,
       0,     0,     0,     0,     0,     0,  3149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   627,     0,     0,  1953,     0,     0,     0,     0, -2142,
       0,     0,  1935,     0,     0,     0,     0,     0,     0,   890,
       0,  1953,     0,     0,     0,  1527,  1527,  1527,  1527,  1527,
    1527,     0,     0,  1527,  1527,  1527,  1527,  1527,  1527,  1527,
    1527,  1527,  1527,     0,     0,  1541,     0,  1541,  1541,     0,
     744,   887,  3604,     0,     0,  1065,     0,     0,  1945,     0,
    1123,  1123,  1946,  1947,     0,     0,  1948,  1949,  1950,     0,
       0,     0,     0,     0,     0,     0,  1123,     0,     0,     0,
       0,     0,     0, -2142,  3597,     0,     0,     0,     0,     0,
     890,     0,     0,     0,     0,     0,     0,     0,   888,     0,
       0,     0, -2142,     0,  2040,     0,  2041, -2142,     0,     0,
       0,     0,     0,     0,     0,   890,     0, -2142,     0,     0,
       0,     0,     0, -2142,  1657,  1658,  1659,  1660,  1661,  1662,
       0,     0,  2078,   888,     0,     0,     0,   885,  2082,  2083,
    2084,  2085,  2086,  2087,  2088,  2089, -2142,     0,     0,   887,
    2098,  2099,     0,     0,     0,  2110,     0,     0,  3684,  2113,
       0,     0,  2121,  2122,  2123,  2124,  2125,  2126,  2127,  2128,
    2129,   890,     0,  2130,  1527,  1527,     0,     0,     0,     0,
    1123,     0,  1290,     0,     0,     0,     0,     0,  3708,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1953,     0,     0,     0,     0,     0,  2158,     0,   888,     0,
      84,     0,     0,     0,     0,     0,     0,  1954,  1955,  1956,
       0,  1957,  1958,  1959,  1960,  1961,  1962,     0,     0,     0,
       0, -2142,     0,     0,   885,     0,     0,     0,  3164,  3165,
    3166,  3167,  3168,  3169,  1603,  1604,     0,     0,     0,  1611,
       0,  3015,   885,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3337,  3338,  3339,  3340,  3341,  3342,
    3343,  1952,     0,     0,  3348,  3349,     0,     0,     0,  3358,
       0,     0,  3360,     0,     0,  3367,  3368,  3369,  3370,  3371,
    3372,  3373,  3374,  3375,  3376,     0,  1527,     0,     0,     0,
     888,     0, -2142,     0,     0,     0,     0,     0,     0,     0,
       0,  3015,     0,     0,   890,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3788,     0,     0,   -46,     0,
       0,  1290,     0,     0,  2292,  2293,     0,  2294,     0,  2101,
       0,  1953,  3795,     0,     0,     0,     0,     0,     0,   890,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     3,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1290,     5,     0,     0,
       0,     0,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     0,   888,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     0,     0,
   -2142,     0,     0,     0,     9,     0,   887,  3164,  3165,  3166,
    3167,  3168,  3169,     0,   890,     0,    10,     0,    11,     0,
       0,     0,     0,     0,     0,    84,    84,     0,     0,    12,
       0,     0,     0,     0,     0,  2395,  2396,     0,  2397,     0,
       0,     0,     0,    13,     0,    14,     0,     0,     0,     0,
       0,     0,     0,     0,    15,     0,     0,     0,     0,     0,
       0,     0,    16,     0,     0,     0,     0,  2423,  2424,     0,
      17,  2158,    18,    19,     0,  3506,     0,  3509,     0,  3511,
       0,     0,     0,     0,     0,     0,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2451,     0,     0,   887,     0,  2456,   890,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
       0,   887,     0,     0,  1290,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    23,  2473,     0,     0,     0,     0,
    1529,  2101,     0,     0,  1954,  1955,  1956,     0,  1957,  1958,
    1959,  1960,  1961,  1962,     0,     0,     0,     0, -1877,    84,
      84,    24,     0,     0,     0,     0,  2486,     0,     0,     0,
       0,  2489,     0,     0,  2491,     0,     0,     0,     0,  1527,
    1527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   890,     0,     0,  3595,     0,    84,
    3598,  3599,  2509,     0,     0,  2512,     0,  2514,     0,  3603,
       0,     0,     0,     0,     0,    84,  3609,     0,     0,    84,
       0,     0,     0,  2518,  2853,    25,    26,    27,     0,     0,
       0,     0,     0,    28,     0,     0,    29,     0,     0,     0,
       0,  1665,     0,  1065,     0,   888,  1945,     0, -1877,     0,
    1946,  1947,     0,     0,  1948,  1949,  1950,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,  1719,  3679,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,  1665,     0,     0,  1740,  2128,
       0,    32,     0,     0,     0,     0, -1877,     0,    33,     0,
    3673,  3674,     0,    34,  3675,     0,     0,  1123,  3678,     0,
   -1877,  3681,  3682,     0,    35, -1877,  2603,     0,     0,  1529,
   -1877,     0,     0,     0,     0,     0,    36,     0,     0,     0,
      37, -1877,     0,     0, -1891,     0, -1877,     0,     0,     0,
       0,     0,   888,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     888,     0,     0,    39,     0,     0,    40,     0, -1877,    41,
       0,     0,     0,     0,    42,  1290,     0,     0,     0,     0,
       0,     0,     0,  3728,  3729,     0,     0,  3730,     0, -1877,
      43,     0,     0,     0,  1527,     0,     0,     0,     0,     0,
       0,    84,     0,     0,     0,     0,     0,     0,  1665,  1065,
       0,     0,  3139,  1665,    44,     0,     0,  3140,     0,  3075,
       0,     0,     0,     0,     0,     0,     0,     0,    45,  2704,
       0,   -46,     0,     0, -1891,     0,     0, -1877,     0,     0,
   -1877,     0,     0,  3093,     0,     0, -1877,     0,     0,  3147,
       0,     0,    84,     0,     0,     0, -2142,     0,     0,  1952,
       0,   890,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3149, -1891,     0,     0,     0,     0,     0, -1877,     0,
       0,     0,  1628,     0,     0,  1629, -1891,     0,     0,  1630,
    1631, -1891,     0,  1634,  1635,  1636, -1891,  2853,  2853,  2853,
    2853,     0, -1877,     0,     0,     0,     0, -1891,     0,     0,
       0,  1637, -1891,     0,     0,     0,     0,     0,     0,  1953,
       0,     0,  1639,     0,     0,     0,     0,     0,     0,  1640,
       0,     0,     0,     0,     0,     0,     0,  3607,     0,     0,
       0,     0,     0,     0, -1891,     0,     0,     0,   890,     0,
       0,     0,  2773,     0,  1641,     0,  2775,  2041,  1527,     0,
     675,     0,     0,  2779,     0, -1891,   890,     0, -2142,     0,
       0,     0,  2787,     0,     0,  2790,     0,  2792,     0,     0,
       0,     0,     0,     0,     0,  2796,     0, -2142, -1877,     0,
       0,     0, -2142,  2803,  2804,     0,     0,     0, -1877,     0,
    2811,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1665,     0,     0, -1891,     0,     0, -1891, -1877,     0, -1877,
   -1877,     0, -1891,     0,     0,     0,     0,     0,  1665,     0,
    1665, -2142,  1529,  1529,  1963,     0,     0,  1529,     0,     0,
       0,  1665,     0,     0,  1665,     0,  2856,     0,     0,  1665,
       0,  1642,  1665,     0,     0,  2871, -1877,     0,     0, -1877,
   -1877, -1877,     0,     0, -1891,     0,     0,     0,     0,     0,
    1643,     0,     0,     0,     0,  1644,  1123,     0,     0,     0,
       0,     0,     0,     0,     0,  1953,     0,     0, -1891,     0,
       0,     0,     0,     0,     0,  1527,     0,     0,  1645,  1646,
       0,     0,  1665,     0,     0,     0,     0,  1665,     0,     0,
    1665,  1665,  1665,     0,  1647,     0,  1665,     0,     0,     0,
    1665,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1954,  1955,  1956,     0,  1957,  1958,  1959,  1960,
    1961,  1962,     0,     0,     0,     0,   675,     0,     0,     0,
       0,  1648,     0,     0,  1649,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1650,     0,
    1528,  1651,     0,     0, -1891,     0,     0,     0,     0,  1665,
       0,     0,     0,     0, -1891,     0,     0, -2142,     0,  2853,
    2853,  2853,  2853,  2853,  2853,  2853,     0,     0,     0,  2853,
    2853,     0,     0, -1891,  2853, -1891, -1891,  2853,     0,     0,
    2853,  2853,  2853,  2853,  2853,  2853,  2853,  2853,  2853,  2853,
       0,     0,     0,     0,     0,     0,     0,  1665,     0,     0,
       0,     0,     0,  3070,  3071,     0,     0,     0,     0,     0,
       0,     0, -1891,  1665,     0, -1891, -1891, -1891,  1665,     0,
    3088,     0,     0,  1065,     0,     0,  3139,     0,     0,     0,
       0,  3140,  3092,     0,     0,  1963,  3094,  3095,     0,     0,
    1652,  3096,     0,     0,     0,     0,  3099,     0,     0,  3102,
    3103,     0,     0,     0,  2294,  1290,     0,     0,  3110,     0,
       0,  1065,     0,  3147,  3139, -2142,     0,     0,     0,  3140,
   -2142,     0,  3164,  3165,  3166,  3167,  3168,  3169,     0,     0,
       0,     0,     0,     0,     0,  1065,     0,     0,  1945,     0,
       0,     0,  1946,  1947,     0,  3149,  1948,  1949,  1950,     0,
       0,  3147,     0,  1065,     0,  1123,  3139,     0, -2142,     0,
       0,  3140,     0,     0,  3680,     0,     0,     0,     0,  3473,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1528,
       0,     0,     0,  3149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3147,     0,     0,     0,     0,  1653,  3204,
   -2142,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,
    1662,  3608,     0,     0,  1527,  1527,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3149,  3223,     0,     0,     0,
    2853,     0,  2853,     0,  2853,     0,     0,     0,     0,     0,
       0,     0, -2142,     0,     0,     0,     0,     0,     0,  3683,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2142,     0,  1665,     0,     0, -2142,     0,     0,     0,
       0,  1963,  1963,     0,  1529,  1529,  1529,  1529,  1529,  1529,
   -2142,     0,  1529,  1529,  1529,  1529,  1529,  1529,  1529,  1529,
    1529,  1529,  1963,     0,     0,     0,     0,     0,     0, -2142,
       0,     0,     0,     0, -2142, -2142,     0,     0,     0,     0,
    3250,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2142,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2142,     0, -2142,     0,     0, -2142,     0,     0,     0,
       0,  1952,     0,     0,     0,  1527,     0,     0,     0,  1953,
    1612,     0,  2853,     0,     0,  2853,  2853,     0,  1665,  1665,
       0,     0,     0,     0,  2853,     0,  1527,  1527,     0,     0,
    1290,  2853,     0,     0,     0, -2142,     0,  2486,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1953,  3314,  3315,
       0,     0,  3316,     0,     0,     0,  1665,     0,     0,     0,
    1665,  1665,  1665,  1665,  1665,  1665,  1665,  1665,     0,     0,
       0,  1953,     0,  1529,  1529,     0,  1665,  1665,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1665,  1953,
       0,  1665,     0,     0,     0,     0,     0,     0,     0,  1665,
    1665,  1665,  1665,  1665,  1665,  1665,  1665,  1665,  1665,     0,
       0, -2142,     0,     0,     0,  2853,  2853,     0,     0,  2853,
    1123,     0,     0,  2853,     0,     0,  2853,  2853,     0,     0,
       0,  3388,     0,     0,     0,  1628,  1665,     0,  1629,     0,
       0,     0,  1630,  1631,  1632,  1633,  1634,  1635,  1636, -2142,
       0,     0,  1528,  1528,     0,  3400,     0,  1528,     0,     0,
       0,     0,     0,     0,  1637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
       0,     0,  1640,     0,     0,     0,     0,     0,     0,     0,
       0, -2142,     0,     0,     0,  1529,     0,     0,  2853,  2853,
       0,     0,  2853,     0,     0,     0,     0,  1641,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2142,
       0,     0,     0,     0,  3453,     0,  3164,  3165,  3166,  3167,
    3168,  3169,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3070,     0,     0,     0,  3470,     0,     0,     0,
    1123,     0,     0,     0,     0,     0,     0, -2142,     0,     0,
    3480,     0,     0,     0,  3164,  3165,  3166,  3167,  3168,  3169,
    1665,  1665,  1665,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1954,  1955,  1956,     0,  1957,  1958,
    1959,  1960,  1961,  1962,     0,     0,     0,     0,  2143, -2142,
       0,     0,     0,     0,  1642,     0,  3164,  3165,  3166,  3167,
    3168,  3169,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1643,     0,     0,     0,     0,  1644,  1123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3533,     0,     0,
       0,  1645,  1646,  1528,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1647,     0,     0,
       0,     0,     0,  1665,  1665,  1665,     0,     0,  1963,  1963,
    1963,  1963,  1963,  1963,     0,     0,     0,  1963,  1963,  1963,
    1963,  1963,  1963,  1963,  1963,  1963,  1963,     0,     0,     0,
       0,  1665,  1665,  3567,  1648,     0,     0,  1649,     0,     0,
       0,     0,     0,  3070,     0,     0,     0,     0,     0,     0,
       0,  1650,     0,     0,  1651,     0,  1123,  1627,     0,  1665,
       0,     0,  1628,     0,  1665,  1629,     0,     0,     0,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,     0,     0,     0,     0,
       0,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1637,  1123,     0,  1665,     0,  1638,  1665,     0,  1665,
       0,     0,  1639,  1963,  1963,     0,     0,     0,     0,  1640,
       0,     0,     0,     0,     0,     0,  3632,  1665,  1529,  1529,
    1665,     0,  1665,     0,     0,     0,  1665,     0,     0,     0,
       0,     0,     0,     0,  1641,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1528,  1528,  1528,  1528,  1528,  1528,
       0,  1665,  1528,  1528,  1528,  1528,  1528,  1528,  1528,  1528,
    1528,  1528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1642,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3717,  3717,     0,     0,     0,     0,     0,     0,
    1643,     0,     0,     0,     0,  1644,     0,     0,     0,     0,
       0,  1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,
    1659,  1660,  1661,  1662,     0,     0,     0,     0,  1645,  1646,
       0,  1938,     0,     0,     0,     0,     0,     0,  1628,     0,
       0,  1629,  3717,     0,  1647,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1665,     0,     0,     0,     0,  1637,     0,     0,
       0,   542,  2783,     0,     0,     0,     0,     0,  1639,     0,
       0,  1648,     0,     0,  1649,  1640,     0,     0,     0,     0,
       0,     0,     0,  1529,     0,     0,     0,     0,  1650,  3717,
       0,  1651,     0,  1528,  1528,     0,     0,     0,     0,     0,
    1641,     0,     0,  1628,     0,     0,  1629,     0,     0,     0,
    1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,   543,     0,
       0,  1665,     0,  1665,     0,     0,     0,  1665,     0,     0,
       0,     0,  1637,     0,   544,  1665,     0,     0,  1665,     0,
    1665,     0,     0,  1639,  1665,   545,     0,  1963,  1963,     0,
    1640,  1665,  1665,     0,     0,     0,     0,     0,     0,  1665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1641,     0,     0,     0,     0,
       0,     0,     0,     0,   546,     0,     0,     0,     0,     0,
    1652,     0,     0,     0,   547,     0,     0,  1642,     0,     0,
    3170,     0,     0,     0,  1665,     0,   548,     0,     0,     0,
       0,   549,     0,     0,     0,  1528,  1643,     0,     0,  1665,
       0,  1644,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   550,     0,  1645,  1646,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1529,     0,     0,
    1647,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1642,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   551,     0,     0,     0,
     552,  1643,     0,     0,     0,     0,  1644,  1648,  1653,     0,
    1649,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,
    1662,     0,     0,     0,  1650,     0,     0,  1651,     0,  1645,
    1646,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1647,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1648,     0,     0,  1649,   555,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1650,
       0,     0,  1651,  1963,  1529,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     556,     0,     0,   557,   542,     0,  1652,     0,  1665,  1665,
       0,     0,   558,     0,     0,   559,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1665,     0,     0,     0,
    1665,     0,  1665,  1665,  1665,   560,     0,  1665,     0,     0,
    1665,  1665,     0,     0,     0,     0,     0,     0,  1665,   561,
       0,     0,     0,     0,     0,     0,   562,     0,     0,     0,
       0,   543,     0,     0,     0,     0,   563,     0,     0,     0,
       0,     0,   564,  3170,  3170,  3170,  3170,   544,     0,     0,
       0,  1652,     0,     0,     0,     0,     0,     0,   545,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1528,  1528,
     565,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1653,     0,     0,  1654,  1655,  1656,
       0,  1657,  1658,  1659,  1660,  1661,  1662,   546,     0,     0,
       0,  2072,     0,     0,     0,     0,     0,   547,     0,     0,
       0,     0,  1665,     0,     0,     0,     0,     0,  1963,   548,
       0,     0,     0,  2854,   549,     0,     0,     0,     0,     0,
       0,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   550,     0,     0,  1665,  1653,
       0,     0,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,
    1661,  1662,     0,     0,     0,     0,  2072,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1963,     0,     0,     0,     0,     0,     0,     0,     0,   551,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1665,  1665,  1665,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3170,  3170,  3170,  3170,  3170,
    3170,  3170,     0,  1529,  1529,     0,  3170,  3170,     0,     0,
       0,     0,     0,     0,     0,     0,  3170,     0,  3170,     0,
       0,     0,   553,     0,     0,  3170,  3170,  3170,  3170,  3170,
    3170,  3170,  3170,  3170,  3170,     0,     0,     0,   554,   555,
       0,     0,     0,  1528,     0,     0,  1665,     0,     0,     0,
       0,     0,  1628,     0,     0,  1629,     0,     0,  1665,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,     0,     0,  1528,     0,
       0,     0,     0,   556,     0,     0,   557,     0,     0,     0,
       0,  1637,     0,     0,     0,   558,     0,     0,   559,     0,
       0,     0,  1639,     0,     0,     0,     0,     0,     0,  1640,
       0,     0,     0,     0,     0,     0,     0,     0,   560,     0,
       0,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   561,     0,  1641,     0,     0,     0,  1665,   562,
       0,     0,     0,     0,     0,     0,     0,     0,  1665,   563,
       0,     0,     0,     0,  1529,   564,     0,     0,     0,     0,
       0,     0,  1963,  1963,     0,     0,  2854,  2854,  2854,  2854,
       0,     0,     0,     0,  3170,  1529,  1529,  3170,     0,  3170,
       0,     0,     0,   565,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1528,     0,     0,
       0,  1642,     0,     0,     0,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1643,     0,     0,     0,     0,  1644,     0,     0,  1963,     0,
       0,     0,     0,  3170,     0,     0,  3170,  3170,     0,     0,
       0,  3170,     0,  1963,  1963,     0,     0,  3170,  1645,  1646,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1647,     0,     0,     0,     0,     0,
    1665,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1648,     0,     0,  1649,     0,     0,     0,     0,     0,
       0,  3170,  3170,  3170,     0,     0,  3170,     0,  1650,  3170,
    3170,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
    1628,     0,     0,  1629,  1528,     0,     0,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1665,     0,     0,     0,  1637,
       0,     0,     0,     0,     0,     0,  3170,  3170,  3170,     0,
    1639,     0,     0,     0,     0,  1628,     0,  1640,  1629,     0,
       0,     0,  1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1641,     0,  1637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
    1652,     0,  1640,     0,     0,     0,     0,     0,  2854,  2854,
    2854,  2854,  2854,  2854,  2854,     0,     0,     0,  2854,  2854,
       0,     0,     0,  2854,     0,     0,  2854,  1641,     0,  2854,
    2854,  2854,  2854,  2854,  2854,  2854,  2854,  2854,  2854,  3377,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1642,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1643,     0,
       0,     0,     0,  1644,     0,     0,     0,     0,  1653,     0,
       0,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,
    1662,     0,     0,     0,  1642,  2394,  1645,  1646,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1647,  1643,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1528,     0,
       0,  1645,  1646,     0,     0,     0,     0,     0,     0,  1648,
       0,     0,  1649,     0,     0,     0,     0,  1647,     0,     0,
       0,     0,     0,     0,     0,     0,  1650,     0,     0,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1528,  1528,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1648,     0,     0,  1649,     0,  2854,
       0,  2854,     0,  2854,     0,     0,     0,     0,     0,     0,
       0,  1650,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1528,     0,     0,     0,     0,     0,
       0,  2854,     0,     0,  2854,  2854,     0,     0,     0,     0,
       0,     0,     0,  2854,     0,  1528,  1528,     0,     0,     0,
    2854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1653,     0,     0,  1654,
    1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,
       0,     0,     0,  2477,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,
    1659,  1660,  1661,  1662,  2854,  2854,  1828,     0,  2854,     0,
       0,     0,  2854,     0,     0,  2854,  2854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,  1062,   518,  1063,  1064,  1065,  1066,  1067,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,  2854,  2854,  1068,
       0,  2854,   125,   126,   127,     0,   128,   129,   130,   131,
     132,   133,   134,   135,  1069,   137,  1070,  1071,     0,   140,
     141,   142,   143,   144,   145,  1072,   610,   146,   147,  1073,
    1074,   150,     0,   151,   152,   153,   154,   611,     0,   612,
       0,  1075,   158,   159,   160,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
    1076,  1077,   185,  1078,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   835,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,  1079,   214,   215,   216,   217,   218,   613,  1080,   220,
       0,   221,   222,  1081,   224,     0,   225,     0,   226,   227,
      21,   228,   229,   230,   231,   232,   233,     0,   234,     0,
       0,     0,  1082,  1083,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1084,  1085,     0,  1086,
       0,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1087,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1088,   311,  1089,
     313,   314,   315,     0,   316,  1090,   317,   318,   319,   320,
    1091,   616,   322,  1092,   324,   325,   326,     0,   327,   328,
       0,     0,  1093,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   618,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,    25,    26,    27,     0,   348,
     349,   619,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,  1094,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1095,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    32,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,   413,     0,   414,  1096,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   621,   432,     0,   433,   434,
      37,   435,   436,   437,   438,   439,   440,   441,     0,  1097,
    1098,     0,     0,     0,   444,   445,   622,   447,   623,  1099,
     449,   450,   624,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,    39,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   625,  1100,     0,   471,   472,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
      43,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,  1101,     0,    44,     0,     0,     0,     0,  1102,
    1103,  1104,     0,     0,     0,     0,  1105,     0,  1106,  3293,
       0,     0,     0,     0,  1107,  1108,     0,     0,     0,     0,
    1109,  1110,   113,  1062,   518,  1063,  1064,  1065,  1066,  1067,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
    1068,     0,     0,   125,   126,   127,     0,   128,   129,   130,
     131,   132,   133,   134,   135,  1069,   137,  1070,  1071,     0,
     140,   141,   142,   143,   144,   145,  1072,   610,   146,   147,
    1073,  1074,   150,     0,   151,   152,   153,   154,   611,     0,
     612,     0,  1075,   158,   159,   160,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,  1076,  1077,   185,  1078,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   835,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,  1079,   214,   215,   216,   217,   218,   613,  1080,
     220,     0,   221,   222,  1081,   224,     0,   225,     0,   226,
     227,    21,   228,   229,   230,   231,   232,   233,     0,   234,
       0,     0,     0,  1082,  1083,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1084,  1085,     0,
    1086,     0,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1087,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1088,   311,
    1089,   313,   314,   315,     0,   316,  1090,   317,   318,   319,
     320,  1091,   616,   322,  1092,   324,   325,   326,     0,   327,
     328,     0,     0,  1093,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   618,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,    25,    26,    27,     0,
     348,   349,   619,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,  1094,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1095,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    32,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,   413,     0,   414,  1096,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   621,   432,     0,   433,
     434,    37,   435,   436,   437,   438,   439,   440,   441,     0,
    1097,  1098,     0,     0,     0,   444,   445,   622,   447,   623,
    1099,   449,   450,   624,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,    39,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   625,  1100,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,    43,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,  1101,     0,    44,     0,     0,     0,     0,
    1102,  1103,  1104,     0,     0,     0,     0,  1105,     0,  1106,
       0,     0,     0,     0,     0,  1107,  1108,     0,     0,     0,
       0,  1109,  1110,  1251,  1062,   518,  1063,  1064,  1065,  1066,
    1067,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,  1252,   122,   123,   124,     0,     0,     0,  1253,     0,
       0,  1068,     0,     0,  1254,   126,   127,     0,   128,   129,
     130,  1255,   132,   133,   134,   135,  1069,  1256,  1070,  1071,
       0,   140,   141,   142,   143,   144,   145,  1072,   610,   146,
     147,  1073,  1074,   150,     0,   151,   152,   153,   154,   611,
       0,  1257,     0,  1258,   158,   159,   160,   161,   162,  1259,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,  1260,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,  1076,  1077,   185,  1078,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,  1261,     0,   198,   199,   835,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,  1079,   214,   215,   216,   217,   218,   613,
    1080,   220,     0,   221,   222,  1081,   224,     0,   225,     0,
     226,  1262,     0,  1263,   229,   230,  1264,  1265,   233,     0,
     234,     0,     0,     0,  1082,  1083,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,  1266,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,  1267,   259,   260,   261,   262,   263,   264,  1084,  1085,
       0,  1086,     0,   268,  1268,  1269,   271,  1270,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,  1271,   281,
    1272,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1273,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1088,
    1274,  1089,   313,   314,   315,     0,   316,  1090,   317,   318,
    1275,   320,  1091,   616,   322,  1092,   324,   325,   326,     0,
     327,   328,     0,     0,  1093,   330,   331,     0,     0,   332,
     333,  1276,   335,  1277,   618,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   619,  1278,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,  1094,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,  1279,   388,   389,
     390,  1095,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,  1280,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,  1281,     0,   414,  1096,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,  1282,   430,   621,   432,     0,
     433,   434,     0,   435,  1283,   437,   438,   439,   440,   441,
       0,  1097,  1098,     0,     0,     0,   444,   445,   622,   447,
     623,  1099,   449,   450,  1284,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,  1100,  1285,   471,
    1286,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,  1101,     0,     0,     0,     0,     0,
       0,  1102,  1103,  1104,     0,     0,     0,     0,  1105,     0,
    1106,  1287,     0,     0,     0,     0,  1107,  1108,     0,     0,
       0,     0,  1109,  1110,   113,  1062,   518,  1063,  1064,  1065,
    1066,  1067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,  1068,     0,     0,   125,   126,   127,     0,   128,
     129,   130,   131,   132,   133,   134,   135,  1069,   137,  1070,
    1071,  1537,   140,   141,   142,   143,   144,   145,  1072,   610,
     146,   147,  1073,  1074,   150,     0,   151,   152,   153,   154,
     611,     0,   612,     0,  1075,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,  1076,  1077,   185,  1078,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   835,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,  1079,   214,   215,   216,   217,   218,
     613,  1080,   220,     0,   221,   222,  1081,   224,     0,   225,
       0,   226,   227,  1538,   228,   229,   230,   231,   232,   233,
       0,   234,     0,     0,     0,  1082,  1083,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,  1084,
    1085,     0,  1086,     0,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,     0,  1539,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1087,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1088,   311,  1089,   313,   314,   315,     0,   316,  1090,   317,
     318,   319,   320,  1091,   616,   322,  1092,   324,   325,   326,
       0,   327,   328,     0,     0,  1093,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   618,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   619,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,  1094,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,  1095,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,   413,     0,   414,
    1096,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   621,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,  1097,  1098,     0,     0,  1540,   444,   445,   622,
     447,   623,  1099,   449,   450,   624,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,  1100,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,  1101,     0,     0,     0,     0,
       0,     0,  1102,  1103,  1104,     0,     0,     0,     0,  1105,
       0,  1106,     0,     0,     0,     0,     0,  1107,  1108,     0,
       0,     0,     0,  1109,  1110,  1251,  1062,   518,  1063,  1064,
    1065,  1066,  1067,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
    1253,     0,     0,  1068,     0,     0,  1254,   126,   127,     0,
     128,   129,   130,  1255,   132,   133,   134,   135,  1069,  1256,
    1070,  1071,     0,   140,   141,   142,   143,   144,   145,  1072,
     610,   146,   147,  1073,  1074,   150,     0,   151,   152,   153,
     154,   611,     0,  1257,     0,  1258,   158,   159,   160,   161,
     162,  1259,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,  1260,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,  1076,  1077,   185,  1078,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   835,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,  1079,   214,   215,   216,   217,
     218,   613,  1080,   220,     0,   221,   222,  1081,   224,     0,
     225,     0,   226,  1262,     0,  1263,   229,   230,  1264,  1265,
     233,     0,   234,     0,     0,     0,  1082,  1083,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,  1266,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,  1267,   259,   260,   261,   262,   263,   264,
    1084,  1085,     0,  1086,     0,   268,  1268,  1269,   271,  1270,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
    1271,   281,  1272,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1273,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1088,  1274,  1089,   313,   314,   315,     0,   316,  1090,
     317,   318,  1275,   320,  1091,   616,   322,  1092,   324,   325,
     326,     0,   327,   328,     0,     0,  1093,   330,   331,     0,
       0,   332,   333,  1276,   335,  1277,   618,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   619,  1278,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,  1094,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,  1279,
     388,   389,   390,  1095,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,  1280,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,  1281,     0,
     414,  1096,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,  1282,   430,   621,
     432,     0,   433,   434,     0,   435,  1283,   437,   438,   439,
     440,   441,     0,  1097,  1098,     0,     0,     0,   444,   445,
     622,   447,   623,  1099,   449,   450,  1284,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,  1100,
    2287,   471,  1286,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,  1101,     0,     0,     0,
       0,     0,     0,  1102,  1103,  1104,     0,     0,     0,     0,
    1105,     0,  1106,     0,     0,     0,     0,     0,  1107,  1108,
       0,     0,     0,     0,  1109,  1110,  1251,  1062,   518,  1063,
    1064,  1065,  1066,  1067,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,  1253,     0,     0,  1068,     0,     0,  1254,   126,   127,
       0,   128,   129,   130,  1255,   132,   133,   134,   135,  1069,
    1256,  1070,  1071,     0,   140,   141,   142,   143,   144,   145,
    1072,   610,   146,   147,  1073,  1074,   150,     0,   151,   152,
     153,   154,   611,     0,  1257,     0,  1258,   158,   159,   160,
     161,   162,  1259,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,  1260,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,  1076,  1077,   185,  1078,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   835,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,  1079,   214,   215,   216,
     217,   218,   613,  1080,   220,     0,   221,   222,  1081,   224,
       0,   225,     0,   226,  1262,     0,  1263,   229,   230,  1264,
    1265,   233,     0,   234,     0,     0,     0,  1082,  1083,     0,
     237,     0,   238,   239,   240,   241,   242,   243,   244,  1266,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,  1267,   259,   260,   261,   262,   263,
     264,  1084,  1085,     0,  1086,     0,   268,  1268,  1269,   271,
    1270,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,  1271,   281,  1272,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1273,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1088,  1274,  1089,   313,   314,   315,     0,   316,
    1090,   317,   318,  1275,   320,  1091,   616,   322,  1092,   324,
     325,   326,     0,   327,   328,     0,     0,  1093,   330,   331,
       0,     0,   332,   333,  1276,   335,  1277,   618,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   619,  1278,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,  1094,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
    1279,   388,   389,   390,  1095,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,  1280,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,  1281,
       0,   414,  1096,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,  1282,   430,
     621,   432,     0,   433,   434,     0,   435,  1283,   437,   438,
     439,   440,   441,     0,  1097,  1098,     0,     0,     0,   444,
     445,   622,   447,   623,  1099,   449,   450,  1284,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
    1100,     0,   471,  1286,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,  1101,     0,     0,
       0,     0,     0,     0,  1102,  1103,  1104,     0,     0,     0,
       0,  1105,     0,  1106,  2339,     0,     0,     0,     0,  1107,
    1108,     0,     0,     0,     0,  1109,  1110,   113,  1062,   518,
    1063,  1064,  1065,  1066,  1067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121, -1234,   122,   123,   124,     0,
       0,     0,     0, -1234,     0,  1068,     0,     0,   125,   126,
     127,     0,   128,   129,   130,   131,   132,   133,   134,   135,
    1069,   137,  1070,  1071,     0,   140,   141,   142,   143,   144,
     145,  1072,   610,   146,   147,  1073,  1074,   150,     0,   151,
     152,   153,   154,   611,     0,   612,     0,  1075,   158,   159,
     160,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,  1076,  1077,   185,  1078,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   835,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,  1079,   214,   215,
     216,   217,   218,   613,  1080,   220,     0,   221,   222,  1081,
     224,     0,   225,     0,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,     0,     0,  1082,  1083,
       0,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1084,  1085,     0,  1086,     0,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1087,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1088,   311,  1089,   313,   314,   315,     0,
     316,  1090,   317,   318,   319,   320,  1091,   616,   322,  1092,
     324,   325,   326,     0,   327,   328,     0,     0,  1093,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   618,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   619,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,  1094,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,  1095,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
     413,     0,   414,  1096,   416, -1234,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   621,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,  1097,  1098,     0,     0,     0,
     444,   445,   622,   447,   623,  1099,   449,   450,   624,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,  1100,     0,   471,   472,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,  1101,     0,
       0,     0,     0,     0,     0,  1102,  1103,  1104,     0,     0,
       0,     0,  1105,     0,  1106,     0,     0,     0,     0,     0,
    1107,  1108,     0,     0,     0,     0,  1109,  1110,  1251,  1062,
     518,  1063,  1064,  1065,  1066,  1067,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,  1253,     0,     0,  1068,     0,     0,  1254,
     126,   127,     0,   128,   129,   130,  1255,   132,   133,   134,
     135,  1069,  1256,  1070,  1071,     0,   140,   141,   142,   143,
     144,   145,  1072,   610,   146,   147,  1073,  1074,   150,     0,
     151,   152,   153,   154,   611,     0,  1257,     0,  1258,   158,
     159,   160,   161,   162,  1259,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,  1260,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,  1076,  1077,   185,
    1078,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     835,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,  1079,   214,
     215,   216,   217,   218,   613,  1080,   220,     0,   221,   222,
    1081,   224,     0,   225,     0,   226,  1262,     0,  1263,   229,
     230,  1264,  1265,   233,     0,   234,     0,     0,     0,  1082,
    1083,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,  1266,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,  1267,   259,   260,   261,
     262,   263,   264,  1084,  1085,     0,  1086,     0,   268,  1268,
    1269,   271,  1270,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,  1271,   281,  1272,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1273,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1088,  1274,  1089,   313,   314,   315,
       0,   316,  1090,   317,   318,  1275,   320,  1091,   616,   322,
    1092,   324,   325,   326,     0,   327,   328,     0,     0,  1093,
     330,   331,     0,     0,   332,   333,  1276,   335,  1277,   618,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   619,  1278,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,  1094,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,  1279,   388,   389,   390,  1095,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,  1280,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,  1281,     0,   414,  1096,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
    1282,   430,   621,   432,     0,   433,   434,     0,   435,  1283,
     437,   438,   439,   440,   441,     0,  1097,  1098,     0,     0,
       0,   444,   445,   622,   447,   623,  1099,   449,   450,  1284,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,  1100,     0,   471,  1286,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,  1101,
       0,     0,     0,     0,     0,     0,  1102,  1103,  1104,     0,
       0,     0,     0,  1105,     0,  1106,  3107,     0,     0,     0,
       0,  1107,  1108,     0,     0,     0,     0,  1109,  1110,  1251,
    1062,   518,  1063,  1064,  1065,  1066,  1067,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,  1253,     0,     0,  1068,     0,     0,
    1254,   126,   127,     0,   128,   129,   130,  1255,   132,   133,
     134,   135,  1069,  1256,  1070,  1071,     0,   140,   141,   142,
     143,   144,   145,  1072,   610,   146,   147,  1073,  1074,   150,
       0,   151,   152,   153,   154,   611,     0,  1257,     0,  1258,
     158,   159,   160,   161,   162,  1259,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,  1260,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,  1076,  1077,
     185,  1078,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   835,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,  1079,
     214,   215,   216,   217,   218,   613,  1080,   220,     0,   221,
     222,  1081,   224,     0,   225,     0,   226,  1262,     0,  1263,
     229,   230,  1264,  1265,   233,     0,   234,     0,     0,     0,
    1082,  1083,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,  1266,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,  1267,   259,   260,
     261,   262,   263,   264,  1084,  1085,     0,  1086,     0,   268,
    1268,  1269,   271,  1270,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,  1271,   281,  1272,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1273,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1088,  1274,  1089,   313,   314,
     315,     0,   316,  1090,   317,   318,  1275,   320,  1091,   616,
     322,  1092,   324,   325,   326,     0,   327,   328,     0,     0,
    1093,   330,   331,     0,     0,   332,   333,  1276,   335,  1277,
     618,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   619,
    1278,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
    1094,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,  1279,   388,   389,   390,  1095,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
    1280,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,  1281,     0,   414,  1096,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,  1282,   430,   621,   432,     0,   433,   434,     0,   435,
    1283,   437,   438,   439,   440,   441,     0,  1097,  1098,     0,
       0,     0,   444,   445,   622,   447,   623,  1099,   449,   450,
    1284,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,  1100,     0,   471,  1286,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
    1101,     0,     0,     0,     0,     0,     0,  1102,  1103,  1104,
       0,     0,     0,     0,  1105,     0,  1106,     0,     0,     0,
       0,     0,  1107,  1108,     0,     0,     0,     0,  1109,  1110,
     113,  1062,   518,  1063,  1064,     0,  1066,  1067,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,  1068,     0,
       0,   125,   126,   127,     0,   128,   129,   130,   131,   132,
     133,   134,   135,  1069,   137,  1070,  1071,     0,   140,   141,
     142,   143,   144,   145,  1072,   610,   146,   147,  1073,  1074,
     150,     0,   151,   152,   153,   154,   611,     0,   612,     0,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,  1076,
    1077,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   835,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
    1079,   214,   215,   216,   217,   218,   613,  1080,   220,     0,
     221,   222,  1081,   224,     0,   225,     0,   226,   227,    21,
     228,   229,   230,   231,   232,   233,     0,   234,     0,     0,
       0,  1082,  1083,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,  1084,  1085,     0,  1086,     0,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1087,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1088,   311,  1089,   313,
     314,   315,     0,   316,     0,   317,   318,   319,   320,  1091,
     616,   322,  1092,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   618,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,    25,    26,    27,     0,   348,   349,
     619,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,  1094,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,  1095,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      32,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,   413,     0,   414,  1096,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   621,   432,     0,   433,   434,    37,
     435,   436,   437,   438,   439,   440,   441,     0,  1097,  1098,
       0,     0,     0,   444,   445,   622,   447,   623,  1099,   449,
     450,   624,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,    39,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   625,  1100,     0,   471,   472,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,    43,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,     0,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1105,     0,  1106,     0,     0,
       0,     0,     0,  1107,  1108,     0,     0,     0,     0,  1109,
    1110,   113,  1062,   518,  1063,  1064,  1065,  1066,  1067,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,  1716,
     122,   123,   124,     0,     0,     0,     0,     0,     0,  1068,
       0,     0,   125,   126,   127,     0,   128,   129,   130,   131,
     132,   133,   134,   135,  1069,   137,  1070,  1071,     0,   140,
     141,   142,   143,   144,   145,  1072,   610,   146,   147,  1073,
    1074,   150,     0,   151,   152,   153,   154,   611,     0,   612,
       0,  1075,   158,   159,   160,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
    1076,  1077,   185,  1078,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   835,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,  1079,   214,   215,   216,   217,   218,   613,  1080,   220,
       0,   221,   222,  1081,   224,     0,   225,     0,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,     0,
       0,     0,  1082,  1083,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1084,  1085,     0,  1086,
       0,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1087,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1088,   311,  1089,
     313,   314,   315,     0,   316,  1090,   317,   318,   319,   320,
    1091,   616,   322,  1092,   324,   325,   326,     0,   327,   328,
       0,     0,  1093,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   618,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   619,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,  1094,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1095,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,   413,     0,   414,  1096,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   621,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,  1097,
    1098,     0,     0,     0,   444,   445,   622,   447,   623,  1099,
     449,   450,   624,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,  1100,     0,   471,   472,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,  1101,     0,     0,     0,     0,     0,     0,  1102,
    1103,  1104,     0,     0,     0,     0,  1105,     0,  1106,     0,
       0,     0,     0,     0,  1107,  1108,     0,     0,     0,     0,
    1109,  1110,   113,  1731,   518,  1063,  1064,  1065,  1732,  1067,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
    1733,   122,   123,   124,     0,     0,     0,     0,     0,     0,
    1068,     0,     0,   125,   126,   127,     0,   128,   129,   130,
     131,   132,   133,   134,   135,  1069,   137,  1070,  1071,     0,
     140,   141,   142,   143,   144,   145,  1072,   610,   146,   147,
    1073,  1074,   150,     0,   151,   152,   153,   154,   611,     0,
     612,     0,  1075,   158,   159,   160,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,  1076,  1077,   185,  1078,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   835,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,  1079,   214,   215,   216,   217,   218,   613,  1080,
     220,     0,   221,   222,  1081,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,     0,     0,  1082,  1083,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1084,  1085,     0,
    1086,     0,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1087,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1088,   311,
    1089,   313,   314,   315,     0,   316,  1090,   317,   318,   319,
     320,  1091,   616,   322,  1092,   324,   325,   326,     0,   327,
     328,     0,     0,  1093,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   618,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   619,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,  1094,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1095,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,   413,     0,   414,  1096,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   621,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
    1097,  1098,     0,     0,     0,   444,   445,   622,   447,   623,
    1099,   449,   450,   624,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,  1100,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,  1101,     0,     0,     0,     0,     0,     0,
    1102,  1103,  1104,     0,     0,     0,     0,  1105,     0,  1106,
       0,     0,     0,     0,     0,  1107,  1108,     0,     0,     0,
       0,  1109,  1110,   113,  1062,   518,  1063,  1064,  1065,  1066,
    1067,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,  1068,     0,     0,   125,   126,   127,     0,   128,   129,
     130,   131,   132,   133,   134,   135,  1069,   137,  1070,  1071,
       0,   140,   141,   142,   143,   144,   145,  1072,   610,   146,
     147,  1073,  1074,   150,     0,   151,   152,   153,   154,   611,
       0,   612,     0,  1075,   158,   159,   160,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,  1076,  1077,   185,  1078,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   835,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,  1079,   214,   215,   216,   217,   218,   613,
    1080,   220,     0,   221,   222,  1081,   224,     0,   225,     0,
     226,   227,  1538,   228,   229,   230,   231,   232,   233,     0,
     234,     0,     0,     0,  1082,  1083,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1084,  1085,
       0,  1086,     0,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1087,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1088,
     311,  1089,   313,   314,   315,     0,   316,  1090,   317,   318,
     319,   320,  1091,   616,   322,  1092,   324,   325,   326,     0,
     327,   328,     0,     0,  1093,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   618,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   619,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,  1094,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,  1095,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,   413,     0,   414,  1096,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   621,   432,     0,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
       0,  1097,  1098,     0,     0,     0,   444,   445,   622,   447,
     623,  1099,   449,   450,   624,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,  1100,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,  1101,     0,     0,     0,     0,     0,
       0,  1102,  1103,  1104,     0,     0,     0,     0,  1105,     0,
    1106,     0,     0,     0,     0,     0,  1107,  1108,     0,     0,
       0,     0,  1109,  1110,   113,  1062,   518,  1063,  1064,  1065,
    1066,  1067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,  1068,     0,     0,   125,   126,   127,     0,   128,
     129,   130,   131,   132,   133,   134,   135,  1069,   137,  1070,
    1071,     0,   140,   141,   142,   143,   144,   145,  1072,   610,
     146,   147,  1073,  1074,   150,     0,   151,   152,   153,   154,
     611,     0,   612,     0,  1075,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,  1076,  1077,   185,  1078,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   835,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,  1079,   214,   215,   216,   217,   218,
     613,  1080,   220,     0,   221,   222,  1081,   224,     0,   225,
       0,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,     0,     0,  1082,  1083,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,  1084,
    1085,     0,  1086,     0,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1087,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1088,   311,  1089,   313,   314,   315,     0,   316,  1090,   317,
     318,   319,   320,  1091,   616,   322,  1092,   324,   325,   326,
       0,   327,   328,     0,     0,  1093,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   618,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   619,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,  1094,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,  1095,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,   413,     0,   414,
    1096,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   621,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,  1097,  1098,     0,     0,     0,   444,   445,   622,
     447,   623,  1099,   449,   450,   624,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,  1100,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,  1101,     0,     0,     0,     0,
       0,     0,  1102,  1103,  1104,     0,     0,     0,     0,  1105,
       0,  1106,  2064,     0,     0,     0,     0,  1107,  1108,     0,
       0,     0,     0,  1109,  1110,   113,  1062,   518,  1063,  1064,
    1065,  1066,  1067,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,     0,  1068,     0,     0,   125,   126,   127,     0,
     128,   129,   130,   131,   132,   133,   134,   135,  1069,   137,
    1070,  1071,     0,   140,   141,   142,   143,   144,   145,  1072,
     610,   146,   147,  1073,  1074,   150,     0,   151,   152,   153,
     154,   611,     0,   612,     0,  1075,   158,   159,   160,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,  1076,  1077,   185,  1078,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   835,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,  1079,   214,   215,   216,   217,
     218,   613,  1080,   220,     0,   221,   222,  1081,   224,     0,
     225,     0,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,     0,     0,     0,  1082,  1083,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1084,  1085,     0,  1086,     0,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1087,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1088,   311,  1089,   313,   314,   315,     0,   316,  1090,
     317,   318,   319,   320,  1091,   616,   322,  1092,   324,   325,
     326,     0,   327,   328,     0,     0,  1093,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   618,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   619,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,  1094,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,  1095,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,   413,     0,
     414,  1096,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   621,
     432,     0,   433,   434,  2703,   435,   436,   437,   438,   439,
     440,   441,     0,  1097,  1098,     0,     0,     0,   444,   445,
     622,   447,   623,  1099,   449,   450,   624,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,  1100,
       0,   471,   472,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,  1101,     0,     0,     0,
       0,     0,     0,  1102,  1103,  1104,     0,     0,     0,     0,
    1105,     0,  1106,     0,     0,     0,     0,     0,  1107,  1108,
       0,     0,     0,     0,  1109,  1110,   113,  1062,   518,  1063,
    1064,  1065,  1066,  1067,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,     0,  1068,     0,     0,   125,   126,   127,
       0,   128,   129,   130,   131,   132,   133,   134,   135,  1069,
     137,  1070,  1071,     0,   140,   141,   142,   143,   144,   145,
    1072,   610,   146,   147,  1073,  1074,   150,     0,   151,   152,
     153,   154,   611,     0,   612,     0,  1075,   158,   159,   160,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,  1076,  1077,   185,  1078,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   835,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,  1079,   214,   215,   216,
     217,   218,   613,  1080,   220,     0,   221,   222,  1081,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,     0,     0,  1082,  1083,     0,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,  1084,  1085,     0,  1086,     0,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1087,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1088,   311,  1089,   313,   314,   315,     0,   316,
    1090,   317,   318,   319,   320,  1091,   616,   322,  1092,   324,
     325,   326,     0,   327,   328,     0,     0,  1093,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   618,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   619,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,  1094,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,  1095,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,   413,
       0,   414,  1096,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     621,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,  1097,  1098,     0,     0,     0,   444,
     445,   622,   447,   623,  1099,   449,   450,   624,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
    1100,     0,   471,   472,   473,     0,   474,   475,   476,   477,
       0,     0,  2810,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,  1101,     0,     0,
       0,     0,     0,     0,  1102,  1103,  1104,     0,     0,     0,
       0,  1105,     0,  1106,     0,     0,     0,     0,     0,  1107,
    1108,     0,     0,     0,     0,  1109,  1110,   113,  1062,   518,
    1063,  1064,  1065,  1066,  1067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,  3058,   122,   123,   124,     0,
       0,     0,     0,     0,     0,  1068,     0,     0,   125,   126,
     127,     0,   128,   129,   130,   131,   132,   133,   134,   135,
    1069,   137,  1070,  1071,     0,   140,   141,   142,   143,   144,
     145,  1072,   610,   146,   147,  1073,  1074,   150,     0,   151,
     152,   153,   154,   611,     0,   612,     0,  1075,   158,   159,
     160,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,  3059,   175,   176,
     177,   178,   179,   180,   181,   182,  1076,  1077,   185,  1078,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   835,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,  1079,   214,   215,
     216,   217,   218,   613,  1080,   220,     0,   221,   222,  1081,
     224,     0,   225,     0,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,     0,     0,  3060,  1083,
       0,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1084,  1085,     0,  1086,     0,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1087,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1088,   311,  1089,   313,   314,   315,     0,
     316,  1090,   317,   318,   319,   320,  1091,   616,   322,  1092,
     324,   325,   326,     0,   327,   328,     0,     0,  1093,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   618,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   619,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,  1094,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,  3061,  1095,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
     413,     0,   414,  1096,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   621,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,  1097,  1098,     0,     0,     0,
     444,   445,   622,   447,   623,  1099,   449,   450,   624,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,  1100,     0,   471,   472,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,  1101,     0,
       0,     0,     0,     0,     0,  1102,  1103,  1104,     0,     0,
       0,     0,  1105,     0,  3062,     0,     0,     0,     0,     0,
    1107,  1108,     0,     0,     0,     0,  1109,  1110,   113,  1062,
     518,  1063,  1064,  1065,  1066,  1067,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,  1068,     0,     0,   125,
     126,   127,     0,   128,   129,   130,   131,   132,   133,   134,
     135,  1069,   137,  1070,  1071,     0,   140,   141,   142,   143,
     144,   145,  1072,   610,   146,   147,  1073,  1074,   150,     0,
     151,   152,   153,   154,   611,     0,   612,     0,  1075,   158,
     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,  1076,  1077,   185,
    1078,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     835,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,  1079,   214,
     215,   216,   217,   218,   613,  1080,   220,     0,   221,   222,
    1081,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,     0,     0,  1082,
    1083,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  1084,  1085,     0,  1086,     0,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1087,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1088,   311,  1089,   313,   314,   315,
       0,   316,  1090,   317,   318,   319,   320,  1091,   616,   322,
    1092,   324,   325,   326,     0,   327,   328,     0,     0,  1093,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   618,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   619,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,  1094,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,  1095,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,   413,     0,   414,  1096,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   621,   432,     0,   433,   434,  3249,   435,   436,
     437,   438,   439,   440,   441,     0,  1097,  1098,     0,     0,
       0,   444,   445,   622,   447,   623,  1099,   449,   450,   624,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,  1100,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,  1101,
       0,     0,     0,     0,     0,     0,  1102,  1103,  1104,     0,
       0,     0,     0,  1105,     0,  1106,     0,     0,     0,     0,
       0,  1107,  1108,     0,     0,     0,     0,  1109,  1110,   113,
    1062,   518,  1063,  1064,  1065,  1066,  1067,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,  1068,     0,     0,
     125,   126,   127,     0,   128,   129,   130,   131,   132,   133,
     134,   135,  1069,   137,  1070,  1071,     0,   140,   141,   142,
     143,   144,   145,  1072,   610,   146,   147,  1073,  1074,   150,
       0,   151,   152,   153,   154,   611,     0,   612,     0,  1075,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,  1076,  1077,
     185,  1078,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   835,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,  1079,
     214,   215,   216,   217,   218,   613,  1080,   220,     0,   221,
     222,  1081,   224,     0,   225,     0,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,     0,     0,     0,
    1082,  1083,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1084,  1085,     0,  1086,     0,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1087,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1088,   311,  1089,   313,   314,
     315,     0,   316,  1090,   317,   318,   319,   320,  1091,   616,
     322,  1092,   324,   325,   326,     0,   327,   328,     0,     0,
    1093,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     618,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   619,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
    1094,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,  1095,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,   413,     0,   414,  1096,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   621,   432,     0,   433,   434,  3452,   435,
     436,   437,   438,   439,   440,   441,     0,  1097,  1098,     0,
       0,     0,   444,   445,   622,   447,   623,  1099,   449,   450,
     624,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,  1100,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
    1101,     0,     0,     0,     0,     0,     0,  1102,  1103,  1104,
       0,     0,     0,     0,  1105,     0,  1106,     0,     0,     0,
       0,     0,  1107,  1108,     0,     0,     0,     0,  1109,  1110,
     113,  1062,   518,  1063,  1064,  1065,  1066,  1067,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,  1068,     0,
       0,   125,   126,   127,     0,   128,   129,   130,   131,   132,
     133,   134,   135,  1069,   137,  1070,  1071,     0,   140,   141,
     142,   143,   144,   145,  1072,   610,   146,   147,  1073,  1074,
     150,     0,   151,   152,   153,   154,   611,     0,   612,     0,
    1075,   158,   159,   160,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,  1076,
    1077,   185,  1078,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   835,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
    1079,   214,   215,   216,   217,   218,   613,  1080,   220,     0,
     221,   222,  1081,   224,     0,   225,     0,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,     0,
       0,  1082,  1083,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,  1084,  1085,     0,  1086,     0,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1087,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1088,   311,  1089,   313,
     314,   315,     0,   316,  1090,   317,   318,   319,   320,  1091,
     616,   322,  1092,   324,   325,   326,     0,   327,   328,     0,
       0,  1093,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   618,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     619,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,  1094,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,  1095,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,   413,     0,   414,  1096,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   621,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,  1097,  1098,
       0,     0,     0,   444,   445,   622,   447,   623,  1099,   449,
     450,   624,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,  1100,     0,   471,   472,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,  1101,     0,     0,     0,     0,     0,     0,  1102,  1103,
    1104,     0,     0,     0,     0,  1105,     0,  1106,     0,     0,
       0,     0,     0,  1107,  1108,     0,     0,     0,     0,  1109,
    1110,   113,  1062,   518,  1063,  1064,  1065,  1066,  1067,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,  1068,
       0,     0,   125,   126,   127,     0,   128,   129,   130,   131,
     132,   133,   134,   135,  1069,   137,  1070,  1071,     0,   140,
     141,   142,   143,   144,   145,  1072,   610,   146,   147,  1073,
    1074,   150,     0,   151,   152,   153,   154,   611,     0,   612,
       0,  1075,   158,   159,   160,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
    1076,  1077,   185,  1078,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   835,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,  1079,   214,   215,   216,   217,   218,   613,  1080,   220,
       0,   221,   222,  1081,   224,     0,   225,     0,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,     0,
       0,     0,  1082,  1083,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1084,  1085,     0,  1086,
       0,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1087,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1088,   311,  1089,
     313,   314,   315,     0,   316,  1090,   317,   318,   319,   320,
    1091,   616,   322,  1092,   324,   325,   326,     0,   327,   328,
       0,     0,  1093,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   618,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   619,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,  1094,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1095,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,   413,     0,   414,  1096,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   621,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,  1097,
    1098,     0,     0,     0,   444,   445,   622,   447,   623,  1099,
     449,   450,   624,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,  1100,     0,   471,   472,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,  1101,     0,     0,     0,     0,     0,     0,  1736,
    1737,  1104,     0,     0,     0,     0,  1105,     0,  1106,     0,
       0,     0,     0,     0,  1107,  1108,     0,     0,     0,     0,
    1109,  1110,   113,  2202,   518,  1063,  1064,  1065,  1066,  1067,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
    1068,     0,     0,   125,   126,   127,     0,   128,   129,   130,
     131,   132,   133,   134,   135,  1069,   137,  1070,  1071,     0,
     140,   141,   142,   143,   144,   145,  1072,   610,   146,   147,
    1073,  1074,   150,     0,   151,   152,   153,   154,   611,     0,
     612,     0,  1075,   158,   159,   160,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,  1076,  1077,   185,  1078,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   835,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,  1079,   214,   215,   216,   217,   218,   613,  1080,
     220,     0,   221,   222,  1081,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,     0,     0,  1082,  1083,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1084,  1085,     0,
    1086,     0,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1087,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1088,   311,
    1089,   313,   314,   315,     0,   316,  1090,   317,   318,   319,
     320,  1091,   616,   322,  1092,   324,   325,   326,     0,   327,
     328,     0,     0,  1093,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   618,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   619,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,  1094,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1095,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,   413,     0,   414,  1096,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   621,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
    1097,  1098,     0,     0,     0,   444,   445,   622,   447,   623,
    1099,   449,   450,   624,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,  1100,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,  1101,     0,     0,     0,     0,     0,     0,
    1102,  1103,  1104,     0,     0,     0,     0,  1105,     0,  1106,
       0,     0,     0,     0,     0,  1107,  1108,     0,     0,     0,
       0,  1109,  1110,   113,  1062,   518,  1063,  1064,  1065,  1066,
    1067,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,  1068,     0,     0,   125,   126,   127,     0,   128,   129,
     130,   131,   132,   133,   134,   135,  1069,   137,  1070,  1071,
       0,   140,   141,   142,   143,   144,   145,  1072,   610,   146,
     147,  1073,  1074,   150,     0,   151,   152,   153,   154,   611,
       0,   612,     0,  1075,   158,   159,   160,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,  1076,  1077,   185,  1078,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   835,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,  1079,   214,   215,   216,   217,   218,   613,
    1080,   220,     0,   221,   222,  1081,   224,     0,   225,     0,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,     0,     0,     0,  1082,  1083,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1084,  1085,
       0,  1086,     0,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1087,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1088,
     311,  1089,   313,   314,   315,     0,   316,  1090,   317,   318,
     319,   320,  1091,   616,   322,  1092,   324,   325,   326,     0,
     327,   328,     0,     0,  1093,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   618,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   619,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,  1094,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,  1095,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,   413,     0,   414,  1096,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   621,   432,     0,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
       0,  1097,  1098,     0,     0,     0,   444,   445,   622,   447,
     623,  1099,   449,   450,   624,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,  1100,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,  1101,     0,     0,     0,     0,     0,
       0,  1102,  1103,  1104,     0,     0,     0,     0,  1105,     0,
    2485,     0,     0,     0,     0,     0,  1107,  1108,     0,     0,
       0,     0,  1109,  1110,   113,  1062,   518,  1063,  1064,  1065,
    1066,  1067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,  1068,     0,     0,   125,   126,   127,     0,   128,
     129,   130,   131,   132,   133,   134,   135,  1069,   137,  1070,
    1071,     0,   140,   141,   142,   143,   144,   145,  1072,   610,
     146,   147,  1073,  1074,   150,     0,   151,   152,   153,   154,
     611,     0,   612,     0,  1075,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,  3059,   175,   176,   177,   178,   179,
     180,   181,   182,  1076,  1077,   185,  1078,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   835,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,  1079,   214,   215,   216,   217,   218,
     613,  1080,   220,     0,   221,   222,  1081,   224,     0,   225,
       0,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,     0,     0,  3060,  1083,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,  1084,
    1085,     0,  1086,     0,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1087,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1088,   311,  1089,   313,   314,   315,     0,   316,  1090,   317,
     318,   319,   320,  1091,   616,   322,  1092,   324,   325,   326,
       0,   327,   328,     0,     0,  1093,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   618,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   619,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,  1094,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,  3061,  1095,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,   413,     0,   414,
    1096,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   621,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,  1097,  1098,     0,     0,     0,   444,   445,   622,
     447,   623,  1099,   449,   450,   624,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,  1100,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,  1101,     0,     0,     0,     0,
       0,     0,  1102,  1103,  1104,     0,     0,     0,     0,  1105,
       0,  3062,     0,     0,     0,     0,     0,  1107,  1108,     0,
       0,     0,     0,  1109,  1110,   113,  1062,   518,  1063,  1064,
    1065,  1066,  1067,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,     0,  1068,     0,     0,   125,   126,   127,     0,
     128,   129,   130,   131,   132,   133,   134,  3714,  1069,   137,
    1070,  1071,     0,   140,   141,   142,   143,   144,   145,  1072,
     610,   146,   147,  1073,  1074,   150,     0,   151,   152,   153,
     154,   611,     0,   612,     0,  1075,   158,   159,   160,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,  3715,   176,   177,   178,
     179,   180,   181,   182,  1076,  1077,   185,  1078,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   835,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,  1079,   214,   215,   216,   217,
     218,   613,  1080,   220,     0,   221,   222,  1081,   224,     0,
     225,     0,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,     0,     0,     0,  1082,  1083,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1084,  1085,     0,  1086,     0,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1087,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1088,   311,  1089,   313,   314,   315,     0,   316,  1090,
     317,   318,   319,   320,  1091,   616,   322,  1092,   324,   325,
     326,     0,   327,   328,     0,     0,  1093,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   618,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   619,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,  1094,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,  1095,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,   413,     0,
     414,  1096,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   621,
     432,     0,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,     0,  1097,  1098,     0,     0,     0,   444,   445,
     622,   447,   623,  1099,   449,   450,   624,   452,   453,  3716,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,  1100,
       0,   471,   472,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,  1101,     0,     0,     0,
       0,     0,     0,  1102,  1103,  1104,     0,     0,     0,     0,
    1105,     0,  1106,     0,     0,     0,     0,     0,  1107,  1108,
       0,     0,     0,     0,  1109,  1110,   113,  1062,   518,  1063,
    1064,  1065,  1066,  1067,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,     0,  1068,     0,     0,   125,   126,   127,
       0,   128,   129,   130,   131,   132,   133,   134,   135,  1069,
     137,  1070,  1071,     0,   140,   141,   142,   143,   144,   145,
    1072,   610,   146,   147,  1073,  1074,   150,     0,   151,   152,
     153,   154,   611,     0,   612,     0,  1075,   158,   159,   160,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,  3715,   176,   177,
     178,   179,   180,   181,   182,  1076,  1077,   185,  1078,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   835,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,  1079,   214,   215,   216,
     217,   218,   613,  1080,   220,     0,   221,   222,  1081,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,     0,     0,  1082,  1083,     0,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,  1084,  1085,     0,  1086,     0,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1087,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1088,   311,  1089,   313,   314,   315,     0,   316,
    1090,   317,   318,   319,   320,  1091,   616,   322,  1092,   324,
     325,   326,     0,   327,   328,     0,     0,  1093,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   618,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   619,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,  1094,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,  1095,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,   413,
       0,   414,  1096,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     621,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,  1097,  1098,     0,     0,     0,   444,
     445,   622,   447,   623,  1099,   449,   450,   624,   452,   453,
    3716,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
    1100,     0,   471,   472,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,  1101,     0,     0,
       0,     0,     0,     0,  1102,  1103,  1104,     0,     0,     0,
       0,  1105,     0,  1106,     0,     0,     0,     0,     0,  1107,
    1108,     0,     0,     0,     0,  1109,  1110,   113,  1062,   518,
    1063,  1064,     0,  1066,  1067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,     0,  1068,     0,     0,   125,   126,
     127,     0,   128,   129,   130,   131,   132,   133,   134,   135,
    1069,   137,  1070,  1071,     0,   140,   141,   142,   143,   144,
     145,  1072,   610,   146,   147,  1073,  1074,   150,     0,   151,
     152,   153,   154,   611,     0,   612,     0,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,  1076,  1077,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   835,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,  1079,   214,   215,
     216,   217,   218,   613,  1080,   220,     0,   221,   222,  1081,
     224,     0,   225,     0,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,     0,     0,  1082,  1083,
       0,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1084,  1085,     0,  1086,     0,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1087,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1088,   311,  1089,   313,   314,   315,     0,
     316,  2848,   317,   318,   319,   320,  1091,   616,   322,  1092,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   618,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   619,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,  1094,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,  1095,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
     413,     0,   414,  1096,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   621,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,  1097,  1098,     0,     0,     0,
     444,   445,   622,   447,   623,  1099,   449,   450,   624,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,  1100,     0,   471,   472,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,  2849,     0,
       0,     0,     0,     0,     0,  2850,  2851,     0,     0,     0,
       0,     0,  1105,     0,  1106,     0,     0,     0,     0,     0,
    1107,  1108,     0,     0,     0,     0,  1109,  1110,   113,  1062,
     518,  1063,  1064,  1065,  1066,  1067,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,  1068,     0,     0,   125,
     126,   127,     0,   128,   129,   130,   131,   132,   133,   134,
     135,  1069,   137,  1070,  1071,     0,   140,   141,   142,   143,
     144,   145,  1072,   610,   146,   147,  1073,  1074,   150,     0,
     151,   152,   153,   154,   611,     0,   612,     0,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,  1076,  1077,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     835,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,  1079,   214,
     215,   216,   217,   218,   613,  1080,   220,     0,   221,   222,
    1081,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,     0,     0,  1082,
    1083,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  1084,  1085,     0,  1086,     0,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1087,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1088,   311,  1089,   313,   314,   315,
       0,   316,     0,   317,   318,   319,   320,  1091,   616,   322,
    1092,   324,   325,   326,     0,   327,   328,     0,     0,  1093,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   618,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   619,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,  1094,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,  1095,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,   413,     0,   414,  1096,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   621,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,  1097,  1098,     0,     0,
       0,   444,   445,   622,   447,   623,  1099,   449,   450,   624,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,  1100,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,     0,  1524,  1525,     0,     0,
       0,     0,     0,  1105,     0,  1106,     0,     0,     0,     0,
       0,  1107,  1108,     0,     0,     0,     0,  1109,  1110,   113,
    1062,   518,  1063,  1064,  1065,  1066,  1067,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,  1068,     0,     0,
     125,   126,   127,     0,   128,   129,   130,   131,   132,   133,
     134, -2142,  1069,   137,  1070,  1071,     0,   140,   141,   142,
     143,   144,   145,  1072,   610,   146,   147,  1073,  1074,   150,
       0,   151,   152,   153,   154,   611,     0,   612,     0,  1075,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
    3715,   176,   177,   178,   179,   180,   181,   182,  1076,  1077,
     185,  1078,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   835,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,  1079,
     214,   215,   216,   217,   218,   613,  1080,   220,     0,   221,
     222,  1081,   224,     0,   225,     0,   226,   227,     0,   228,
     229,   230,   231, -2142,   233,     0,   234,     0,     0,     0,
    1082,  1083,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244, -2142,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1084,  1085,     0,  1086,     0,   268,
       0,     0,   271,   272,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281, -2142,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1087,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1088,   311,  1089,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,  1091,   616,
     322,  1092,   324,   325,   326,     0,   327,   328,     0,     0,
    1093,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     618,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   619,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
    1094,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,  1095,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412, -2142,     0,   414,  1096,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   621,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,  1097,  1098,     0,
       0,     0,   444,   445,   622,   447,   623,  1099,   449,   450,
     624,   452,   453,  3716,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,  1100,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
   -2142,     0,     0,     0,     0,     0,     0,  1102,  1103,  1104,
       0,     0,     0,     0,  1105,     0,  1106,     0,     0,     0,
       0,     0,  1107,  1108,     0,     0,     0,     0,  1109,  1110,
     113,  1062,   518,  1063,  1064,     0,  1066,  1067,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,  1068,     0,
       0,   125,   126,   127,     0,   128,   129,   130,   131,   132,
     133,   134,   135,  1069,   137,  1070,  1071,     0,   140,   141,
     142,   143,   144,   145,  1072,   610,   146,   147,  1073,  1074,
     150,     0,   151,   152,   153,   154,   611,     0,   612,     0,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,  1076,
    1077,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   835,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
    1079,   214,   215,   216,   217,   218,   613,  1080,   220,     0,
     221,   222,  1081,   224,     0,   225,     0,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,     0,
       0,  1082,  1083,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,  1084,  1085,     0,  1086,     0,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1087,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1088,   311,  1089,   313,
     314,   315,     0,   316,     0,   317,   318,   319,   320,  1091,
     616,   322,  1092,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   618,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     619,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,  1094,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,  2188,  2189,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,   413,     0,   414,  1096,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   621,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,  1097,  1098,
       0,     0,     0,   444,   445,   622,   447,   623,  1099,   449,
     450,   624,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,  1100,     0,   471,   472,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,     0,  2190,  2191,
       0,     0,     0,     0,     0,  1105,     0,  1106,     0,     0,
       0,     0,     0,  1107,  1108,     0,     0,     0,     0,  1109,
    1110,   113,  1062,   518,  1063,  1064,  1065,  1066,  1067,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,  1068,
       0,     0,   125,   126,   127,     0,   128,   129,   130,   131,
     132,   133,   134,   135,  1069,   137,  1070,  1071,     0,   140,
     141,   142,   143,   144,   145,  1072,   610,   146,   147,  1073,
    1074,   150,     0,   151,   152,   153,   154,   611,     0,   612,
       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
    1076,  1077,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   835,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,  1079,   214,   215,   216,   217,   218,   613,  1080,   220,
       0,   221,   222,  1081,   224,     0,   225,     0,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,     0,
       0,     0,  1082,  1083,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1084,  1085,     0,  1086,
       0,   268,     0,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1087,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1088,   311,  1089,
     313,   314,   315,     0,   316,     0,   317,   318,   319,   320,
    1091,   616,   322,  1092,   324,   325,   326,     0,   327,   328,
       0,     0,  1093,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   618,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   619,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,  1094,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1095,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,   413,     0,   414,  1096,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   621,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,  1097,
    1098,     0,     0,     0,   444,   445,   622,   447,   623,  1099,
     449,   450,   624,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,  1100,     0,   471,   472,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,     0,  1524,
    1525,     0,     0,     0,     0,     0,  1105,     0,  1106,     0,
       0,     0,     0,     0,  1107,  1108,     0,     0,     0,     0,
    1109,  1110,   113,  1062,   518,  1063,  1064,     0,  1066,  1067,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
    1068,     0,     0,   125,   126,   127,     0,   128,   129,   130,
     131,   132,   133,   134,   135,  1069,   137,  1070,  1071,     0,
     140,   141,   142,   143,   144,   145,  1072,   610,   146,   147,
    1073,  1074,   150,     0,   151,   152,   153,   154,   611,     0,
     612,     0,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,  1076,  1077,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   835,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,  1079,   214,   215,   216,   217,   218,   613,  1080,
     220,     0,   221,   222,  1081,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,     0,     0,  1082,  1083,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1084,  1085,     0,
    1086,     0,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1087,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1088,   311,
    1089,   313,   314,   315,     0,   316,     0,   317,   318,   319,
     320,  1091,   616,   322,  1092,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   618,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   619,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,  1094,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1095,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,   413,     0,   414,  1096,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   621,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
    1097,  1098,     0,     0,     0,   444,   445,   622,   447,   623,
    1099,   449,   450,   624,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,  1100,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1105,     0,  1106,
       0,     0,     0,     0,     0,  1107,  1108,     0,     0,     0,
       0,  1109,  1110,   113,  1062,   518,  1063,  1064,     0,  1066,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,  1068,     0,     0,   125,   126,   127,     0,   128,   129,
     130,   131,   132,   133,   134,   135,  1069,   137,  1070,  1071,
       0,   140,   141,   142,   143,   144,   145,  1072,     0,   146,
     147,  1073,  1074,   150,     0,   151,   152,   153,   154,   155,
       0,   156,     0,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,  1076,  1077,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   835,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,  1079,   214,   215,   216,   217,   218,   219,
    1080,   220,     0,   221,   222,  1081,   224,     0,   225,     0,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,     0,     0,  3079,  1082,  1083,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1084,  1085,
       0,  1086,     0,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1088,
     311,  1089,   313,   314,   315,     0,   316,     0,   317,   318,
     319,   320,  1091,   321,   322,  1092,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,  1094,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,   413,     0,   414,  1096,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
       0,  1097,  1098,     0,     0,     0,   444,   445,   446,   447,
     448,  1099,   449,   450,   451,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,  1100,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1105,     0,
    2760,   113,  1062,   518,  1063,  1064,  1065,  1066,  1067,     0,
       0,     0,  1109,  1110,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,  1068,
       0,     0,   125,   126,   127,     0,   128,   129,   130,   131,
     132,   133,   134,     0,  1069,   137,  1070,  1071,     0,   140,
     141,   142,   143,   144,   145,  1072,   610,   146,   147,  1073,
    1074,   150,     0,   151,   152,   153,   154,   611,     0,   612,
       0,  1075,   158,   159,   160,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
    1076,  1077,   185,  1078,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   835,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,     0,   208,     0,   209,   210,   211,
     212,  1079,   214,   215,   216,   217,   218,   613,  1080,   220,
       0,   221,   222,  1081,   224,     0,   225,     0,   226,   227,
       0,   228,   229,   230,   231,     0,   233,     0,   234,     0,
       0,     0,  1082,  1083,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1084,  1085,     0,  1086,
       0,   268,     0,     0,   271,   272,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1087,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1088,   311,  1089,
     313,   314,   315,     0,   316,     0,   317,   318,     0,   320,
    1091,   616,   322,  1092,   324,   325,   326,     0,   327,   328,
       0,     0,  1093,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   618,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   619,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,  1094,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1095,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,     0,     0,   414,  1096,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   621,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,  1097,
    1098,     0,     0,     0,   444,   445,   622,   447,   623,  1099,
     449,   450,   624,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,  1100,     0,   471,   472,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,     0,  1102,
    1103,  1104,     0,     0,     0,     0,  1105,     0,  1106,     0,
       0,     0,     0,     0,  1107,  1108,     0,     0,     0,     0,
    1109,  1110,   113,  1062,   518,  1063,  1064,     0,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
    1068,     0,     0,   125,   126,   127,     0,   128,   129,   130,
     131,   132,   133,   134,   135,  1069,   137,  1070,  1071,     0,
     140,   141,   142,   143,   144,   145,  1072,     0,   146,   147,
    1073,  1074,   150,     0,   151,   152,   153,   154,   155,     0,
     156,     0,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,  1076,  1077,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   835,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,  1079,   214,   215,   216,   217,   218,   219,  1080,
     220,     0,   221,   222,  1081,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,     0,     0,  1082,  1083,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1084,  1085,     0,
    1086,     0,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1088,   311,
    1089,   313,   314,   315,     0,   316,     0,   317,   318,   319,
     320,  1091,   321,   322,  1092,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,  1094,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,   413,     0,   414,  1096,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
    1097,  1098,     0,     0,     0,   444,   445,   446,   447,   448,
    1099,   449,   450,   451,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,  1100,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   687,     0,     0,  1105,     0,  2760,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1109,  1110,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   127,     0,   128,
     129,   130,     0,   132,   133,   134,   688,   689,     0,   690,
     691,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     146,   147,   692,   693,   150,     0,   151,   152,   153,   154,
     694,     0,     0,     0,     0,   158,   159,   160,   161,   162,
       0,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   695,   696,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   697,   214,   215,   216,   217,   218,
     698,     0,   220,     0,   221,   222,   699,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   700,     0,   233,
       0,   234,     0,     0,     0,   701,   702,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   703,   260,   261,   262,   263,   264,   704,
     705,     0,   706,     0,   268,     0,     0,   271,     0,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   707,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     708,     0,   709,   313,   314,   315,     0,   710,     0,   317,
     318,     0,   320,     0,   711,   322,   712,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   713,     0,   335,     0,   714,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   715,     0,   352,   353,   716,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,   717,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   718,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   719,   410,   411,     0,   412,     0,     0,   414,
     720,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   721,   430,   722,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   723,   724,     0,     0,     0,   444,   445,   725,
     447,   726,     0,   449,   450,   727,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,  1517,   729,     0,
     471,     0,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     730,   731,   732,   733,   734,   735,   736,   737,   738,   739,
     740,   496,   497,   498,   499,     0,     0,     0,   507,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3328,     0,     0,     0,     0,     0,   114,   115,   116,
     117,  3329,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,  1022,     0,     0,
     126,   127,     0,   128,   129,   130,     0,   132,   133,   134,
     135,   136,     0,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   155,     0,     0,     0,   157,   158,
     159,   160,   161,   162,     0,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,  -676,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,  -676,   221,   222,
     223,   224,  -676,   225,     0,   226,     0,     0,     0,   229,
     230,   508,     0,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,  -676,   267,     0,   268,     0,
       0,   271,     0,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,  -676,   283,   284,   285,
     286,   287,   288,   289,   290,   509,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
       0,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,  -676,   327,   328,     0,     0,   329,
     330,   331,     0,  -676,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,     0,     0,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     510,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,     0,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,   451,
     452,   453,   454,   455,   456,  -676,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,   470,     0,   471,     0,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   507,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1175,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,     0,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     113,     0,   534,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2460,  3308,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,   127,     0,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   610,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   611,     0,   612,     0,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   613,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,   227,    21,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   614,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   615,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,     0,   317,   318,   319,   320,     0,
     616,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     617,   329,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   618,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,    25,    26,    27,     0,   348,   349,
     619,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   620,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      32,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,   413,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   621,   432,     0,   433,   434,    37,
     435,   436,   437,   438,   439,   440,   441,     0,   442,   443,
       0,     0,     0,   444,   445,   622,   447,   623,     0,   449,
     450,   624,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,    39,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   625,   470,     0,   471,   472,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,    43,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   906,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   626,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     3,     4,     0,   907,     0,     0,     0,
       0,     0,   908,   126,   127,     0,   128,   129,   130,   909,
     132,   133,   134,   910,   911,   912,   913,   914,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   915,
     916,   150,     0,   151,   152,   153,   154,   917,     0,   918,
       0,   919,   158,   159,   160,   161,   162,   920,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   921,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     922,   923,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   924,   214,   215,   216,   217,   218,   925,     0,   220,
       0,   221,   222,   926,   224,     0,   225,     0,   226,   927,
      21,   928,   229,   230,   929,   930,   233,     0,   234,     0,
       0,     0,   931,   932,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   933,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   934,
     935,   260,   261,   262,   263,   264,   936,   937,     0,   938,
       0,   268,   939,   940,   271,   941,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   942,   281,   943,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   944,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   945,   946,   947,
     313,   314,   315,     0,   948,     0,   317,   318,   949,   320,
       0,   950,   322,   951,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   952,   953,
     335,   954,   955,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,    25,    26,    27,     0,   348,
     349,   956,   957,   352,   353,   958,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   959,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   960,   388,   389,   390,   961,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    32,   962,   403,   404,   405,   406,   407,   408,   963,
     410,   411,     0,   412,   964,     0,   414,   965,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   966,   430,   967,   432,     0,   433,   434,
      37,   435,   968,   437,   438,   439,   440,   441,     0,   969,
     970,     0,     0,     0,   444,   445,   971,   447,   972,     0,
     449,   450,   973,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,    39,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   974,   975,     0,   471,   976,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
      43,   479,   480,   481,   482,   483,   484,   977,   978,   979,
     980,   981,   982,   983,   984,   985,   986,   987,   496,   497,
     498,   499,     0,     0,    44,   906,  1483,   518,     0,     0,
       0,  1066,     0,     0,     0,     0,     0,     0,   668,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
     907,     0,     0,     0,     0,     0,   908,   126,   127,     0,
     128,   129,   130,   909,   132,   133,   134,   910,   911,   912,
     913,   914,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,   915,   916,   150,     0,   151,   152,   153,
     154,   917,     0,   918,     0,   919,   158,   159,   160,   161,
     162,   920,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   921,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   922,   923,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   924,   214,   215,   216,   217,
     218,   925,  1484,   220,     0,   221,   222,   926,   224,     0,
     225,     0,   226,   927,     0,   928,   229,   230,   929,   930,
     233,     0,   234,     0,     0,     0,   931,   932,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   933,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   934,   935,   260,   261,   262,   263,   264,
     936,   937,     0,   938,     0,   268,   939,   940,   271,   941,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
     942,   281,   943,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   944,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   945,   946,   947,   313,   314,   315,     0,   948,     0,
     317,   318,   949,   320,     0,   950,   322,   951,   324,   325,
     326,     0,   327,   328,  1485,     0,   329,   330,   331,     0,
       0,   332,   952,   953,   335,   954,   955,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   956,   957,   352,   353,   958,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,   959,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   960,
     388,   389,   390,   961,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   962,   403,   404,   405,
     406,   407,   408,   963,   410,   411,     0,   412,   964,     0,
     414,   965,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   966,   430,   967,
     432,     0,   433,   434,     0,   435,   968,   437,   438,   439,
     440,   441,     0,   969,   970,     0,     0,     0,   444,   445,
     971,   447,   972,  1486,   449,   450,   973,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,  1366,   975,
       0,   471,   976,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   977,   978,   979,   980,   981,   982,   983,   984,   985,
     986,   987,   496,   497,   498,   499,   113,     0,   534,     0,
       0,     0,     0,  1487,  1488,  2377,     0,     0,     0,     0,
       0,     0,  2378,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,   127,
       0,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   610,   146,   147,   148,   149,   150,     0,   151,   152,
     153,   154,   611,     0,   612,     0,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   613,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   614,     0,   235,   236,     0,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   615,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
       0,   317,   318,   319,   320,     0,   616,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   617,   329,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   618,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   619,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   620,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,   413,
       0,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     621,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   442,   443,     0,     0,     0,   444,
     445,   622,   447,   623,     0,   449,   450,   624,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   625,
     470,     0,   471,   472,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   113,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   626,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
     127,     0,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,   610,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   611,     0,   612,     0,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   613,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     316,     0,   317,   318,   319,   320,     0,   616,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   618,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   619,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   620,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
     413,     0,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   621,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,   443,     0,     0,     0,
     444,   445,   622,   447,   623,     0,   449,   450,   624,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,   470,     0,   471,   472,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   113,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   668,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,   127,     0,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   610,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   611,     0,   612,     0,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   613,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,     0,   317,   318,   319,   320,     0,   616,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   618,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   619,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,   413,     0,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   621,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,   442,   443,     0,     0,
       0,   444,   445,   622,   447,   623,     0,   449,   450,   624,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,   470,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3455,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,   765,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,    21,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,    25,    26,    27,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    32,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,    37,   435,
       0,   437,   438,   439,   440,   441,     0,   766,   443,     0,
       0,     0,   767,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,    39,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   625,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,    43,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     507,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   668,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,     0,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   155,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,    21,
       0,   229,   230,   508,     0,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   509,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,     0,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,    25,    26,    27,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      32,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,     0,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   510,   430,   431,   432,     0,   433,   434,    37,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
       0,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,   451,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,    39,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   625,   470,     0,   471,     0,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,    43,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   687,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   668,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   126,   127,     0,   128,   129,   130,     0,
     132,   133,   134,   688,   689,     0,   690,   691,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   692,
     693,   150,     0,   151,   152,   153,   154,   694,     0,     0,
       0,     0,   158,   159,   160,   161,   162,     0,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     695,   696,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   697,   214,   215,   216,   217,   218,   698,     0,   220,
       0,   221,   222,   699,   224,     0,   225,     0,   226,     0,
      21,     0,   229,   230,   700,     0,   233,     0,   234,     0,
       0,     0,   701,   702,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     703,   260,   261,   262,   263,   264,   704,   705,     0,   706,
       0,   268,     0,     0,   271,     0,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   707,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   708,     0,   709,
     313,   314,   315,     0,   710,     0,   317,   318,     0,   320,
       0,   711,   322,   712,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   713,     0,
     335,     0,   714,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,    25,    26,    27,     0,   348,
     349,   715,     0,   352,   353,   716,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   717,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   718,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    32,     0,   403,   404,   405,   406,   407,   408,   719,
     410,   411,     0,   412,     0,     0,   414,   720,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   721,   430,   722,   432,     0,   433,   434,
      37,   435,     0,   437,   438,   439,   440,   441,     0,   723,
     724,     0,     0,     0,   444,   445,   725,   447,   726,     0,
     449,   450,   727,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,    39,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   728,   729,     0,   471,     0,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
      43,   479,   480,   481,   482,   483,   484,   730,   731,   732,
     733,   734,   735,   736,   737,   738,   739,   740,   496,   497,
     498,   499,     0,   507,    44,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   668,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,   127,     0,   128,   129,
     130,     0,   132,   133,   134,   135,   136,     0,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   155,
       0,     0,     0,   157,   158,   159,   160,   161,   162,     0,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   508,     0,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     509,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,     0,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,     0,     0,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   510,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,     0,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,   451,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,   470,     0,   471,
       0,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   507,     0,   534,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1009,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   127,     0,   128,
     129,   130,     0,   132,   133,   134,   135,   136,     0,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     146,   147,   148,   149,   150,     0,   151,   152,   153,   154,
     155,     0,     0,     0,   157,   158,   159,   160,   161,   162,
       0,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   508,     0,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   509,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,     0,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,     0,     0,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   510,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,     0,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,   451,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,   470,     0,
     471,     0,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   507,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1576,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,   127,     0,
     128,   129,   130,     0,   132,   133,   134,   135,   136,     0,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,   148,   149,   150,     0,   151,   152,   153,
     154,   155,     0,     0,     0,   157,   158,   159,   160,   161,
     162,     0,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   508,     0,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   509,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,     0,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,     0,     0,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   510,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,     0,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,   451,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,   470,
       0,   471,     0,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   507,     0,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2214,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,   127,
       0,   128,   129,   130,     0,   132,   133,   134,   135,   136,
       0,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,   148,   149,   150,     0,   151,   152,
     153,   154,   155,     0,     0,     0,   157,   158,   159,   160,
     161,   162,     0,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   508,
       0,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   509,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,     0,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,     0,
       0,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   510,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,     0,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,   451,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
     470,     0,   471,     0,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   507,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2460,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
     127,     0,   128,   129,   130,     0,   132,   133,   134,   135,
     136,     0,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   155,     0,     0,     0,   157,   158,   159,
     160,   161,   162,     0,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     508,     0,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,   238,   239,   240,   241,   242,   243,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   509,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,     0,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
       0,     0,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   510,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,     0,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,   451,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,   470,     0,   471,     0,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   507,     0,
     534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2598,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     126,   127,     0,   128,   129,   130,     0,   132,   133,   134,
     135,   136,     0,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   155,     0,     0,     0,   157,   158,
     159,   160,   161,   162,     0,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   508,     0,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   509,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
       0,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,     0,     0,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     510,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,     0,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,   451,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,   470,     0,   471,     0,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3302,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,     0,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2066,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,     0,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   155,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   508,     0,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   509,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,     0,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,     0,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   510,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
       0,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,   451,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,   470,     0,   471,     0,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   507,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2174,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   126,   127,     0,   128,   129,   130,     0,
     132,   133,   134,   135,   136,     0,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   155,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   508,     0,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   509,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,     0,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,     0,     0,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   510,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,     0,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,   451,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,   470,     0,   471,     0,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,     0,  2942,  1483,   518,     0,     0,  2046,  1066,
       0,     0,     0,     0,     0,  2047,  2048,     0,  3112,  2049,
    2050,  2051,   114,   115,   116,   117,     0,   118,   119,   120,
     121,  1298,   122,   123,   124,  1299,  1300,  1301,  2943,  1302,
       0,  1303,  1304,  1305,  2944,   126,   127,  1306,   128,   129,
     130,  2945,   132,   133,   134,     0,   823,  2946,   825,   826,
    1307,   140,   141,   142,   143,   144,   145,  1308,  1309,   146,
     147,   827,   828,   150,  1310,   151,   152,   153,   154,     0,
    1311,  2947,  1312,  2948,   158,   159,   160,   161,   162,  2949,
     164,   165,   166,  1313,   167,   168,   169,   170,   171,     0,
    1314,  2950,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   833,   834,   185,  1315,   186,  1316,   187,   188,
     189,   190,   191,   192,  1317,   193,     0,   194,   195,   196,
     197,  1318,  1319,   198,   199,   835,   201,   202,     0,     0,
    1320,   203,   204,   205,  1321,   206,   207,   208,  1322,   209,
     210,   211,   212,     0,   214,   215,   216,   217,   218,     0,
    1323,   220,  1324,   221,   222,   836,   224,  1325,   225,  1326,
     226,  2951,  1327,  2952,   229,   230,  2953,  2954,   233,  1328,
     234,     0,  1329,  1330,     0,     0,     0,   237,  1331,   238,
     239,   240,   241,   242,   243,   244,  2955,   246,   247,   248,
     249,  1332,   250,   251,   252,   253,   254,   255,   256,  1333,
     257,  2956,     0,   260,   261,   262,   263,   264,   843,   844,
    1334,   845,  1335,   268,  2957,  2958,   271,  2959,   273,     0,
     274,   275,   276,   277,   278,  1336,  1337,   279,  2960,   281,
    2961,  1338,   283,   284,   285,   286,   287,   288,   289,   290,
    2962,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   852,
    2963,   854,   313,   314,   315,     0,  2964,  1339,   317,   318,
    2965,   320,  1340,     0,   322,   856,   324,   325,   326,  1341,
     327,   328,  1342,  1343,  2966,   330,   331,  1344,  1345,   332,
       0,  2967,   335,  2968,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,  1346,  1347,  1348,
    1349,   348,   349,     0,  2969,   352,   353,     0,   355,   356,
     357,  1350,   358,   359,   360,   361,   362,     0,     0,   363,
    1351,   364,   365,   366,   860,   368,   369,   370,   371,  1352,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,  1353,   385,   386,  2970,   388,   389,
     390,   862,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,  1354,  2971,   403,   404,   405,   406,   407,
     408,  2972,   410,   411,     0,   412,  2973,     0,   414,   866,
     416,  1355,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,  2974,   430,     0,   432,  1356,
     433,   434,  1357,   435,  2975,   437,   438,   439,   440,   441,
    1358,   869,   870,  1359,     0,  1360,   444,   445,     0,   447,
       0,  1361,   449,   450,  2976,   452,   453,   454,   455,   456,
    2977,  1363,   457,   458,   459,  1364,   460,   461,   462,   463,
    1365,   464,   465,   466,   467,   468,     0,   873,  1367,   471,
    2978,   473,     0,   474,   475,   476,   477,     0,  1368,  1369,
     478,  1370,  1371,   479,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     496,   497,   498,   499,     0,   507,     0,  2052,  2053,  2054,
    2046,  2979,  2980,  2057,  2058,  2059,  2060,  2047,  2048,     0,
       0,  2049,  2050,  2051,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,   127,     0,
     128,   129,   130,     0,   132,   133,   134,   135,   136,     0,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,   148,   149,   150,     0,   151,   152,   153,
     154,   155,     0,     0,     0,   157,   158,   159,   160,   161,
     162,     0,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   508,     0,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   509,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,     0,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,     0,     0,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   510,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,     0,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,   451,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,   470,
       0,   471,     0,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,     0,     0,     0,  2052,
    2053,  2054,     0,  2055,  2056,  2057,  2058,  2059,  2060,  1628,
       0,     0,  1629,     0,     0,     0,  1630,  1631,  1632,  1633,
    1634,  1635,  1636,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1637,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1639,
    1628,     0,     0,  1629,     0,     0,  1640,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1637,
       0,  1641,     0,     0,     0,     0,     0,     0,     0,     0,
    1639,  1628,     0,     0,  1629,     0,     0,  1640,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,     0,  1641,     0,     0,     0,     0,     0,     0,     0,
       0,  1639,  1628,     0,     0,  1629,     0,     0,  1640,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1637,     0,  1641,     0,     0,     0,     0,     0,     0,
       0,     0,  1639,     0,  1628,     0,     0,  1629,  1642,  1640,
       0,  1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1643,     0,     0,
       0,     0,  1644,  1637,  1641,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,     0,     0,  1642,
       0,  1640,     0,     0,     0,  1645,  1646,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1643,     0,
       0,  1647,     0,  1644,     0,     0,  1641,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1642,     0,     0,     0,     0,     0,  1645,  1646,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1648,  1643,
       0,  1649,  1647,     0,  1644,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1650,     0,     0,  1651,     0,
       0,  1642,     0,     0,     0,     0,     0,  1645,  1646,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1648,
    1643,     0,  1649,  1647,     0,  1644,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1650,     0,     0,  1651,
       0,     0,     0,  1642,     0,     0,     0,     0,  1645,  1646,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1648,     0,  1643,  1649,  1647,     0,     0,  1644,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1650,     0,     0,
    1651,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1645,  1646,     0,     0,     0,     0,     0,  1652,     0,     0,
       0,  1648,     0,     0,  1649,     0,  1647,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1650,     0,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
       0,     0,     0,  1648,     0,     0,  1649,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1650,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1652,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1653,     0,     0,  1654,  1655,
    1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,     0,
    1652,     0,  2493,     0,     0,     0,     0,     0,     0,     0,
    1628,     0,     0,  1629,     0,     0,     0,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,     0,     0,  1653,     0,     0,  1654,
    1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,  1637,
       0,     0,  1652,  2733,     0,     0,     0,     0,     0,     0,
    1639,  1628,     0,     0,  1629,     0,     0,  1640,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,     0,     0,  1653,     0,     0,
    1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,
    1637,     0,  1641,     0,  2785,     0,     0,     0,     0,     0,
       0,  1639,  1628,     0,     0,  1629,     0,     0,  1640,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,     0,     0,  1653,     0,
       0,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,
    1662,  1637,     0,  1641,     0,  2887,     0,     0,     0,     0,
       0,     0,  1639,     0,  1628,     0,     0,  1629,     0,  1640,
       0,  1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,     0,
    1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,  1659,
    1660,  1661,  1662,  1637,  1641,     0,     0,  3105,     0,     0,
       0,     0,     0,     0,  1639,  1628,     0,     0,  1629,  1642,
       0,  1640,  1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1643,     0,
       0,     0,     0,  1644,  1637,     0,  1641,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
    1642,     0,  1640,     0,     0,     0,  1645,  1646,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
       0,     0,  1647,     0,  1644,     0,     0,  1641,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1642,     0,     0,     0,     0,     0,  1645,  1646,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1648,
    1643,     0,  1649,  1647,     0,  1644,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1650,     0,     0,  1651,
       0,     0,     0,  1642,     0,     0,     0,     0,  1645,  1646,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1648,     0,  1643,  1649,  1647,     0,     0,  1644,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1650,     0,     0,
    1651,     0,     0,     0,  1642,     0,     0,     0,     0,     0,
    1645,  1646,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1648,     0,  1643,  1649,     0,  1647,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1650,     0,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1645,  1646,     0,     0,     0,     0,     0,  1652,     0,
       0,     0,     0,  1648,     0,     0,  1649,  1647,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1650,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1652,
       0,     0,     0,     0,  1648,     0,     0,  1649,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1650,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1652,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1653,     0,     0,  1654,
    1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,
       0,     0,  1652,  3111,     0,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,  1629,     0,     0,     0,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,     0,     0,  1653,     0,     0,
    1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,
    1637,     0,     0,  1652,  3319,     0,     0,     0,     0,     0,
       0,  1639,  1628,     0,     0,  1629,     0,     0,  1640,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,     0,     0,  1653,     0,
       0,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,
    1662,  1637,     0,  1641,     0,  3397,     0,     0,     0,     0,
       0,     0,  1639,     0,  1628,     0,     0,  1629,     0,  1640,
       0,  1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,     0,
    1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,  1659,
    1660,  1661,  1662,  1637,  1641,     0,     0,  3534,     0,     0,
       0,     0,     0,     0,  1639,  1628,     0,     0,  1629,     0,
       0,  1640,  1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,
       0,  1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,
    1659,  1660,  1661,  1662,  1637,     0,  1641,     0,  3621,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
    1642,     0,  1640,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
       0,     0,     0,     0,  1644,     0,     0,  1641,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1642,     0,     0,     0,     0,     0,  1645,  1646,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1643,     0,     0,  1647,     0,  1644,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1642,     0,     0,     0,     0,  1645,  1646,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1648,     0,  1643,  1649,  1647,     0,     0,  1644,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1650,     0,     0,
    1651,     0,     0,     0,  1642,     0,     0,     0,     0,     0,
    1645,  1646,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1648,     0,  1643,  1649,     0,  1647,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1650,     0,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1645,  1646,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1648,     0,     0,  1649,  1647,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1650,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1652,
       0,     0,     0,     0,  1648,     0,     0,  1649,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1650,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1652,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1652,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1653,     0,     0,
    1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,
       0,     0,     0,  1652,  3650,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1653,     0,
       0,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,
    1662,     0,     0,  2805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,  1659,
    1660,  1661,  1662,     0,     0,  3311,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1297,     0,
       0,  1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,
    1659,  1660,  1661,  1662,     0,     0,  3584,   114,   115,   116,
     117,     0,   118,   119,   120,   121,  1298,   122,   123,   124,
    1299,  1300,  1301,   907,  1302,     0,  1303,  1304,  1305,   908,
     126,   127,  1306,   128,   129,   130,   909,   132,   133,   134,
     910,   911,   912,   913,   914,  1307,   140,   141,   142,   143,
     144,   145,  1308,  1309,   146,   147,   915,   916,   150,  1310,
     151,   152,   153,   154,   917,  1311,   918,  1312,   919,   158,
     159,   160,   161,   162,   920,   164,   165,   166,  1313,   167,
     168,   169,   170,   171,     0,  1314,   921,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   922,   923,   185,
    1315,   186,  1316,   187,   188,   189,   190,   191,   192,  1317,
     193,     0,   194,   195,   196,   197,  1318,  1319,   198,   199,
     200,   201,   202,     0,     0,  1320,   203,   204,   205,  1321,
     206,   207,   208,  1322,   209,   210,   211,   212,   924,   214,
     215,   216,   217,   218,   925,  1323,   220,  1324,   221,   222,
     926,   224,  1325,   225,  1326,   226,   927,  1327,   928,   229,
     230,   929,   930,   233,  1328,   234,     0,  1329,  1330,   931,
     932,     0,   237,  1331,   238,   239,   240,   241,   242,   243,
     244,   933,   246,   247,   248,   249,  1332,   250,   251,   252,
     253,   254,   255,   256,  1333,   257,   934,   935,   260,   261,
     262,   263,   264,   936,   937,  1334,   938,  1335,   268,   939,
     940,   271,   941,   273,     0,   274,   275,   276,   277,   278,
    1336,  1337,   279,   942,   281,   943,  1338,   283,   284,   285,
     286,   287,   288,   289,   290,   944,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   945,   946,   947,   313,   314,   315,
       0,   948,  1339,   317,   318,   949,   320,  1340,   950,   322,
     951,   324,   325,   326,  1341,   327,   328,  1342,  1343,   329,
     330,   331,  1344,  1345,   332,   952,   953,   335,   954,   955,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,  1346,  1347,  1348,  1349,   348,   349,   956,   957,
     352,   353,   958,   355,   356,   357,  1350,   358,   359,   360,
     361,   362,     0,     0,   363,  1351,   364,   365,   366,   959,
     368,   369,   370,   371,  1352,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,  1353,
     385,   386,   960,   388,   389,   390,   961,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,  1354,   962,
     403,   404,   405,   406,   407,   408,   963,   410,   411,     0,
     412,   964,     0,   414,   965,   416,  1355,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     966,   430,   967,   432,  1356,   433,   434,  1357,   435,   968,
     437,   438,   439,   440,   441,  1358,   969,   970,  1359,     0,
    1360,   444,   445,   971,   447,   972,  1361,   449,   450,   973,
     452,   453,   454,   455,   456,  1362,  1363,   457,   458,   459,
    1364,   460,   461,   462,   463,  1365,   464,   465,   466,   467,
     468,  1366,   975,  1367,   471,   976,   473,     0,   474,   475,
     476,   477,     0,  1368,  1369,   478,  1370,  1371,   479,   480,
     481,   482,   483,   484,   977,   978,   979,   980,   981,   982,
     983,   984,   985,   986,   987,   496,   497,   498,   499,   507,
       0,     0,     0,     0,     0,     0,     0,     0,  2149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,     0,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     507,     0,     0,     0,     0,     0,     0,     0,     0,  2726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,     0,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   155,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   508,     0,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   509,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,     0,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,     0,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   510,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
       0,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,   451,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,   470,     0,   471,     0,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   906,  1483,   518,     0,     0,     0,  1066,     0,     0,
    2729,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,   907,     0,     0,     0,
       0,     0,   908,   126,   127,     0,   128,   129,   130,   909,
     132,   133,   134,   910,   911,   912,   913,   914,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   915,
     916,   150,     0,   151,   152,   153,   154,   917,     0,   918,
       0,   919,   158,   159,   160,   161,   162,   920,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   921,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     922,   923,   185,  1688,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   924,   214,   215,   216,   217,   218,   925,  1484,   220,
       0,   221,   222,   926,   224,     0,   225,     0,   226,   927,
       0,   928,   229,   230,   929,   930,   233,     0,   234,     0,
       0,     0,   931,   932,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   933,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   934,
     935,   260,   261,   262,   263,   264,   936,   937,     0,   938,
       0,   268,   939,   940,   271,   941,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   942,   281,   943,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   944,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   945,   946,   947,
     313,   314,   315,     0,   948,     0,   317,   318,   949,   320,
       0,   950,   322,   951,   324,   325,   326,     0,   327,   328,
    1485,     0,   329,   330,   331,     0,     0,   332,   952,   953,
     335,   954,   955,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   956,   957,   352,   353,   958,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   959,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   960,   388,   389,   390,   961,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   962,   403,   404,   405,   406,   407,   408,   963,
     410,   411,     0,   412,   964,     0,   414,   965,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   966,   430,   967,   432,     0,   433,   434,
       0,   435,   968,   437,   438,   439,   440,   441,     0,   969,
     970,     0,     0,     0,   444,   445,   971,   447,   972,  1486,
     449,   450,   973,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,  1366,   975,     0,   471,   976,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   977,   978,   979,
     980,   981,   982,   983,   984,   985,   986,   987,   496,   497,
     498,   499,   906,  1483,   518,     0,     0,     0,  1066,  1487,
    1488,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,   907,     0,     0,
       0,     0,     0,   908,   126,   127,     0,   128,   129,   130,
     909,   132,   133,   134,   910,   911,   912,   913,   914,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   146,   147,
     915,   916,   150,     0,   151,   152,   153,   154,   917,     0,
     918,     0,   919,   158,   159,   160,   161,   162,   920,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     921,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   922,   923,   185,  1690,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   924,   214,   215,   216,   217,   218,   925,  1484,
     220,     0,   221,   222,   926,   224,     0,   225,     0,   226,
     927,     0,   928,   229,   230,   929,   930,   233,     0,   234,
       0,     0,     0,   931,   932,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   933,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     934,   935,   260,   261,   262,   263,   264,   936,   937,     0,
     938,     0,   268,   939,   940,   271,   941,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   942,   281,   943,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   944,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   945,   946,
     947,   313,   314,   315,     0,   948,     0,   317,   318,   949,
     320,     0,   950,   322,   951,   324,   325,   326,     0,   327,
     328,  1485,     0,   329,   330,   331,     0,     0,   332,   952,
     953,   335,   954,   955,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   956,   957,   352,   353,   958,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,   959,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   960,   388,   389,   390,
     961,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   962,   403,   404,   405,   406,   407,   408,
     963,   410,   411,     0,   412,   964,     0,   414,   965,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   966,   430,   967,   432,     0,   433,
     434,     0,   435,   968,   437,   438,   439,   440,   441,     0,
     969,   970,     0,     0,     0,   444,   445,   971,   447,   972,
    1486,   449,   450,   973,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,  1366,   975,     0,   471,   976,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   977,   978,
     979,   980,   981,   982,   983,   984,   985,   986,   987,   496,
     497,   498,   499,   906,  1483,   518,     0,     0,     0,  1066,
    1487,  1488,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,   907,     0,
       0,     0,     0,     0,   908,   126,   127,     0,   128,   129,
     130,   909,   132,   133,   134,   910,   911,   912,   913,   914,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   146,
     147,   915,   916,   150,     0,   151,   152,   153,   154,   917,
       0,   918,     0,   919,   158,   159,   160,   161,   162,   920,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   921,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   922,   923,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   924,   214,   215,   216,   217,   218,   925,
    1484,   220,     0,   221,   222,   926,   224,     0,   225,     0,
     226,   927,     0,   928,   229,   230,   929,   930,   233,     0,
     234,     0,     0,     0,   931,   932,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   933,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   934,   935,   260,   261,   262,   263,   264,   936,   937,
       0,   938,     0,   268,   939,   940,   271,   941,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,   942,   281,
     943,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     944,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   945,
     946,   947,   313,   314,   315,     0,   948,     0,   317,   318,
     949,   320,     0,   950,   322,   951,   324,   325,   326,     0,
     327,   328,  1485,     0,   329,   330,   331,     0,     0,   332,
     952,   953,   335,   954,   955,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   956,   957,   352,   353,   958,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,   959,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   960,   388,   389,
     390,   961,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,   962,   403,   404,   405,   406,   407,
     408,   963,   410,   411,     0,   412,   964,     0,   414,   965,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   966,   430,   967,   432,     0,
     433,   434,     0,   435,   968,   437,   438,   439,   440,   441,
       0,   969,   970,     0,     0,     0,   444,   445,   971,   447,
     972,  1486,   449,   450,   973,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,  1366,   975,     0,   471,
     976,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   977,
     978,   979,   980,   981,   982,   983,   984,   985,   986,   987,
     496,   497,   498,   499,     0,     0,  1628,     0,     0,  1629,
       0,  1487,  1488,  1630,  1631,  1632,  1633,  1634,  1635,  1636,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,     0,     0,     0,     0,
       0,  2180,     0,     0,     0,     0,  1639,  1628,     0,     0,
    1629,     0,     0,  1640,  1630,  1631,  1632,  1633,  1634,  1635,
    1636,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1637,     0,  1641,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,  1628,     0,
       0,  1629,     0,     0,  1640,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1637,     0,  1641,
       0,     0,  2181,     0,     0,     0,     0,     0,  1639,  1628,
       0,     0,  1629,     0,     0,  1640,  1630,  1631,  1632,  1633,
    1634,  1635,  1636,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1637,     0,
    1641,     0,     0,  1933,     0,     0,     0,     0,     0,  1639,
       0,     0,     0,     0,     0,  1642,  1640,     0,     0,  1628,
       0,     0,  1629,     0,     0,     0,  1630,  1631,  1632,  1633,
    1634,  1635,  1636,     0,  1643,     0,     0,     0,     0,  1644,
       0,  1641,     0,     0,     0,     0,  1969,     0,  1637,     0,
       0,  1970,     0,     0,     0,     0,  1642,     0,     0,  1639,
       0,     0,  1645,  1646,     0,     0,  1640,     0,     0,     0,
       0,     0,     0,     0,     0,  1643,     0,     0,  1647,     0,
    1644,     0,     0,     0,     0,     0,  3754,     0,     0,     0,
       0,  1641,     0,     0,     0,     0,     0,  1642,     0,     0,
       0,     0,     0,  1645,  1646,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1648,  1643,     0,  1649,  1647,
       0,  1644,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1650,     0,     0,  1651,     0,     0,  1642,     0,
       0,     0,     0,     0,  1645,  1646,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1648,  1643,     0,  1649,
    1647,     0,  1644,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1650,     0,     0,  1651,     0,     0,     0,
       0,     0,     0,     0,     0,  1645,  1646,     0,  1642,     0,
       0,     0,     0,     0,     0,     0,     0,  1648,     0,     0,
    1649,  1647,     0,     0,     0,     0,     0,  1643,     0,     0,
       0,     0,  1644,     0,  1650,     0,     0,  1651,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1652,  1645,  1646,     0,  1648,     0,
       0,  1649,     0,     0,     0,     0,  3755,     0,     0,     0,
       0,  1647,     0,     0,     0,  1650,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1652,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1648,     0,
       0,  1649,     0,     0,     0,     0,     0,     0,  2184,     0,
       0,     0,     0,     0,     0,  1650,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,     0,  1652,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1940,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1653,     0,     0,  1654,  1655,  1656,     0,  1657,
    1658,  1659,  1660,  1661,  1662,     0,     0,  1652,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1628,     0,
       0,  1629,     0,     0,     0,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,     0,  1653,     0,     0,  1654,  1655,  1656,     0,
    1657,  1658,  1659,  1660,  1661,  1662,     0,  1637,     0,     0,
       0,     0,  1975,     0,     0,     0,     0,  1652,  1639,  1628,
       0,     0,  1629,     0,     0,  1640,  1630,  1631,  1632,  1633,
    1634,  1635,  1636,     0,  1653,     0,     0,  1654,  1655,  1656,
       0,  1657,  1658,  1659,  1660,  1661,  1662,     0,  1637,     0,
    1641,     0,     0,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,     0,     0,     0,     0,  1640,     0,     0,     0,
       0,     0,     0,     0,     0,  1653,     0,     0,  1654,  1655,
    1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,     0,
       0,  1641,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1628,
       0,     0,  1629,     0,     0,     0,  1630,  1631,  1632,  1633,
    1634,  1635,  1636,     0,     0,  1653,     0,     0,  1654,  1655,
    1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,  1637,     0,
       0,     0,     0,  1982,     0,     0,     0,  1642,     0,  1639,
       0,  1628,     0,     0,  1629,     0,  1640,     0,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,     0,  1643,     0,     0,     0,
       0,  1644,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,  1641,     0,  1980,     0,     0,     0,     0,  1642,     0,
       0,  1639,     0,     0,  1645,  1646,     0,     0,  1640,     0,
       0,     0,     0,     0,     0,     0,     0,  1643,     0,     0,
    1647,     0,  1644,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1641,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1645,  1646,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1648,     0,     0,
    1649,  1647,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1650,     0,     0,  1651,     0,     0,
       0,     0,     0,     0,  1628,     0,     0,  1629,  1642,     0,
       0,  1630,  1631,  1632,  1633,  1634,  1635,  1636,  1648,     0,
       0,  1649,     0,     0,     0,     0,     0,  1643,     0,     0,
       0,     0,  1644,  1637,     0,  1650,     0,     0,  1651,     0,
    2070,     0,     0,     0,  1639,     0,     0,     0,     0,     0,
    1642,  1640,     0,     0,     0,  1645,  1646,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
       0,  1647,     0,     0,  1644,     0,  1641,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1652,  1645,  1646,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1648,     0,
       0,  1649,     0,  1647,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1650,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,  1652,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1648,     0,     0,  1649,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1650,     0,     0,
    1651,     0,     0,  1642,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1643,     0,     0,     0,     0,  1644,     0,     0,
       0,     0,     0,     0,  1653,     0,     0,  1654,  1655,  1656,
       0,  1657,  1658,  1659,  1660,  1661,  1662,     0,     0,     0,
    1645,  1646,     0,     0,     0,     0,     0,  1652,     0,     0,
    1628,     0,     0,  1629,     0,     0,  1647,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,     0,  1653,     0,     0,  1654,  1655,
    1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,  1637,
       0,     0,     0,     0,  2783,     0,     0,     0,     0,  1652,
    1639,     0,     0,  1648,     0,     0,  1649,  1640,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1650,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
       0,  1628,  1641,     0,  1629,     0,     0,     0,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,     0,     0,     0,     0,  1653,     0,     0,  1654,  1655,
    1656,  1639,  1657,  1658,  1659,  1660,  1661,  1662,  1640,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1641,     0,     0,     0,  1653,     0,     0,
    1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,
       0,     0,  1652,  1628,     0,     0,  1629,     0,     0,  1642,
    1630,  1631,  1632,  1633,  1634,  1635,  1636,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1643,     0,
       0,     0,  1637,  1644,  1628,     0,  2772,  1629,     0,     0,
       0,  1630,  1631,  1639,     0,  1634,  1635,  1636,     0,     0,
    1640,     0,     0,     0,     0,     0,  1645,  1646,     0,     0,
       0,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,  1647,     0,  1639,  1641,     0,     0,     0,     0,
    1642,  1640,     0,     0,     0,  1628,     0,     0,  1629,     0,
       0,     0,  1630,  1631,     0,     0,  1634,  1635,  1636,  1643,
       0,     0,     0,     0,  1644,     0,  1641,     0,     0,  1648,
    1653,     0,  1649,  1654,  1655,  1656,     0,  1657,  1658,  1659,
    1660,  1661,  1662,     0,     0,  1639,  1650,  1645,  1646,  1651,
       0,     0,  1640,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1647,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1641,     0,     0,
       0,     0,     0,     0,     0,  1065,     0,     0,  3139,     0,
       0,     0,  1642,  3140,     0,     0,  3143,  3144,  3145,     0,
    1648,     0,     0,  1649,     0,     0,     0,     0,     0,     0,
       0,  1643,     0,     0,  3146,     0,  1644,  1650,     0,     0,
    1651,     0,     0,  1642,     0,  3147,     0,     0,     0,     0,
       0,     0,  3148,     0,     0,     0,     0,     0,     0,  1645,
    1646,     0,  1643,     0,     0,     0,     0,  1644,  1652,     0,
       0,     0,     0,     0,     0,  1647,     0,  3149,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1645,  1646,     0,     0,  1642,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1647,     0,     0,     0,
       0,     0,  1648,  1643,     0,  1649,     0,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1650,
       0,     0,  1651,     0,     0,     0,     0,     0,     0,  1652,
       0,  1645,  1646,  1648,     0,     0,  1649,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1647,     0,     0,
    1650,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3150,     0,  1653,     0,     0,  1654,
    1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,
       0,     0,     0,  3151,  1648,     0,     0,  1649,  3152,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1650,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3153,  3154,     0,     0,     0,     0,     0,     0,     0,
       0,  1652,     0,     0,     0,     0,     0,  3155,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1653,     0,     0,
    1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,  1661,  1662,
       0,     0,  1652,     0,     0,     0,     0,     0,  1065,     0,
       0,  3139,     0,     0,  3156,     0,  3140,  3157,     0,  3143,
    3144,  3145,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1953,     0,     0,  3158,     0,     0,  3146,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3147,     0,
       0,     0,     0,  1652,  1628,  3148,     0,  1629,     0,     0,
       0,  1630,  1631,     0,     0,  1634,  1635,  1636,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1653,
    3149,     0,  1654,  1655,  1656,     0,  1657,  1658,  1659,  1660,
    2201,  1662,     0,     0,  1639,  1065,     0,     0,  3139,     0,
       0,  1640,     0,  3140,     0,     0,  3143,  3144,  3145,     0,
    1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,  1659,
    1660,  1661,  1662,     0,     0,     0,  1641,     0,     0,     0,
       0,     0,     0,  3159,     0,  3147,  1065,     0,     0,  3139,
       0,     0,  3148,     0,  3140,     0,     0,  3143,  3144,  3145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1653,     0,     0,  1654,  1655,  1656,  3149,  1657,  1658,
    1659,  1660,  1661,  1662,     0,     0,  3147,  3150,     0,     0,
       0,     0,     0,  3148,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3151,     0,     0,     0,
       0,  3152,     0,     0,     0,     0,     0,     0,  3149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1642,  3153,  3154,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3155,  3160,  1643,     0,  3161,  3162,  3163,  1644,  3164,  3165,
    3166,  3167,  3168,  3169,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3150,     0,     0,     0,     0,     0,
   -2142, -2142,     0,     0,     0,     0,     0,  3156,     0,     0,
    3157,     0,     0,  3151,     0,     0,  1647,     0,  3152,     0,
       0,     0,     0,     0,  1953,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3150,     0,     0,     0,     0,
       0,  3153,  3154,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3151,     0, -2142,  3155,     0,  3152,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1650,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2142, -2142,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3156,     0,     0,  3157,  3155,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1953,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3159,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2142,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1953,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1652,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3159,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3160,     0,     0,  3161,  3162,  3163,
       0,  3164,  3165,  3166,  3167,  3168,  3169,     0,     0,     0,
       0,     0,     0,     0,  3159,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1653,     0,     0,  1654,  1655,  1656,     0,  1657,  1658,  1659,
    1660,  1661,  1662,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3160,     0,     0,  3161,  3162,  3163,     0,  3164,  3165,
    3166,  3167,  3168,  3169,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1297,     0,  2090,     0,
       0,     0,  3160,     0,     0,  3161,  3162,  3163,     0,  3164,
    3165,  3166,  3167,  3168,  3169,   114,   115,   116,   117,     0,
     118,   119,   120,   121,  1298,   122,   123,   124,  1299,  1300,
    1301,   907,  1302,     0,  1303,  1304,  1305,   908,   126,   127,
    1306,   128,   129,   130,   909,   132,   133,   134,   910,   911,
     912,   913,   914,  1307,   140,   141,   142,   143,   144,   145,
    1308,  1309,   146,   147,   915,   916,   150,  1310,   151,   152,
     153,   154,   917,  1311,   918,  1312,   919,   158,   159,   160,
     161,   162,   920,   164,   165,   166,  1313,   167,   168,   169,
     170,   171,     0,  1314,   921,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   922,   923,   185,  1315,   186,
    1316,   187,   188,   189,   190,   191,   192,  1317,   193,     0,
     194,   195,   196,   197,  1318,  1319,   198,   199,   200,   201,
     202,     0,     0,  1320,   203,   204,   205,  1321,   206,   207,
     208,  1322,   209,   210,   211,   212,   924,   214,   215,   216,
     217,   218,   925,  1323,   220,  1324,   221,   222,   926,   224,
    1325,   225,  1326,   226,   927,  1327,   928,   229,   230,   929,
     930,   233,  1328,   234,     0,  1329,  1330,   931,   932,     0,
     237,  1331,   238,   239,   240,   241,   242,   243,   244,   933,
     246,   247,   248,   249,  1332,   250,   251,   252,   253,   254,
     255,   256,  1333,   257,   934,   935,   260,   261,   262,   263,
     264,   936,   937,  1334,   938,  1335,   268,   939,   940,   271,
     941,   273,     0,   274,   275,   276,   277,   278,  1336,  1337,
     279,   942,   281,   943,  1338,   283,   284,   285,   286,   287,
     288,   289,   290,   944,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   945,   946,   947,   313,   314,   315,     0,   948,
    1339,   317,   318,   949,   320,  1340,   950,   322,   951,   324,
     325,   326,  1341,   327,   328,  1342,  1343,   329,   330,   331,
    1344,  1345,   332,   952,   953,   335,   954,   955,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
    1346,  1347,  1348,  1349,   348,   349,   956,   957,   352,   353,
     958,   355,   356,   357,  1350,   358,   359,   360,   361,   362,
       0,     0,   363,  1351,   364,   365,   366,   959,   368,   369,
     370,   371,  1352,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,  1353,   385,   386,
     960,   388,   389,   390,   961,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,  1354,   962,   403,   404,
     405,   406,   407,   408,   963,   410,   411,     0,   412,   964,
       0,   414,   965,   416,  1355,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   966,   430,
     967,   432,  1356,   433,   434,  1357,   435,   968,   437,   438,
     439,   440,   441,  1358,   969,   970,  1359,     0,  1360,   444,
     445,   971,   447,   972,  1361,   449,   450,   973,   452,   453,
     454,   455,   456,  1362,  1363,   457,   458,   459,  1364,   460,
     461,   462,   463,  1365,   464,   465,   466,   467,   468,  1366,
     975,  1367,   471,   976,   473,     0,   474,   475,   476,   477,
       0,  1368,  1369,   478,  1370,  1371,   479,   480,   481,   482,
     483,   484,   977,   978,   979,   980,   981,   982,   983,   984,
     985,   986,   987,   496,   497,   498,   499,  1297,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,  1298,   122,   123,   124,  1299,
    1300,  1301,   907,  1302,     0,  1303,  1304,  1305,   908,   126,
     127,  1306,   128,   129,   130,   909,   132,   133,   134,   910,
     911,   912,   913,   914,  1307,   140,   141,   142,   143,   144,
     145,  1308,  1309,   146,   147,   915,   916,   150,  1310,   151,
     152,   153,   154,   917,  1311,   918,  1312,   919,   158,   159,
     160,   161,   162,   920,   164,   165,   166,  1313,   167,   168,
     169,   170,   171,     0,  1314,   921,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   922,   923,   185,  1315,
     186,  1316,   187,   188,   189,   190,   191,   192,  1317,   193,
       0,   194,   195,   196,   197,  1318,  1319,   198,   199,   200,
     201,   202,     0,     0,  1320,   203,   204,   205,  1321,   206,
     207,   208,  1322,   209,   210,   211,   212,   924,   214,   215,
     216,   217,   218,   925,  1323,   220,  1324,   221,   222,   926,
     224,  1325,   225,  1326,   226,   927,  1327,   928,   229,   230,
     929,   930,   233,  1328,   234,     0,  1329,  1330,   931,   932,
       0,   237,  1331,   238,   239,   240,   241,   242,   243,   244,
     933,   246,   247,   248,   249,  1332,   250,   251,   252,   253,
     254,   255,   256,  1333,   257,   934,   935,   260,   261,   262,
     263,   264,   936,   937,  1334,   938,  1335,   268,   939,   940,
     271,   941,   273,     0,   274,   275,   276,   277,   278,  1336,
    1337,   279,   942,   281,   943,  1338,   283,   284,   285,   286,
     287,   288,   289,   290,   944,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   945,   946,   947,   313,   314,   315,     0,
     948,  1339,   317,   318,   949,   320,  1340,   950,   322,   951,
     324,   325,   326,  1341,   327,   328,  1342,  1343,   329,   330,
     331,  1344,  1345,   332,   952,   953,   335,   954,   955,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,  1346,  1347,  1348,  1349,   348,   349,   956,   957,   352,
     353,   958,   355,   356,   357,  1350,   358,   359,   360,   361,
     362,     0,     0,   363,  1351,   364,   365,   366,   959,   368,
     369,   370,   371,  1352,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,  1353,   385,
     386,   960,   388,   389,   390,   961,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,  1354,   962,   403,
     404,   405,   406,   407,   408,   963,   410,   411,     0,   412,
     964,     0,   414,   965,   416,  1355,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   966,
     430,   967,   432,  1356,   433,   434,  1357,   435,   968,   437,
     438,   439,   440,   441,  1358,   969,   970,  1359,     0,  1360,
     444,   445,   971,   447,   972,  1361,   449,   450,   973,   452,
     453,   454,   455,   456,  1362,  1363,   457,   458,   459,  1364,
     460,   461,   462,   463,  1365,   464,   465,   466,   467,   468,
    1366,   975,  1367,   471,   976,   473,     0,   474,   475,   476,
     477,     0,  1368,  1369,   478,  1370,  1371,   479,   480,   481,
     482,   483,   484,   977,   978,   979,   980,   981,   982,   983,
     984,   985,   986,   987,   496,   497,   498,   499,  1297,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,  2246,   119,   120,   121,  1298,   122,   123,   124,
    1299,  1300,  1301,   907,  1302,     0,  1303,  1304,  1305,   908,
     126,   127,  1306,   128,   129,   130,   909,   132,   133,   134,
     910,   911,   912,   913,   914,  1307,   140,   141,   142,   143,
     144,   145,  1308,  1309,   146,   147,   915,   916,   150,  1310,
     151,   152,   153,   154,   917,  1311,   918,  1312,   919,   158,
     159,   160,   161,   162,   920,   164,   165,   166,  1313,   167,
     168,   169,   170,   171,     0,  1314,   921,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   922,   923,   185,
    1315,   186,  1316,   187,   188,   189,   190,   191,   192,  1317,
     193,     0,   194,   195,   196,   197,  1318,  1319,   198,   199,
     200,  2247,   202,     0,     0,  1320,   203,   204,   205,  1321,
     206,   207,   208,  1322,   209,   210,   211,   212,   924,   214,
     215,   216,   217,   218,   925,  1323,   220,  1324,   221,   222,
     926,   224,  1325,   225,  1326,   226,   927,  1327,   928,   229,
     230,   929,   930,   233,  1328,   234,     0,  1329,  1330,   931,
     932,     0,   237,  1331,   238,   239,   240,   241,   242,   243,
     244,   933,   246,   247,   248,   249,  1332,   250,   251,   252,
     253,   254,   255,   256,  1333,   257,   934,   935,   260,   261,
     262,   263,   264,   936,   937,  1334,   938,  1335,   268,   939,
     940,   271,   941,   273,     0,   274,   275,   276,   277,   278,
    1336,  1337,   279,   942,   281,   943,  1338,   283,   284,   285,
     286,   287,   288,   289,   290,   944,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   945,   946,   947,   313,   314,   315,
       0,   948,  1339,   317,   318,   949,   320,  1340,   950,   322,
     951,   324,   325,   326,  1341,   327,   328,  1342,  1343,   329,
     330,   331,  1344,  1345,   332,   952,   953,   335,   954,   955,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,  1346,  1347,  1348,  1349,   348,   349,   956,   957,
     352,   353,   958,   355,   356,   357,  1350,   358,   359,   360,
     361,   362,     0,     0,   363,  1351,   364,   365,   366,   959,
     368,   369,   370,   371,  1352,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,  1353,
     385,   386,   960,   388,   389,   390,   961,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,  1354,   962,
     403,   404,   405,   406,   407,  2248,   963,   410,   411,     0,
     412,   964,     0,   414,   965,   416,  1355,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     966,   430,   967,   432,  1356,   433,   434,  1357,   435,   968,
     437,   438,   439,   440,   441,  1358,   969,   970,  1359,     0,
    1360,   444,   445,   971,   447,   972,  1361,   449,   450,   973,
     452,   453,   454,   455,   456,  1362,  1363,   457,   458,   459,
    1364,   460,   461,   462,   463,  1365,   464,   465,   466,   467,
     468,  1366,   975,  1367,   471,   976,   473,     0,   474,   475,
     476,   477,     0,  1368,  1369,   478,  1370,  1371,   479,   480,
     481,   482,   483,   484,   977,   978,   979,   980,   981,   982,
     983,   984,   985,   986,   987,   496,   497,   498,   499,   906,
       0,   518,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,   907,     0,     0,     0,     0,     0,
     908,   126,   127,     0,   128,   129,   130,   909,   132,   133,
     134,   910,   911,   912,   913,   914,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   915,   916,   150,
       0,   151,   152,   153,   154,   917,     0,   918,     0,   919,
     158,   159,   160,   161,   162,   920,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   921,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   922,   923,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   924,
     214,   215,   216,   217,   218,   925,  1484,   220,     0,   221,
     222,   926,   224,     0,   225,     0,   226,   927,     0,   928,
     229,   230,   929,   930,   233,     0,   234,     0,     0,     0,
     931,   932,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   933,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   934,   935,   260,
     261,   262,   263,   264,   936,   937,     0,   938,     0,   268,
     939,   940,   271,   941,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,   942,   281,   943,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   944,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   945,   946,   947,   313,   314,
     315,     0,   948,     0,   317,   318,   949,   320,     0,   950,
     322,   951,   324,   325,   326,     0,   327,   328,  1485,     0,
     329,   330,   331,     0,     0,   332,   952,   953,   335,   954,
     955,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   956,
     957,   352,   353,   958,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     959,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   960,   388,   389,   390,   961,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     962,   403,   404,   405,   406,   407,   408,   963,   410,   411,
       0,   412,   964,     0,   414,   965,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   966,   430,   967,   432,     0,   433,   434,     0,   435,
     968,   437,   438,   439,   440,   441,     0,   969,   970,     0,
       0,     0,   444,   445,   971,   447,   972,  1486,   449,   450,
     973,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,  1366,   975,     0,   471,   976,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   977,   978,   979,   980,   981,
     982,   983,   984,   985,   986,   987,   496,   497,   498,   499,
     906,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     3,     4,     0,   907,     0,     0,     0,     0,
       0,   908,   126,   127,     0,   128,   129,   130,   909,   132,
     133,   134,   910,   911,   912,   913,   914,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   915,   916,
     150,     0,   151,   152,   153,   154,   917,     0,   918,     0,
     919,   158,   159,   160,   161,   162,   920,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   921,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   922,
     923,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     924,   214,   215,   216,   217,   218,   925,     0,   220,     0,
     221,   222,   926,   224,     0,   225,     0,   226,   927,     0,
     928,   229,   230,   929,   930,   233,     0,   234,     0,     0,
       0,   931,   932,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   933,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   934,   935,
     260,   261,   262,   263,   264,   936,   937,     0,   938,     0,
     268,   939,   940,   271,   941,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,   942,   281,   943,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   944,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   945,   946,   947,   313,
     314,   315,     0,   948,     0,   317,   318,   949,   320,     0,
     950,   322,   951,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   952,   953,   335,
     954,   955,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     956,   957,   352,   353,   958,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   959,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   960,   388,   389,   390,   961,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   962,   403,   404,   405,   406,   407,   408,   963,   410,
     411,     0,   412,   964,     0,   414,   965,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   966,   430,   967,   432,     0,   433,   434,     0,
     435,   968,   437,   438,   439,   440,   441,     0,   969,   970,
       0,     0,     0,   444,   445,   971,   447,   972,     0,   449,
     450,   973,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,  1366,   975,     0,   471,   976,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   977,   978,   979,   980,
     981,   982,   983,   984,   985,   986,   987,   496,   497,   498,
     499,   113,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,   127,     0,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   610,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   611,     0,   612,
       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   613,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,     0,   317,   318,   319,   320,
       0,   616,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   618,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   619,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,   413,     0,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   621,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   442,
     443,     0,     0,     0,   444,   445,   622,   447,   623,     0,
     449,   450,   624,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,   470,     0,   471,   472,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   113,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,   127,     0,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   146,   147,
     148,   149,   150,     0,   151,   152,   153,   154,   155,     0,
     156,     0,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,   413,     0,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
     442,   443,     0,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,   451,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,   470,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   507,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,   127,     0,   128,   129,
     130,     0,   132,   133,   134,   135,   136,     0,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   146,
     147,   148,   149,   150,  1765,   151,   152,   153,   154,   155,
       0,     0,  1766,   157,   158,   159,   160,   161,   162,     0,
     164,   165,   166,  1767,   167,   168,   169,   170,   171,     0,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,  1768,
     226,     0,     0,     0,   229,   230,   508,     0,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,   238,
     239,   240,   241,   242,  1769,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     509,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,     0,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,  1770,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,     0,     0,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   510,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,     0,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,   451,   452,   453,   454,   455,   456,
       0,  1771,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,   470,     0,   471,
       0,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   507,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   127,     0,   128,
     129,   130,     0,   132,   133,   134,   135,   136,     0,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     146,   147,   148,   149,   150,  1765,   151,   152,   153,   154,
     155,     0,     0,     0,   157,   158,   159,   160,   161,   162,
       0,   164,   165,   166,  1767,   167,   168,   169,   170,   171,
       0,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
    1768,   226,     0,     0,     0,   229,   230,   508,     0,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,  2324,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   509,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,     0,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,  1770,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,     0,     0,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   510,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,     0,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,   451,   452,   453,   454,   455,
     456,     0,  1771,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,   470,     0,
     471,     0,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   507,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     3,     4,     0,
       0,     0,     0,     0,     0,     0,     0,   126,   127,     0,
     128,   129,   130,     0,   132,   133,   134,   135,   136,     0,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,   148,   149,   150,     0,   151,   152,   153,
     154,   155,     0,     0,     0,   157,   158,   159,   160,   161,
     162,     0,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   508,     0,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   509,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,     0,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,     0,     0,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   510,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,     0,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,   451,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,   470,
       0,   471,     0,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   507,     0,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,   535,   122,   123,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,   127,
       0,   128,   129,   130,     0,   132,   133,   134,   135,   136,
       0,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,   148,   149,   150,     0,   151,   152,
     153,   154,   155,     0,     0,     0,   157,   158,   159,   160,
     161,   162,     0,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   508,
       0,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   509,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,     0,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   536,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,     0,
       0,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   510,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,     0,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,   451,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
     470,     0,   471,     0,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   507,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
     127,     0,   128,   129,   130,     0,   132,   133,   134,   135,
     136,     0,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   155,     0,     0,     0,   157,   158,   159,
     160,   161,   162,     0,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     508,     0,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,   238,   239,   240,   241,   242,   243,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   509,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,     0,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   617,   329,   330,
     331,     0,     0,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
       0,     0,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   510,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,     0,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,   451,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,   470,     0,   471,     0,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   507,     0,
     534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     126,   127,     0,   128,   129,   130,     0,   132,   133,   134,
     135,   136,     0,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   155,     0,     0,     0,   157,   158,
     159,   160,   161,   162,     0,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   508,     0,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,   238,   239,   240,   241,   242,   775,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   509,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
       0,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   617,   329,
     330,   331,     0,     0,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,     0,     0,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     510,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,     0,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,   451,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,   470,     0,   471,     0,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   507,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,   807,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,     0,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     507,  1985,     0,     0,     0,     0,  1986,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,     0,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   155,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   508,     0,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   509,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,     0,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,     0,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   510,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
       0,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,   451,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,   470,     0,   471,     0,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   507,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   126,   127,     0,   128,   129,   130,     0,
     132,   133,   134,   135,   136,     0,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   155,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   508,     0,  1994,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,  1995,   286,   287,   288,   289,   290,   509,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,     0,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,     0,     0,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   510,   430,   431,   432,     0,   433,   434,
    1996,   435,     0,   437,  1997,   439,  1998,   441,     0,   442,
     443,     0,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,   451,   452,   453,   454,   455,   456,     0,     0,
     457,   458,  1999,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,   470,     0,   471,     0,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   507,     0,   534,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   126,   127,     0,   128,   129,   130,
       0,   132,   133,   134,   135,   136,     0,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   146,   147,
     148,   149,   150,     0,   151,   152,   153,   154,   155,     0,
       0,     0,   157,   158,   159,   160,   161,   162,     0,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,     0,     0,   229,   230,   508,     0,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   509,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,     0,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,     0,     0,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   510,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,     0,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,   451,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,   470,     0,   471,     0,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   507,     0,   518,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,   127,     0,   128,   129,
     130,     0,   132,   133,   134,   135,   136,     0,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   155,
       0,     0,     0,   157,   158,   159,   160,   161,   162,     0,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   508,     0,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     509,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,     0,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,     0,     0,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   510,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,     0,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,   451,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,   470,     0,   471,
       0,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   507,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,   647,   122,   123,   124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   127,     0,   128,
     129,   130,     0,   132,   133,   134,   135,   136,     0,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     146,   147,   148,   149,   150,     0,   151,   152,   153,   154,
     155,     0,     0,     0,   157,   158,   159,   160,   161,   162,
       0,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   508,     0,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   509,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,     0,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,     0,     0,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   510,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   648,   443,     0,     0,     0,   649,   445,   446,
     447,   448,     0,   449,   450,   451,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,   470,     0,
     471,     0,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   507,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,   127,     0,
     128,   129,   130,     0,   132,   133,   134,   135,   136,     0,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,   148,   149,   150,     0,   151,   152,   153,
     154,   155,     0,     0,     0,   157,   158,   159,   160,   161,
     162,     0,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   508,     0,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   509,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,     0,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   682,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,     0,     0,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   510,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,     0,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,   451,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,   470,
       0,   471,     0,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   507,     0,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,   127,
       0,   128,   129,   130,     0,   132,   133,   134,   135,   136,
       0,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,   148,   149,   150,     0,   151,   152,
     153,   154,   155,     0,     0,     0,   157,   158,   159,   160,
     161,   162,     0,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   508,
       0,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,   238,   239,   240,   241,   242,   770,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   509,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,     0,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,     0,
       0,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   510,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,     0,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,   451,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
     470,     0,   471,     0,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   507,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
     127,     0,   128,   129,   130,     0,   132,   133,   134,   135,
     136,     0,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   155,     0,     0,     0,   157,   158,   159,
     160,   161,   162,     0,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     508,     0,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,   238,   239,   240,   241,   242,   773,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   509,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,     0,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
       0,     0,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   510,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,     0,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,   451,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,   470,     0,   471,     0,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   507,     0,
     534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     126,   127,     0,   128,   129,   130,     0,   132,   133,   134,
     135,   136,     0,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   155,     0,     0,     0,   157,   158,
     159,   160,   161,   162,     0,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   508,     0,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,   238,   239,   240,   241,   242,   777,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   509,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
       0,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,     0,     0,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     510,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,     0,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,   451,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,   470,     0,   471,     0,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   507,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
     787,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,     0,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     507,     0,   534,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,     0,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   155,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   508,     0,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   795,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   509,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,     0,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,     0,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   510,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
       0,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,   451,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,   470,     0,   471,     0,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   507,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   126,   127,     0,   128,   129,   130,     0,
     132,   133,   134,   135,   136,     0,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   155,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   508,     0,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,   238,   239,   240,
     241,   242,   897,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   509,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,     0,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   412,     0,     0,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   510,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,     0,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,   451,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,   470,     0,   471,     0,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   507,     0,   534,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   126,   127,     0,   128,   129,   130,
       0,   132,   133,   134,   135,   136,     0,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   146,   147,
     148,   149,   150,     0,   151,   152,   153,   154,   155,     0,
       0,     0,   157,   158,   159,   160,   161,   162,     0,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,     0,     0,   229,   230,   508,     0,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,   238,   239,
     240,   241,   242,   900,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   509,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,     0,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,     0,     0,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   510,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,     0,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,   451,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,   470,     0,   471,     0,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   507,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,     0,  1022,     0,     0,   126,   127,     0,   128,   129,
     130,     0,   132,   133,   134,   135,   136,     0,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   155,
       0,     0,     0,   157,   158,   159,   160,   161,   162,     0,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   508,     0,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,   238,
     239,   240,   241,   242,   243,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     509,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,     0,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,     0,     0,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   510,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,     0,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,   451,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,   470,     0,   471,
       0,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   507,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,     0,  1045,     0,     0,   126,   127,     0,   128,
     129,   130,     0,   132,   133,   134,   135,   136,     0,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     146,   147,   148,   149,   150,     0,   151,   152,   153,   154,
     155,     0,     0,     0,   157,   158,   159,   160,   161,   162,
       0,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   508,     0,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   509,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,     0,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,     0,     0,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   510,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,     0,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,   451,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,   470,     0,
     471,     0,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   507,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,   127,     0,
     128,   129,   130,     0,   132,   133,   134,   135,   136,     0,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,   148,   149,   150,     0,   151,   152,   153,
     154,   155,     0,     0,     0,   157,   158,   159,   160,   161,
     162,     0,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   508,     0,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,   238,   239,   240,   241,   242,  1391,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   509,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,     0,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,     0,     0,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   510,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,     0,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,   451,   452,   453,   454,
     455,   456,     0,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,   469,   470,
       0,   471,     0,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   507,     0,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,   127,
       0,   128,   129,   130,     0,   132,   133,   134,   135,   136,
       0,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,   148,   149,   150,     0,   151,   152,
     153,   154,   155,     0,     0,     0,   157,   158,   159,   160,
     161,   162,     0,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   508,
       0,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,   238,   239,   240,   241,   242,  1393,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   509,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,     0,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,     0,
       0,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   510,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,     0,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,   451,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
     470,     0,   471,     0,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   507,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
     127,     0,   128,   129,   130,     0,   132,   133,   134,   135,
     136,     0,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   155,     0,     0,     0,   157,   158,   159,
     160,   161,   162,     0,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     508,     0,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,   238,   239,   240,   241,   242,  1396,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   509,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,     0,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
       0,     0,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   510,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,     0,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,   451,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,   470,     0,   471,     0,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   507,     0,
     534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     126,   127,     0,   128,   129,   130,     0,   132,   133,   134,
     135,   136,     0,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   155,     0,     0,     0,   157,   158,
     159,   160,   161,   162,     0,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   508,     0,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,   238,   239,   240,   241,   242,  1398,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   509,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
       0,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     412,     0,     0,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     510,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,     0,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,   451,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,   470,     0,   471,     0,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   507,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
    2242,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,     0,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     819,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,   820,     0,     0,     0,  -935,
       0,   821,   126,   127,     0,   128,   129,   130,   822,   132,
     133,   134,     0,   823,   824,   825,   826,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   827,   828,
     150,     0,   151,   152,   153,   154,     0,     0,   829,     0,
     830,   158,   159,   160,   161,   162,   831,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   832,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   833,
     834,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   835,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
       0,   214,   215,   216,   217,   218,     0,     0,   220,     0,
     221,   222,   836,   224,     0,   225,     0,   226,   837,     0,
     838,   229,   230,  -935,   839,   233,     0,   234,     0,     0,
       0,     0,     0,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   841,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   842,     0,
     260,   261,   262,   263,   264,   843,   844,     0,   845,     0,
     268,   846,   847,   271,   848,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,   849,   281,   850,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   851,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   852,   853,   854,   313,
     314,   315,     0,     0,     0,   317,   318,   855,   320,     0,
       0,   322,   856,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,     0,   857,   335,
     858,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
       0,   859,   352,   353,     0,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   860,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   861,   388,   389,   390,   862,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   863,   403,   404,   405,   406,   407,   408,   864,   410,
     411,     0,   412,   865,     0,   414,   866,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   867,   430,     0,   432,     0,   433,   434,     0,
     435,   868,   437,   438,   439,   440,   441,     0,   869,   870,
       0,     0,     0,   444,   445,     0,   447,     0,     0,   449,
     450,   871,   452,   453,   454,   455,   456,   872,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,     0,   873,     0,   471,   874,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   507,     0,   534,     0,
       0,     0,     0,     0,     0,     0,     0,   496,   497,   498,
     499,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,   127,
       0,   128,   129,   130,     0,   132,   133,   134,   135,   136,
       0,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,   148,   149,   150,     0,   151,   152,
     153,   154,   155,     0,     0,     0,   157,   158,   159,   160,
     161,   162,     0,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   508,
       0,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,   238,   239,   240,   241,   242,  3017,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,     0,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   509,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,     0,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   412,     0,
       0,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   510,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,     0,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,   451,   452,   453,
     454,   455,   456,     0,     0,   457,   458,   459,     0,   460,
     461,   462,   463,     0,   464,   465,   466,   467,   468,   469,
     470,     0,   471,     0,   473,     0,   474,   475,   476,   477,
       0,     0,     0,   478,     0,     0,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   507,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
     127,     0,   128,   129,   130,     0,   132,   133,   134,   135,
     136,     0,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   155,     0,     0,     0,   157,   158,   159,
     160,   161,   162,     0,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     508,     0,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,   238,   239,   240,   241,   242,   243,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,     0,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   509,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,     0,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
       0,     0,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   510,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,     0,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,   451,   452,
     453,   454,   455,   456,     0,     0,   457,   458,   459,     0,
     460,   461,   462,   463,     0,   464,   465,   466,   467,   468,
     469,   470,     0,   471,     0,   473,     0,   474,   475,   476,
     477,     0,     0,     0,   478,     0,     0,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   507,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     126,   127,     0,   128,   129,   130,     0,   132,   133,   134,
     135,   136,     0,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   155,     0,     0,     0,   157,   158,
     159,   160,   161,   162,     0,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   508,     0,   659,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   660,
     286,   287,   288,   289,   290,   509,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
       0,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   661,   397,   398,   399,   400,   401,   402,     0,     0,
     403,   404,   405,   406,   662,   408,   409,   410,   411,     0,
     412,     0,     0,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     510,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   663,   443,     0,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,   451,
     452,   453,   454,   455,   456,     0,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,   469,   470,     0,   471,     0,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,     0,   128,   129,   130,     0,   132,   133,
     134,   135,   136,     0,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   155,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   508,     0,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,   238,   239,   240,   241,   242,
     893,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,     0,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   509,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,     0,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   412,     0,     0,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   510,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,     0,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
     451,   452,   453,   454,   455,   456,     0,     0,   457,   458,
     459,     0,   460,   461,   462,   463,     0,   464,   465,   466,
     467,   468,   469,   470,     0,   471,     0,   473,     0,   474,
     475,   476,   477,     0,     0,     0,   478,     0,     0,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,     0,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   155,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   508,     0,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   509,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,     0,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   661,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,     0,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   510,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   663,   443,
       0,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,   451,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,   470,     0,   471,     0,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   507,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
    1693,     0,     0,   126,   127,     0,   128,   129,   130,     0,
     132,   133,   134,   135,   136,     0,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   155,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   508,     0,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   509,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,     0,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,     0,   409,
     410,   411,     0,   412,     0,     0,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   510,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,     0,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,   451,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,   469,   470,     0,   471,     0,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   507,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   126,   127,     0,   128,   129,   130,
       0,   132,   133,   134,   135,   136,     0,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   146,   147,
     148,   149,   150,     0,   151,   152,   153,   154,   155,     0,
       0,     0,   157,   158,   159,   160,   161,   162,     0,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,     0,     0,   229,   230,   508,     0,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,   238,   239,
     240,   241,   242,  1870,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   509,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,     0,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,     0,     0,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   510,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,     0,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,   451,   452,   453,   454,   455,   456,     0,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,   469,   470,     0,   471,     0,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   507,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,   127,     0,   128,   129,
     130,     0,   132,   133,   134,   135,   136,     0,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   155,
       0,     0,     0,   157,   158,   159,   160,   161,   162,     0,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,     0,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   508,     0,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,   238,
     239,   240,   241,   242,  2229,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,     0,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     509,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,     0,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   412,     0,     0,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   510,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,     0,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,   451,   452,   453,   454,   455,   456,
       0,     0,   457,   458,   459,     0,   460,   461,   462,   463,
       0,   464,   465,   466,   467,   468,   469,   470,     0,   471,
       0,   473,     0,   474,   475,   476,   477,     0,     0,     0,
     478,     0,     0,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   507,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   127,     0,   128,
     129,   130,     0,   132,   133,   134,   135,   136,     0,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     146,   147,   148,   149,   150,     0,   151,   152,   153,   154,
     155,     0,     0,     0,   157,   158,   159,   160,   161,   162,
       0,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   508,     0,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
     238,   239,   240,   241,   242,  2244,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   509,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,     0,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,     0,     0,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   510,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,     0,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,   451,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,   469,   470,     0,
     471,     0,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   819,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
     820,     0,     0,     0,     0,     0,   821,   126,   127,     0,
     128,   129,   130,   822,   132,   133,   134,     0,   823,   824,
     825,   826,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,   827,   828,   150,     0,   151,   152,   153,
     154,     0,     0,   829,     0,   830,   158,   159,   160,   161,
     162,   831,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   832,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   833,   834,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,     0,   198,   199,   835,   201,   202,
       0,     0,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,     0,   214,   215,   216,   217,
     218,     0,     0,   220,     0,   221,   222,   836,   224,     0,
     225,     0,   226,   837,     0,   838,   229,   230,     0,   839,
     233,     0,   234,     0,     0,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,   840,   244,   841,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   842,     0,   260,   261,   262,   263,   264,
     843,   844,     0,   845,     0,   268,   846,   847,   271,   848,
     273,     0,   274,   275,   276,   277,   278,     0,     0,   279,
     849,   281,   850,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   851,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   852,   853,   854,   313,   314,   315,     0,     0,     0,
     317,   318,   855,   320,     0,     0,   322,   856,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,     0,   857,   335,   858,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,     0,
       0,     0,     0,   348,   349,     0,   859,   352,   353,     0,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
       0,   363,     0,   364,   365,   366,   860,   368,   369,   370,
     371,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   861,
     388,   389,   390,   862,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   863,   403,   404,   405,
     406,   407,   408,   864,   410,   411,     0,   412,   865,     0,
     414,   866,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   867,   430,     0,
     432,     0,   433,   434,     0,   435,   868,   437,   438,   439,
     440,   441,     0,   869,   870,     0,     0,     0,   444,   445,
       0,   447,     0,     0,   449,   450,   871,   452,   453,   454,
     455,   456,   872,     0,   457,   458,   459,     0,   460,   461,
     462,   463,     0,   464,   465,   466,   467,   468,     0,   873,
       0,   471,   874,   473,     0,   474,   475,   476,   477,     0,
       0,     0,   478,     0,     0,   479,   480,   481,   482,   483,
     484,   687,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   496,   497,   498,   499,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   126,   127,     0,   128,   129,   130,     0,
     132,   133,   134,   688,   689,     0,   690,   691,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   692,
     693,   150,     0,   151,   152,   153,   154,   694,     0,     0,
       0,     0,   158,   159,   160,   161,   162,     0,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     695,   696,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   697,   214,   215,   216,   217,   218,   698,     0,   220,
       0,   221,   222,   699,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   700,     0,   233,     0,   234,     0,
       0,     0,   701,   702,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     703,   260,   261,   262,   263,   264,   704,   705,     0,   706,
       0,   268,     0,     0,   271,     0,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   707,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   708,     0,   709,
     313,   314,   315,     0,   710,     0,   317,   318,     0,   320,
       0,   711,   322,   712,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   713,     0,
     335,     0,   714,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,   715,     0,   352,   353,   716,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   717,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   718,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,     0,   403,   404,   405,   406,   407,   408,   719,
     410,   411,     0,   412,     0,     0,   414,   720,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   721,   430,   722,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   723,
     724,     0,     0,     0,   444,   445,   725,   447,   726,     0,
     449,   450,   727,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,  1517,   729,     0,   471,     0,   473,
       0,   474,   475,   476,   477,     0,     0,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,   730,   731,   732,
     733,   734,   735,   736,   737,   738,   739,   740,   496,   497,
     498,   499,   819,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,   820,     0,     0,
       0,     0,     0,   821,   126,   127,     0,   128,   129,   130,
     822,   132,   133,   134,     0,   823,   824,   825,   826,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   146,   147,
     827,   828,   150,     0,   151,   152,   153,   154,     0,     0,
     829,     0,   830,   158,   159,   160,   161,   162,   831,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     832,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   833,   834,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,     0,   198,   199,   835,   201,   202,     0,     0,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,     0,   214,   215,   216,   217,   218,     0,     0,
     220,     0,   221,   222,   836,   224,     0,   225,     0,   226,
     837,     0,   838,   229,   230,     0,   839,   233,     0,   234,
       0,     0,     0,     0,     0,     0,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   841,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     842,     0,   260,   261,   262,   263,   264,   843,   844,     0,
     845,     0,   268,   846,   847,   271,   848,   273,     0,   274,
     275,   276,   277,   278,     0,     0,   279,   849,   281,   850,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   851,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   852,   853,
     854,   313,   314,   315,     0,     0,     0,   317,   318,   855,
     320,     0,     0,   322,   856,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,     0,
     857,   335,   858,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,     0,     0,     0,     0,
     348,   349,     0,   859,   352,   353,     0,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,     0,   363,     0,
     364,   365,   366,   860,   368,   369,   370,   371,     0,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   861,   388,   389,   390,
     862,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   863,   403,   404,   405,   406,   407,   408,
     864,   410,   411,     0,   412,   865,     0,   414,   866,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   867,   430,     0,   432,     0,   433,
     434,     0,   435,   868,   437,   438,   439,   440,   441,     0,
     869,   870,     0,     0,     0,   444,   445,     0,   447,     0,
       0,   449,   450,   871,   452,   453,   454,   455,   456,   872,
       0,   457,   458,   459,     0,   460,   461,   462,   463,     0,
     464,   465,   466,   467,   468,     0,   873,     0,   471,   874,
     473,     0,   474,   475,   476,   477,     0,     0,     0,   478,
       0,     0,   479,   480,   481,   482,   483,   484,   819,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   496,
     497,   498,   499,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,   820,     0,     0,     0,     0,     0,   821,
     126,   127,     0,   128,   129,   130,   822,   132,   133,   134,
       0,   823,   824,   825,   826,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,   827,   828,   150,     0,
     151,   152,   153,   154,     0,     0,   829,     0,   830,   158,
     159,   160,   161,   162,   831,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   832,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   833,   834,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,     0,   198,   199,
     835,   201,   202,     0,     0,     0,   203,   204,   205,     0,
    1855,   207,   208,     0,   209,   210,   211,   212,     0,   214,
     215,   216,   217,   218,     0,     0,   220,     0,   221,   222,
     836,   224,     0,   225,     0,   226,   837,     0,   838,   229,
     230,     0,   839,   233,     0,   234,     0,     0,     0,     0,
       0,     0,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   841,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   842,     0,   260,   261,
     262,   263,   264,   843,   844,     0,   845,     0,   268,   846,
     847,   271,   848,   273,     0,   274,   275,   276,   277,   278,
       0,     0,   279,   849,   281,   850,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   851,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   852,   853,   854,   313,   314,   315,
       0,     0,     0,   317,   318,   855,   320,     0,     0,   322,
     856,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,     0,   857,   335,   858,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,     0,     0,     0,     0,   348,   349,     0,   859,
     352,   353,     0,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,     0,   363,     0,   364,   365,   366,   860,
     368,   369,   370,   371,     0,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   861,   388,   389,   390,   862,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   863,
     403,   404,   405,   406,   407,   408,   864,   410,   411,     0,
     412,   865,     0,   414,   866,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     867,   430,     0,   432,     0,   433,   434,     0,   435,   868,
     437,   438,   439,   440,   441,     0,   869,   870,     0,     0,
       0,   444,   445,     0,   447,     0,     0,   449,   450,   871,
     452,   453,   454,   455,   456,   872,     0,   457,   458,   459,
       0,   460,   461,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   873,     0,   471,   874,   473,     0,   474,   475,
     476,   477,     0,     0,     0,   478,     0,     0,   479,   480,
     481,   482,   483,   484,  2942,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   496,   497,   498,   499,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,  2943,
       0,     0,     0,     0,     0,  2944,   126,   127,     0,   128,
     129,   130,  2945,   132,   133,   134,     0,   823,  2946,   825,
     826,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     146,   147,   827,   828,   150,     0,   151,   152,   153,   154,
       0,     0,  2947,     0,  2948,   158,   159,   160,   161,   162,
    2949,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,  2950,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   833,   834,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,     0,   198,   199,   835,   201,   202,     0,
       0,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,     0,   214,   215,   216,   217,   218,
       0,     0,   220,     0,   221,   222,   836,   224,     0,   225,
       0,   226,  2951,     0,  2952,   229,   230,  2953,  2954,   233,
       0,   234,     0,     0,     0,     0,     0,     0,   237,     0,
     238,   239,   240,   241,   242,   243,   244,  2955,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,  2956,     0,   260,   261,   262,   263,   264,   843,
     844,     0,   845,     0,   268,  2957,  2958,   271,  2959,   273,
       0,   274,   275,   276,   277,   278,     0,     0,   279,  2960,
     281,  2961,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  3233,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     852,  2963,   854,   313,   314,   315,     0,     0,     0,   317,
     318,  2965,   320,     0,     0,   322,   856,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,     0,  2967,   335,  2968,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,     0,     0,
       0,     0,   348,   349,     0,  2969,   352,   353,     0,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,     0,
     363,     0,   364,   365,   366,   860,   368,   369,   370,   371,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,  2970,   388,
     389,   390,     0,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,  2971,   403,   404,   405,   406,
     407,   408,     0,   410,   411,     0,   412,  2973,     0,   414,
     866,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,  3234,   430,     0,   432,
       0,   433,   434,     0,   435,  2975,   437,   438,   439,   440,
     441,     0,   869,   870,     0,     0,     0,   444,   445,     0,
     447,     0,     0,   449,   450,  2976,   452,   453,   454,   455,
     456,     0,     0,   457,   458,   459,     0,   460,   461,   462,
     463,     0,   464,   465,   466,   467,   468,     0,   873,     0,
     471,  2978,   473,     0,   474,   475,   476,   477,     0,     0,
       0,   478,     0,     0,   479,   480,   481,   482,   483,   484,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   496,   497,   498,   499,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,     0,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,   155,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   508,     0,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,     0,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   509,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,     0,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,     0,   345,
     346,     0,     0,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,     0,   363,     0,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,     0,     0,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   510,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
       0,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,   451,   452,   453,   454,   455,   456,     0,     0,   457,
     458,   459,     0,   460,   461,   462,   463,     0,   464,   465,
     466,   467,   468,   469,   470,     0,   471,     0,   473,     0,
     474,   475,   476,   477,     0,     0,     0,   478,     0,     0,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   819,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,   820,     0,     0,     0,
       0,     0,   821,   126,   127,     0,   128,   129,   130,   822,
     132,   133,   134,     0,   823,   824,   825,   826,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,   827,
     828,   150,     0,   151,   152,   153,   154,     0,     0,   829,
       0,   830,   158,   159,   160,   161,   162,   831,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   832,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     833,   834,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
       0,   198,   199,   835,   201,   202,     0,     0,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,     0,   214,   215,   216,   217,   218,     0,     0,   220,
       0,   221,   222,   836,   224,     0,   225,     0,   226,   837,
       0,   838,   229,   230,     0,   839,   233,     0,   234,     0,
       0,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   841,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   842,
       0,   260,   261,   262,   263,   264,   843,   844,     0,   845,
       0,   268,   846,   847,   271,   848,   273,     0,   274,   275,
     276,   277,   278,     0,     0,   279,   849,   281,   850,     0,
     283,   284,   285,   286,   287,   288,   289,   290,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   852,   853,   854,
     313,   314,   315,     0,     0,     0,   317,   318,   855,   320,
       0,     0,   322,   856,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,     0,   857,
     335,   858,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,     0,     0,     0,     0,   348,
     349,     0,   859,   352,   353,     0,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,     0,   363,     0,   364,
     365,   366,   860,   368,   369,   370,   371,     0,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   861,   388,   389,   390,     0,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   863,   403,   404,   405,   406,   407,   408,     0,
     410,   411,     0,   412,   865,     0,   414,   866,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,     0,   432,     0,   433,   434,
       0,   435,   868,   437,   438,   439,   440,   441,     0,   869,
     870,     0,     0,     0,   444,   445,     0,   447,     0,     0,
     449,   450,   871,   452,   453,   454,   455,   456,     0,     0,
     457,   458,   459,     0,   460,   461,   462,   463,     0,   464,
     465,   466,   467,   468,     0,   873,     0,   471,   874,   473,
       0,   474,   475,   476,   477,     0,     1,     0,   478,     0,
       0,   479,   480,   481,   482,   483,   484,     2,     0,     3,
       4,     0,     0,     1,     0,     0,     0,     0,   496,   497,
     498,   499,     0,     0,     2,     0,     0,     0,     6,     0,
       0,     0,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     0,     0,     0,     0,     6,     0,     0,     0,     8,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       9,     0,     0,     0,     0,     0,     8,     0,     0,     0,
       0,     0,    10,     0,   571,     0,     0,     9,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,     0,    10,
       0,   571,     0,     0,     0,     0,     0,     0,     0,    13,
       0,     0,    12,     0,     0,     0,     0,     0,     0,     0,
     572,     0,     0,     0,     0,     0,    13,     0,    16,     0,
       0,     0,     0,     0,     0,     0,    17,   572,     0,     0,
       0,     0,     0,     0,     0,    16,     0,     0,     0,     0,
       0,     0,    20,    17,     0,     0,    21,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
       0,     0,     0,    21,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,    27,     0,     0,     0,     0,     0,    28,
       0,     0,    29,     0,     0,     0,     0,     0,    25,    26,
      27,     0,     0,     0,     0,     0,    28,     0,     0,    29,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,    32,     0,     0,
      31,     0,     0,     0,    33,     0,     0,     0,     0,    34,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
      35,    33,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,    36,     0,     0,     0,    37,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,    37,     0,     0,    38,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    39,
       0,     0,     0,    38,     0,    41,     0,     0,     0,     0,
      42,     0,     0,     0,   573,     0,    39,     0,     0,     0,
       0,     0,    41,     0,     0,     0,    43,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   574,     0,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   668
};

static const yytype_int16 yycheck[] =
{
       8,    21,   567,   505,    12,   774,   994,   566,    45,    17,
      88,    89,   762,     0,     0,    23,    24,     0,     0,     0,
      28,    29,    30,   784,    86,    33,   632,   864,    36,    37,
    1014,   786,    40,  1250,  1238,    43,    44,    45,  1532,   994,
    1055,     0,    18,   574,  1421,     7,  1237,   793,  1672,  1719,
      45,  1498,    90,  1212,  2115,  2179,     0,     7,    90,    21,
    2185,     0,   870,  2118,  1172,   681,   657,  2240,    88,    89,
      37,    21,     0,  1579,  2146,  1285,  1214,  1600,  2150,  1178,
       0,   573,  2284,  2285,  2286,  2674,  2642,  2642,  2673,   574,
      18,  1217,   100,  1003,     0,  1426,  1003,   105,   106,   107,
     108,   109,    21,   894,  1242,  1137,  1829,   898,   564,  1003,
    2112,     0,  1144,   628,  2236,  1003,    36,     0,   633,     0,
       0,     0,  1106,     0,     0,  1472,    88,    89,     0,  2691,
       0,     0,     0,     0,     0,     0,   638,     0,    88,    89,
       0,   108,   774,     0,   776,     0,   778,     0,     0,  2174,
    1625,  1626,  2687,    44,  2485,   827,   828,  2596,  2550,  2299,
      24,  2600,  1150,   592,  3128,     5,  3029,  3009,     5,    88,
      89,     5,   674,    13,    14,    17,     5,     5,     0,     5,
     100,     0,   854,  3025,    13,    14,  1737,    13,    14,    40,
    1739,  1638,  1842,     5,  2312,     5,  1971,  2319,     5,    12,
    1679,   757,   994,     5,    17,     5,    13,    14,   752,     9,
       5,    13,    14,     5,     5,     5,    29,     9,     5,    27,
       5,     5,  3237,     5,     5,    31,    74,     5,     5,    17,
      43,    44,     5,    39,    65,   117,    47,  1252,  1226,     9,
    2308,  1229,  1230,    57,  1839,     9,  1261,   173,   140,   122,
      13,    14,    13,    14,   224,     5,   229,   193,    11,  2870,
     172,   107,  1054,    16,    47,  2387,  2388,    65,  2390,     3,
       4,     5,     4,  2459,     4,     9,  2004,     9,   100,     9,
    2989,   100,    11,    82,   757,   183,   902,    16,    31,  2017,
    1098,  1052,  2916,   106,    93,    48,    39,   290,  2554,  2555,
      11,   248,   292,    47,   293,    16,   248,    47,  3124,  3419,
      11,    82,   117,   172,    15,    16,  3127,    65,   298,   230,
      11,   169,    93,     3,    15,    16,  2528,    80,   136,    80,
    1122,  3459,     8,   248,  1781,    11,  1783,    48,   316,    15,
      16,   316,     9,    19,    20,    21,    11,    48,   392,   298,
    2527,    16,   275,  2530,   278,    35,    36,    48,  1150,   195,
    1152,  1153,    17,   274,  3328,  3329,   138,  3572,   107,    80,
    2442,   195,    66,   131,   115,   120,  3322,  2610,  3324,    80,
      74,   115,   149,    48,   120,  1001,    42,   166,  1225,    80,
      42,    11,   421,    43,  1155,  1012,   162,   372,    31,    11,
    1006,  1073,  1074,    15,    16,    31,    39,   120,  2815,    90,
    3714,  2818,  2135,    39,    12,    80,  2972,  1089,   484,    17,
     436,  3263,   172,   136,    65,     5,   173,  1941,    48,   376,
     459,    29,  3021,   108,  1226,   202,  2609,  1229,  1230,  3024,
     506,   460,  1550,  3032,    11,    43,    44,   128,  3558,    16,
      11,  3561,   193,    31,    15,    16,  1031,   362,  1972,  2584,
      80,   376,  1037,   994,  3520,   108,  1414,  3771,   164,   485,
     292,  1579,  2705,   292,   124,   241,   520,   282,   371,   215,
    2482,    48,   393,   331,  2606,   390,  2608,   221,   296,  1105,
    2539,   171,  1007,   173,  1997,  1998,  1999,  2546,  2547,  2548,
     115,   520,   108,   995,  1019,  3710,    75,   454,   106,   517,
     244,   519,   454,    80,  3325,  2021,   524,  3463,  3334,   527,
     176,   433,  3650,  1054,   176,   361,  3235,   520,   536,   287,
     520,   520,   363,   457,   358,   274,   277,   515,   234,   454,
     515,  1291,   364,   108,   524,   364,   457,   326,   626,   472,
     244,   524,   360,   131,   362,  3418,   564,  1904,   566,   567,
     568,   531,   460,   310,    65,   363,   574,   317,   318,   319,
    2747,  3182,  3196,   520,   433,   524,   422,  2763,   520,   574,
     462,   353,   390,  2701,   520,  2841,   478,   460,   394,  2112,
    1206,  3215,  3702,  3649,   520,   615,   516,   509,   574,   607,
     608,   609,  2724,   451,  3619,   520,   626,  1766,   419,   617,
     522,  1202,  1203,  1823,  1405,   363,  2684,   330,   294,   627,
     628,  1152,  1153,  2398,   632,   633,  1418,   520,   309,  3593,
     394,   626,   670,   383,   433,  1179,   419,  1429,   670,  1431,
    2191,  1143,  1397,  2192,  1592,   573,  3053,   216,  1204,  1441,
     397,   659,   660,   615,   662,  1859,   484,   469,   401,  1674,
     482,  2184,   433,   482,   626,   615,  1458,   282,   676,   520,
     512,  2321,   422,   668,   682,   419,   626,  2152,   506,   419,
     520,  3237,  3237,   520,   518,  3247,   520,   527,   522,   484,
     527,   520,   520,   524,   520,  1487,  1488,  3560,  2177,   521,
     762,   523,   521,   679,   523,   455,   520,   626,   520,   676,
     520,   506,   457,   520,  2887,  1932,   466,  3559,   520,  2314,
     520,   457,   363,   536,   512,   520,   524,  2455,   520,   520,
     520,  1204,   482,   520,  1480,   520,   520,  1166,   520,   520,
    3132,   749,   520,   520,   752,   609,   427,   520,  3187,   519,
    1422,  1423,   482,  3192,  2894,   568,   506,   520,  3089,   520,
     747,   747,  3726,   516,   747,   747,   747,   518,   401,   422,
     520,   522,   780,   274,   782,   401,   506,   511,   512,   511,
     512,   511,   512,   383,  2833,   752,   794,   516,   747,  2136,
     470,   682,    11,   801,   802,   803,   804,   805,  1414,  2246,
    2247,  2248,  3004,   747,  3115,   516,  3117,  1795,   747,   817,
     511,   512,   513,   514,   515,   516,  2026,  1805,   281,   747,
    1808,    31,   513,   514,   515,   516,   106,   747,  3417,   409,
     410,   507,   508,   509,   148,   511,   512,   513,   514,   515,
     516,   747,    26,  2868,   511,   512,   511,   512,   513,   514,
     515,   516,   507,  1868,    26,   118,   864,   512,   747,   164,
    1621,    80,   363,   518,   747,   520,   747,   747,   747,   682,
     747,   747,  2874,  3435,   117,   747,  1984,   747,   747,   747,
     747,   747,   747,   524,   747,   521,  3008,   747,   524,   390,
     747,    27,   747,   248,   747,   747,   460,    33,  3433,   511,
     512,   513,   514,   515,   516,    34,   220,  1524,  1525,  1474,
    1469,  1470,  1529,  2021,    11,  1676,   518,  1678,   274,  1478,
     522,   131,  1538,   131,   524,   108,  2420,   347,   118,  2376,
    1918,   267,    61,  1389,   197,   398,  3483,  3484,   536,    38,
    2443,  2444,  2445,  2446,  1736,  1737,   513,   514,   515,   516,
    1028,  1482,   513,   514,   515,   516,   520,  1035,  2066,  2482,
    1992,  1552,   248,  1918,  1420,   385,   209,  1004,   273,   567,
     568,  3556,   260,   261,   254,  1591,  1592,  1568,  3289,  3568,
    1436,   337,   262,    80,   298,  1601,   994,   323,  1898,  1481,
     520,  1898,  1899,  1900,    55,   178,  1004,  1482,  1006,  1007,
     136,  1009,   422,  1795,  1898,  1899,  1622,   197,  1028,  1897,
    1018,  1019,   150,  1805,  1022,  1035,  1808,  2348,  2493,   174,
    3703,   376,  1791,  2354,     0,  3198,  2357,  3574,     8,  1531,
    1545,   274,   412,   523,   277,    15,    16,  1045,   834,    19,
      20,    21,   162,    13,    14,   470,  1054,  1055,  1056,   509,
      61,   524,  1060,   473,    11,  2154,  3180,  3642,  2157,  2263,
     856,   244,   522,  3619,  3619,   203,  1028,   995,   342,   277,
    1820,  1821,  1822,  1035,   173,   131,    38,  2287,  1028,   287,
    3763,   248,  1641,  2806,   682,  1035,     5,  3148,  1879,   230,
     376,    48,   380,   381,   249,   475,   892,  3152,   372,   454,
    1108,  1893,  1894,  1849,   160,    55,  2214,   509,   277,  1028,
    1901,  1106,   211,   282,  1905,   508,  1035,  1908,   520,  2642,
     248,   241,   131,    80,   520,   518,  1918,    82,   227,  2506,
     314,   315,  1764,   274,  2272,   196,   450,  1174,    93,   238,
     201,   358,   314,   315,  1152,  1153,  1154,  1185,  1186,  1157,
    1188,   160,   482,  1185,  1186,   181,  1188,  3746,  2142,  1791,
     296,   172,   484,  1171,  1172,   520,  1174,  2921,   454,   289,
     508,  1179,   341,  1629,     8,  2929,   506,    11,  1810,   240,
     518,    15,    16,  1815,   506,    19,    20,    21,    82,    27,
    2637,   347,   347,   376,  2641,    33,  2643,   167,   520,    93,
     515,  3788,   343,  1211,  1212,   174,  2332,   522,  3795,   376,
    2336,   173,  1179,   397,   191,   192,  1224,  1225,    71,    72,
    3393,   277,   394,   162,   360,   397,   282,   177,   167,   385,
     385,   287,  2024,  1241,   520,  2741,   484,  1245,   426,   108,
     428,  1249,  1801,   426,  1252,   428,   196,  1806,   376,   211,
     434,   201,   393,  1261,   390,   426,   515,   428,   506,     4,
    1876,  1026,   434,   522,     9,   227,   422,   422,   367,    13,
      14,   454,   520,   282,  1241,  3477,   238,  1285,   287,  1044,
     249,  1077,  1047,   260,   261,   384,     4,   454,   518,   205,
     240,     9,   522,   477,   162,   511,  1092,   513,   136,   167,
     518,  3362,   241,   194,   522,   477,   317,   318,   319,  3364,
     526,   527,   371,   372,   294,     4,   457,   473,   473,  1775,
       9,    13,    14,   205,   525,   131,   454,   463,   529,  1946,
    1947,  1948,  1949,  1950,  1951,   396,     3,  1954,  1955,  1956,
    1957,  1958,  1959,  1960,  1961,  1962,  1963,    13,    14,  2457,
     289,  2874,  2460,   520,   160,     4,    13,    14,  1171,  2151,
       9,  2738,  1923,    42,  1980,     4,  1927,   201,   255,  1930,
       9,  1379,   383,   241,   439,  1383,  1384,    74,   347,    13,
      14,  1389,  1390,    62,   518,   441,   520,  1918,   522,    27,
     224,   518,   520,   520,  1402,    33,   452,  2147,  2190,  2191,
     422,  1388,  1388,   380,   381,   367,  1388,  1388,   482,   473,
     484,   422,  1420,  1421,    13,    14,   385,  2794,   115,  2623,
     181,   289,   384,  2378,  1022,  1433,   521,   106,  1436,   524,
    1438,  2622,   441,  2536,  1890,    13,    14,  2540,  2541,  2542,
     426,   379,   428,   452,   455,   178,   396,  1045,  2607,  2246,
      27,  2248,  2243,   422,  2245,   466,    33,   520,   296,  1036,
     294,  1469,  1470,  1040,  1472,   520,  1474,  1475,   520,  1477,
    1478,   277,   521,  2664,  1482,   524,   282,  1933,  2095,  2096,
    1558,   287,   521,  1561,  2100,   524,    13,    14,  1566,  1945,
    1498,  1569,   520,  2024,   376,  2621,  1574,  2623,   136,     5,
     178,  2485,   521,   385,   473,   524,  1482,   167,    27,   520,
    1108,   244,  1532,  1537,    33,  1539,  1540,   520,   356,  1975,
     659,   660,   360,   662,   520,   204,  1982,   507,   508,   509,
     520,   511,   512,   513,   514,   515,   516,  1545,  1558,  1547,
     422,  1561,  1550,   172,  2352,  2353,  1566,  1555,  3172,  1569,
      13,    14,   390,  1481,  1574,   521,  2311,  2349,   524,   136,
     521,  3734,   521,   524,  2020,   524,   244,  2023,  1576,   520,
    1532,  1579,  2028,  1171,  1172,   254,    13,    14,   521,  3651,
     277,   524,  1532,   262,   520,   282,   521,  3712,  3713,   524,
     521,   473,  1600,   524,   520,   274,  1558,  1605,   521,  1561,
     521,   524,   108,   524,  1566,  1588,   521,  1569,  1558,   524,
     521,  1561,  1574,   524,   520,  3687,  1566,   136,   520,  1569,
     521,  1629,   520,   524,  1574,   463,   506,   306,  2219,  1588,
    1638,   503,    27,  1641,   331,   441,   513,   521,    33,  1558,
     524,   226,  1561,   376,  1588,  3770,   452,  1566,   521,  1588,
    1569,   524,   349,   503,  2642,  1574,   521,   292,   296,   524,
    1588,   426,  1475,   428,  1477,  2606,  1674,  2608,  1588,  1677,
    3047,   522,   178,   507,   508,   509,   522,   511,   512,   513,
     514,   515,   516,   362,  1722,  1693,  3758,  1695,    27,  1697,
    1722,    13,    14,   426,    33,   428,    74,  3769,   521,   205,
     521,   524,    80,   524,  1712,  1713,   385,   183,   521,   521,
     186,   524,   524,   521,  3237,    93,   524,   131,   356,   296,
    1696,   454,   360,   521,   171,   521,   524,   406,   524,  2888,
     524,  2935,   521,    31,   754,   524,   756,   115,   244,   117,
     521,   136,  1750,   524,  1752,   520,   160,   252,   426,   521,
     428,   521,   390,   521,   451,   172,   524,  3381,  1766,  1767,
     297,   521,   521,   460,   524,   524,    61,  1775,   520,  1777,
    1778,  1779,  1780,  1781,  1782,  1783,   454,   296,   521,   356,
    1788,   524,  1790,   360,    13,    14,  3280,    85,  3005,    13,
      14,   297,  2807,  1801,  1802,   423,    94,   136,  1806,  1807,
      13,    14,   226,  1811,  1812,  1813,  1814,   521,  1816,  1817,
     524,    13,    14,   390,  2373,  1823,   503,  2578,   116,     6,
     521,   521,     9,   524,   524,   463,   153,   521,  1836,    16,
     524,   209,   338,  1841,  1842,  1843,  1844,   356,    13,    14,
    1848,   360,   521,   356,    31,   153,   521,  2378,    35,   524,
    2642,    13,    14,   178,     8,  1863,   521,    11,    42,   524,
    1868,    15,    16,    13,    14,    19,    20,    21,   282,   521,
     376,   390,   524,   287,   153,  2331,  1474,  1475,   153,  1477,
     205,   521,  1890,    13,    14,   277,   463,    13,    14,   520,
    3514,    13,    14,  2510,  2511,   193,  1904,    13,    14,   277,
     172,   296,    13,    14,   282,    13,    14,  2657,   206,   277,
    1918,    13,    14,   371,   372,   264,   265,   371,   372,   244,
     426,   564,   428,   380,   381,  1933,  2717,  2005,   371,   372,
     314,   315,  2678,  2011,   465,   466,    42,  1945,  2926,   445,
    1152,  1153,  1862,  2698,   463,   451,    89,  3394,   454,   473,
     153,   486,  1550,   331,  1767,   469,   520,   296,   327,   520,
     153,   356,   520,   520,  1777,   360,  1779,  1975,   520,  1782,
      41,   349,   297,   520,  1982,  1788,  1984,  1790,  1576,   153,
     522,  1579,   153,   153,  3654,  2005,  3656,   178,  1996,  1802,
     292,  2011,   358,   433,  1807,   390,   521,   520,  1811,  1812,
    1813,  1814,   520,  1816,  1817,   520,   424,  2598,  2016,   520,
     222,   227,  2020,  2021,   205,  2023,  2024,   356,  2026,   301,
    2028,   360,   520,   227,   520,   299,  3520,   441,   227,     8,
      42,   239,    11,   520,     5,     5,    15,    16,   452,   520,
      19,    20,    21,  2005,     5,   520,   520,   201,   520,  2011,
     148,   390,  3243,   244,     5,  2005,   520,     5,  2066,    27,
     520,  2011,  2070,     5,   162,    33,  2074,  3082,   463,   167,
     224,   149,     9,   451,    42,  3569,     3,  3747,  3062,   520,
     483,   303,   460,   104,   172,   524,  2005,   521,  3043,   524,
      42,   222,  2011,   390,    62,   167,  3619,   289,   167,   287,
     239,   426,    61,   428,  2112,  2100,   297,   520,   520,   433,
     408,    93,   433,   411,   524,    61,    61,   433,  2735,   267,
     433,   433,   220,   531,   463,  2145,   451,  3504,  2136,   454,
     482,  2168,   277,   153,  2926,  2972,   115,   153,   106,  2931,
     294,   277,   100,   241,    42,   520,   520,  2938,  2939,   277,
    2170,  2159,   277,     3,  1752,  3649,   520,     9,    41,   518,
    2168,   431,   431,   518,   522,   433,  2174,   433,   136,  1767,
     433,  3618,   433,   521,   521,   521,   172,   521,  2161,  1777,
     521,  1779,   524,  2145,  1782,   376,  2642,  2979,  2980,   521,
    1788,   289,  1790,   521,   520,  2145,  3304,   227,  3415,   479,
     298,   521,  2161,   227,  1802,   284,  2214,   284,  2170,  1807,
    2769,   520,  2220,  1811,  1812,  1813,  1814,  2161,  1816,  1817,
    2170,   864,  2161,   524,  3601,   478,  2145,   520,  2236,   317,
     318,   319,    11,  2161,   358,   426,   204,   428,  2246,  2247,
    2248,  2161,   519,   524,   528,   224,   524,   520,   531,  3237,
     431,  2170,   183,    42,   445,   282,   520,  2713,   163,   172,
     451,   433,   524,   454,   521,   520,   509,   220,   524,   267,
     460,   293,   393,    62,   230,   316,   316,   524,   524,  2287,
     183,   222,   521,   520,   277,   298,   254,   230,   336,   290,
     230,  2299,  2909,   172,   262,   383,   473,   520,   153,  2307,
     423,   520,   153,   482,   153,   153,   274,    42,   277,   292,
     521,  2319,  2320,  2321,  2322,   294,  2324,   106,   503,  2306,
    2306,   521,  2317,  2331,  2306,  2306,   521,  2335,   296,   518,
    2338,    42,   292,    61,   422,  2343,   503,   172,   306,   521,
      11,   521,    42,   521,   167,   521,  2159,  2355,  2907,   183,
     167,   520,   450,   507,   508,   509,   521,   511,   512,   513,
     514,   515,   516,   521,   520,  2373,   521,   455,  2376,   520,
    2378,   524,   521,   519,   521,   172,   528,   521,   466,  2387,
    2388,   522,  2390,   521,   503,   520,  1984,   176,   356,   433,
     156,   520,   360,   520,   362,     9,   479,   479,    61,    42,
    2420,   293,   520,   293,   524,   509,   505,   148,   457,   524,
     247,    61,    61,  1056,   267,   204,  3620,   385,  2016,   433,
     518,   162,   390,  2021,   522,   520,   167,   153,   205,  3046,
     277,  2439,   520,   153,  3226,  3227,   153,   521,   406,   433,
    2448,  2449,  2450,   433,   433,  3237,   433,   172,   284,  2457,
      42,   284,  2460,   519,   358,   520,   520,  2465,  2420,  2521,
     521,  3216,   524,   482,     3,   254,     5,   292,  2066,   290,
    2420,    42,   153,   262,  2482,   521,  2074,   519,   282,   220,
     519,  2937,   172,   521,   520,   274,   520,    61,   521,   521,
    2485,   188,   521,   167,    80,   463,   144,  2459,  2506,   201,
     241,   302,   172,   521,   521,   520,   531,  1150,    83,  2322,
     521,   520,  3043,   521,   524,  2552,  2553,   306,   521,   525,
     364,  2516,  2559,   520,   293,   183,   521,   153,   507,   508,
     509,   176,   511,   512,   513,   514,   515,   516,   524,   445,
     521,   521,   520,   520,  2552,  2553,   521,   521,   289,    42,
      42,  2559,   524,    86,   521,   520,  3306,   298,   460,   172,
     524,  2159,   519,   481,  2572,   520,   201,  2575,     9,   519,
     109,   110,   521,   362,   521,   511,   303,   521,   466,   292,
     519,   509,  1225,    61,  2592,    42,   524,   521,  2596,   521,
    3149,   521,  2600,  2601,  2602,   521,   385,   520,  2606,  2607,
    2608,  3585,  2610,  2598,   521,    62,   521,     8,   482,   521,
      11,   521,   207,   115,    15,    16,  2214,   406,    19,    20,
      21,  2629,  2220,  2631,  3385,    42,   520,   230,    88,  2637,
     194,  3619,   509,  2641,  2642,  2643,  2644,  2645,  2646,  2647,
    2648,  2649,  2650,  2651,  2652,  2653,   282,     8,   282,   106,
      11,  2571,   191,   192,    15,    16,     7,     8,    19,    20,
      21,    12,   522,   522,   522,  2673,    17,   521,  2676,   433,
      21,  2679,    23,    24,  3290,    42,  3292,    28,    29,    30,
     522,   522,    33,  3139,  2692,    36,    37,   433,    42,    40,
    2677,  2677,    43,    44,   522,  2677,  2677,  2705,   522,  3305,
     522,   277,  3308,   522,   522,  2713,   522,   522,   522,   450,
     522,  3302,   522,   522,   522,   522,  2724,   256,   257,   258,
     259,   260,   261,   522,  2322,   264,   265,   522,  3345,  3346,
    2738,   522,  3482,  2741,   522,   522,  2814,    88,    89,   522,
    2748,  2749,  2750,  2751,   522,   520,  1389,   204,   522,   100,
     522,   522,  2672,   482,   105,   106,   107,   108,   109,  2767,
     522,  2769,  3531,   522,   522,  2760,   522,  3522,   107,   524,
      42,   292,   520,     9,   357,  2783,   520,  1420,  1421,   524,
    2700,  3237,   520,  2703,   340,   524,  2794,   521,  2601,  2602,
     109,   110,    61,  1436,  2814,   201,   194,   254,   521,  2807,
     519,  2763,    11,   525,  2812,   262,   524,   431,   282,   524,
     433,   465,    91,   521,   349,   520,  2629,   274,    42,   153,
     521,   122,   521,   224,   337,   153,   231,  3619,    42,   521,
     372,  2644,  2645,  2646,  2647,  2648,  2649,  2650,  2651,  2652,
    2653,   380,   381,   372,    42,   521,   524,   520,   520,   306,
      42,   460,  2814,   520,    99,  2863,   311,   508,   172,  2457,
    2868,   503,  2460,   224,  2814,   520,  2874,  2465,  2863,  3486,
     433,   282,   191,   192,   520,   252,   193,   445,   460,    31,
    2888,   520,   295,    80,    74,    74,  2894,  3478,     9,   521,
    3507,  3508,   521,   294,   374,  2814,    11,    61,   520,  2907,
    2908,   521,   521,     8,   172,   362,    11,  2915,    23,    24,
      15,    16,   528,   520,    19,    20,    21,   521,    93,   132,
     509,   274,   292,   445,  2932,    42,   423,    83,   385,  2937,
      42,   201,   520,   294,   521,   295,   295,   256,   257,   258,
     259,   260,   261,    48,   521,   264,   265,   520,   465,   406,
      55,   521,   521,   207,   292,   292,   521,  3459,   520,    27,
     148,   500,   501,   529,  2972,    33,   525,   390,   457,   120,
     520,   520,   371,    25,    42,    80,   524,   402,    37,   230,
     521,   349,   520,   126,   231,  2931,  1629,   747,  1789,  2624,
    2637,  2241,  1697,    14,    62,  2303,   111,   608,  2596,  2376,
    3008,  3043,  2600,  2601,  2602,  2667,  3697,  3537,  3209,  3621,
    3630,  3570,  3690,  3268,  1212,  2247,  3024,  3618,  2692,  2234,
    2616,  3628,  2641,  3616,  2231,  1385,  2576,  1469,  3454,  3037,
    1420,  2629,  1482,     8,  3384,  3043,    11,  2575,   106,  3047,
      15,    16,  3569,  3733,  3516,  3421,  2644,  2645,  2646,  2647,
    2648,  2649,  2650,  2651,  2652,  2653,  3793,  3799,  3251,  3773,
    3763,   380,   381,  3744,  3072,  3638,  3796,  3062,   136,   614,
    3078,  3514,   177,    48,  3082,  2552,  2167,  3335,  3086,  2168,
      55,  3485,  3123,  3725,  2559,  3726,  2161,  2217,  1761,  2183,
    1171,   196,  1027,  1194,  1027,  2908,   201,  2440,  1195,  3580,
    2200,  1725,  3465,  3023,  3112,    80,   507,   508,   509,  3294,
     511,   512,   513,   514,   515,   516,  1760,  1197,    21,  2170,
    3128,  2763,  3086,  2016,   615,   626,  1007,  2420,  2419,  3230,
    2465,  3139,  1775,  1438,  1003,   240,   204,  1003,  1003,  1003,
    3468,  3149,  3469,  2741,  3665,  2074,   507,   508,   509,  2184,
     511,   512,   513,   514,   515,   516,  2479,  2038,  2857,  1553,
    2149,  2529,  1696,  3619,  2024,    30,   517,   100,   519,  2767,
      -1,   146,    -1,   524,    -1,    -1,   527,    -1,    -1,  3187,
      -1,   500,   501,    -1,  3192,   536,   254,    -1,    -1,   294,
      -1,    -1,    -1,    -1,   262,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   177,    -1,   109,   110,   274,    42,    -1,    -1,
    3218,    -1,    -1,    -1,    -1,   566,   567,   568,    -1,  3256,
    3785,   196,    -1,    -1,    -1,    -1,   201,    62,   296,  3237,
    3238,  3239,    -1,    -1,    -1,    -1,    -1,    -1,   306,    -1,
      -1,    -1,    -1,  3251,    -1,    -1,    -1,  1890,  3256,  3257,
      -1,  3259,    -1,    -1,  3262,    -1,   607,   608,   609,    -1,
    3280,    -1,    -1,    -1,   615,   240,   617,    -1,    -1,  3277,
      -1,   106,   107,    -1,    -1,   626,   627,   628,    -1,    -1,
     115,   632,   633,    -1,    -1,    -1,   191,   192,   356,    -1,
    1933,   396,   360,    -1,   362,    -1,  3304,  3305,    -1,    -1,
    3308,    -1,  1945,    -1,    -1,    -1,    -1,    -1,   659,   660,
    2908,   662,    -1,    -1,    -1,    -1,    -1,   385,  3280,   294,
    3328,  3329,   390,    -1,    -1,   676,    -1,    -1,  3248,  3249,
    3280,   682,  1975,    -1,    -1,    -1,    -1,    -1,   406,  1982,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,   256,   257,   258,   259,   260,   261,    -1,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,   204,
      -1,    -1,    -1,   564,    -1,    -1,  3384,  2020,    -1,    -1,
    2023,    -1,    -1,    -1,  3392,  2028,  3394,    -1,  3425,    -1,
      -1,  3428,    -1,    -1,    -1,   463,    -1,    -1,   749,   504,
      -1,   752,   507,   508,   509,  3218,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,  3425,    -1,   254,
    3428,   396,   172,  3431,    -1,  3238,  3239,   262,    -1,    -1,
     564,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,   274,
      -1,    -1,   277,   794,    -1,    -1,    -1,    -1,    -1,  3262,
     801,   802,   803,   804,   805,    -1,    -1,    -1,    -1,    -1,
    3468,    -1,  3382,  3383,    -1,    -1,   817,    -1,    -1,    -1,
      -1,   306,    -1,    -1,    -1,   380,   381,    -1,    -1,    -1,
    3078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3086,    -1,
      -1,    -1,   607,    -1,   609,    -1,  3504,    -1,    -1,    -1,
    3520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   640,    -1,   362,  3448,   504,
      -1,    -1,  3452,    -1,    -1,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,   661,    -1,  3556,  3569,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3520,    -1,
      -1,    -1,  3570,  3571,  3572,    -1,    -1,   317,   318,   319,
    3520,   406,  3580,   408,    -1,    -1,   411,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3592,  3593,    -1,    -1,    -1,  3187,
      -1,    38,    -1,  3601,  3192,   500,   501,    44,    -1,  3636,
      -1,  3638,  3610,    -1,    -1,  3613,     8,  3569,    -1,    11,
    3618,  3619,    -1,    15,    16,    -1,    -1,    -1,    -1,  3569,
    3218,   172,    -1,    -1,    -1,    -1,    -1,    -1,  3636,  3649,
    3638,    -1,  3640,   383,  3642,    -1,    -1,    -1,    -1,    -1,
    3238,  3239,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,   101,  1006,  1007,    -1,  1009,    -1,
      -1,  1012,    -1,    -1,  3262,    -1,    -1,  1018,  1019,    -1,
      -1,  1022,   422,   864,    -1,    -1,    -1,  1028,    80,    -1,
      -1,    -1,    -1,    -1,  1035,   520,    -1,  3649,  2331,    -1,
      -1,    -1,   442,    -1,  1045,  3703,    -1,    -1,    -1,  3649,
      -1,    -1,  3710,    -1,    -1,   455,  3304,  3744,  3745,  1060,
      -1,    -1,    -1,    -1,  3634,    -1,   466,  3725,  3726,    -1,
      -1,    -1,    -1,    -1,    -1,  3733,   173,    -1,    -1,    -1,
     864,    -1,   482,    -1,    -1,    -1,  3744,  3745,    -1,    -1,
      -1,    -1,    -1,  3780,   146,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   305,  3763,   506,  1108,    -1,    -1,
      -1,  3798,    -1,    -1,   211,  3685,   317,   318,   319,  3777,
     520,    -1,  3780,    -1,    -1,   177,    -1,  3785,    -1,    -1,
     227,    -1,    -1,    -1,    -1,    -1,  3794,    -1,    -1,    -1,
    3798,   238,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
    3613,    -1,    -1,  1154,     8,    -1,  1157,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    1171,  1172,    -1,   270,    -1,    -1,    -1,    -1,  1179,    -1,
      -1,    -1,   383,    37,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    48,   517,    -1,   519,    -1,    -1,
    1201,    55,   524,    -1,    -1,   527,    -1,    -1,    -1,    -1,
    1211,  1212,    -1,  2506,    -1,  1056,    -1,    -1,    -1,    -1,
     317,   422,     8,  1224,    -1,    11,    80,   324,    -1,   994,
      16,    17,    18,    19,    20,    21,    -1,    -1,  1003,    -1,
    1241,    -1,   294,    -1,  1245,    -1,    -1,   152,  1249,    -1,
      -1,    37,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,   466,    -1,   172,    -1,    55,
     367,    -1,  1056,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,    -1,    -1,    -1,   384,    -1,  1054,
      -1,    -1,    -1,    -1,    80,   617,    -1,    -1,    -1,    -1,
      -1,   148,    -1,    -1,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   162,    -1,     0,    -1,   520,
     167,     8,    -1,   177,    11,    -1,    -1,   564,    -1,    16,
      -1,    -1,    19,    20,    21,    18,    -1,    -1,    21,    -1,
      -1,    -1,   196,    -1,   396,    -1,    -1,   201,  1113,  2642,
      -1,    -1,    -1,    36,    -1,    -1,    -1,  1122,   455,    -1,
      -1,    48,    45,    -1,    -1,  3613,    -1,    -1,    55,    -1,
     224,   225,    -1,   220,  1139,    -1,    -1,    -1,  1379,    -1,
      -1,    -1,  1383,  1384,  1225,  1150,   240,  1152,  1153,  1390,
      -1,   177,    -1,    80,   241,    -1,    -1,    -1,    -1,    -1,
      -1,  1402,    -1,    -1,    -1,    88,    89,    90,    -1,    -1,
     196,    -1,   317,   318,   319,   201,    -1,   100,    -1,    -1,
    2713,    -1,    -1,   277,    -1,    -1,   280,   749,    -1,    -1,
      -1,    -1,  1433,    -1,    -1,    -1,    -1,  1438,   224,   225,
     294,  1225,   289,   297,    -1,  2738,    -1,    -1,    -1,    -1,
      -1,   298,   504,    -1,   240,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,  1469,  1470,
      -1,    -1,   794,  1474,  1475,    -1,  1477,  1478,   383,   801,
     802,   803,   804,   805,    -1,    -1,    -1,    -1,    -1,    -1,
     177,   277,    -1,    -1,   280,   817,    -1,    -1,    -1,    -1,
      -1,  2794,    -1,    -1,    -1,    -1,    -1,    -1,   294,   196,
      -1,   297,    -1,    -1,   201,    -1,    -1,   422,    -1,    -1,
      -1,    -1,     8,  1524,  1525,    11,    -1,    -1,  1529,    15,
      16,  1532,    -1,    19,    20,    21,    -1,  3785,    -1,    -1,
      -1,    -1,   396,    -1,  1545,    -1,  1547,    -1,  1389,  1550,
     455,    37,    -1,   240,  1555,    -1,    -1,  1558,    -1,    -1,
    1561,   466,    -1,    -1,    -1,  1566,    -1,   152,  1569,    -1,
      -1,    -1,    -1,  1574,    -1,  1576,    -1,   482,  1579,  1420,
    1421,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1436,    -1,    -1,    -1,  1600,
      -1,   506,    -1,   450,  1605,  1389,   564,   294,    -1,    -1,
     396,    -1,    -1,    -1,    -1,   520,    -1,  1382,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,   864,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,  1420,  1421,    -1,    -1,
    1641,    -1,    -1,    -1,  2937,    -1,    -1,    37,    -1,    -1,
     504,    -1,  1436,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   518,    -1,    -1,   521,   522,    -1,   531,    -1,  2972,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1009,    -1,    -1,
      -1,    -1,  1693,    -1,  1695,    -1,  1697,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,  1712,  1713,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,  1725,   511,   512,   513,   514,   515,
     516,    -1,   317,   318,   319,    -1,  1501,    -1,   224,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1750,
      -1,  1752,    -1,    -1,  3047,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1766,  1767,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1777,  1778,  1779,  1780,
      -1,  1782,    -1,    -1,    -1,    -1,    -1,  1788,  1629,  1790,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,    -1,
    1801,  1802,    -1,    -1,    -1,  1806,  1807,    -1,   294,    -1,
    1811,  1812,  1813,  1814,    -1,  1816,  1817,   504,    -1,  1056,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,   516,   224,  1836,    -1,   422,    -1,    -1,
    1841,  1842,  1843,  1844,    -1,  1629,  3139,  1848,    -1,    -1,
      -1,    38,    -1,    -1,    -1,   564,     8,    44,    -1,    11,
      -1,    -1,  1863,    15,    16,    -1,    -1,    19,    20,    21,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,   466,    -1,    44,    -1,    37,    -1,    -1,    -1,  1211,
     573,   574,    -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,
       8,    -1,  1224,    11,   294,    -1,   864,    15,    16,    -1,
     115,    19,    20,    21,   101,    -1,    -1,    -1,    -1,  1684,
      -1,   506,    -1,  1245,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,   615,    -1,  1775,   520,    -1,    -1,    -1,    -1,
     101,    -1,    -1,   626,  3237,  1946,  1947,  1948,  1949,  1950,
    1951,    -1,    -1,  1954,  1955,  1956,  1957,  1958,  1959,  1960,
    1961,  1962,  1963,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1984,    -1,   668,   173,   670,  1225,    -1,
      -1,  1775,    -1,   172,    -1,  1996,   183,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2005,    -1,    -1,    -1,    -1,    -1,
    2011,    -1,   173,    -1,    -1,  2016,    -1,    -1,    -1,    -1,
    2021,   507,   508,   509,   211,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
     227,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,  1890,
     211,   238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1383,  1384,    -1,   747,  2066,   227,    -1,  1390,  2070,
      -1,   564,   224,  2074,    -1,    -1,    -1,   238,    48,    -1,
      -1,    -1,    -1,   270,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,  1933,    -1,  2095,  2096,    -1,    -1,  1056,    -1,
     305,    -1,    -1,    -1,  1945,   292,  1890,    -1,    -1,   270,
      80,  2112,   317,   318,   319,    -1,   224,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
     317,   292,    -1,    -1,  1975,    -1,    -1,   324,   317,   318,
     319,  1982,   294,    -1,  2145,    -1,    -1,    -1,    -1,  1933,
      -1,    -1,  1389,  1918,    -1,   864,   317,  1922,  2159,    -1,
      -1,  1945,    -1,   324,    -1,    -1,    -1,    -1,    -1,  2170,
      -1,    -1,    -1,  2174,    -1,    -1,   146,    -1,   383,  2020,
     367,    -1,  2023,  1420,  1421,    -1,   294,  2028,    -1,    -1,
      -1,  1975,    -1,    -1,    -1,    -1,    57,   384,  1982,  1436,
      -1,    -1,    -1,    -1,   383,    -1,   367,   177,    -1,    -1,
      -1,  3504,    -1,  2214,    -1,    -1,  2217,   422,    -1,  2220,
      -1,    -1,    -1,   384,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,  1555,    -1,  2236,  2020,    -1,    -1,  2023,
      -1,   102,    -1,   422,  2028,    -1,    -1,    -1,    -1,    -1,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2024,
     121,   466,    -1,    -1,    -1,    -1,    -1,  1225,   455,    -1,
     240,    -1,    -1,   460,    -1,    -1,   455,   482,    -1,    -1,
      -1,   142,    -1,    -1,    -1,   146,    -1,   466,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,  2299,   460,
      -1,   506,    -1,   482,    -1,    -1,  2307,   168,  3601,    -1,
     171,    -1,   995,    -1,    -1,   520,    -1,    -1,  2319,  2320,
    2321,  2322,    -1,  2324,   294,    -1,  3619,   506,   189,    -1,
       8,    -1,    -1,    11,  2335,    -1,    -1,  2338,    16,    -1,
      -1,   520,  2343,    -1,    -1,  1028,    -1,  1056,    -1,    -1,
      -1,    -1,  1035,    -1,  2355,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      48,   864,  2373,  1695,    -1,  1697,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1068,  2387,  2388,    -1,  2390,
    1712,    -1,  1629,    -1,    -1,    -1,  1079,    -1,    -1,   507,
     508,   509,    80,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2420,
      -1,   282,    -1,  1106,    -1,    -1,   396,    -1,  1750,   290,
      -1,  1389,    -1,    -1,    -1,    -1,    -1,    -1,  2439,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2448,  2449,  2450,
     311,    -1,    -1,    -1,    -1,    -1,  2457,    -1,  2459,  2460,
      -1,    -1,  1420,  1421,  2465,    -1,    -1,    -1,   146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1436,    -1,
     341,  2482,    -1,    -1,    -1,    -1,    -1,  2252,     8,    -1,
    2331,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,   177,
      -1,    -1,  1185,  1186,    -1,  1188,    -1,    -1,    -1,  2510,
    2511,    -1,    -1,    -1,  1836,    -1,  1225,    -1,   196,  1841,
    1842,  1843,  1844,   201,    38,    -1,  1848,    -1,    48,    -1,
      44,    -1,  2297,    -1,   504,    55,    -1,    -1,  1775,    -1,
    2305,   511,   512,   513,   514,   515,   516,  2331,    -1,    -1,
      -1,    -1,  2317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,   240,  1056,  2565,    -1,    -1,    -1,    -1,    -1,
      -1,  2572,    -1,    -1,  2575,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,  2592,    -1,    -1,    -1,  2596,    -1,    -1,    -1,  2600,
    2601,  2602,    -1,    -1,    -1,  2606,  2607,  2608,    -1,  2610,
      -1,    -1,    -1,  2378,    -1,    -1,   294,    -1,  2383,    -1,
    2385,    -1,    -1,    -1,  2389,    -1,  2391,    -1,  2629,    -1,
    2631,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2644,  2645,  2646,  2647,  2648,  2649,  2650,
    2651,  2652,  2653,  1890,    -1,    -1,    -1,   177,    -1,   173,
      -1,    -1,    -1,    -1,    -1,  2506,    -1,    -1,    -1,    -1,
      -1,  1629,  2673,    -1,  1996,  2676,   196,    -1,  2679,    -1,
    1389,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2692,    -1,    -1,    -1,    -1,  1933,   211,    -1,    -1,
      -1,    -1,    -1,    -1,  2705,    -1,    -1,    -1,  1945,    -1,
      -1,  1420,  1421,   227,    -1,    -1,    -1,    -1,   396,    -1,
     240,    -1,  2506,  2724,   238,    -1,    -1,  1436,    -1,    -1,
      -1,    -1,  1225,    -1,  2735,    -1,    -1,    -1,  1975,    -1,
    2741,    -1,    -1,    -1,    -1,  1982,    -1,  2748,  2749,  2750,
    2751,    -1,    -1,    -1,    -1,    -1,   270,    -1,    -1,  2760,
      -1,    -1,  2763,    -1,    -1,    -1,  2767,    -1,  2769,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,   292,    -1,
      -1,    -1,  2783,  2020,    -1,    -1,  2023,    -1,    -1,    -1,
      -1,  2028,    -1,    -1,    -1,    -1,    -1,    -1,  1481,    -1,
      -1,  2642,    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,
     324,  2812,    -1,  2814,    -1,    -1,    -1,  1775,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2848,  2849,  2850,
    2851,    -1,    -1,   367,    -1,    -1,    -1,    -1,  2642,    -1,
      -1,    -1,  2863,    -1,    -1,    -1,    -1,  2868,    -1,    -1,
     384,    -1,  2713,  2874,    -1,  1558,   396,  2642,  1561,    -1,
      -1,    -1,    -1,  1566,    -1,    -1,  1569,  2888,    -1,    -1,
      -1,  1574,    -1,  2894,    -1,    -1,  1389,  2738,    -1,    -1,
      -1,    -1,  2667,  2668,    -1,  1588,  2907,  2908,  2909,    -1,
      -1,    -1,    -1,    -1,  2915,    -1,    -1,    -1,    -1,    -1,
    1629,    -1,    -1,    -1,    -1,    -1,    -1,  1420,  1421,  2713,
      -1,  2932,  1890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,  1436,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2794,  2738,    -1,    -1,    -1,    -1,    -1,
      -1,  1644,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1933,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,  2307,    -1,  1945,    -1,    -1,
      -1,   511,   512,   513,   514,   515,   516,    -1,  2320,  2321,
    2765,    -1,  2324,    -1,    -1,    -1,    -1,  3008,    -1,    -1,
    2794,    -1,    -1,  2335,    -1,    -1,  2338,  1975,    -1,    -1,
      -1,  2343,    -1,  3024,  1982,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,  3037,    -1,    11,  1722,
      -1,    -1,    15,    16,    -1,  3046,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2819,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2020,    -1,    -1,  2023,  1775,    -1,    -1,    -1,
    2028,  3072,    -1,    -1,    -1,    48,    -1,  3078,    -1,    -1,
      -1,    -1,    55,    -1,    -1,  3086,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2331,    -1,  2937,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,  3112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2448,  2449,  2450,    -1,
      -1,  2972,    -1,    -1,    -1,    -1,  1629,    -1,    -1,  3140,
    3141,  3142,  3143,  3144,  3145,  3146,    -1,    -1,  3149,  3150,
    3151,    -1,    -1,  2937,  3155,    -1,    -1,  3158,    -1,    -1,
    3161,  3162,  3163,  3164,  3165,  3166,  3167,  3168,  3169,  3170,
      -1,    -1,  1855,   146,    -1,    -1,    -1,    -1,    -1,  1862,
      -1,  1890,    -1,    -1,    -1,    -1,  3187,    -1,  2972,    -1,
      -1,  3192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,   177,    -1,  3047,    15,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3218,    -1,    -1,
      -1,  1012,    -1,   196,  1933,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1945,  3238,  3239,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    3251,    -1,    -1,    -1,    -1,  3020,  3257,    -1,  3259,    -1,
      -1,  3262,    -1,  3047,    -1,    -1,  1975,   240,    -1,  2506,
    2592,    -1,    80,  1982,    -1,    -1,  3277,    -1,  3043,  3280,
      -1,    -1,  1775,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   657,   658,    -1,  3139,  3300,
      -1,    -1,    -1,  3304,  3305,    -1,    -1,  3308,    -1,    -1,
      -1,  2020,    -1,    -1,  2023,    -1,    -1,    -1,    -1,  2028,
      -1,   294,  2005,    -1,    -1,    -1,    -1,    -1,  2011,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,
      -1,    -1,    -1,    -1,  3345,  3346,    -1,    -1,    -1,    -1,
      -1,  3116,    -1,    -1,  2676,  3139,    -1,  2679,    -1,    -1,
    3361,    -1,  3363,    -1,  3365,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,  2331,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3384,    -1,    -1,    -1,    -1,   196,    -1,
      -1,  3392,    -1,   201,    -1,    -1,  3237,  1890,    -1,    -1,
      -1,  1192,    -1,    -1,    -1,  2642,    -1,    -1,    -1,    -1,
    1201,    -1,    -1,    -1,    -1,    -1,    -1,  2100,   780,   781,
      -1,    -1,    -1,   396,    -1,     0,  2748,  2749,  2750,  2751,
    3431,    -1,   240,    -1,    -1,  2118,    -1,    -1,    -1,    -1,
    1933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2134,  1945,  3237,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2145,    -1,    -1,    -1,    -1,  3468,    -1,    -1,
      -1,    -1,  3237,    -1,    -1,    -1,  2713,    -1,  2161,    -1,
      -1,    -1,  1975,    -1,    -1,  3486,   294,  2170,    -1,  1982,
      -1,    -1,  3493,    -1,    -1,  3496,  3497,    -1,    -1,    -1,
      -1,  2738,    -1,    -1,  3505,    -1,  3507,  3508,    -1,    -1,
      -1,  3512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3520,
      -1,    -1,    -1,    -1,    -1,   100,    -1,  2020,    -1,    -1,
    2023,   504,    -1,    -1,    -1,  2028,    -1,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,  2506,    -1,
      -1,    -1,    -1,    -1,    -1,  3556,    -1,  2794,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3569,  3570,
    3571,  3572,    -1,   148,    -1,    -1,    -1,    -1,    -1,  3580,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,   396,    -1,
      -1,    -1,   167,  2915,    -1,  3596,  3597,   172,    -1,  3600,
      -1,    -1,    -1,  3604,    -1,    -1,  3607,  3608,   183,  3610,
      -1,    -1,  3613,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2317,    -1,    -1,    -1,  1000,  3640,
      -1,  3642,    -1,    -1,    -1,   220,  1008,    -1,  3649,  1011,
      -1,  3416,  1014,  1015,  1016,  1017,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3504,    -1,    -1,   241,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3679,  3680,
      -1,    -1,  3683,    -1,  2642,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1055,    -1,    -1,   504,    -1,    -1,    -1,
    2937,    -1,  3703,   511,   512,   513,   514,   515,   516,  3710,
    1072,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,
    3504,    -1,    -1,   298,    -1,    -1,    -1,    -1,  1090,    -1,
      -1,    -1,  3733,  1524,  1525,  2972,    -1,    -1,  1529,  1101,
    1102,  1103,    -1,  1105,  1106,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,  2713,    -1,    -1,    15,    16,
    3601,    -1,  3763,    -1,    -1,   340,    -1,    -1,    -1,    -1,
      -1,  1133,    -1,    -1,    -1,    -1,  3777,    -1,  3619,    -1,
    2738,    -1,    -1,    -1,  3785,    -1,    -1,    -1,    -1,   364,
      -1,    48,    -1,  3794,    -1,    -1,    -1,  2506,    55,    -1,
      -1,    -1,  2485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3047,    -1,    -1,    -1,    -1,    -1,    -1,  3601,    -1,    -1,
      -1,    -1,    -1,    80,    -1,  1187,    -1,    -1,    -1,  1191,
    1192,    -1,    -1,  2516,    -1,  3619,  2794,    -1,  2331,    -1,
    1202,  1203,    -1,    -1,    -1,    -1,    -1,   422,     8,    -1,
      -1,    11,    -1,    -1,  3619,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,    -1,   450,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   460,    -1,    -1,  2571,   146,
    1252,    -1,    -1,    -1,    -1,    -1,  3661,    -1,    -1,  1261,
      -1,    -1,  3139,    -1,   479,    48,   481,   482,    -1,    -1,
      -1,    -1,    55,    -1,    -1,  2598,    -1,    -1,    -1,    -1,
     177,    -1,    -1,  1285,    -1,    -1,    -1,    -1,    -1,  3251,
      -1,    -1,    -1,  2642,  1725,  3257,    -1,    80,    -1,   196,
      -1,    -1,    -1,   518,   201,    -1,   521,   522,   523,    -1,
      -1,    -1,    -1,    -1,    -1,  3277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2937,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,  2672,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3237,    -1,    -1,   146,  2713,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2506,  2972,    -1,    -1,  2700,    -1,    -1,
    2703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2738,
      -1,    -1,    -1,    -1,   177,    -1,    -1,   294,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,   196,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,
    3392,    -1,    -1,    -1,    -1,    -1,    -1,  2760,    -1,    -1,
      -1,    -1,    -1,    -1,    48,  2794,    -1,    -1,    -1,  3047,
      -1,    55,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,  2848,  2849,  2850,  2851,    -1,    -1,    -1,  3431,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2814,    -1,    -1,   294,    -1,    -1,    -1,    -1,   396,
      -1,    -1,  1504,    -1,    -1,    -1,    -1,    -1,    -1,  2642,
      -1,   294,    -1,    -1,    -1,  1946,  1947,  1948,  1949,  1950,
    1951,    -1,    -1,  1954,  1955,  1956,  1957,  1958,  1959,  1960,
    1961,  1962,  1963,    -1,    -1,  1537,    -1,  1539,  1540,    -1,
    2863,  3139,   146,    -1,    -1,     8,    -1,    -1,    11,    -1,
    1552,  1553,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1568,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    37,    -1,    -1,    -1,    -1,    -1,
    2713,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2937,    -1,
      -1,    -1,   196,    -1,  1596,    -1,  1598,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2738,    -1,   504,    -1,    -1,
      -1,    -1,    -1,   396,   511,   512,   513,   514,   515,   516,
      -1,    -1,  1624,  2972,    -1,    -1,    -1,  3504,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,  1637,   240,    -1,    -1,  3237,
    1642,  1643,    -1,    -1,    -1,  1647,    -1,    -1,  3610,  1651,
      -1,    -1,  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,
    1662,  2794,    -1,  1665,  2095,  2096,    -1,    -1,    -1,    -1,
    1672,    -1,  1674,    -1,    -1,    -1,    -1,    -1,  3640,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,  1698,    -1,  3047,    -1,
    3023,    -1,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,   504,    -1,    -1,  3601,    -1,    -1,    -1,   511,   512,
     513,   514,   515,   516,  1736,  1737,    -1,    -1,    -1,  3062,
      -1,  3703,  3619,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3140,  3141,  3142,  3143,  3144,  3145,
    3146,   224,    -1,    -1,  3150,  3151,    -1,    -1,    -1,  3155,
      -1,    -1,  3158,    -1,    -1,  3161,  3162,  3163,  3164,  3165,
    3166,  3167,  3168,  3169,  3170,    -1,  2217,    -1,    -1,    -1,
    3139,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3763,    -1,    -1,  2937,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3777,    -1,    -1,     0,    -1,
      -1,  1823,    -1,    -1,  1826,  1827,    -1,  1829,    -1,  3152,
      -1,   294,  3794,    -1,    -1,    -1,    -1,    -1,    -1,  2972,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    35,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1868,    49,    -1,    -1,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,  3237,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,    -1,    86,    -1,  3504,   511,   512,   513,
     514,   515,   516,    -1,  3047,    -1,    98,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,  3248,  3249,    -1,    -1,   111,
      -1,    -1,    -1,    -1,    -1,  1937,  1938,    -1,  1940,    -1,
      -1,    -1,    -1,   125,    -1,   127,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   144,    -1,    -1,    -1,    -1,  1969,  1970,    -1,
     152,  1973,   154,   155,    -1,  3361,    -1,  3363,    -1,  3365,
      -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2002,    -1,    -1,  3601,    -1,  2007,  3139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,  3619,    -1,    -1,  2026,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   216,  2037,    -1,    -1,    -1,    -1,
    1012,  3364,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,     0,  3382,
    3383,   243,    -1,    -1,    -1,    -1,  2068,    -1,    -1,    -1,
      -1,  2073,    -1,    -1,  2076,    -1,    -1,    -1,    -1,  2510,
    2511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3237,    -1,    -1,  3493,    -1,  3432,
    3496,  3497,  2114,    -1,    -1,  2117,    -1,  2119,    -1,  3505,
      -1,    -1,    -1,    -1,    -1,  3448,  3512,    -1,    -1,  3452,
      -1,    -1,    -1,  2135,  2565,   317,   318,   319,    -1,    -1,
      -1,    -1,    -1,   325,    -1,    -1,   328,    -1,    -1,    -1,
      -1,  1123,    -1,     8,    -1,  3504,    11,    -1,   100,    -1,
      15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,
      -1,  2183,    37,    -1,    -1,    -1,    -1,   369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1167,    -1,    -1,  2200,  2201,
      -1,   383,    -1,    -1,    -1,    -1,   148,    -1,   390,    -1,
    3596,  3597,    -1,   395,  3600,    -1,    -1,  2219,  3604,    -1,
     162,  3607,  3608,    -1,   406,   167,  2228,    -1,    -1,  1201,
     172,    -1,    -1,    -1,    -1,    -1,   418,    -1,    -1,    -1,
     422,   183,    -1,    -1,     0,    -1,   188,    -1,    -1,    -1,
      -1,    -1,  3601,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3619,    -1,    -1,   455,    -1,    -1,   458,    -1,   220,   461,
      -1,    -1,    -1,    -1,   466,  2287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3679,  3680,    -1,    -1,  3683,    -1,   241,
     482,    -1,    -1,    -1,  2735,    -1,    -1,    -1,    -1,    -1,
      -1,  3634,    -1,    -1,    -1,    -1,    -1,    -1,  1290,     8,
      -1,    -1,    11,  1295,   506,    -1,    -1,    16,    -1,  2760,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,  2341,
      -1,   523,    -1,    -1,   100,    -1,    -1,   289,    -1,    -1,
     292,    -1,    -1,  2784,    -1,    -1,   298,    -1,    -1,    48,
      -1,    -1,  3685,    -1,    -1,    -1,    55,    -1,    -1,   224,
      -1,  3504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,   148,    -1,    -1,    -1,    -1,    -1,   340,    -1,
      -1,    -1,     8,    -1,    -1,    11,   162,    -1,    -1,    15,
      16,   167,    -1,    19,    20,    21,   172,  2848,  2849,  2850,
    2851,    -1,   364,    -1,    -1,    -1,    -1,   183,    -1,    -1,
      -1,    37,   188,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,
      -1,    -1,    -1,    -1,   220,    -1,    -1,    -1,  3601,    -1,
      -1,    -1,  2474,    -1,    80,    -1,  2478,  2479,  2909,    -1,
     422,    -1,    -1,  2485,    -1,   241,  3619,    -1,   177,    -1,
      -1,    -1,  2494,    -1,    -1,  2497,    -1,  2499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2507,    -1,   196,   450,    -1,
      -1,    -1,   201,  2515,  2516,    -1,    -1,    -1,   460,    -1,
    2522,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1502,    -1,    -1,   289,    -1,    -1,   292,   479,    -1,   481,
     482,    -1,   298,    -1,    -1,    -1,    -1,    -1,  1520,    -1,
    1522,   240,  1524,  1525,  1526,    -1,    -1,  1529,    -1,    -1,
      -1,  1533,    -1,    -1,  1536,    -1,  2568,    -1,    -1,  1541,
      -1,   177,  1544,    -1,    -1,  2577,   518,    -1,    -1,   521,
     522,   523,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,  2598,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   364,    -1,
      -1,    -1,    -1,    -1,    -1,  3046,    -1,    -1,   224,   225,
      -1,    -1,  1594,    -1,    -1,    -1,    -1,  1599,    -1,    -1,
    1602,  1603,  1604,    -1,   240,    -1,  1608,    -1,    -1,    -1,
    1612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,   422,    -1,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
    1012,   297,    -1,    -1,   450,    -1,    -1,    -1,    -1,  1671,
      -1,    -1,    -1,    -1,   460,    -1,    -1,   396,    -1,  3140,
    3141,  3142,  3143,  3144,  3145,  3146,    -1,    -1,    -1,  3150,
    3151,    -1,    -1,   479,  3155,   481,   482,  3158,    -1,    -1,
    3161,  3162,  3163,  3164,  3165,  3166,  3167,  3168,  3169,  3170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1719,    -1,    -1,
      -1,    -1,    -1,  2755,  2756,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   518,  1735,    -1,   521,   522,   523,  1740,    -1,
    2772,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      -1,    16,  2784,    -1,    -1,  1757,  2788,  2789,    -1,    -1,
     396,  2793,    -1,    -1,    -1,    -1,  2798,    -1,    -1,  2801,
    2802,    -1,    -1,    -1,  2806,  2807,    -1,    -1,  2810,    -1,
      -1,     8,    -1,    48,    11,   504,    -1,    -1,    -1,    16,
      55,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    80,    19,    20,    21,    -1,
      -1,    48,    -1,     8,    -1,  2857,    11,    -1,    55,    -1,
      -1,    16,    -1,    -1,    37,    -1,    -1,    -1,    -1,  3300,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1201,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,   504,  2901,
      55,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,   146,    -1,    -1,  3345,  3346,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,  2928,    -1,    -1,    -1,
    3361,    -1,  3363,    -1,  3365,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,  1935,    -1,    -1,   201,    -1,    -1,    -1,
      -1,  1943,  1944,    -1,  1946,  1947,  1948,  1949,  1950,  1951,
     177,    -1,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,
    1962,  1963,  1964,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,   201,   240,    -1,    -1,    -1,    -1,
    3012,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,   240,    -1,    -1,   201,    -1,    -1,    -1,
      -1,   224,    -1,    -1,    -1,  3486,    -1,    -1,    -1,   294,
    3062,    -1,  3493,    -1,    -1,  3496,  3497,    -1,  2040,  2041,
      -1,    -1,    -1,    -1,  3505,    -1,  3507,  3508,    -1,    -1,
    3082,  3512,    -1,    -1,    -1,   240,    -1,  3089,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,  3100,  3101,
      -1,    -1,  3104,    -1,    -1,    -1,  2078,    -1,    -1,    -1,
    2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,    -1,    -1,
      -1,   294,    -1,  2095,  2096,    -1,  2098,  2099,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2110,   294,
      -1,  2113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2121,
    2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2130,    -1,
      -1,   396,    -1,    -1,    -1,  3596,  3597,    -1,    -1,  3600,
    3172,    -1,    -1,  3604,    -1,    -1,  3607,  3608,    -1,    -1,
      -1,  3183,    -1,    -1,    -1,     8,  2158,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,   396,
      -1,    -1,  1524,  1525,    -1,  3207,    -1,  1529,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,  2217,    -1,    -1,  3679,  3680,
      -1,    -1,  3683,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,    -1,    -1,  3276,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3294,    -1,    -1,    -1,  3298,    -1,    -1,    -1,
    3302,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
    3312,    -1,    -1,    -1,   511,   512,   513,   514,   515,   516,
    2292,  2293,  2294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,  1670,   504,
      -1,    -1,    -1,    -1,   177,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,  3381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3399,    -1,    -1,
      -1,   224,   225,  1725,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,  2395,  2396,  2397,    -1,    -1,  2400,  2401,
    2402,  2403,  2404,  2405,    -1,    -1,    -1,  2409,  2410,  2411,
    2412,  2413,  2414,  2415,  2416,  2417,  2418,    -1,    -1,    -1,
      -1,  2423,  2424,  3455,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,  3465,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,  3478,     3,    -1,  2451,
      -1,    -1,     8,    -1,  2456,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,  2473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,  3514,    -1,  2486,    -1,    42,  2489,    -1,  2491,
      -1,    -1,    48,  2495,  2496,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,  3538,  2509,  2510,  2511,
    2512,    -1,  2514,    -1,    -1,    -1,  2518,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1946,  1947,  1948,  1949,  1950,  1951,
      -1,  2603,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,
    1962,  1963,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3664,  3665,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,   224,   225,
      -1,   524,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,  3714,    -1,   240,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2704,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    24,    42,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,   277,    -1,    -1,   280,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2735,    -1,    -1,    -1,    -1,   294,  3771,
      -1,   297,    -1,  2095,  2096,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    81,    -1,
      -1,  2773,    -1,  2775,    -1,    -1,    -1,  2779,    -1,    -1,
      -1,    -1,    37,    -1,    97,  2787,    -1,    -1,  2790,    -1,
    2792,    -1,    -1,    48,  2796,   108,    -1,  2799,  2800,    -1,
      55,  2803,  2804,    -1,    -1,    -1,    -1,    -1,    -1,  2811,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   147,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,   157,    -1,    -1,   177,    -1,    -1,
    2852,    -1,    -1,    -1,  2856,    -1,   169,    -1,    -1,    -1,
      -1,   174,    -1,    -1,    -1,  2217,   196,    -1,    -1,  2871,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   205,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2909,    -1,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,
     253,   196,    -1,    -1,    -1,    -1,   201,   277,   504,    -1,
     280,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,   339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,   297,  3045,  3046,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     373,    -1,    -1,   376,    24,    -1,   396,    -1,  3070,  3071,
      -1,    -1,   385,    -1,    -1,   388,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3088,    -1,    -1,    -1,
    3092,    -1,  3094,  3095,  3096,   408,    -1,  3099,    -1,    -1,
    3102,  3103,    -1,    -1,    -1,    -1,    -1,    -1,  3110,   422,
      -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,   439,    -1,    -1,    -1,
      -1,    -1,   445,  3135,  3136,  3137,  3138,    97,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2510,  2511,
     473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,   147,    -1,    -1,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,
      -1,    -1,  3204,    -1,    -1,    -1,    -1,    -1,  3210,   169,
      -1,    -1,    -1,  2565,   174,    -1,    -1,    -1,    -1,    -1,
      -1,  3223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,  3250,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,
      -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3314,  3315,  3316,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3337,  3338,  3339,  3340,  3341,
    3342,  3343,    -1,  3345,  3346,    -1,  3348,  3349,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3358,    -1,  3360,    -1,
      -1,    -1,   322,    -1,    -1,  3367,  3368,  3369,  3370,  3371,
    3372,  3373,  3374,  3375,  3376,    -1,    -1,    -1,   338,   339,
      -1,    -1,    -1,  2735,    -1,    -1,  3388,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,  3400,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,  2760,    -1,
      -1,    -1,    -1,   373,    -1,    -1,   376,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,   385,    -1,    -1,   388,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,    -1,
      -1,  3453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   422,    -1,    80,    -1,    -1,    -1,  3470,   429,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3480,   439,
      -1,    -1,    -1,    -1,  3486,   445,    -1,    -1,    -1,    -1,
      -1,    -1,  3494,  3495,    -1,    -1,  2848,  2849,  2850,  2851,
      -1,    -1,    -1,    -1,  3506,  3507,  3508,  3509,    -1,  3511,
      -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2909,    -1,    -1,
      -1,   177,    -1,    -1,    -1,  3567,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,    -1,  3590,    -1,
      -1,    -1,    -1,  3595,    -1,    -1,  3598,  3599,    -1,    -1,
      -1,  3603,    -1,  3605,  3606,    -1,    -1,  3609,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,
    3632,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,  3673,  3674,  3675,    -1,    -1,  3678,    -1,   294,  3681,
    3682,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,  3046,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3717,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,  3728,  3729,  3730,    -1,
      48,    -1,    -1,    -1,    -1,     8,    -1,    55,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
     396,    -1,    55,    -1,    -1,    -1,    -1,    -1,  3140,  3141,
    3142,  3143,  3144,  3145,  3146,    -1,    -1,    -1,  3150,  3151,
      -1,    -1,    -1,  3155,    -1,    -1,  3158,    80,    -1,  3161,
    3162,  3163,  3164,  3165,  3166,  3167,  3168,  3169,  3170,  3171,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,   177,   521,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,   196,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3300,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3345,  3346,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,  3361,
      -1,  3363,    -1,  3365,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3486,    -1,    -1,    -1,    -1,    -1,
      -1,  3493,    -1,    -1,  3496,  3497,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3505,    -1,  3507,  3508,    -1,    -1,    -1,
    3512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,  3596,  3597,   519,    -1,  3600,    -1,
      -1,    -1,  3604,    -1,    -1,  3607,  3608,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,  3679,  3680,    41,
      -1,  3683,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,   521,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,   521,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,   521,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    39,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,   521,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,    -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,   521,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,   183,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,    -1,
     520,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,    -1,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   532,   533,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,   530,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,    -1,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,   235,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
     293,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,    -1,   506,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,   235,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,   293,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,   172,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,   318,   319,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,   172,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,   318,   319,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
     172,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,   318,   319,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,     3,   506,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    15,    16,    -1,   520,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,    -1,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,    -1,    -1,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,   503,    -1,     3,    -1,   507,   508,   509,
       8,   511,   512,   513,   514,   515,   516,    15,    16,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
       8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,     8,    -1,    -1,    11,   177,    55,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    37,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,   177,
      -1,    55,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,   240,    -1,   201,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,
      -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
     196,    -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,   196,   280,   240,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
     396,    -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    37,
      -1,    -1,   396,   521,    -1,    -1,    -1,    -1,    -1,    -1,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      37,    -1,    80,    -1,   521,    -1,    -1,    -1,    -1,    -1,
      -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    37,    -1,    80,    -1,   521,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,     8,    -1,    -1,    11,    -1,    55,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    37,    80,    -1,    -1,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,   177,
      -1,    55,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   201,    37,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
     177,    -1,    55,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,   240,    -1,   201,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
     196,    -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,   196,   280,   240,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,   196,   280,    -1,   240,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,   396,   521,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      37,    -1,    -1,   396,   521,    -1,    -1,    -1,    -1,    -1,
      -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    37,    -1,    80,    -1,   521,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,     8,    -1,    -1,    11,    -1,    55,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    37,    80,    -1,    -1,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,
      -1,    55,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    37,    -1,    80,    -1,   521,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
     177,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,   240,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,   196,   280,   240,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,   196,   280,    -1,   240,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,   396,   521,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,   519,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,   519,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,    -1,    -1,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,     4,     5,    -1,    -1,    -1,     9,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,   292,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,     4,     5,    -1,    -1,    -1,     9,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,   292,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,    -1,    -1,     8,    -1,    -1,    11,
      -1,   511,   512,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,
      11,    -1,    -1,    55,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,     8,    -1,
      -1,    11,    -1,    -1,    55,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    80,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    48,     8,
      -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      80,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,   177,    55,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,    80,    -1,    -1,    -1,    -1,   167,    -1,    37,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   177,    -1,    -1,    48,
      -1,    -1,   224,   225,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   240,    -1,
     201,    -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,   196,    -1,   280,   240,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,   196,    -1,   280,
     240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,   240,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,   224,   225,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,   460,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    37,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,    -1,   396,    48,     8,
      -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    37,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    37,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    -1,   177,    -1,    48,
      -1,     8,    -1,    -1,    11,    -1,    55,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    80,    -1,   172,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    48,    -1,    -1,   224,   225,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
     240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   177,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    37,    -1,   294,    -1,    -1,   297,    -1,
     167,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
     177,    55,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,   240,    -1,    -1,   201,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,   240,    15,    16,    17,
      18,    19,    20,    21,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    37,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,   396,
      48,    -1,    -1,   277,    -1,    -1,   280,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    80,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    48,   511,   512,   513,   514,   515,   516,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,   396,     8,    -1,    -1,    11,    -1,    -1,   177,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    37,   201,     8,    -1,   430,    11,    -1,    -1,
      -1,    15,    16,    48,    -1,    19,    20,    21,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    48,    80,    -1,    -1,    -1,    -1,
     177,    55,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,   196,
      -1,    -1,    -1,    -1,   201,    -1,    80,    -1,    -1,   277,
     504,    -1,   280,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    48,   294,   224,   225,   297,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,   177,    16,    -1,    -1,    19,    20,    21,    -1,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    37,    -1,   201,   294,    -1,    -1,
     297,    -1,    -1,   177,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,   196,    -1,    -1,    -1,    -1,   201,   396,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,   277,   196,    -1,   280,    -1,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,   224,   225,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,   196,   277,    -1,    -1,   280,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,   277,    -1,    16,   280,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,   396,     8,    55,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      80,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,
      -1,    55,    -1,    16,    -1,    -1,    19,    20,    21,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    48,     8,    -1,    -1,    11,
      -1,    -1,    55,    -1,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    80,   511,   512,
     513,   514,   515,   516,    -1,    -1,    48,   177,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     240,   504,   196,    -1,   507,   508,   509,   201,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,    -1,    -1,   196,    -1,    -1,   240,    -1,   201,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,   280,   240,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,    -1,    -1,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,    -1,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,    -1,    -1,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,   169,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
     169,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    35,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,    -1,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,    -1,    -1,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,    -1,    -1,   278,   279,   280,   281,    -1,
      -1,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
      -1,   324,   325,   326,    -1,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,    -1,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,    -1,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    -1,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,    -1,   177,
     178,    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,    -1,    -1,
     278,   279,   280,   281,    -1,    -1,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,    -1,   324,   325,   326,    -1,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
      -1,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,    -1,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,   503,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    -1,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,    -1,   177,   178,    -1,   180,
      -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,    -1,    -1,   278,   279,   280,
     281,    -1,    -1,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,    -1,   324,   325,   326,    -1,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,    -1,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,   503,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,    -1,   177,   178,    -1,   180,    -1,    -1,    -1,    -1,
      -1,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,    -1,   278,   279,   280,   281,    -1,    -1,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,    -1,   324,
     325,   326,    -1,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,    -1,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,    -1,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,   503,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,    -1,   278,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,    -1,   324,   325,   326,    -1,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,    -1,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,    -1,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,   503,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,    -1,   177,   178,    -1,   180,    -1,
      -1,    -1,    -1,    -1,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,    -1,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,    -1,    -1,   278,   279,   280,   281,
      -1,    -1,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,    -1,   324,   325,   326,    -1,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,    -1,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,    -1,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,    -1,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    22,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,    33,    -1,    35,
      36,    -1,    -1,    22,    -1,    -1,    -1,    -1,   500,   501,
     502,   503,    -1,    -1,    33,    -1,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    98,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
      -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   125,    -1,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,
      -1,    -1,   168,   152,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,    -1,    -1,    -1,    -1,    -1,   325,
      -1,    -1,   328,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,    -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,   328,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,
     369,    -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,    -1,
     406,   390,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,   418,    -1,    -1,    -1,   422,   406,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   418,
      -1,    -1,    -1,   422,    -1,    -1,   442,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,   442,    -1,   461,    -1,    -1,    -1,    -1,
     466,    -1,    -1,    -1,   470,    -1,   455,    -1,    -1,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   482,   466,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    75,    86,
      98,   100,   111,   125,   127,   136,   144,   152,   154,   155,
     168,   172,   200,   216,   243,   317,   318,   319,   325,   328,
     360,   369,   383,   390,   395,   406,   418,   422,   442,   455,
     458,   461,   466,   482,   506,   520,   535,   536,   537,   538,
     539,   546,   557,   558,   559,   562,   563,   565,   582,   630,
     641,   643,   646,   649,   651,   654,   655,   659,   666,   668,
     675,   679,   680,   681,   688,   693,   709,   712,   715,   733,
     770,   771,   774,   776,   777,   778,   779,   781,   783,   784,
     788,   840,   841,  1009,  1011,  1012,  1013,  1018,  1021,  1027,
    1028,  1032,   436,   485,  1010,   205,   376,   385,   422,   473,
     108,   560,  1010,     3,    22,    23,    24,    25,    27,    28,
      29,    30,    32,    33,    34,    44,    45,    46,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      61,    62,    63,    64,    65,    66,    69,    70,    71,    72,
      73,    75,    76,    77,    78,    79,    81,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    94,    95,    96,
      97,    98,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   116,   118,   119,   120,
     121,   122,   123,   125,   127,   128,   129,   130,   133,   134,
     135,   136,   137,   141,   142,   143,   145,   146,   147,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     161,   163,   164,   165,   166,   168,   170,   171,   173,   174,
     175,   176,   177,   178,   180,   184,   185,   187,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     202,   203,   204,   205,   206,   207,   208,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   221,   223,   224,
     225,   226,   227,   228,   230,   231,   232,   233,   234,   237,
     238,   239,   240,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   276,   278,   279,   280,
     281,   283,   284,   285,   286,   287,   288,   290,   291,   294,
     295,   296,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   316,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   332,   333,
     334,   335,   336,   339,   341,   342,   343,   344,   345,   346,
     347,   348,   350,   351,   352,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   395,   396,   398,   399,   400,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   420,   421,   423,   424,   425,   426,   427,
     428,   429,   431,   432,   436,   437,   438,   439,   440,   442,
     443,   444,   445,   446,   447,   448,   449,   452,   453,   454,
     456,   457,   458,   459,   461,   462,   463,   464,   465,   466,
     467,   469,   470,   471,   473,   474,   475,   476,   480,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     633,   634,   635,   910,   993,   997,  1000,     3,   176,   250,
     415,   564,   633,   997,  1010,    57,   520,   577,     5,   108,
     178,   244,   297,   338,   376,   426,   428,   445,   451,   454,
     628,   642,   687,   996,     5,    31,   328,   991,   997,   998,
     108,   560,    24,    81,    97,   108,   147,   157,   169,   174,
     205,   249,   253,   322,   338,   339,   373,   376,   385,   388,
     408,   422,   429,   439,   445,   473,   660,   661,   664,  1010,
     991,   100,   136,   470,   520,   538,   539,   546,   562,   563,
     565,   582,   630,   643,   646,   649,   651,   654,   655,   659,
     666,   671,   675,   681,   688,   709,   770,   771,   774,   776,
    1009,  1011,  1013,  1018,  1021,  1027,  1032,   108,    75,   216,
      68,    79,    81,   159,   182,   235,   283,   293,   304,   323,
     372,   417,   438,   440,   444,   466,   520,   777,   841,   843,
     845,   855,   862,   863,   910,   912,   913,   987,   997,   998,
     108,   710,   996,   997,   710,   997,   991,    31,   431,   436,
     997,  1019,  1020,  1030,  1010,    31,   131,   796,   797,   178,
     244,   376,   389,   431,  1022,  1023,  1030,  1010,   520,   776,
     788,   997,  1031,   862,   997,   422,   793,   987,   173,   520,
    1015,   520,   347,   789,   790,   991,   789,     3,    55,    56,
      58,    59,    71,    72,    79,   112,   113,   153,   159,   165,
     176,   184,   185,   212,   218,   219,   221,   250,   269,   271,
     276,   283,   285,   300,   304,   323,   327,   344,   371,   391,
     399,   415,   417,   431,   432,   438,   440,   444,   466,   467,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   633,   640,   711,   777,   778,     0,   523,   470,   669,
     120,   215,   457,   148,   220,   298,   450,   799,   800,   845,
     845,   777,   779,   781,   524,    31,   431,   436,   776,  1031,
     194,   987,   991,   194,   987,   194,   862,   194,   987,   996,
     520,   518,   522,   968,   970,   776,   987,   194,   987,   426,
     428,   426,   428,   358,   181,   194,   987,   987,   174,   249,
     347,   385,   422,   473,   644,   108,   205,    31,   991,   194,
       3,   255,   439,   107,   422,   422,   473,   181,   379,     3,
      38,    44,    51,    56,    57,    58,    59,    71,    72,    81,
      83,    89,   101,   112,   113,   135,   165,   171,   173,   177,
     194,   196,   211,   218,   219,   221,   224,   225,   227,   238,
     240,   250,   269,   270,   271,   280,   285,   301,   303,   324,
     344,   367,   371,   384,   391,   396,   399,   415,   424,   431,
     432,   444,   450,   467,   470,   633,   636,   665,   873,   875,
     877,   879,   881,   883,   885,   886,   887,   889,   890,   891,
     893,   894,  1001,   194,   662,   997,  1002,   194,   988,   991,
     194,   991,   520,   667,   297,   671,     3,    38,    44,    51,
      55,    56,    57,    58,    59,    71,    72,    79,    81,    83,
      89,   101,   112,   113,   153,   159,   165,   171,   173,   176,
     177,   184,   185,   196,   211,   212,   218,   219,   221,   224,
     225,   227,   238,   240,   250,   269,   270,   271,   276,   280,
     283,   285,   300,   301,   303,   304,   323,   324,   327,   344,
     367,   371,   384,   391,   396,   399,   415,   417,   424,   431,
     432,   438,   440,   444,   466,   467,   470,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   633,   637,
     672,   674,   675,   677,   678,   669,   996,   997,   564,   710,
     520,   520,   167,   520,   520,   733,   777,   863,   520,   520,
     987,   520,   520,   172,   520,   520,   520,   520,   777,   841,
     845,   855,    42,   856,   857,   997,   856,   383,   524,   780,
      38,    44,   101,   173,   211,   227,   238,   270,   317,   324,
     367,   384,   455,   859,   857,    42,   856,   858,   997,   506,
     867,   513,   970,   996,   509,   520,   520,   772,   503,   226,
     522,   292,     4,     6,     7,     8,     9,    10,    41,    56,
      58,    59,    67,    71,    72,    83,   112,   113,   115,   153,
     160,   165,   184,   185,   218,   219,   221,   250,   269,   271,
     277,   282,   285,   294,   344,   371,   399,   431,   432,   441,
     467,   504,   511,   512,   513,   518,   520,   526,   527,   532,
     533,   777,   830,   878,   881,   884,   885,   886,   888,   889,
     890,   893,   894,   905,   907,   908,   909,   910,   911,   913,
     914,   928,   929,   940,   962,   967,   977,   978,   979,   993,
     994,   995,   996,   997,   976,   978,  1022,  1022,   996,  1022,
     503,   172,   433,   509,   522,   970,   656,   862,     3,   171,
     173,   470,   675,  1014,  1016,   171,  1017,   905,   946,   947,
     789,   524,   520,  1004,   252,   521,   521,   537,   987,   172,
     297,   696,   656,    31,   131,   794,   794,    61,   794,   162,
     167,   241,   289,   805,   807,   808,   833,   835,   836,   837,
     183,   292,   460,   292,   799,   800,   520,   423,  1029,   503,
     226,   153,    27,    33,   136,   296,   356,   360,   390,   463,
     551,   554,   555,   356,   153,    42,    62,   106,   204,   254,
     262,   274,   306,   356,   362,   385,   390,   406,   540,   543,
     554,   153,   356,   390,   554,   153,   356,   390,   554,    42,
     561,     3,    31,    38,    44,    51,    57,    81,    83,    89,
     101,   131,   171,   173,   176,   177,   196,   211,   224,   225,
     227,   238,   240,   250,   270,   280,   301,   303,   324,   367,
     384,   396,   415,   424,   444,   468,   470,   521,   633,   638,
     905,   949,   950,   999,  1005,   905,   969,     3,    31,    35,
      36,    37,    39,    41,    42,    43,    47,    60,    67,    68,
      74,    80,    82,    93,   100,   115,   117,   124,   131,   132,
     140,   144,   148,   160,   162,   167,   169,   172,   179,   182,
     183,   188,   201,   209,   220,   222,   235,   236,   241,   277,
     282,   289,   292,   293,   297,   298,   317,   318,   319,   320,
     331,   340,   349,   364,   383,   401,   419,   422,   430,   433,
     435,   441,   450,   451,   455,   460,   466,   468,   478,   479,
     481,   482,   633,   637,   639,   992,  1006,   968,   521,   520,
     617,   277,   172,   108,   376,   628,   987,   277,   647,    42,
     473,   194,   987,   194,   632,   987,   194,   987,   194,   987,
     987,    89,   684,   153,   486,   987,    90,   128,   309,   427,
     469,   892,   892,   892,   520,   880,   880,   327,   520,   882,
     153,   520,    71,    72,   892,   880,   877,   484,   506,   520,
     895,   520,   895,   520,    65,   363,   524,   663,   520,    41,
     876,   520,   109,   110,   191,   192,   256,   257,   258,   259,
     260,   261,   264,   265,   380,   381,   500,   501,   520,   896,
     897,   898,   899,   900,   901,   902,   903,   904,   880,   153,
     524,   663,   522,  1003,   153,   524,   663,   153,   292,   947,
     358,   521,   524,     4,   160,   292,   441,   511,   512,   542,
     545,   670,   672,   673,   676,   995,   996,   671,   520,   572,
     576,   433,   905,   947,   520,     3,   896,   897,   898,   899,
     900,   901,   902,   903,   952,   953,   996,   466,   857,   858,
     905,   987,   905,   954,   511,   512,   906,   907,   929,   940,
     956,   997,   520,   905,   946,   957,   905,    60,   172,   236,
     435,   905,   947,   960,   905,   521,   998,   424,   813,   814,
     520,   814,   796,   797,   845,   222,   791,    38,   227,   384,
     859,   227,   301,   860,   845,   860,   227,   859,   520,   227,
     860,   149,   202,   847,   227,   814,   520,   998,   814,   520,
     299,   542,   676,  1024,  1026,   949,   875,   951,    42,   239,
     997,   520,   518,   777,   905,   966,   520,   777,   527,   905,
     520,   520,   905,   905,   905,   149,   980,   981,   905,   947,
     948,   777,   905,   946,   930,   931,   932,   998,     9,     3,
    1008,   970,   520,   996,   520,   995,   996,     3,     8,    11,
      15,    16,    17,    18,    19,    20,    21,    37,    42,    48,
      55,    80,   177,   196,   201,   224,   225,   240,   277,   280,
     294,   297,   396,   504,   507,   508,   509,   511,   512,   513,
     514,   515,   516,   938,   939,   940,   942,   974,   483,   915,
     303,   905,   524,   791,   520,   996,   971,   522,   970,   791,
       3,   115,   244,   542,   894,   996,  1025,   104,   115,  1026,
     115,  1026,   997,    42,   997,   521,   524,   669,   524,   521,
     790,   988,   989,    42,   711,   739,   743,   744,  1004,   656,
     195,   358,   222,   390,   779,   779,    31,   801,   802,   905,
      61,   779,   795,   164,   273,   821,   230,   274,   343,   393,
     457,     4,     9,    31,   816,   905,   511,   512,   817,   818,
     905,   907,   833,   834,   808,   807,   805,   806,   167,   836,
     287,   838,    61,   785,   786,   787,   848,   906,   978,   978,
     805,   833,   947,   239,   987,    74,    82,    93,   169,   194,
     331,   451,   599,   609,   624,   997,    82,    93,   775,    93,
     775,   520,   433,   520,   597,   248,   454,   597,    93,   524,
     433,   987,   877,   542,    61,   544,   542,   542,   106,   254,
     262,    61,   433,   482,   506,   541,   267,   376,   541,   543,
     862,    93,   433,   775,   376,   987,   433,   376,   997,   572,
     949,   949,   950,   524,   799,   800,    13,    14,   519,   531,
     433,   616,   621,   997,   482,   575,   153,   996,   987,   987,
     347,   385,   422,   473,   644,   275,   472,   713,   153,   100,
     582,   648,   649,   681,  1032,   145,   875,   987,   277,   540,
     650,   277,    42,   520,   617,   277,   617,   277,   520,   645,
     194,   611,   685,   997,     3,   663,   520,   948,   995,   665,
     951,   892,   892,    41,   876,   431,   431,   995,   995,   872,
     997,   875,   872,   518,   518,   995,   995,   433,   433,   433,
     433,   662,  1002,   992,   522,   988,   991,   991,  1002,   521,
     671,   677,     4,   995,     4,   995,   574,   581,  1006,    57,
     102,   121,   142,   146,   168,   171,   189,   282,   290,   311,
     341,   578,   996,    42,   521,   905,   521,   172,   524,   521,
     320,   955,   521,   906,   906,    11,    15,    16,    19,    20,
      21,   201,   224,   294,   507,   508,   509,   511,   512,   513,
     514,   515,   516,   940,   906,   521,   864,   865,   912,   167,
     172,   958,   959,   524,   521,    42,   960,   947,   960,   960,
     172,   521,    42,   856,   520,     4,     9,   809,   811,   812,
     997,   989,   978,   976,   178,   244,   422,   426,   428,   454,
     792,   987,   479,   868,   845,   227,   845,   292,   460,   861,
     845,   227,   978,   845,   284,   284,   520,   845,   869,   870,
     998,   520,   869,   998,   524,   521,   524,   521,   524,   565,
     655,   688,   773,   776,  1011,   947,   948,   478,   963,   964,
     905,   905,   933,   934,   935,   936,     8,    15,    16,    19,
      20,    21,   507,   508,   509,   511,   512,   513,   514,   515,
     516,   938,   943,   997,   521,   947,   520,   997,   358,   985,
     167,   519,   521,   524,   524,   528,   531,   947,   905,   904,
     904,   875,   905,   905,   905,   905,   905,   905,   905,   905,
       5,  1006,  1007,   431,    47,   419,   975,  1002,   905,   905,
     520,   777,   961,   131,   160,   277,   282,   287,   441,   452,
     905,   282,   520,   905,   433,    55,   177,   196,   201,   240,
     396,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,    31,    39,   401,   937,   518,   522,   973,   183,   163,
     916,   371,   520,   929,   979,   172,   842,   949,   968,   513,
     842,   520,   996,   997,   987,  1014,   557,   987,   905,   524,
     521,   520,   509,    31,    39,   394,   742,   229,   524,   736,
     460,   658,   690,   987,   520,   695,   705,   706,   708,   997,
      43,   124,   803,   524,   460,   803,   267,   779,   371,   372,
     511,   512,   818,   820,   907,   393,   230,   293,   316,   316,
     524,   515,     4,   819,   995,   819,   371,   372,   820,   986,
     987,   281,   398,   839,   520,   989,   990,   524,   183,   460,
     201,   183,   222,   834,   806,   521,   356,   554,   520,   194,
     609,   991,   230,   277,   230,   460,   520,   602,   874,   875,
     991,   997,   194,   991,   194,   997,    27,   136,   390,   550,
     553,   593,   607,  1006,   991,   601,   620,  1006,   991,   551,
     991,   356,   390,   540,   554,   542,  1002,   991,   542,  1002,
     991,   542,   356,   390,   554,   991,   991,   991,   991,   356,
     390,   554,   991,   991,   799,   799,   799,   468,   950,   195,
     361,   798,   905,   905,   905,   969,   336,   571,   521,   524,
     290,   172,   433,   566,   987,   172,   647,   473,   987,   632,
     987,   987,   987,   423,   987,   297,   628,   520,   777,   520,
     153,   153,   152,   776,   240,   599,   609,   612,   615,   625,
     627,   997,   482,   484,   604,   153,   482,   686,   153,   521,
     949,    42,   277,   292,   947,   521,   521,   663,   521,   518,
     503,   503,   521,   521,   521,   524,   875,   521,   995,   519,
     995,   521,   521,   897,   899,   900,   901,   900,   901,   901,
     663,   992,   663,   292,   663,   521,   524,   513,   520,   542,
     573,   676,    42,   570,   996,   570,   277,   282,   341,   570,
      61,   570,   572,   875,   521,   905,   905,   905,   958,   875,
     906,   906,   906,   906,   906,   906,   131,   277,   287,   906,
     906,   906,   906,   906,   906,   906,   906,   906,   906,   521,
     524,    42,   866,   905,   905,   959,   958,   875,   521,   521,
     521,   947,   875,   989,   316,   515,   316,   372,   515,   520,
     520,   521,   791,   426,   428,   426,   428,   987,   793,   793,
     793,   905,   183,   822,   861,   845,   905,   520,   845,   167,
     520,   852,   998,   861,   521,   524,   875,   869,   521,  1024,
     875,   521,   519,   905,   140,   964,   965,   521,   531,   524,
     528,   521,   522,   521,   989,   520,   905,   982,   997,   905,
     930,   905,   521,   521,   503,   906,   906,   146,   947,   172,
     131,   160,   282,   287,   441,   452,   520,   146,   943,   905,
     419,   975,   905,   961,   905,   433,   520,   777,   905,   969,
     992,   520,   520,   156,   917,   843,   844,   868,   799,   981,
     868,   995,   904,  1004,  1004,   773,    26,   314,   315,   394,
     397,   434,   477,   737,   740,     9,   394,   741,     9,    17,
     507,   512,   518,   520,   752,   753,   754,   755,   762,   763,
     764,   767,   768,   742,   744,   479,   732,   844,   479,   657,
      61,   691,    42,   701,   708,   524,   842,   509,   971,   505,
     804,   802,   294,   938,   941,   804,     4,   995,   820,   293,
     457,   817,   524,   247,   989,   785,    61,   978,   520,   998,
      61,   267,   433,   905,   277,   624,   520,   153,   520,   602,
     205,   621,   622,   583,    42,   176,   592,   618,   583,    27,
     136,   360,   362,   390,   547,   548,   549,   555,   556,   153,
     663,   153,   663,   593,   607,   593,   521,   524,   586,   996,
     521,   524,   509,   522,   433,   376,    93,   433,   775,   376,
     433,   433,   433,   376,   798,   798,   798,   950,   284,   284,
     521,   519,   409,   410,   580,   996,   616,   571,   172,   996,
     987,   650,    42,   520,   617,   645,   520,   647,   358,   422,
     652,   653,   996,   621,   987,   632,   987,   991,   482,   631,
     987,   521,   524,   290,   597,   290,   292,   596,   987,   597,
      42,   987,   521,   422,   905,   153,   987,   521,   876,   995,
     895,   895,   876,   997,   876,   519,   519,  1002,   574,   568,
     579,   676,   996,   996,   282,   621,   513,   621,   996,   513,
     621,   996,   521,   521,   959,   172,   131,   287,   520,   867,
     864,   520,   521,   521,   521,   997,   809,   868,   793,   793,
     793,   793,   987,   987,   987,    61,   188,   831,   861,   989,
     520,   849,   850,   851,   908,   993,   989,   167,   870,    80,
     871,   521,   430,   905,   144,   905,   933,   943,   521,   905,
     982,   983,   984,    42,   201,   521,   904,   905,    37,    37,
     905,   521,   905,   172,   520,   951,   905,   521,   146,   906,
     906,   146,   146,   905,   905,   519,   531,   520,   972,   800,
     479,   905,   302,   921,   524,   822,   798,   985,   822,   521,
     521,   737,   740,   737,   737,   737,   740,   740,   740,   512,
     762,   508,   518,   739,   751,   711,   765,   766,   754,   754,
     525,   745,   766,   511,   513,   526,   527,   747,   277,   504,
     511,   512,   769,   907,   929,    83,   905,   364,   699,   267,
     323,   115,   305,   520,   689,   776,   997,   521,   524,   695,
     657,   905,   164,   234,   520,   804,   293,   987,   521,   990,
     183,   777,   778,   978,   990,   991,   991,   521,   153,   622,
     609,   622,   583,   611,   524,   521,   117,   209,   274,   277,
     608,   520,    34,    61,   629,   618,    74,    80,    93,   115,
     117,   209,   277,   282,   331,   349,   451,   460,   588,   589,
     603,   176,   115,   193,   277,   597,   541,   107,   115,   176,
     277,   408,   411,   543,   597,   390,   549,   445,   991,   997,
     553,   620,     3,    38,    44,    51,    57,    81,    83,    89,
     101,   171,   173,   176,   177,   196,   211,   224,   225,   227,
     238,   240,   250,   270,   276,   280,   294,   301,   303,   324,
     367,   384,   391,   396,   415,   424,   444,   450,   470,   511,
     512,   542,   584,   623,   633,   639,   875,   941,   996,   999,
    1006,   991,   991,   991,   991,   991,   991,   991,   991,   991,
     991,   521,   521,   521,   799,   541,   580,   996,   520,   776,
     615,   686,    42,   722,   727,   987,   628,   194,   987,   521,
     524,   521,   650,    42,   520,   667,   107,   274,   606,   604,
     612,    86,   617,   776,   645,   776,   611,   460,   683,   519,
     875,   663,   521,   524,   621,   906,   172,   520,   951,   869,
     521,   524,   521,   822,   987,   987,   987,   987,    31,   103,
     184,   370,   520,   823,   824,   825,   826,   827,   828,   829,
     905,   905,   481,   918,   521,   907,   944,   945,   201,   183,
     846,   850,   520,   521,   852,   853,   854,  1002,   905,   524,
     521,   997,   905,   907,   905,   905,   905,   951,   521,   905,
      37,    37,   905,   905,   146,   521,   969,   521,   949,   521,
     905,   521,   520,   922,   997,   831,   521,   831,   996,   183,
     186,   738,   518,   740,   519,   224,   531,   760,   761,   521,
     511,   754,   519,     9,   746,   769,   769,   769,   769,    11,
      16,    17,    18,    19,    20,    21,    37,    48,    55,    80,
     177,   196,   201,   224,   225,   240,   277,   280,   297,   396,
     504,   507,   508,   509,   511,   512,   513,   514,   515,   516,
     940,   303,   520,   977,   466,   421,   459,   700,   694,   704,
     997,   292,   697,   509,   708,   699,   943,    61,   521,   521,
     465,   466,   782,   583,   609,   521,   521,   482,   614,   118,
     197,   207,   117,   462,   905,   115,    42,   520,  1002,   991,
     906,   118,   197,   117,   282,   230,   987,   614,    88,   629,
     194,   282,   542,   905,   629,   282,   511,   512,   545,   997,
     875,   663,   663,   250,   415,   999,  1003,   509,   433,   433,
     798,   572,   460,   567,   569,   621,   631,   521,    42,   422,
     905,   524,   716,   274,   337,   731,    42,   422,   277,   520,
     996,   686,   152,   776,   615,   631,   107,   150,   203,   596,
     120,   136,   330,   686,   482,  1033,    42,   292,   682,   997,
     520,   579,   906,   951,   521,   521,     9,   357,   815,   831,
     520,   392,   520,   521,   524,   919,   920,   997,   340,   832,
     524,   521,   520,   998,    61,   521,   949,   201,   521,   853,
     982,   519,   194,   521,   905,   905,   905,   519,   521,   521,
     923,   997,   918,   996,   918,   755,   747,   732,   520,   530,
     711,   759,   525,   512,   762,   524,   875,   769,   769,   769,
     769,   769,   769,   769,   431,   419,   975,  1002,   769,   769,
     961,   131,   160,   277,   282,   287,   441,   452,   769,   282,
     769,   433,    55,   196,   201,   240,   396,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   929,   734,   735,
     979,   524,   465,   521,   524,   971,    91,   699,   905,   521,
     990,   990,   349,   614,   520,   605,   583,   521,   193,   520,
     905,   277,   589,   614,   617,   991,    42,   153,   871,  1003,
     515,   584,   991,   991,   521,   541,   122,   521,   604,   776,
     776,   722,   521,   337,    40,   520,   725,   730,   231,   711,
     987,   153,    42,   991,   631,   521,    31,    85,    94,   116,
     193,   206,   408,   411,   600,   600,   372,   372,    42,    66,
      74,   244,   422,   905,   987,   520,   698,   707,   912,   997,
     521,   521,   520,   918,   947,   520,   947,   825,   524,    42,
     905,   460,   810,   907,   978,   989,   857,   799,   520,   857,
     905,   311,   924,   832,   832,   732,    99,   750,   758,   759,
     759,   747,   746,   503,   906,   906,   146,   172,   131,   160,
     282,   287,   441,   452,   520,   146,   769,   419,   975,   769,
     961,   769,   433,   521,   524,   776,   305,   776,   694,   292,
     520,   692,   987,   583,   610,   613,  1006,   412,   475,   590,
     591,   520,   585,   905,   521,   252,   626,   193,   460,   552,
     515,   445,   572,   996,   686,   596,  1033,   716,   138,   353,
     714,   711,   726,   728,    31,   711,   520,   987,   776,   667,
     604,   776,    74,   295,    74,   776,   683,   905,   521,   524,
      80,   702,   702,     9,   832,   521,   824,   521,   920,   922,
     374,   521,   798,   978,   519,    61,   799,   810,   810,   750,
     906,   521,   525,   529,   528,   769,    37,    37,   769,   769,
     172,   520,   951,   769,   146,   906,   906,   146,   146,   769,
     521,   734,   700,    93,   707,   132,   617,   521,   524,   509,
     540,   521,   274,   598,   173,   310,   397,   292,   594,   595,
     619,   585,   905,   445,    42,   423,    42,   521,   524,    83,
     201,   721,   520,  1033,   631,   596,  1033,   295,   295,   520,
     521,   686,   698,  1002,   703,  1002,   703,   521,   810,   521,
     812,   521,   521,   946,   342,   372,   925,   115,   749,   756,
     759,   757,   759,   769,   769,   769,   951,   521,   769,    37,
      37,   769,   769,   146,   987,   465,   991,   521,   278,   457,
     626,   613,   584,   521,   591,   207,   120,   457,   292,   619,
     292,   594,   776,   520,   711,   726,   148,   729,   987,   707,
     702,   868,   803,   803,    55,   104,   447,   905,   926,   927,
     926,   521,     4,     9,   748,   525,   529,   521,   769,   769,
     769,   776,   868,   390,   595,    65,   274,   363,   390,   587,
     587,  1033,   724,   727,   520,   520,   521,   703,   804,   804,
     927,   371,   166,   326,   166,   326,   756,   757,   706,   583,
      25,   115,   282,   524,   723,   402,   728,   711,   720,   686,
     803,    37,   868,   724,   521,   230,   718,   719,   521,   521,
     524,   868,   804,   927,   723,   520,   717,   349,   987,   711,
     988,   717,   521,   126,   719,   987,   717,   731,   231,   711,
     721
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   534,   535,   536,   536,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   546,   546,   546,
     546,   546,   546,   546,   546,   547,   547,   548,   548,   549,
     549,   549,   549,   550,   550,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   552,   552,   553,   553,   553,   553,
     554,   554,   555,   556,   556,   556,   654,   654,   654,   654,
     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,
     774,   774,   774,   775,   775,   688,   689,   689,   689,   689,
     689,   690,   690,   691,   691,   691,   692,   692,   692,   693,
     693,   694,   695,   695,   696,   696,   696,   697,   697,   697,
     698,   698,   698,   699,   699,   700,   700,   701,   701,   702,
     702,   703,   703,   704,   704,   705,   705,   706,   706,   707,
     707,   708,   651,   651,   651,   652,   652,   653,   653,   770,
     770,   770,   641,   641,   641,   641,   641,   641,   641,   642,
     649,   649,   649,   650,   650,   666,   666,   666,   667,   667,
     539,   539,   540,   540,   541,   541,   541,   542,   542,   542,
     542,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   544,   544,   545,   545,   545,
    1009,  1009,  1009,  1009,  1009,  1009,  1010,  1010,  1010,  1012,
     711,   711,   711,   712,   713,   713,   714,   714,   715,   716,
     716,   717,   718,   719,   720,   720,   721,   721,   722,   723,
     723,   724,   725,   725,   726,   726,   727,   727,   728,   728,
     729,   729,   730,   730,   731,   731,   731,   732,   732,   733,
     734,   735,   735,   736,   736,   737,   737,   737,   738,   738,
     738,   739,   739,   740,   740,   740,   740,   740,   741,   741,
     742,   742,   742,   742,   742,   742,   743,   743,   744,   745,
     745,   746,   746,   747,   747,   747,   747,   747,   748,   748,
     749,   749,   750,   750,   751,   752,   753,   753,   754,   754,
     754,   755,   755,   756,   756,   757,   757,   758,   758,   758,
     759,   759,   759,   760,   760,   761,   761,   762,   762,   762,
     763,   763,   764,   764,   765,   765,   766,   767,   767,   768,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   582,   582,   582,   583,   583,   584,   584,   584,   584,
     584,   584,   585,   585,   586,   587,   587,   587,   587,   587,
     588,   588,   588,   588,   589,   589,   589,   589,   589,   589,
     589,   589,   590,   590,   591,   591,   592,   592,   592,   593,
     594,   595,   595,   595,   595,   595,   596,   596,   596,   596,
     597,   598,   598,   599,   599,   600,   600,   600,   600,   600,
     600,   600,   600,   601,   601,   602,   603,   603,   603,   603,
     604,   604,   604,   604,   605,   606,   606,   606,   607,   608,
     608,   608,   608,   608,   608,   609,   609,   610,   610,   611,
     612,   612,   612,   613,   613,   614,   614,   615,   615,   615,
     616,   617,   617,   618,   618,   619,   620,   620,   620,   620,
     621,   621,   622,   622,   623,   623,   623,   624,   624,   624,
     624,   624,   624,   625,   625,   626,   626,   626,   626,   627,
     628,   628,   628,   628,   628,   628,   628,   628,   629,   629,
     659,   659,   659,   659,   659,   659,   659,   659,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   661,   661,   661,   661,
     661,   661,   662,   662,   663,   663,   663,   664,   664,   664,
     665,   665,   643,   643,   643,   643,   643,   643,   644,   644,
     645,   645,  1011,   565,   565,   566,   566,   567,   567,   568,
     568,   569,   569,   570,   570,   571,   571,   572,   572,   573,
     573,   573,   573,   573,   574,   575,   575,   576,   576,   577,
     577,   578,   578,   578,   578,   578,   578,   578,   578,   578,
     578,   578,   578,   578,   578,   578,   578,   579,   580,   580,
     580,   581,   581,   776,   776,   777,   777,   778,   778,   778,
     778,   778,   778,   778,   778,   779,   779,   780,   780,   781,
     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,
     781,   781,   781,   781,   781,   781,   781,   781,   782,   782,
     783,   783,   784,   784,   785,   785,   785,   786,   786,   787,
     787,   788,   788,   788,   789,   789,   790,   791,   791,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   793,   793,
     794,   794,   794,   795,   796,   796,   797,   797,   798,   798,
     798,   799,   799,   800,   800,   801,   801,   802,   802,   803,
     803,   803,   804,   804,   804,   805,   805,   805,   805,   806,
     806,   807,   807,   807,   807,   808,   808,   809,   809,   809,
     809,   809,   809,   810,   810,   811,   811,   812,   812,   812,
     812,   813,   814,   814,   815,   815,   816,   816,   816,   816,
     816,   817,   818,   818,   818,   819,   819,   820,   820,   821,
     821,   822,   822,   822,   823,   823,   824,   824,   825,   825,
     825,   825,   825,   826,   827,   828,   829,   830,   830,   831,
     831,   832,   832,   833,   833,   834,   834,   835,   835,   836,
     837,   837,   837,   837,   838,   838,   839,   839,   839,   840,
     840,   841,   841,   842,   842,   843,   843,   844,   844,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     846,   846,   847,   847,   847,   848,   848,   849,   849,   850,
     850,   851,   851,   852,   852,   853,   854,   854,   855,   855,
     855,   855,   855,   855,   855,   855,   855,   855,   855,   856,
     856,   856,   856,   857,   857,   858,   858,   858,   858,   858,
     859,   859,   859,   859,   859,   859,   860,   860,   861,   861,
     862,   862,   862,   862,   863,   863,   864,   865,   865,   866,
     866,   867,   867,   868,   868,   869,   869,   870,   871,   871,
     872,   872,   873,   873,   874,   874,   875,   875,   875,   875,
     875,   875,   875,   875,   875,   876,   876,   876,   877,   877,
     877,   877,   877,   877,   877,   878,   878,   878,   878,   879,
     880,   880,   881,   881,   881,   881,   881,   881,   881,   881,
     881,   881,   881,   882,   882,   883,   883,   884,   884,   885,
     886,   887,   887,   888,   888,   889,   890,   891,   891,   891,
     891,   891,   891,   892,   892,   893,   893,   893,   893,   894,
     895,   895,   895,   896,   896,   897,   897,   898,   898,   899,
     899,   900,   900,   901,   901,   902,   902,   903,   903,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   906,   906,   906,   906,   906,
     906,   906,   906,   906,   906,   906,   906,   906,   906,   906,
     906,   906,   906,   906,   906,   906,   906,   906,   906,   906,
     907,   907,   907,   908,   908,   908,   908,   908,   908,   908,
     908,   908,   908,   908,   908,   908,   909,   909,   909,   909,
     909,   909,   910,   910,   910,   910,   910,   910,   911,   911,
     912,   912,   913,   913,   913,   913,   913,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   914,   914,   915,   915,
     916,   916,   916,   917,   917,   918,   918,   919,   919,   920,
     921,   921,   921,   922,   923,   923,   924,   924,   925,   925,
     925,   926,   926,   927,   927,   927,   927,   927,   928,   928,
     929,   929,   930,   931,   931,   932,   932,   933,   934,   934,
     935,   935,   936,   936,   937,   937,   937,   938,   938,   939,
     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,
     939,   939,   939,   940,   940,   941,   941,   942,   942,   942,
     942,   942,   942,   942,   942,   943,   943,   944,   944,   945,
     945,   946,   946,   947,   947,   948,   948,   949,   949,   950,
     950,   950,   951,   951,   952,   952,   953,   953,   953,   953,
     953,   953,   953,   953,   953,   953,   954,   954,   955,   956,
     956,   957,   957,   957,   957,   957,   957,   958,   959,   960,
     960,   960,   961,   961,   962,   963,   963,   964,   965,   965,
     966,   966,   967,   967,   968,   968,   968,   969,   969,   970,
     970,   971,   971,   972,   972,   972,   973,   973,   973,   974,
     974,   975,   975,   976,   976,   977,   977,   978,   978,   979,
     979,   979,   980,   980,   981,   981,   982,   983,   983,   984,
     984,   985,   985,   985,   986,   986,   987,   987,   988,   988,
     989,   989,   990,   990,   991,   992,   993,   993,   994,   994,
     994,   994,   994,   994,   994,   994,   994,   994,   994,   994,
     994,   994,   995,   996,   997,   997,   997,   998,   998,   999,
     999,   999,  1000,  1000,  1000,  1001,  1001,  1001,  1002,  1002,
    1003,  1003,  1004,  1004,  1005,  1006,  1006,  1006,  1006,  1007,
    1007,  1008,   771,   772,   772,   773,   773,   773,   773,   773,
     646,   646,   646,   647,   647,   648,   648,   648,   648,   681,
     681,   682,   683,   683,   684,   684,   685,   685,   686,   686,
     687,   687,   538,   538,   538,   538,   538,   538,   563,   563,
     564,   564,   679,   679,   680,   668,   668,   668,   668,   669,
     669,   670,   670,   670,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   672,   672,   672,   673,   673,   674,
     674,   675,   675,   676,   676,   676,   676,   677,   678,   678,
    1021,  1021,  1021,  1021,  1022,  1022,  1022,  1022,  1023,  1023,
    1023,  1023,  1024,  1024,  1025,  1025,  1025,  1025,  1025,  1025,
    1025,  1026,  1026,   709,   709,   709,   710,   710,  1013,  1013,
    1013,  1013,  1013,  1014,  1014,  1014,  1014,  1014,  1015,  1015,
    1016,  1016,  1017,  1017,   655,   655,   656,   656,   656,   657,
     657,   658,   658,   557,   557,   558,   559,   559,   560,   560,
     561,   561,  1018,  1019,  1019,  1020,  1020,  1020,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1027,  1028,  1028,  1029,  1029,
    1030,  1030,  1031,  1031,   562,  1032,  1032,  1032,  1032,  1032,
    1033,  1033,  1033,  1033,   630,   630,   630,   631,   631,   631,
     632,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     9,     1,     4,     4,     7,
       2,     1,     3,     2,     2,     0,     4,     3,     0,     1,
       0,     2,     3,     5,     2,     2,     0,     8,     5,     0,
       5,     5,     7,     2,     0,     1,     1,     1,     3,     2,
       0,     1,     0,     1,     3,     1,     3,     1,     2,     1,
       3,     2,     6,     8,     5,     1,     0,     1,     3,     2,
       4,     5,     3,     4,     6,     5,     5,     8,     7,     1,
       5,     8,     7,     1,     0,     3,     9,    12,     3,     0,
       4,     6,     1,     2,     1,     1,     0,     1,     2,     2,
       1,     2,     2,     1,     2,     3,     2,     2,     2,     2,
       3,     3,     3,     1,     3,     1,     0,     1,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     0,     2,
       1,     1,     1,     5,     1,     1,     1,     1,    16,     3,
       0,     3,     2,     2,     1,     3,     5,     0,     5,     3,
       0,    13,     1,     0,     1,     3,     1,     3,     1,     3,
       4,     0,     4,     3,     2,     2,     0,     2,     0,    12,
       1,     1,     3,     2,     0,     1,     1,     0,     1,     1,
       0,     2,     0,     2,     2,     2,     2,     1,     1,     0,
       3,     4,     3,     2,     3,     0,     1,     3,     3,     1,
       3,     1,     0,     1,     1,     1,     5,     0,     1,     1,
       2,     0,     3,     0,     5,     4,     1,     1,     2,     2,
       0,     1,     3,     1,     3,     1,     3,     1,     3,     3,
       1,     2,     3,     2,     0,     1,     1,     1,     2,     1,
       2,     3,     2,     1,     1,     0,     4,     2,     5,     3,
       1,     3,     3,     5,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     3,     3,     5,     4,     6,     3,
       5,     4,     6,     4,     6,     5,     7,     3,     2,     4,
       3,     2,     3,     3,     3,     3,     4,     3,     4,     3,
       4,     5,     6,     6,     7,     6,     7,     6,     7,     3,
       4,     9,    12,    11,     0,     2,     1,     1,     1,     1,
       1,     1,     3,     0,     1,     2,     1,     1,     2,     2,
       3,     1,     1,     2,     2,     1,     2,     3,     5,     3,
       2,     5,     1,     1,     1,     0,     5,     7,     5,     2,
       3,     1,     1,     2,     2,     0,     3,     4,     4,     0,
       3,     2,     0,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     1,     2,     2,     2,
       2,     2,     2,     0,     3,     3,     3,     0,     1,     2,
       1,     2,     2,     2,     2,     3,     4,     1,     3,     1,
       1,     1,     1,     3,     1,     2,     0,     1,     2,     0,
       1,     3,     0,     2,     0,     3,     3,     1,     5,     3,
       1,     3,     1,     2,     1,     4,     5,     5,     6,     3,
       7,     4,    11,     1,     3,     2,     2,     2,     0,     3,
       1,     1,     2,     2,     2,     2,     1,     0,     1,     2,
       6,     4,     6,     4,     6,     8,     4,     6,     1,     1,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     2,     2,     1,     3,
       1,     1,     1,     3,     1,     1,     0,     1,     1,     1,
       1,     3,     8,    11,    10,     7,    10,     9,     1,     1,
       2,     3,     8,    11,     9,     1,     1,     3,     0,     1,
       3,     1,     0,     1,     0,     1,     0,     1,     3,     1,
       1,     1,     3,     0,     2,     2,     0,     2,     0,     1,
       0,     1,     1,     1,     3,     3,     1,     1,     3,     3,
       3,     3,     3,     3,     4,     3,     2,     1,     1,     1,
       1,     1,     3,     1,     1,     3,     3,     1,     2,     4,
       4,     2,     3,     5,     5,     1,     1,     3,     0,    11,
      11,    10,    12,     1,     2,     5,     4,     4,     4,     4,
       7,     5,     4,     7,     6,     9,     9,     4,     1,     1,
       1,     1,     1,     1,     1,     5,     1,     1,     3,     1,
       2,     2,     2,     3,     1,     3,     6,     2,     0,     3,
       3,     4,     4,     4,     4,     3,     2,     1,     1,     0,
       1,     1,     0,     2,     1,     5,     1,     0,     2,     2,
       0,     1,     0,     3,     5,     1,     3,     4,     3,     1,
       1,     0,     2,     2,     0,     2,     2,     1,     1,     1,
       0,     2,     4,     5,     4,     2,     3,     2,     2,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     2,     2,
       2,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     3,     3,     0,     1,     3,     1,     2,     1,     1,
       1,     1,     1,     2,     4,     4,     5,     1,     1,     2,
       0,     2,     0,     1,     3,     1,     0,     1,     2,     3,
       2,     4,     2,     3,     2,     0,     1,     2,     0,     4,
       5,     1,     2,     2,     0,     1,     3,     1,     2,     3,
       3,     3,     3,     3,     3,     1,     4,     9,     9,     2,
       3,     0,     2,     2,     0,     5,     3,     1,     3,     5,
       3,     1,     2,     1,     3,     5,     1,     2,     3,     4,
       5,     4,     5,     4,     6,     5,     4,     5,     5,     5,
       2,     4,     1,     1,     0,     1,     4,     5,     4,     0,
       2,     2,     2,     1,     1,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     1,     0,     2,     3,     5,     6,
       2,     3,     5,     5,     5,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     4,     1,     1,     1,     1,     2,
       3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
       2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
       3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     3,     3,     5,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     3,     3,
       2,     2,     3,     3,     5,     4,     6,     3,     5,     4,
       6,     4,     6,     5,     7,     3,     2,     4,     3,     2,
       3,     3,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     1,     4,     3,     5,     1,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     5,     6,     6,     7,
       1,     1,     2,     1,     1,     2,     2,     3,     1,     2,
       4,     1,     1,     2,     2,     4,     1,     1,     3,     3,
       4,     1,     3,     6,     7,     9,     7,     7,     5,     1,
       1,     1,     5,     6,     6,     4,     4,     4,     4,     6,
       5,     5,     5,     4,     6,     4,     7,     9,     5,     0,
       5,     4,     0,     1,     0,     2,     0,     1,     3,     3,
       2,     2,     0,     6,     1,     0,     3,     0,     2,     2,
       0,     1,     4,     2,     2,     2,     2,     2,     4,     3,
       1,     5,     3,     1,     3,     1,     2,     3,     1,     3,
       1,     2,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
       0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
       2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     2,     2,     3,     5,     1,     0,     1,
       2,     0,     2,     0,     2,     3,     3,     3,     5,     0,
       2,     1,     0,     1,     0,     1,     3,     1,     2,     3,
       2,     1,     4,     2,     1,     0,     3,     1,     3,     1,
       2,     4,     2,     0,     1,     3,     1,     2,     1,     3,
       1,     2,     1,     3,     1,     1,     1,     2,     1,     1,
       2,     1,     1,     2,     7,     2,     5,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     5,     3,     0,     1,     1,     1,     1,     1,
       4,     7,     6,     2,     0,     1,     1,     1,     1,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,     6,     8,     6,     8,     6,     8,     3,     2,
       1,     0,     4,     6,     3,     2,     4,     3,     5,     1,
       0,     1,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     1,     3,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     3,     2,     2,     3,     1,     1,     4,     6,
       5,     4,     6,     1,     1,     1,     1,     1,     1,     0,
       1,     3,     1,     0,     7,     3,     1,     2,     3,     2,
       0,     2,     0,     2,     4,     5,     3,     5,     1,     0,
       2,     0,     2,     1,     1,     1,     2,     3,     2,     2,
       2,     2,     3,     4,     3,     1,     1,     1,     1,     0,
       1,     3,     1,     3,     2,     9,    12,    11,    12,    14,
       3,     4,     4,     0,     7,    10,     9,     2,     3,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 549 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 565 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 577 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 627 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 20264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name  */
#line 10 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 20707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* CreateDatabaseStmt: CREATE_P opt_extension_name DATABASE qualified_name  */
#line 16 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
				    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
				    n->extension = (yyvsp[-2].str);
                    n->name = (yyvsp[0].range);
                    (yyval.node) = (PGNode *)n;
				}
#line 20718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 20728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name  */
#line 29 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 20738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name FROM Sconst  */
#line 35 "third_party/libpg_query/grammar/statements/create_database.y"
                {
                    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
                    n->name = (yyvsp[-2].range);
                    n->path = (yyvsp[0].str);
                    (yyval.node) = (PGNode *)n;
                }
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name FROM Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_extension_name: Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/create_database.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 21139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 21149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 21239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 21251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 21275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* Discriminator: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 21315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 133 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 21330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 147 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* EdgeTableDefinitionList: %empty  */
#line 149 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 157 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-12].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-10].list);
				n->src_name = (yyvsp[-9].range);
				n->src_pk = (yyvsp[-8].list);
				n->dst_fk = (yyvsp[-6].list);
				n->dst_name = (yyvsp[-5].range);
				n->dst_pk = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 21363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* IdentOptionalAs: PGQ_IDENT  */
#line 182 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 21369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 184 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 21375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* QualifiednameOptionalAs: qualified_name  */
#line 188 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 21381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 190 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 21387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* PropertiesList: IdentOptionalAs  */
#line 194 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* ExceptOptional: %empty  */
#line 204 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 21411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* PropertiesClause: NO PROPERTIES  */
#line 218 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 221 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* PropertiesClause: %empty  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 232 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* GraphTableWhereOptional: %empty  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 21456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-10].str);
				n->paths = (yyvsp[-8].list);
				if ((yyvsp[-7].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-7].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 21482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* ColumnSpec: target_el  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 21488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* ColumnList: ColumnSpec  */
#line 268 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* KeepOptional: KEEP PathPrefix  */
#line 274 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* KeepOptional: %empty  */
#line 276 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 21512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* GroupOrGroupsOptional: GROUP_P  */
#line 284 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* GroupOrGroupsOptional: GROUPS  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* GroupOrGroupsOptional: %empty  */
#line 288 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* PathVariableOptional: PGQ_IDENT '='  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 21536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* PathVariableOptional: %empty  */
#line 294 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 21542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 298 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 300 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 21554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 302 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 21560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 304 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 21566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* PathModeOptional: PathOrPathsOptional  */
#line 306 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* TopKOptional: ICONST  */
#line 310 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* TopKOptional: %empty  */
#line 312 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 317 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 329 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 341 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PathPrefix: ALL PathModeOptional  */
#line 353 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 365 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* PathPrefix: %empty  */
#line 377 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* PathPatternList: PathPattern  */
#line 391 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 394 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 21712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* PatternUnion: '|'  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* PatternUnion: '|' '+' '|'  */
#line 425 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* KleeneQuantifierOptional: ICONST  */
#line 429 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* KleeneQuantifierOptional: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 21736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* KleeneOptional: '*'  */
#line 437 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* KleeneOptional: '+'  */
#line 446 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* KleeneOptional: '?'  */
#line 455 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 464 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* KleeneOptional: %empty  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* CostNum: ICONST  */
#line 483 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* CostNum: FCONST  */
#line 485 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 21808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* CostDefault: DEFAULT CostNum  */
#line 489 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* CostDefault: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 21820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* CostOptional: COST b_expr CostDefault  */
#line 496 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* CostOptional: %empty  */
#line 506 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 516 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 528 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 21867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* PathElement: VertexPattern  */
#line 536 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* PathElement: EdgePattern  */
#line 538 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* PathSequence: EnclosedSubPath PathSequence  */
#line 543 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 21905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* PathSequence: PathElement PathSequence  */
#line 565 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 21911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* PathSequence: %empty  */
#line 567 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* PathConcatenation: PathSequence  */
#line 571 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 574 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 21935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* OrLabelExpression: LabelExpression  */
#line 584 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* AndLabelExpression: LabelExpression  */
#line 597 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 600 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* ComposedLabelExpression: LabelExpression  */
#line 610 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 613 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 622 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* LabelExpression: PGQ_IDENT  */
#line 633 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 22012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* LabelExpression: '!' LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 22024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 649 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 653 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* LabelExpressionOptional: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 22042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ArrowRight: '-'  */
#line 667 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ArrowRight: '-' '>'  */
#line 669 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 22054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* ArrowRight: LAMBDA_ARROW  */
#line 671 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 22060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* ArrowLeftBracket: '-' '['  */
#line 675 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 22066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* ArrowLeftBracket: '<' '-' '['  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 22072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* AbbreviatedEdge: '<' ArrowRight  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 22081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* AbbreviatedEdge: ArrowRight  */
#line 688 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 22090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* VariableOptional: PGQ_IDENT  */
#line 695 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* VariableOptional: %empty  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 22102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 702 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 729 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* VertexPattern: '(' FullElementSpec ')'  */
#line 756 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* pgq_expr: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 790 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 22198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 792 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 22220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* pgq_expr: '+' pgq_expr  */
#line 815 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* pgq_expr: '-' pgq_expr  */
#line 817 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 22232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 819 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 821 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 823 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 825 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 827 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 829 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 831 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 833 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 835 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 837 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 839 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 841 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 843 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 850 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: NOT pgq_expr  */
#line 852 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: NOT_LA pgq_expr  */
#line 854 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 856 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 866 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 878 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 897 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 902 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 22441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 918 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 22453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 926 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 22465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 22477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr IS NULL_P  */
#line 952 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr ISNULL  */
#line 960 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 968 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 22513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 976 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: pgq_expr NOTNULL  */
#line 984 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 992 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 22549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1000 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 22557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: row OVERLAPS row  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1052 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1060 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1068 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 22657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 22665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1076 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 22681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1084 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1092 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1100 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 22753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 22779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 22864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 22882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 22888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 22894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 22924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 22930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 22936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 22942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 22948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 23110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 23116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 23214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 23226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 23232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 23238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 23244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 23256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 23262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 23532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 23614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 23677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 23685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 23715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 23869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 23881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 23908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 23960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 23966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 23972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 23978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 24096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* drop_type_any_name: DATABASE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 24102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* drop_type_any_name: SEQUENCE  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 24108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* drop_type_any_name: FUNCTION  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* drop_type_any_name: MACRO  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* drop_type_any_name: MACRO TABLE  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 24126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* drop_type_any_name: VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 24132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 24138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* drop_type_any_name: INDEX  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 24144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* drop_type_any_name: FOREIGN TABLE  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 24150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* drop_type_any_name: COLLATION  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 24156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* drop_type_any_name: CONVERSION_P  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 24162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* drop_type_any_name: SCHEMA  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 24168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* drop_type_any_name: STATISTICS  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 24174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 24180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 24192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 24198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* drop_type_name: ACCESS METHOD  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* drop_type_name: EVENT TRIGGER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 24210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* drop_type_name: EXTENSION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 24216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 24222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* drop_type_name: PUBLICATION  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 24228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* drop_type_name: SERVER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 24234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* any_name_list: any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* any_name_list: any_name_list ',' any_name  */
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_drop_behavior: CASCADE  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 24252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_drop_behavior: RESTRICT  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 24258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_drop_behavior: %empty  */
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 24264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* drop_type_name_on_any_name: POLICY  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 24270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* drop_type_name_on_any_name: RULE  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 24276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* drop_type_name_on_any_name: TRIGGER  */
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 24282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* type_name_list: Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 24288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* type_name_list: type_name_list ',' Typename  */
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 24294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 24309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 24394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 24402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 24449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 24538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 24550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 24580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 24592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 24608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 24626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 24688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 24752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 24929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 24938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 25041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 25049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 25215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 25226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 25289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 25314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* into_clause: INTO OptTempTableName  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 25328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* into_clause: %empty  */
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 25334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 25403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* OptTempTableName: TABLE qualified_name  */
#line 520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* OptTempTableName: qualified_name  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* opt_table: TABLE  */
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 25427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* opt_table: %empty  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* all_or_distinct: ALL  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 25439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* all_or_distinct: DISTINCT  */
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* all_or_distinct: %empty  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* by_name: BY NAME_P  */
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 25457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* distinct_clause: DISTINCT  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* opt_all_clause: ALL  */
#line 554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 25475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* opt_all_clause: %empty  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 25487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 25493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* opt_ignore_nulls: %empty  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* opt_sort_clause: sort_clause  */
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 25505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* opt_sort_clause: %empty  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* sort_clause: ORDER BY sortby_list  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 25534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* sortby_list: sortby  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 25540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* sortby_list: sortby_list ',' sortby  */
#line 588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 25546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 25559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 25572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_asc_desc: ASC_P  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 25578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_asc_desc: DESC_P  */
#line 612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 25584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* opt_asc_desc: %empty  */
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 25596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 25602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* opt_nulls_order: %empty  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 25608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* select_limit: limit_clause offset_clause  */
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 25614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* select_limit: offset_clause limit_clause  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 25620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* select_limit: limit_clause  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 25626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* select_limit: offset_clause  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 25632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_select_limit: select_limit  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_select_limit: %empty  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 25644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* limit_clause: LIMIT select_limit_value  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 25663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 653 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 25669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 25675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* offset_clause: OFFSET select_offset_value  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 25687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* sample_count: FCONST '%'  */
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* sample_count: ICONST '%'  */
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* sample_count: FCONST PERCENT  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* sample_count: ICONST PERCENT  */
#line 683 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* sample_count: ICONST  */
#line 687 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 25727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* sample_count: ICONST ROWS  */
#line 691 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 25735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* sample_clause: %empty  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 25749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* opt_sample_func: ColId  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* opt_sample_func: %empty  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 25761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 715 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 25770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* tablesample_entry: sample_count  */
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 25778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 25786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 25795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* opt_tablesample_clause: tablesample_clause  */
#line 742 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_tablesample_clause: %empty  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 25815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 748 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 25821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_repeatable_clause: %empty  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 25827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* select_limit_value: a_expr  */
#line 753 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* select_limit_value: ALL  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* select_limit_value: a_expr '%'  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 25848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* select_limit_value: FCONST PERCENT  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 25854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* select_limit_value: ICONST PERCENT  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 25860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* select_offset_value: a_expr  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* select_fetch_first_value: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* select_fetch_first_value: '+' I_or_F_const  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* select_fetch_first_value: '-' I_or_F_const  */
#line 792 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* I_or_F_const: Iconst  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 25890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* I_or_F_const: FCONST  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 25896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* row_or_rows: ROW  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 25902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* row_or_rows: ROWS  */
#line 802 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* first_or_next: FIRST_P  */
#line 805 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 25914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* first_or_next: NEXT  */
#line 806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* group_clause: GROUP_P BY ALL  */
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* group_clause: %empty  */
#line 837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* group_by_list: group_by_item  */
#line 841 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* group_by_list: group_by_list ',' group_by_item  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* group_by_list_opt_comma: group_by_list  */
#line 846 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* group_by_list_opt_comma: group_by_list ','  */
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* group_by_item: a_expr  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* group_by_item: empty_grouping_set  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* group_by_item: cube_clause  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* group_by_item: rollup_clause  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* group_by_item: grouping_sets_clause  */
#line 855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* empty_grouping_set: '(' ')'  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 26003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* grouping_or_grouping_id: GROUPING  */
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* grouping_or_grouping_id: GROUPING_ID  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 26039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* having_clause: HAVING a_expr  */
#line 898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* having_clause: %empty  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* qualify_clause: QUALIFY a_expr  */
#line 903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* qualify_clause: %empty  */
#line 904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* for_locking_clause: for_locking_items  */
#line 908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* for_locking_clause: FOR READ_P ONLY  */
#line 909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* opt_for_locking_clause: for_locking_clause  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* opt_for_locking_clause: %empty  */
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* for_locking_items: for_locking_item  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* for_locking_items: for_locking_items for_locking_item  */
#line 919 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 26099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 26111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* for_locking_strength: FOR UPDATE  */
#line 934 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 26117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 26123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* for_locking_strength: FOR SHARE  */
#line 936 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 26129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* for_locking_strength: FOR KEY SHARE  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 26135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* locked_rels_list: OF qualified_name_list  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* locked_rels_list: %empty  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* opt_nowait_or_skip: NOWAIT  */
#line 947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 26153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 26159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* opt_nowait_or_skip: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 26165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 959 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* values_clause_opt_comma: values_clause  */
#line 973 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* values_clause_opt_comma: values_clause ','  */
#line 974 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* from_clause: FROM from_list_opt_comma  */
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* from_clause: %empty  */
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* from_list: table_ref  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* from_list: from_list ',' table_ref  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* from_list_opt_comma: from_list  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* from_list_opt_comma: from_list ','  */
#line 998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 26243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1019 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 26268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 26306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* table_ref: joined_table  */
#line 1054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 26314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 26323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1063 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1083 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 26359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 26365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* opt_pivot_group_by: %empty  */
#line 1091 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 26371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 26377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* opt_include_nulls: %empty  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1108 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* pivot_header: d_expr  */
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1122 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1130 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* pivot_value_list: pivot_value  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1143 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* unpivot_header: ColIdOrString  */
#line 1149 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1150 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 26473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* unpivot_value_list: unpivot_value  */
#line 1164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1168 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* joined_table: '(' joined_table ')'  */
#line 1193 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 26508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1197 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1251 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 26613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1305 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 26667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1320 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 26687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* alias_clause: AS ColIdOrString  */
#line 1345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* alias_clause: ColId  */
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* opt_alias_clause: alias_clause  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 26731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_alias_clause: %empty  */
#line 1363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 26737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* func_alias_clause: alias_clause  */
#line 1372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 26745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1376 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 26753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* func_alias_clause: %empty  */
#line 1392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 26781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* join_type: FULL join_outer  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* join_type: LEFT join_outer  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* join_type: RIGHT join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* join_type: SEMI  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 26805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* join_type: ANTI  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 26811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* join_type: INNER_P  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 26817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* join_outer: OUTER_P  */
#line 1406 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* join_outer: %empty  */
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* join_qual: ON a_expr  */
#line 1420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* relation_expr: qualified_name  */
#line 1426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* relation_expr: qualified_name '*'  */
#line 1433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* relation_expr: ONLY qualified_name  */
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* func_table: func_expr_windowless opt_ordinality  */
#line 1479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* rowsfrom_list: rowsfrom_item  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* opt_col_def_list: %empty  */
#line 1512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* opt_ordinality: %empty  */
#line 1516 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* where_clause: WHERE a_expr  */
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* where_clause: %empty  */
#line 1522 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* TableFuncElementList: TableFuncElement  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* opt_collate_clause: COLLATE any_name  */
#line 1559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* opt_collate_clause: %empty  */
#line 1566 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 27025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* colid_type_list: ColId Typename  */
#line 1579 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* opt_Typename: Typename  */
#line 1589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* opt_Typename: %empty  */
#line 1590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 27053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* Typename: SimpleTypename opt_array_bounds  */
#line 1593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 27062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1598 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 27072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 27081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 27091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* Typename: SimpleTypename ARRAY  */
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 27100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1621 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 27110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1626 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 27121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1632 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 27132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 27143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 27149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 27155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* opt_array_bounds: %empty  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 27161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* SimpleTypename: GenericType  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* SimpleTypename: Numeric  */
#line 1657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* SimpleTypename: Bit  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* SimpleTypename: Character  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* SimpleTypename: ConstDatetime  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* SimpleTypename: ConstInterval opt_interval  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 27200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 27210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* ConstTypename: Numeric  */
#line 1686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* ConstTypename: ConstBit  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* ConstTypename: ConstCharacter  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* ConstTypename: ConstDatetime  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* GenericType: type_name_token opt_type_modifiers  */
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* opt_type_modifiers: %empty  */
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* Numeric: INT_P  */
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* Numeric: INTEGER  */
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* Numeric: SMALLINT  */
#line 1732 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* Numeric: BIGINT  */
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* Numeric: REAL  */
#line 1742 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* Numeric: FLOAT_P opt_float  */
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* Numeric: DOUBLE_P PRECISION  */
#line 1752 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* Numeric: DEC opt_type_modifiers  */
#line 1763 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* Numeric: BOOLEAN_P  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* opt_float: '(' Iconst ')'  */
#line 1782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 27383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* opt_float: %empty  */
#line 1803 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 27391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* Bit: BitWithLength  */
#line 1813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* Bit: BitWithoutLength  */
#line 1817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* ConstBit: BitWithLength  */
#line 1825 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* ConstBit: BitWithoutLength  */
#line 1829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1837 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* BitWithoutLength: BIT opt_varying  */
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* Character: CharacterWithLength  */
#line 1870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* Character: CharacterWithoutLength  */
#line 1874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* ConstCharacter: CharacterWithLength  */
#line 1880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* ConstCharacter: CharacterWithoutLength  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1897 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 27504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* CharacterWithoutLength: character  */
#line 1905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* character: CHARACTER opt_varying  */
#line 1915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* character: CHAR_P opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* character: VARCHAR  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 27534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* character: NATIONAL CHARACTER opt_varying  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* character: NATIONAL CHAR_P opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* character: NCHAR opt_varying  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* opt_varying: VARYING  */
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 27558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* opt_varying: %empty  */
#line 1930 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* ConstDatetime: TIME opt_timezone  */
#line 1964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* ConstInterval: INTERVAL  */
#line 1975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 27629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1983 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 27635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* opt_timezone: %empty  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* opt_interval: year_keyword  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 27647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* opt_interval: month_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 27653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* opt_interval: day_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 27659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* opt_interval: hour_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 27665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* opt_interval: minute_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 27671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* opt_interval: second_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 27677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* opt_interval: millisecond_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 27683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* opt_interval: microsecond_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 27689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* opt_interval: year_keyword TO month_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 27698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* opt_interval: day_keyword TO hour_keyword  */
#line 2034 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 27707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* opt_interval: day_keyword TO minute_keyword  */
#line 2039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* opt_interval: day_keyword TO second_keyword  */
#line 2045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* opt_interval: hour_keyword TO second_keyword  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* opt_interval: minute_keyword TO second_keyword  */
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* opt_interval: %empty  */
#line 2068 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: c_expr  */
#line 2099 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: a_expr TYPECAST Typename  */
#line 2102 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr COLLATE any_name  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: '+' a_expr  */
#line 2127 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: '-' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr '+' a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr '-' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr '*' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr '/' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr '%' a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr '^' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr POWER_OF a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr '<' a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: a_expr '>' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: a_expr '=' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: a_expr qual_Op a_expr  */
#line 2160 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* a_expr: qual_Op a_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* a_expr: a_expr qual_Op  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* a_expr: a_expr AND a_expr  */
#line 2167 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* a_expr: a_expr OR a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* a_expr: NOT a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* a_expr: NOT_LA a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* a_expr: a_expr GLOB a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* a_expr: a_expr LIKE a_expr  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2197 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* a_expr: a_expr ILIKE a_expr  */
#line 2204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 28012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 28035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 28047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 28059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 28071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* a_expr: a_expr IS NULL_P  */
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* a_expr: a_expr ISNULL  */
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* a_expr: a_expr IS NOT NULL_P  */
#line 2287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* a_expr: a_expr NOT NULL_P  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* a_expr: a_expr NOTNULL  */
#line 2303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2311 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 28143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2319 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 28151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* a_expr: row OVERLAPS row  */
#line 2323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 28171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* a_expr: a_expr IS TRUE_P  */
#line 2339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* a_expr: a_expr IS FALSE_P  */
#line 2355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* a_expr: a_expr IS UNKNOWN  */
#line 2371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2399 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2403 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* a_expr: a_expr IN_P in_expr  */
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 28347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 28373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2488 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* a_expr: DEFAULT  */
#line 2495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 28441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* b_expr: c_expr  */
#line 2545 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* b_expr: b_expr TYPECAST Typename  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* b_expr: '+' b_expr  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* b_expr: '-' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* b_expr: b_expr '+' b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* b_expr: b_expr '-' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* b_expr: b_expr '*' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* b_expr: b_expr '/' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* b_expr: b_expr '%' b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* b_expr: b_expr '^' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* b_expr: b_expr POWER_OF b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* b_expr: b_expr '<' b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* b_expr: b_expr '>' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* b_expr: b_expr '=' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* b_expr: b_expr qual_Op b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* b_expr: qual_Op b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* b_expr: b_expr qual_Op  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* c_expr: row  */
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 28637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* d_expr: columnref  */
#line 2631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* d_expr: AexprConst  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* d_expr: '#' ICONST  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* d_expr: '$' named_param  */
#line 2641 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 28677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* d_expr: list_comprehension  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 28685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* d_expr: ARRAY select_with_parens  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* d_expr: case_expr  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* d_expr: select_with_parens  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* d_expr: select_with_parens indirection  */
#line 2681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 28759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* d_expr: EXISTS select_with_parens  */
#line 2705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2716 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* indirection_expr: '?'  */
#line 2727 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* indirection_expr: PARAM  */
#line 2731 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* indirection_expr: '(' a_expr ')'  */
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 28812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2742 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2747 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* indirection_expr: func_expr  */
#line 2764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* func_application: func_name '(' ')'  */
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 28908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2808 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 28960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* func_expr: func_expr_common_subexpr  */
#line 2864 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* func_expr_windowless: func_application  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2883 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 28988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2889 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 28994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 29000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2897 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2911 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 29060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 29114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 29127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 29146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* within_group_clause: %empty  */
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* filter_clause: %empty  */
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* export_clause: EXPORT_STATE  */
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 29182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* export_clause: %empty  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* window_clause: WINDOW window_definition_list  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* window_clause: %empty  */
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* window_definition_list: window_definition  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 29206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 29212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* window_definition: ColId AS window_specification  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 29222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* over_clause: OVER window_specification  */
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 29228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* over_clause: OVER ColId  */
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 29245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* over_clause: %empty  */
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 29251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 29269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* opt_existing_window_name: ColId  */
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* opt_existing_window_name: %empty  */
#line 3081 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 29281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* opt_partition_clause: %empty  */
#line 3085 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* opt_frame_clause: RANGE frame_extent  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 29303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_frame_clause: ROWS frame_extent  */
#line 3103 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 29313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* opt_frame_clause: %empty  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* frame_extent: frame_bound  */
#line 3119 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 29346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 29387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* frame_bound: CURRENT_P ROW  */
#line 3197 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* frame_bound: a_expr PRECEDING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* frame_bound: a_expr FOLLOWING  */
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* qualified_row: ROW '(' ')'  */
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* row: qualified_row  */
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 29465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* row: '(' expr_list ',' a_expr ')'  */
#line 3238 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 29471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 29484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* dict_arguments: dict_arg  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* dict_arguments_opt_comma: dict_arguments  */
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* map_arg: a_expr ':' a_expr  */
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* map_arguments: map_arg  */
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* map_arguments: map_arguments ',' map_arg  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* map_arguments_opt_comma: map_arguments  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* map_arguments_opt_comma: map_arguments ','  */
#line 3276 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* opt_map_arguments_opt_comma: %empty  */
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 29552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* sub_type: ANY  */
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* sub_type: SOME  */
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* sub_type: ALL  */
#line 3287 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 29570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* all_Op: Op  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* all_Op: MathOp  */
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 29582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* MathOp: '+'  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 29588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* MathOp: '-'  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 29594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* MathOp: '*'  */
#line 3296 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 29600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* MathOp: '/'  */
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* MathOp: INTEGER_DIVISION  */
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 29612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* MathOp: '%'  */
#line 3299 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 29618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* MathOp: '^'  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 29624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* MathOp: POWER_OF  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 29630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* MathOp: '<'  */
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 29636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* MathOp: '>'  */
#line 3303 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* MathOp: '='  */
#line 3304 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* MathOp: LESS_EQUALS  */
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* MathOp: GREATER_EQUALS  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* MathOp: NOT_EQUALS  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* qual_Op: Op  */
#line 3311 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* qual_all_Op: all_Op  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3320 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* subquery_Op: all_Op  */
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* subquery_Op: LIKE  */
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* subquery_Op: NOT_LA LIKE  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* subquery_Op: GLOB  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* subquery_Op: NOT_LA GLOB  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* subquery_Op: ILIKE  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* subquery_Op: NOT_LA ILIKE  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* any_operator: all_Op  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* any_operator: ColId '.' any_operator  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* c_expr_list: c_expr  */
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* c_expr_list_opt_comma: c_expr_list  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* expr_list: a_expr  */
#line 3382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* expr_list: expr_list ',' a_expr  */
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* expr_list_opt_comma: expr_list  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* expr_list_opt_comma: expr_list ','  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* opt_expr_list_opt_comma: %empty  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 29830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* func_arg_list: func_arg_expr  */
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* func_arg_expr: a_expr  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* type_list: Typename  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* type_list: type_list ',' Typename  */
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* extract_list: extract_arg FROM a_expr  */
#line 3457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 29900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* extract_list: %empty  */
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* extract_arg: IDENT  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* extract_arg: year_keyword  */
#line 3468 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 29918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* extract_arg: month_keyword  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 29924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* extract_arg: day_keyword  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 29930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* extract_arg: hour_keyword  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 29936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* extract_arg: minute_keyword  */
#line 3472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 29942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* extract_arg: second_keyword  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 29948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* extract_arg: millisecond_keyword  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 29954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* extract_arg: microsecond_keyword  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 29960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* extract_arg: Sconst  */
#line 3476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* overlay_placing: PLACING a_expr  */
#line 3498 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* position_list: b_expr IN_P b_expr  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 29994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* position_list: %empty  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* substr_list: a_expr substr_from substr_for  */
#line 3522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* substr_list: a_expr substr_for substr_from  */
#line 3526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 30017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* substr_list: a_expr substr_from  */
#line 3531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* substr_list: a_expr substr_for  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 30044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* substr_list: expr_list  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* substr_list: %empty  */
#line 3554 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 30058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* substr_from: FROM a_expr  */
#line 3558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* substr_for: FOR a_expr  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 30076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* trim_list: FROM expr_list_opt_comma  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* trim_list: expr_list_opt_comma  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* in_expr: select_with_parens  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 30099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3576 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 30105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 30119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* when_clause_list: when_clause  */
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* when_clause_list: when_clause_list when_clause  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 30143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* case_default: ELSE a_expr  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* case_default: %empty  */
#line 3617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* case_arg: a_expr  */
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* case_arg: %empty  */
#line 3621 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* columnref: ColId  */
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 30175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* columnref: ColId indirection  */
#line 3629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 30183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* indirection_el: '.' attr_name  */
#line 3636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 30191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* indirection_el: '[' a_expr ']'  */
#line 3640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* opt_slice_bound: a_expr  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* opt_slice_bound: %empty  */
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* indirection: indirection_el  */
#line 3663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* indirection: indirection indirection_el  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* opt_indirection: %empty  */
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* opt_indirection: opt_indirection indirection_el  */
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* opt_func_arguments: %empty  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 30257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* opt_func_arguments: '(' ')'  */
#line 3674 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 30263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3675 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 30282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* extended_indirection_el: '[' a_expr ']'  */
#line 3689 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* opt_extended_indirection: %empty  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 30312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* opt_target_list_opt_comma: %empty  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* target_list: target_el  */
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 30336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* target_list: target_list ',' target_el  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 30342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* target_list_opt_comma: target_list  */
#line 3739 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* target_list_opt_comma: target_list ','  */
#line 3740 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* target_el: a_expr AS ColLabelOrString  */
#line 3744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* target_el: a_expr IDENT  */
#line 3760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 30378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* target_el: a_expr  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 30390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* except_list: EXCLUDE ColId  */
#line 3778 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* opt_except_list: except_list  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* opt_except_list: %empty  */
#line 3782 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* replace_list_el: a_expr AS ColId  */
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 30420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* replace_list: replace_list_el  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* replace_list: replace_list ',' replace_list_el  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* replace_list_opt_comma: replace_list  */
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* replace_list_opt_comma: replace_list ','  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3798 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* opt_replace_list: REPLACE replace_list_el  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* opt_replace_list: %empty  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* qualified_name_list: qualified_name  */
#line 3810 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3811 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* qualified_name: ColIdOrString  */
#line 3823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 30482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* qualified_name: ColId indirection  */
#line 3827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 30512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* name_list: name  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* name_list: name_list ',' name  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* name_list_opt_comma: name_list  */
#line 3862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* name_list_opt_comma: name_list ','  */
#line 3863 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3867 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3868 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* name: ColIdOrString  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* attr_name: ColLabel  */
#line 3873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* func_name: function_name_token  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* func_name: ColId indirection  */
#line 3887 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* AexprConst: Iconst  */
#line 3898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* AexprConst: FCONST  */
#line 3902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* AexprConst: Sconst opt_indirection  */
#line 3906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* AexprConst: BCONST  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* AexprConst: XCONST  */
#line 3922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* AexprConst: func_name Sconst  */
#line 3931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* AexprConst: ConstTypename Sconst  */
#line 3976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* AexprConst: TRUE_P  */
#line 3992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* AexprConst: FALSE_P  */
#line 3996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* AexprConst: NULL_P  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* Iconst: ICONST  */
#line 4005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* Sconst: SCONST  */
#line 4006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* ColId: IDENT  */
#line 4022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* ColId: unreserved_keyword  */
#line 4023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* ColId: col_name_keyword  */
#line 4024 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* ColIdOrString: ColId  */
#line 4027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* ColIdOrString: SCONST  */
#line 4028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* type_function_name: IDENT  */
#line 4034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* type_function_name: unreserved_keyword  */
#line 4035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* type_function_name: type_func_name_keyword  */
#line 4036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* function_name_token: IDENT  */
#line 4039 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* function_name_token: unreserved_keyword  */
#line 4040 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* function_name_token: func_name_keyword  */
#line 4041 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* type_name_token: IDENT  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* type_name_token: unreserved_keyword  */
#line 4045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* type_name_token: type_name_keyword  */
#line 4046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* any_name: ColId  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* any_name: ColId attrs  */
#line 4050 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* attrs: '.' attr_name  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* attrs: attrs '.' attr_name  */
#line 4056 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* opt_name_list: %empty  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* ColLabel: IDENT  */
#line 4072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* ColLabel: other_keyword  */
#line 4073 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* ColLabel: unreserved_keyword  */
#line 4074 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* ColLabel: reserved_keyword  */
#line 4075 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* ColLabelOrString: ColLabel  */
#line 4078 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* ColLabelOrString: SCONST  */
#line 4079 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* named_param: IDENT  */
#line 4082 "third_party/libpg_query/grammar/statements/select.y"
                   { (yyval.str) = (yyvsp[0].str); }
#line 30911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 30935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 31019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 31025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 31097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 31103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 31121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 31133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 31139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 31257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 31350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 31356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 31374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 31426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 31432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 31438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 31444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 31450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 31464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 31476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 31486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 31506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 31522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 31548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 31560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 31612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 31653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 31705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 31716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 31727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 31739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 31791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 31817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 31823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 31829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 31835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 31841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 31855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 31873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 31879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 31905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 31919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 31927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 31938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 31949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 31955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 31961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 31973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 32041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 32047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 32059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 32065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 32077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 32088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1575: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 32094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 32105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 32116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 32218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 32224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 32230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 32240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1597: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1598: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1599: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1600: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1601: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1602: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 32348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1603: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 32354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1604: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1605: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1606: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1607: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1608: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 32417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1609: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1610: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 32437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32441 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
