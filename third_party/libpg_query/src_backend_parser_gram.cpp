/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 243 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_POWER_OF = 15,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 16,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 17,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 18,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 19,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 20,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 21,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 22,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 23,                    /* ACCESS  */
  YYSYMBOL_ACTION = 24,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 25,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANY = 37,                       /* ANY  */
  YYSYMBOL_ARE = 38,                       /* ARE  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 42,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 43,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 44,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 45,                        /* AT  */
  YYSYMBOL_ATTACH = 46,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 47,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 48,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 49,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 50,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 51,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 52,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 53,                    /* BIGINT  */
  YYSYMBOL_BINARY = 54,                    /* BINARY  */
  YYSYMBOL_BIT = 55,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 56,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 57,                      /* BOTH  */
  YYSYMBOL_BY = 58,                        /* BY  */
  YYSYMBOL_CACHE = 59,                     /* CACHE  */
  YYSYMBOL_CALL_P = 60,                    /* CALL_P  */
  YYSYMBOL_CALLED = 61,                    /* CALLED  */
  YYSYMBOL_CASCADE = 62,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 63,                  /* CASCADED  */
  YYSYMBOL_CASE = 64,                      /* CASE  */
  YYSYMBOL_CAST = 65,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 66,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 67,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 68,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 69,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 70,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 71,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 72,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 73,                     /* CLASS  */
  YYSYMBOL_CLOSE = 74,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 75,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 76,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 77,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 78,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 79,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 80,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 81,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 82,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 83,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 84,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 85,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 86,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 87,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 88,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 89,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 90,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 91,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 92,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 93,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 94,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 95,                      /* COPY  */
  YYSYMBOL_COST = 96,                      /* COST  */
  YYSYMBOL_CREATE_P = 97,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 98,                     /* CROSS  */
  YYSYMBOL_CSV = 99,                       /* CSV  */
  YYSYMBOL_CUBE = 100,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 101,                /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 102,          /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 103,             /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 104,             /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 105,           /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 106,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 107,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 108,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 109,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 110,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 111,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 112,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 113,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 114,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 115,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 116,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 117,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 118,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 119,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 120,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 121,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 122,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 123,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 124,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 125,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 126,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 127,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 128,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 129,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 130,              /* DESTINATION  */
  YYSYMBOL_DETACH = 131,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 132,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 133,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 134,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 135,                 /* DISTINCT  */
  YYSYMBOL_DO = 136,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 137,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 138,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 139,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 140,                     /* DROP  */
  YYSYMBOL_EACH = 141,                     /* EACH  */
  YYSYMBOL_EDGE = 142,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 143,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 144,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 145,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 146,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 147,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 148,                    /* END_P  */
  YYSYMBOL_ENUM_P = 149,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 150,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 151,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 152,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 153,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 154,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 155,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 156,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 157,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 158,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 159,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 160,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 161,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 162,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 163,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 164,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 165,                   /* FAMILY  */
  YYSYMBOL_FETCH = 166,                    /* FETCH  */
  YYSYMBOL_FILTER = 167,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 168,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 169,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 170,                /* FOLLOWING  */
  YYSYMBOL_FOR = 171,                      /* FOR  */
  YYSYMBOL_FORCE = 172,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 173,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 174,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 175,                   /* FREEZE  */
  YYSYMBOL_FROM = 176,                     /* FROM  */
  YYSYMBOL_FULL = 177,                     /* FULL  */
  YYSYMBOL_FUNCTION = 178,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 179,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 180,                /* GENERATED  */
  YYSYMBOL_GLOB = 181,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 182,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 183,                    /* GRANT  */
  YYSYMBOL_GRANTED = 184,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 185,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 186,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 187,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 188,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 189,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 190,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 191,                  /* HANDLER  */
  YYSYMBOL_HAVING = 192,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 193,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 194,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 195,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 196,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 197,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 198,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 199,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 200,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 201,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 202,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 203,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 204,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 205,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 206,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 207,                /* INCREMENT  */
  YYSYMBOL_INDEX = 208,                    /* INDEX  */
  YYSYMBOL_INDEXES = 209,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 210,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 211,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 212,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 213,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 214,                  /* INNER_P  */
  YYSYMBOL_INOUT = 215,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 216,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 217,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 218,                   /* INSERT  */
  YYSYMBOL_INSTALL = 219,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 220,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 221,                    /* INT_P  */
  YYSYMBOL_INTEGER = 222,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 223,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 224,                 /* INTERVAL  */
  YYSYMBOL_INTO = 225,                     /* INTO  */
  YYSYMBOL_INVOKER = 226,                  /* INVOKER  */
  YYSYMBOL_IS = 227,                       /* IS  */
  YYSYMBOL_ISNULL = 228,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 229,                /* ISOLATION  */
  YYSYMBOL_JOIN = 230,                     /* JOIN  */
  YYSYMBOL_JSON = 231,                     /* JSON  */
  YYSYMBOL_KEEP = 232,                     /* KEEP  */
  YYSYMBOL_KEY = 233,                      /* KEY  */
  YYSYMBOL_LABEL = 234,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 235,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 236,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 237,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 238,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 239,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 240,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 241,                     /* LEFT  */
  YYSYMBOL_LEVEL = 242,                    /* LEVEL  */
  YYSYMBOL_LIKE = 243,                     /* LIKE  */
  YYSYMBOL_LIMIT = 244,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 245,                   /* LISTEN  */
  YYSYMBOL_LOAD = 246,                     /* LOAD  */
  YYSYMBOL_LOCAL = 247,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 248,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 249,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 250,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 251,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 252,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 253,                   /* LOGGED  */
  YYSYMBOL_MACRO = 254,                    /* MACRO  */
  YYSYMBOL_MAP = 255,                      /* MAP  */
  YYSYMBOL_MAPPING = 256,                  /* MAPPING  */
  YYSYMBOL_MATCH = 257,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 258,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 259,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 260,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 261,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 262,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 263,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 264,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 265,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 266,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 267,                 /* MINVALUE  */
  YYSYMBOL_MODE = 268,                     /* MODE  */
  YYSYMBOL_MONTH_P = 269,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 270,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 271,                     /* MOVE  */
  YYSYMBOL_NAME_P = 272,                   /* NAME_P  */
  YYSYMBOL_NAMES = 273,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 274,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 275,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 276,                    /* NCHAR  */
  YYSYMBOL_NEW = 277,                      /* NEW  */
  YYSYMBOL_NEXT = 278,                     /* NEXT  */
  YYSYMBOL_NO = 279,                       /* NO  */
  YYSYMBOL_NODE = 280,                     /* NODE  */
  YYSYMBOL_NONE = 281,                     /* NONE  */
  YYSYMBOL_NOT = 282,                      /* NOT  */
  YYSYMBOL_NOTHING = 283,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 284,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 285,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 286,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 287,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 288,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 289,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 290,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 291,                 /* OBJECT_P  */
  YYSYMBOL_OF = 292,                       /* OF  */
  YYSYMBOL_OFF = 293,                      /* OFF  */
  YYSYMBOL_OFFSET = 294,                   /* OFFSET  */
  YYSYMBOL_OIDS = 295,                     /* OIDS  */
  YYSYMBOL_OLD = 296,                      /* OLD  */
  YYSYMBOL_ON = 297,                       /* ON  */
  YYSYMBOL_ONLY = 298,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 299,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 300,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 301,                  /* OPTIONS  */
  YYSYMBOL_OR = 302,                       /* OR  */
  YYSYMBOL_ORDER = 303,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 304,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 305,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 306,                  /* OUTER_P  */
  YYSYMBOL_OVER = 307,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 308,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 309,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 310,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 311,                    /* OWNED  */
  YYSYMBOL_OWNER = 312,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 313,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 314,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 315,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 316,                /* PARTITION  */
  YYSYMBOL_PASSING = 317,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 318,                 /* PASSWORD  */
  YYSYMBOL_PATH = 319,                     /* PATH  */
  YYSYMBOL_PATHS = 320,                    /* PATHS  */
  YYSYMBOL_PERCENT = 321,                  /* PERCENT  */
  YYSYMBOL_PLACING = 322,                  /* PLACING  */
  YYSYMBOL_PLANS = 323,                    /* PLANS  */
  YYSYMBOL_POLICY = 324,                   /* POLICY  */
  YYSYMBOL_POSITION = 325,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 326,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 327,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 328,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 329,                /* PRECISION  */
  YYSYMBOL_PREPARE = 330,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 331,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 332,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 333,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 334,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 335,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 336,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 337,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 338,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 339,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 340,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 341,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 342,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 343,                    /* QUOTE  */
  YYSYMBOL_RANGE = 344,                    /* RANGE  */
  YYSYMBOL_READ_P = 345,                   /* READ_P  */
  YYSYMBOL_REAL = 346,                     /* REAL  */
  YYSYMBOL_REASSIGN = 347,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 348,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 349,                /* RECURSIVE  */
  YYSYMBOL_REF = 350,                      /* REF  */
  YYSYMBOL_REFERENCES = 351,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 352,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 353,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 354,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 355,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 356,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 357,                  /* RELEASE  */
  YYSYMBOL_RENAME = 358,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 359,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 360,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 361,                  /* REPLICA  */
  YYSYMBOL_RESET = 362,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 363,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 364,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 365,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 366,                /* RETURNING  */
  YYSYMBOL_RETURNS = 367,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 368,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 369,                    /* RIGHT  */
  YYSYMBOL_ROLE = 370,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 371,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 372,                   /* ROLLUP  */
  YYSYMBOL_ROW = 373,                      /* ROW  */
  YYSYMBOL_ROWS = 374,                     /* ROWS  */
  YYSYMBOL_RULE = 375,                     /* RULE  */
  YYSYMBOL_SAMPLE = 376,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 377,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 378,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 379,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 380,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 381,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 382,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 383,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 384,                 /* SECURITY  */
  YYSYMBOL_SELECT = 385,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 386,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 387,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 388,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 389,                   /* SERVER  */
  YYSYMBOL_SESSION = 390,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 391,             /* SESSION_USER  */
  YYSYMBOL_SET = 392,                      /* SET  */
  YYSYMBOL_SETOF = 393,                    /* SETOF  */
  YYSYMBOL_SETS = 394,                     /* SETS  */
  YYSYMBOL_SHARE = 395,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 396,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 397,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 398,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 399,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 400,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 401,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 402,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 403,                     /* SOME  */
  YYSYMBOL_SOURCE = 404,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 405,                    /* SQL_P  */
  YYSYMBOL_STABLE = 406,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 407,             /* STANDALONE_P  */
  YYSYMBOL_START = 408,                    /* START  */
  YYSYMBOL_STATEMENT = 409,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 410,               /* STATISTICS  */
  YYSYMBOL_STDIN = 411,                    /* STDIN  */
  YYSYMBOL_STDOUT = 412,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 413,                  /* STORAGE  */
  YYSYMBOL_STORED = 414,                   /* STORED  */
  YYSYMBOL_STRICT_P = 415,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 416,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 417,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 418,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 419,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 420,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 421,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 422,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 423,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 424,                    /* TABLE  */
  YYSYMBOL_TABLES = 425,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 426,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 427,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 428,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 429,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 430,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 431,                   /* TEXT_P  */
  YYSYMBOL_THEN = 432,                     /* THEN  */
  YYSYMBOL_TIME = 433,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 434,                /* TIMESTAMP  */
  YYSYMBOL_TO = 435,                       /* TO  */
  YYSYMBOL_TRAIL = 436,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 437,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 438,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 439,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 440,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 441,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 442,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 443,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 444,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 445,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 446,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 447,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 448,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 449,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 450,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 451,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 452,                    /* UNION  */
  YYSYMBOL_UNIQUE = 453,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 454,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 455,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 456,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 457,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 458,                   /* UPDATE  */
  YYSYMBOL_USE_P = 459,                    /* USE_P  */
  YYSYMBOL_USER = 460,                     /* USER  */
  YYSYMBOL_USING = 461,                    /* USING  */
  YYSYMBOL_VACUUM = 462,                   /* VACUUM  */
  YYSYMBOL_VALID = 463,                    /* VALID  */
  YYSYMBOL_VALIDATE = 464,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 465,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 466,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 467,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 468,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 469,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 470,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 471,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 472,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 473,                   /* VERTEX  */
  YYSYMBOL_VIEW = 474,                     /* VIEW  */
  YYSYMBOL_VIEWS = 475,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 476,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 477,                 /* VOLATILE  */
  YYSYMBOL_WALK = 478,                     /* WALK  */
  YYSYMBOL_WHEN = 479,                     /* WHEN  */
  YYSYMBOL_WHERE = 480,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 481,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 482,                   /* WINDOW  */
  YYSYMBOL_WITH = 483,                     /* WITH  */
  YYSYMBOL_WITHIN = 484,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 485,                  /* WITHOUT  */
  YYSYMBOL_WORK = 486,                     /* WORK  */
  YYSYMBOL_WRAPPER = 487,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 488,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 489,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 490,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 491,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 492,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 493,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 494,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 495,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 496,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 497,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 498,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 499,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 500,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 501,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 502,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 503,                    /* YES_P  */
  YYSYMBOL_ZONE = 504,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 505,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 506,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 507,                  /* WITH_LA  */
  YYSYMBOL_508_ = 508,                     /* '<'  */
  YYSYMBOL_509_ = 509,                     /* '>'  */
  YYSYMBOL_510_ = 510,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 511,                /* POSTFIXOP  */
  YYSYMBOL_512_ = 512,                     /* '+'  */
  YYSYMBOL_513_ = 513,                     /* '-'  */
  YYSYMBOL_514_ = 514,                     /* '*'  */
  YYSYMBOL_515_ = 515,                     /* '/'  */
  YYSYMBOL_516_ = 516,                     /* '%'  */
  YYSYMBOL_517_ = 517,                     /* '^'  */
  YYSYMBOL_UMINUS = 518,                   /* UMINUS  */
  YYSYMBOL_519_ = 519,                     /* '['  */
  YYSYMBOL_520_ = 520,                     /* ']'  */
  YYSYMBOL_521_ = 521,                     /* '('  */
  YYSYMBOL_522_ = 522,                     /* ')'  */
  YYSYMBOL_523_ = 523,                     /* '.'  */
  YYSYMBOL_524_ = 524,                     /* ';'  */
  YYSYMBOL_525_ = 525,                     /* ','  */
  YYSYMBOL_526_ = 526,                     /* '|'  */
  YYSYMBOL_527_ = 527,                     /* '?'  */
  YYSYMBOL_528_ = 528,                     /* '{'  */
  YYSYMBOL_529_ = 529,                     /* '}'  */
  YYSYMBOL_530_ = 530,                     /* '&'  */
  YYSYMBOL_531_ = 531,                     /* '!'  */
  YYSYMBOL_532_ = 532,                     /* ':'  */
  YYSYMBOL_533_ = 533,                     /* '#'  */
  YYSYMBOL_534_ = 534,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 535,                 /* $accept  */
  YYSYMBOL_stmtblock = 536,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 537,                /* stmtmulti  */
  YYSYMBOL_stmt = 538,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 539,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 540,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 541,               /* SeqOptList  */
  YYSYMBOL_opt_with = 542,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 543,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 544,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 545,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 546,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 547,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 548, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 549,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 550, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 551, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 552,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 553,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 554, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 555,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 556,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 557,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 558,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 559,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 560,               /* DetachStmt  */
  YYSYMBOL_opt_database = 561,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 562,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 563,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 564,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 565,               /* opt_col_id  */
  YYSYMBOL_CopyStmt = 566,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 567,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 568,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 569, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 570,                /* opt_using  */
  YYSYMBOL_opt_as = 571,                   /* opt_as  */
  YYSYMBOL_opt_program = 572,              /* opt_program  */
  YYSYMBOL_copy_options = 573,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 574,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 575,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 576,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 577,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 578,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 579,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 580, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 581,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 582,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 583,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 584,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 585,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 586, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 587,       /* generic_option_arg  */
  YYSYMBOL_key_action = 588,               /* key_action  */
  YYSYMBOL_ColConstraint = 589,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 590,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 591,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 592,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 593,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 594,      /* generic_option_elem  */
  YYSYMBOL_key_update = 595,               /* key_update  */
  YYSYMBOL_key_actions = 596,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 597,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 598,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 599,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 600,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 601,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 602,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 603,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 604,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 605,                  /* OptWith  */
  YYSYMBOL_definition = 606,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 607,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 608,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 609,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 610,                /* columnDef  */
  YYSYMBOL_def_list = 611,                 /* def_list  */
  YYSYMBOL_index_name = 612,               /* index_name  */
  YYSYMBOL_TableElement = 613,             /* TableElement  */
  YYSYMBOL_def_elem = 614,                 /* def_elem  */
  YYSYMBOL_opt_definition = 615,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 616,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 617,               /* columnElem  */
  YYSYMBOL_opt_column_list = 618,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 619,              /* ColQualList  */
  YYSYMBOL_key_delete = 620,               /* key_delete  */
  YYSYMBOL_reloption_elem = 621,           /* reloption_elem  */
  YYSYMBOL_columnList = 622,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 623,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 624,                /* func_type  */
  YYSYMBOL_ConstraintElem = 625,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 626,         /* TableElementList  */
  YYSYMBOL_key_match = 627,                /* key_match  */
  YYSYMBOL_TableLikeClause = 628,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 629,                  /* OptTemp  */
  YYSYMBOL_generated_when = 630,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 631,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 632,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 633,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 634,       /* unreserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 635,   /* pgq_unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 636,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 637,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 638,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 639,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 640,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 641,         /* reserved_keyword  */
  YYSYMBOL_CreateDatabaseStmt = 642,       /* CreateDatabaseStmt  */
  YYSYMBOL_opt_extension_name = 643,       /* opt_extension_name  */
  YYSYMBOL_CreateFunctionStmt = 644,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 645,              /* macro_alias  */
  YYSYMBOL_param_list = 646,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 647,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 648,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 649,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 650,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 651,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 652,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 653,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 654,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 655,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 656,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 657,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 658,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 659,             /* using_clause  */
  YYSYMBOL_DropStmt = 660,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 661,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 662,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 663,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 664,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 665, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 666,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 667,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 668,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 669,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 670,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 671,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 672,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 673,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 674, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 675,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 676,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 677,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 678,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 679,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 680,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 681,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 682,                /* IndexStmt  */
  YYSYMBOL_access_method = 683,            /* access_method  */
  YYSYMBOL_access_method_clause = 684,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 685,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 686,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 687,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 688,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 689,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 690,              /* insert_rest  */
  YYSYMBOL_insert_target = 691,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 692,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 693,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 694,       /* insert_column_item  */
  YYSYMBOL_set_clause = 695,               /* set_clause  */
  YYSYMBOL_opt_or_action = 696,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 697,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 698,               /* index_elem  */
  YYSYMBOL_returning_clause = 699,         /* returning_clause  */
  YYSYMBOL_override_kind = 700,            /* override_kind  */
  YYSYMBOL_set_target_list = 701,          /* set_target_list  */
  YYSYMBOL_opt_collate = 702,              /* opt_collate  */
  YYSYMBOL_opt_class = 703,                /* opt_class  */
  YYSYMBOL_insert_column_list = 704,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 705,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 706, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 707,             /* index_params  */
  YYSYMBOL_set_target = 708,               /* set_target  */
  YYSYMBOL_LoadStmt = 709,                 /* LoadStmt  */
  YYSYMBOL_file_name = 710,                /* file_name  */
  YYSYMBOL_PGQ_IDENT = 711,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 712,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 713,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 714,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 715,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 716, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 717,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 718,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 719,             /* KeyReference  */
  YYSYMBOL_LabelList = 720,                /* LabelList  */
  YYSYMBOL_Discriminator = 721,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 722,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 723,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 724,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 725,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 726,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 727,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 728,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 729,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 730,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 731,         /* PropertiesClause  */
  YYSYMBOL_GraphTableStmt = 732,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 733,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 734,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 735,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 736,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 737,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 738,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 739,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 740,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 741,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 742,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 743,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 744,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 745, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 746,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 747,                  /* CostNum  */
  YYSYMBOL_CostDefault = 748,              /* CostDefault  */
  YYSYMBOL_CostOptional = 749,             /* CostOptional  */
  YYSYMBOL_SubPath = 750,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 751,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 752,              /* PathElement  */
  YYSYMBOL_PathSequence = 753,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 754,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 755,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 756,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 757,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 758,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 759,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 760,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 761,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 762,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 763,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 764,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 765,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 766,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 767,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 768,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 769,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 770,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 771,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 772,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 773,               /* RenameStmt  */
  YYSYMBOL_opt_column = 774,               /* opt_column  */
  YYSYMBOL_SelectStmt = 775,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 776,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 777,         /* select_no_parens  */
  YYSYMBOL_select_clause = 778,            /* select_clause  */
  YYSYMBOL_opt_select = 779,               /* opt_select  */
  YYSYMBOL_simple_select = 780,            /* simple_select  */
  YYSYMBOL_with_clause = 781,              /* with_clause  */
  YYSYMBOL_cte_list = 782,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 783,        /* common_table_expr  */
  YYSYMBOL_into_clause = 784,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 785,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 786,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 787,          /* all_or_distinct  */
  YYSYMBOL_by_name = 788,                  /* by_name  */
  YYSYMBOL_distinct_clause = 789,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 790,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 791,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 792,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 793,              /* sort_clause  */
  YYSYMBOL_sortby_list = 794,              /* sortby_list  */
  YYSYMBOL_sortby = 795,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 796,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 797,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 798,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 799,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 800,             /* limit_clause  */
  YYSYMBOL_offset_clause = 801,            /* offset_clause  */
  YYSYMBOL_sample_count = 802,             /* sample_count  */
  YYSYMBOL_sample_clause = 803,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 804,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 805,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 806,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 807,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 808,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 809,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 810,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 811, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 812,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 813,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 814,            /* first_or_next  */
  YYSYMBOL_group_clause = 815,             /* group_clause  */
  YYSYMBOL_group_by_list = 816,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 817,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 818,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 819,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 820,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 821,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 822,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 823,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 824,            /* having_clause  */
  YYSYMBOL_qualify_clause = 825,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 826,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 827,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 828,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 829,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 830,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 831,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 832,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 833,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 834,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 835,              /* from_clause  */
  YYSYMBOL_from_list = 836,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 837,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 838,                /* table_ref  */
  YYSYMBOL_joined_table = 839,             /* joined_table  */
  YYSYMBOL_alias_clause = 840,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 841,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 842,        /* func_alias_clause  */
  YYSYMBOL_join_type = 843,                /* join_type  */
  YYSYMBOL_join_outer = 844,               /* join_outer  */
  YYSYMBOL_join_qual = 845,                /* join_qual  */
  YYSYMBOL_relation_expr = 846,            /* relation_expr  */
  YYSYMBOL_func_table = 847,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 848,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 849,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 850,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 851,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 852,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 853,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 854,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 855,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 856,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 857,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 858,             /* opt_Typename  */
  YYSYMBOL_Typename = 859,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 860,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 861,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 862,            /* ConstTypename  */
  YYSYMBOL_GenericType = 863,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 864,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 865,                  /* Numeric  */
  YYSYMBOL_opt_float = 866,                /* opt_float  */
  YYSYMBOL_Bit = 867,                      /* Bit  */
  YYSYMBOL_ConstBit = 868,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 869,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 870,         /* BitWithoutLength  */
  YYSYMBOL_Character = 871,                /* Character  */
  YYSYMBOL_ConstCharacter = 872,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 873,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 874,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 875,                /* character  */
  YYSYMBOL_opt_varying = 876,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 877,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 878,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 879,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 880,             /* year_keyword  */
  YYSYMBOL_month_keyword = 881,            /* month_keyword  */
  YYSYMBOL_day_keyword = 882,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 883,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 884,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 885,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 886,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 887,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 888,             /* opt_interval  */
  YYSYMBOL_a_expr = 889,                   /* a_expr  */
  YYSYMBOL_b_expr = 890,                   /* b_expr  */
  YYSYMBOL_c_expr = 891,                   /* c_expr  */
  YYSYMBOL_indirection_expr = 892,         /* indirection_expr  */
  YYSYMBOL_func_application = 893,         /* func_application  */
  YYSYMBOL_func_expr = 894,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 895,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 896, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 897,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 898,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 899,            /* filter_clause  */
  YYSYMBOL_export_clause = 900,            /* export_clause  */
  YYSYMBOL_window_clause = 901,            /* window_clause  */
  YYSYMBOL_window_definition_list = 902,   /* window_definition_list  */
  YYSYMBOL_window_definition = 903,        /* window_definition  */
  YYSYMBOL_over_clause = 904,              /* over_clause  */
  YYSYMBOL_window_specification = 905,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 906, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 907,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 908,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 909,             /* frame_extent  */
  YYSYMBOL_frame_bound = 910,              /* frame_bound  */
  YYSYMBOL_qualified_row = 911,            /* qualified_row  */
  YYSYMBOL_row = 912,                      /* row  */
  YYSYMBOL_dict_arg = 913,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 914,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 915, /* dict_arguments_opt_comma  */
  YYSYMBOL_sub_type = 916,                 /* sub_type  */
  YYSYMBOL_all_Op = 917,                   /* all_Op  */
  YYSYMBOL_MathOp = 918,                   /* MathOp  */
  YYSYMBOL_qual_Op = 919,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 920,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 921,              /* subquery_Op  */
  YYSYMBOL_any_operator = 922,             /* any_operator  */
  YYSYMBOL_expr_list = 923,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 924,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 925,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 926,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 927,            /* func_arg_expr  */
  YYSYMBOL_type_list = 928,                /* type_list  */
  YYSYMBOL_extract_list = 929,             /* extract_list  */
  YYSYMBOL_extract_arg = 930,              /* extract_arg  */
  YYSYMBOL_overlay_list = 931,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 932,          /* overlay_placing  */
  YYSYMBOL_position_list = 933,            /* position_list  */
  YYSYMBOL_substr_list = 934,              /* substr_list  */
  YYSYMBOL_substr_from = 935,              /* substr_from  */
  YYSYMBOL_substr_for = 936,               /* substr_for  */
  YYSYMBOL_trim_list = 937,                /* trim_list  */
  YYSYMBOL_in_expr = 938,                  /* in_expr  */
  YYSYMBOL_case_expr = 939,                /* case_expr  */
  YYSYMBOL_when_clause_list = 940,         /* when_clause_list  */
  YYSYMBOL_when_clause = 941,              /* when_clause  */
  YYSYMBOL_case_default = 942,             /* case_default  */
  YYSYMBOL_case_arg = 943,                 /* case_arg  */
  YYSYMBOL_columnref = 944,                /* columnref  */
  YYSYMBOL_indirection_el = 945,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 946,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 947,              /* indirection  */
  YYSYMBOL_opt_indirection = 948,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 949,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 950, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 951,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 952,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 953,                /* target_el  */
  YYSYMBOL_except_list = 954,              /* except_list  */
  YYSYMBOL_opt_except_list = 955,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 956,          /* replace_list_el  */
  YYSYMBOL_replace_list = 957,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 958,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 959,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 960,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 961,           /* qualified_name  */
  YYSYMBOL_name_list = 962,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 963,      /* name_list_opt_comma  */
  YYSYMBOL_name = 964,                     /* name  */
  YYSYMBOL_attr_name = 965,                /* attr_name  */
  YYSYMBOL_func_name = 966,                /* func_name  */
  YYSYMBOL_AexprConst = 967,               /* AexprConst  */
  YYSYMBOL_Iconst = 968,                   /* Iconst  */
  YYSYMBOL_Sconst = 969,                   /* Sconst  */
  YYSYMBOL_ColId = 970,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 971,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 972,       /* type_function_name  */
  YYSYMBOL_function_name_token = 973,      /* function_name_token  */
  YYSYMBOL_type_name_token = 974,          /* type_name_token  */
  YYSYMBOL_any_name = 975,                 /* any_name  */
  YYSYMBOL_attrs = 976,                    /* attrs  */
  YYSYMBOL_opt_name_list = 977,            /* opt_name_list  */
  YYSYMBOL_param_name = 978,               /* param_name  */
  YYSYMBOL_ColLabel = 979,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 980,         /* ColLabelOrString  */
  YYSYMBOL_named_param = 981,              /* named_param  */
  YYSYMBOL_TransactionStmt = 982,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 983,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 984,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 985,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 986,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 987,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 988,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 989,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 990,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 991,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 992,            /* generic_reset  */
  YYSYMBOL_reset_rest = 993,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 994,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 995,                 /* set_rest  */
  YYSYMBOL_generic_set = 996,              /* generic_set  */
  YYSYMBOL_var_value = 997,                /* var_value  */
  YYSYMBOL_zone_value = 998,               /* zone_value  */
  YYSYMBOL_var_list = 999,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 1000,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1001,        /* show_or_describe  */
  YYSYMBOL_var_name = 1002,                /* var_name  */
  YYSYMBOL_table_id = 1003,                /* table_id  */
  YYSYMBOL_ViewStmt = 1004,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1005         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  724
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   67765

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  535
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  471
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2187
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3656

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   764


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   531,     2,   533,   534,   516,   530,     2,
     521,   522,   514,   512,   525,   513,   523,   515,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   532,   524,
     508,   510,   509,   527,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   519,     2,   520,   517,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   528,   526,   529,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   511,   518
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   539,   539,   555,   567,   576,   577,   578,   579,   580,
     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   618,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    72,    81,    90,    97,    98,   103,   115,
     120,   145,   150,   155,   161,   171,   181,   187,   198,   209,
     224,   225,   231,   232,   237,   238,   244,   245,   249,   250,
     255,   257,   263,   264,   268,   269,   272,   273,   278,     7,
      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,
      15,    22,    28,    34,    41,    48,    59,     9,    19,    32,
      33,     7,    14,    31,    51,    52,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     2,     9,    15,    21,
      28,    35,    45,    46,    47,     2,    40,    41,    42,    50,
      64,    66,    70,    72,    76,    89,    92,    96,   100,   104,
     108,   109,   113,   122,   132,   146,   149,   153,   176,   177,
     182,   184,   188,   190,   194,   196,   201,   204,   208,   214,
     218,   220,   223,   232,   258,   262,   264,   268,   270,   274,
     274,   274,   278,   280,   282,   286,   288,   292,   294,   296,
     298,   300,   304,   306,   310,   322,   334,   346,   358,   371,
     385,   387,   392,   417,   419,   423,   425,   430,   439,   448,
     457,   467,   477,   479,   483,   485,   489,   500,   509,   521,
     530,   532,   536,   559,   561,   565,   567,   578,   580,   591,
     593,   604,   606,   615,   626,   634,   643,   647,   649,   653,
     655,   661,   663,   665,   669,   671,   675,   681,   689,   691,
     695,   706,   722,   749,   782,   783,   785,   793,   808,   810,
     812,   814,   816,   818,   820,   822,   824,   826,   828,   830,
     832,   834,   836,   839,   841,   843,   845,   847,   849,   854,
     859,   866,   871,   878,   883,   890,   895,   903,   911,   919,
     927,   945,   953,   961,   969,   977,   985,   993,   997,  1013,
    1021,  1029,  1037,  1045,  1053,  1061,  1065,  1069,  1073,  1077,
    1085,  1093,  1101,  1109,  1129,     7,    21,    36,    56,    57,
      84,    85,    86,    87,    88,    89,    93,    94,    99,   104,
     105,   106,   107,   108,   113,   120,   121,   122,   139,   146,
     153,   163,   173,   185,   193,   202,   220,   221,   225,   226,
     230,   239,   262,   276,   283,   288,   290,   292,   294,   297,
     300,   301,   302,   303,   308,   312,   313,   318,   325,   330,
     331,   332,   333,   334,   335,   336,   337,   343,   344,   348,
     353,   360,   367,   374,   386,   387,   388,   389,   393,   398,
     399,   400,   405,   410,   411,   412,   413,   414,   415,   420,
     440,   469,   470,   474,   478,   479,   480,   484,   488,   496,
     497,   502,   503,   504,   508,   516,   517,   522,   523,   527,
     532,   536,   540,   545,   553,   554,   558,   559,   563,   564,
     570,   581,   594,   608,   622,   636,   650,   673,   677,   684,
     688,   696,   701,   708,   718,   719,   720,   721,   722,   729,
     736,   737,   742,   743,     9,    19,    29,    39,    49,    59,
      69,    79,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     115,   116,   117,   118,   119,   120,   125,   126,   131,   132,
     133,   138,   139,   140,   143,   144,     8,    20,    33,    46,
      58,    70,    86,    87,    91,    95,     7,     1,    30,    53,
      54,    59,    63,    68,    72,    80,    81,    85,    86,    91,
      92,    96,    97,   102,   103,   104,   105,   106,   111,   119,
     123,   128,   129,   134,   138,   143,   147,   151,   155,   159,
     163,   167,   171,   175,   179,   183,   187,   191,   195,   199,
     203,   211,   217,   218,   219,   224,   228,    47,    48,    52,
      53,    68,    69,    76,    84,    92,   100,   108,   116,   127,
     128,   155,   160,   168,   184,   201,   218,   235,   236,   255,
     259,   263,   267,   284,   291,   298,   308,   309,   312,   324,
     335,   343,   348,   353,   358,   363,   371,   379,   384,   389,
     396,   397,   401,   402,   403,   407,   414,   415,   419,   420,
     424,   425,   426,   430,   431,   435,   436,   446,   459,   460,
     463,   472,   483,   484,   485,   488,   489,   490,   494,   495,
     496,   497,   501,   502,   506,   508,   524,   526,   531,   534,
     542,   546,   550,   554,   558,   562,   569,   574,   581,   582,
     586,   591,   595,   599,   607,   614,   615,   620,   621,   625,
     626,   631,   633,   635,   640,   660,   661,   663,   668,   669,
     673,   674,   677,   678,   703,   704,   709,   714,   718,   719,
     723,   724,   728,   729,   730,   731,   732,   736,   749,   756,
     763,   770,   771,   775,   776,   780,   781,   785,   786,   790,
     791,   795,   796,   800,   811,   812,   813,   814,   818,   819,
     824,   825,   826,   835,   841,   850,   851,   864,   865,   869,
     870,   874,   875,   881,   887,   895,   904,   912,   921,   930,
     934,   939,   965,   969,   982,   996,  1011,  1023,  1036,  1052,
    1058,  1063,  1069,  1076,  1077,  1085,  1089,  1093,  1099,  1106,
    1111,  1112,  1113,  1114,  1118,  1119,  1131,  1132,  1137,  1144,
    1151,  1158,  1190,  1201,  1214,  1219,  1220,  1223,  1224,  1227,
    1228,  1233,  1234,  1239,  1243,  1249,  1270,  1278,  1291,  1294,
    1298,  1298,  1301,  1302,  1304,  1309,  1316,  1321,  1327,  1332,
    1338,  1344,  1350,  1359,  1361,  1364,  1368,  1369,  1370,  1371,
    1372,  1373,  1378,  1398,  1399,  1400,  1401,  1412,  1426,  1427,
    1433,  1438,  1443,  1448,  1453,  1458,  1463,  1468,  1474,  1480,
    1486,  1493,  1515,  1524,  1528,  1536,  1540,  1548,  1560,  1581,
    1585,  1591,  1595,  1608,  1616,  1626,  1628,  1630,  1632,  1634,
    1636,  1641,  1642,  1649,  1658,  1666,  1675,  1686,  1694,  1695,
    1696,  1700,  1700,  1703,  1703,  1706,  1706,  1709,  1709,  1712,
    1712,  1715,  1715,  1718,  1718,  1721,  1721,  1724,  1726,  1728,
    1730,  1732,  1734,  1736,  1738,  1740,  1745,  1750,  1756,  1763,
    1768,  1774,  1780,  1811,  1813,  1815,  1823,  1838,  1840,  1842,
    1844,  1846,  1848,  1850,  1852,  1854,  1856,  1858,  1860,  1862,
    1864,  1866,  1869,  1871,  1873,  1876,  1878,  1880,  1882,  1884,
    1889,  1894,  1901,  1906,  1913,  1918,  1925,  1930,  1938,  1946,
    1954,  1962,  1980,  1988,  1996,  2004,  2012,  2020,  2028,  2032,
    2048,  2056,  2064,  2072,  2080,  2088,  2096,  2100,  2104,  2108,
    2112,  2120,  2128,  2136,  2144,  2164,  2186,  2197,  2204,  2218,
    2227,  2246,  2248,  2250,  2252,  2254,  2256,  2258,  2260,  2262,
    2264,  2266,  2268,  2270,  2272,  2274,  2276,  2278,  2280,  2282,
    2284,  2286,  2290,  2294,  2298,  2312,  2313,  2314,  2321,  2333,
    2337,  2341,  2345,  2348,  2359,  2364,  2366,  2377,  2401,  2412,
    2423,  2427,  2434,  2438,  2443,  2448,  2452,  2459,  2467,  2475,
    2486,  2494,  2522,  2558,  2569,  2570,  2577,  2583,  2587,  2591,
    2595,  2599,  2603,  2607,  2611,  2615,  2619,  2623,  2627,  2631,
    2635,  2639,  2643,  2645,  2647,  2651,  2660,  2665,  2672,  2687,
    2694,  2698,  2702,  2706,  2710,  2720,  2729,  2751,  2752,  2756,
    2757,  2758,  2762,  2763,  2770,  2771,  2775,  2776,  2781,  2789,
    2791,  2805,  2808,  2835,  2836,  2839,  2840,  2851,  2857,  2864,
    2873,  2890,  2935,  2943,  2951,  2959,  2967,  2988,  2989,  2992,
    2993,  2997,  3007,  3008,  3012,  3013,  3017,  3018,  3019,  3022,
    3023,  3026,  3027,  3028,  3029,  3030,  3031,  3032,  3033,  3034,
    3035,  3036,  3037,  3038,  3041,  3043,  3048,  3050,  3055,  3057,
    3059,  3061,  3063,  3065,  3067,  3069,  3083,  3085,  3089,  3093,
    3100,  3105,  3112,  3117,  3125,  3129,  3135,  3139,  3148,  3159,
    3160,  3164,  3168,  3175,  3176,  3177,  3178,  3179,  3180,  3181,
    3182,  3183,  3184,  3194,  3198,  3205,  3212,  3213,  3229,  3233,
    3238,  3242,  3257,  3262,  3266,  3269,  3272,  3273,  3274,  3277,
    3284,  3294,  3308,  3309,  3313,  3324,  3325,  3328,  3329,  3332,
    3336,  3343,  3347,  3355,  3366,  3367,  3371,  3372,  3376,  3377,
    3380,  3381,  3391,  3392,  3396,  3397,  3401,  3402,  3405,  3421,
    3429,  3437,  3452,  3470,  3471,  3474,  3475,  3478,  3482,  3483,
    3487,  3488,  3491,  3492,  3493,  3503,  3504,  3515,  3519,  3547,
    3549,  3555,  3556,  3559,  3561,  3571,  3574,  3585,  3589,  3593,
    3605,  3609,  3618,  3625,  3663,  3667,  3671,  3675,  3679,  3683,
    3687,  3693,  3694,  3710,  3711,  3712,  3713,  3716,  3717,  3723,
    3724,  3725,  3728,  3729,  3730,  3733,  3734,  3735,  3738,  3739,
    3742,  3744,  3749,  3750,  3753,  3761,  3762,  3763,  3764,  3767,
    3768,  3771,     7,    18,    19,    23,    24,    25,    26,     7,
      26,    54,    61,    66,    67,    68,    69,     8,    33,    62,
      66,    67,    72,    73,    78,    79,    83,    84,    89,    90,
       7,    16,    25,    34,    43,    52,     5,    12,    22,    23,
       7,    19,    33,     9,    16,    26,    33,    44,    45,    50,
      51,    52,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    90,    91,    92,    97,    98,   103,   107,   115,
     116,   121,   122,   123,   129,   134,   142,   143,    10,    16,
      22,    28,    38,    39,    47,    58,    70,    78,    86,    93,
     103,   105,   111,   115,   119,   134,   141,   142,   143,   147,
     148,     7,    14,    20,    28,    29,     8,    22,    36,    48,
      56,    70,    71,    72,    73,    74,    87,    88,    93,    94,
      98,    99,     7,    18,    31,    35,    42,    53,    54,    60,
      61,     9,    19,     7,    18,    25,    34,    35,    39,    40,
       2,     7,    15,    26,    27,    34,     3,    10,    17,    24,
      31,    38,    45,    52,    61,    61,    63,    64,    68,    69,
       6,     8,    21,    34,    47,    65,    87,    88,    89,    90,
      11,    24,    37,    54,    55,    56,    61,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW",
  "DOUBLE_ARROW", "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P",
  "ABSOLUTE_P", "ACCESS", "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER",
  "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE",
  "AND", "ANY", "ARE", "ARRAY", "AS", "ASC_P", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXPORT_STATE", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GRAPH",
  "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEEP", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE", "NONE", "NOT",
  "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P",
  "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON",
  "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PATH", "PATHS", "PERCENT", "PLACING", "PLANS", "POLICY",
  "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME",
  "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART",
  "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHORTEST",
  "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME",
  "SOURCE", "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT",
  "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT_P",
  "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE",
  "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
  "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
  "TIMESTAMP", "TO", "TRAIL", "TRAILING", "TRANSACTION", "TRANSFORM",
  "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USE_P",
  "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P",
  "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P",
  "VERTEX", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "pgq_unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", "CreateDatabaseStmt", "opt_extension_name",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_or_action", "opt_on_conflict",
  "index_elem", "returning_clause", "override_kind", "set_target_list",
  "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "LoadStmt",
  "file_name", "PGQ_IDENT", "DropPropertyGraphStmt", "VertexOrNode",
  "EdgeOrRelationship", "CreatePropertyGraphStmt",
  "VertexTableDefinitionList", "KeySpecification", "KeyDefinition",
  "KeyReference", "LabelList", "Discriminator", "VertexTableDefinition",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "AreOptional",
  "IdentOptionalAs", "QualifiednameOptionalAs", "PropertiesList",
  "ExceptOptional", "PropertiesSpec", "PropertiesClause", "GraphTableStmt",
  "ColumnSpec", "ColumnList", "KeepOptional", "PathOrPathsOptional",
  "GroupOrGroupsOptional", "PathVariableOptional", "PathModeOptional",
  "TopKOptional", "PathPrefix", "PathPatternList", "PathPattern",
  "PatternUnion", "KleeneQuantifierOptional", "KleeneOptional", "CostNum",
  "CostDefault", "CostOptional", "SubPath", "EnclosedSubPath",
  "PathElement", "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "with_clause", "cte_list",
  "common_table_expr", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list_opt_comma",
  "target_list", "target_list_opt_comma", "target_el", "except_list",
  "opt_except_list", "replace_list_el", "replace_list",
  "replace_list_opt_comma", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name_list_opt_comma", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "TransactionStmt",
  "opt_transaction", "UpdateStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "var_name", "table_id",
  "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3170)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2115)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
   26105,   -43,   623, -3170, -3170,   261,   -43, 43769, 59331,   -43,
     106,  1783, 46781, -3170,   332, 26030,   -43, 49793, 67234,   359,
     248, 27597,   365, 50295, 50295, 59331, 49793, 50797,   -43,   833,
   59833, -3170,   -43, 30609, 47283,    -6, 49793,    76,    72, 51299,
   49793, 33622,   834,   325, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170,   412, -3170, -3170, -3170,
   -3170,   209, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
     178, -3170,   920,   186,   737,   129, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, 30107, -3170, -3170, -3170, -3170, 51801,
   49793, 52303, 47785, 52805, -3170,   915, -3170,   154, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170,   175, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170,   194, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170,   196, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,   197,
   -3170, -3170, -3170, -3170,   424,   653, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170,   876, 49793, -3170, 53307,
     921,  1057,   605,   907, 53809, -3170, -3170, 49793, -3170, -3170,
     832,   964,   933, -3170, -3170, -3170, 48287, -3170, -3170, -3170,
     993,  1225,   992, -3170, -3170, -3170,   824, -3170,   176, -3170,
   -3170,   862,   840, -3170,  1105, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170,   944, -3170, 64336, -3170, 60335, 54311, 54813, -3170,
     807,  2251, 26107, 67244, 29605, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170,   412, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, 50295, 59331, 50295,
     818,   837,  1196,   204,   207,   230,   235,   863,   869,   236,
     877,   888, 28099,   906,   930,   952, 31112,   958,   996,  1359,
     237,  1027,  1037,  1045,  1063,   238,    72, 27094, 55315, 55315,
     -41,  2079, -3170, 55315, 55817, -3170,  1090, -3170,  1102,   653,
   -3170,   915, -3170, -3170, -3170, -3170,   574,  1107, -3170,  1144,
    1429, -3170, -3170, -3170,  1147, -3170, -3170,  1370, 12850, 12850,
   60837, 60837,   915, 60837,  1171, -3170, -3170,    75, -3170,   876,
   -3170,   737, -3170,  1164, -3170,   653, -3170, 47283, -3170, -3170,
     271,  1555, 18170, 49793,  1214, -3170,  1231,  1214, -3170, -3170,
   -3170,  1233,  1251,  1253, -3170, 26105, -3170, 49793,  1603,  1479,
   47283,   891,   891,  1729,   891,  1145,  1293, -3170,  1701, -3170,
    1277, -3170,  1304,  1630, -3170,  1164,  1681,   867,  1506,  1713,
    3286,  1718,   884,  1731,   971,  1859,  9658, 18170, 42263, -3170,
     653,  1388,  1383,  1655,  1767, -3170, -3170, -3170, -3170,   857,
   49793,  1674, -3170,  1906, -3170, -3170,  1485, 56319, 56821, 57323,
   57825, 49793,  1883, -3170, -3170,  1820, -3170, -3170, -3170,  1488,
   -3170, -3170, -3170, 49793,   864, -3170, -3170, -3170, -3170,  1512,
   -3170,  1512,  1512, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170,  1463,  1463,  1660,  1475, -3170, -3170, -3170,  1844,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
    1492,   323, -3170,  1512, -3170,  1463, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, 66786, -3170, -3170, -3170, -3170,   820,   823,
   -3170,  1498, -3170, -3170, -3170, -3170, -3170,   182,  1507, -3170,
    1987, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,  1513,
   -3170,  2757,  1463,  1881,   257,  1518, -3170,  1882,   275, -3170,
    1891,  1753, 18170, -3170,  1693, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,    72, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170,   486, -3170, -3170, 39294, 67244,
    1533,  1625, -3170, -3170, 18170, 18170,  1546,  2060,  2060,  1959,
   66284, -3170, 55315, 55817,  2060,  2060, 18170, 49793, -3170, 18170,
   22958,  1550, 18170, 18170, 10722, 18170, 26592, 55315,  2079,  1548,
   49793, -3170,  1656,  1554,  1656,   833, 27597,  1858,  1856,  1782,
   -3170, 27597,  1782,   901,  1862,  1782,  1863,  1656, 31614, -3170,
    1656,  1568,  1791, -3170, -3170,   845, -3170, 39294, 18702, 64823,
    2056, -3170,  1860, 59331,  1576, -3170, -3170, -3170, -3170, -3170,
   -3170,  1054,  2095,   163,  2096, 18170,   163,   163,  1582,   242,
     242, -3170,  1583, -3170,   244,  1584,  1586,  2106,  2107,   172,
     323,   163, 18170, -3170,   242,  1592,  2109,  1594,  2113,   159,
     185, -3170,   247, 18170, 18170, 18170,  1968, 18170, 10190, -3170,
   49793,  2115,  2125,   653,  1608,   915, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170,   191,  5492, -3170, -3170,  1647, -3170,
   -3170, -3170, -3170,  1824, 18170, -3170, -3170,  1610,  1858, -3170,
     258, -3170, -3170, -3170,   711,  1858, -3170, -3170, -3170, -3170,
   -3170,   293,  2035, 38290, 38792, 59331,   653, -3170, 61339, -3170,
   -3170, -3170, -3170, -3170, -3170,   923, -3170,   412, 40614,  1612,
    1617,   653,  1214, 49793, 49793,  2101,  1885, -3170, -3170, -3170,
    1231, 47283,   127,  1918,  1755, -3170, -3170,   737,   737, 11786,
     537,   677,   125, 13382, 19234,  1978,  1864,   749,   914,  1979,
   -3170,  1865,  1145,  1293, 18170, -3170,  1910, 49793, 45275,  1059,
    1137,  1635,  1728,  1646,   768,  2080, -3170,  1653, -3170,  1736,
   49793, 66786,   241, -3170,  2114,   241,   241,   995,  2121,  1745,
     295,  1909,    86,   629,  1984, -3170,  1653, 47283,   169,    87,
    1653, 49793,  1747,   788,  1653, 59331,  1533,   157, 18702,  1223,
    1420,   428,   218,  1480,  1491,   170,   174,   180,   193,   200,
   18702,  1530,  1609,   203,  1626,  1639,  1668,  1683,  1750,  1779,
    1818,  1832,   206,  1855,  1913,  1915,  1921,  1928,  1935,   210,
    1937,   213,  1940,   263,   223, 18702,  1953,  1661, -3170,   225,
   -3170, 40614,    56, -3170, -3170,  1974, 35989,  1652, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,  1752,
   59331,  1702,  2031,   915, 49793,   764,    54,  2032,  2097, 65310,
   49793,  1911,  1984,  1919,  2152,  1679,  1920,  1383,  1922,  1684,
   -3170, -3170, 61841,  2203, -3170,   226, -3170, -3170, -3170, -3170,
   -3170,  1686, -3170, -3170, 18170, -3170, -3170, -3170,  2060, -3170,
   64823, 64823,  1512,  1512, -3170, -3170,  2169,  1776,  1781,  2060,
   -3170,  2060, -3170, 59331, -3170, -3170, 64823, -3170, 59331,  1697,
    1699,  2060, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,  2060,  1784,
   -3170,  1796,  1798,  1802, -3170, -3170, -3170, -3170, -3170, 59331,
   59331, -3170, 42263,  1703, 49793, 49793, -3170, 49793, 59331,  1716,
     100, 67244, 44773, -3170, -3170, -3170, -3170,  1239,  1382, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, 42263, -3170,
    1822,   915, 39846,  1720, 18170,  1722,  1727, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170,  1732,  2076, -3170, -3170,
   -3170,  1733,  1740,  4181,  1743, 39896,  1744, 22958, 22958,  2461,
   -3170, -3170, 22958,  1746, 43267, 39793,  1742,  1748, 40045, 13914,
   18170, 13914, 13914, 40148, -3170,  1749, 40197, 55315,  1737, 48789,
   -3170, -3170, 49793, -3170, 12850, 12850,  2079, 49291,  1773, 27597,
   -3170, -3170,  1664, -3170, 27597,  2042, 27597, -3170, 27597, -3170,
   49793,  1757, -3170, 49793, -3170, -3170, -3170, -3170,  1751,  1031,
   -3170,  1066,  1601, -3170, -3170, 18170, 18170, -3170, 40614,  1794,
     216, -3170,  6574, 34630, 14446,  6574,  2263,  2263, 32116, -3170,
    1927, 40440, -3170,  1759,   893,  7192,  1763, -3170,  1764,  1765,
    1760, -3170, -3170, -3170,   653, 18170, -3170, 18170,  2897,  2897,
   -3170,   340, 64823, 18170, 18170, 18170, 18170, 18170, 18170, 18170,
   41761,  1868,   145, 59331, 18170, 18170,  1775,   968, -3170, 18170,
    2010, -3170,  1785, 18170,  1870,  1002, 18170, 18170, 18170, 18170,
   18170, 18170, 18170, 18170, 18170, -3170, -3170, 25086,   386,   653,
    2116,  2140,   -35,   278, 12850,  2134,  9658, -3170,   653, 36784,
     153,  2134, -3170, -3170, -3170, -3170,   259, -3170, -3170, -3170,
   -3170,  1751, -3170,  1751, -3170, 59331, -3170, 49793,   271, 46279,
   18170, -3170, -3170,  1787,  1793,  1797, 66284, -3170,  1861, -3170,
   -3170, 49793, 32618,  2098, -3170,   324,   324,  1799, -3170,  8325,
    2047,  2098,   737, -3170, -3170, 23490,  1930,  2090,  2028, -3170,
   -3170,  2006,  2008, -3170,  1805, 41016, 19766, 19766, -3170,  1441,
   40614,  1619, -3170, -3170, -3170, -3170, -3170, -3170,   155, -3170,
   49793,    82,  1978,   914,  1809, -3170,  1070,  1811, 62343, 49793,
    2100,  2052,  2102,   -36, -3170, -3170, -3170, 64823, -3170, 49793,
   59331, 58327, 62845, 42765, 49793, 42263, -3170, -3170, -3170, -3170,
   49793,  1139, 49793,  4865, -3170, -3170, -3170,   241, -3170, -3170,
   -3170, -3170, -3170, 59331, 49793, -3170, -3170,   241, 59331, 49793,
     241, -3170,  1237, 49793, 49793, 49793, 49793,  1262, 49793, 49793,
   -3170, -3170,    57,    57,  2033, -3170, 14978,   188, -3170, 18170,
   18170, -3170, 18170,  2000, -3170,  1110, -3170,  2045,    80, 49793,
   -3170,  2168,  1871, 49793, 49793, 49793, -3170, -3170,  1924, 49793,
    1502, -3170, -3170, -3170, -3170, -3170,  1825, -3170,  1826,  2193,
    1984, -3170,  2195,   816, 45777,  1094,  2198,  1874,  2205, 15510,
    2326,  2086, -3170,  2075, -3170, -3170, -3170, 18170,  1854,  1857,
     182,  1111, -3170, -3170,  1866,  1699,  1873,  1877,  1867,  1869,
    1112, 64823, -3170,  1161,  2060,   183,  1872,  1876,  1730,  1317,
      98,  1620,   257, -3170, -3170, 42263,   275, -3170,  2081,   226,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,  1166, 29103,
   -3170, -3170,  2342,   915,  2342,   610, -3170, -3170,  2342, -3170,
    2325,  2342, -3170,  1533, 64823, -3170,  7323, -3170, -3170, -3170,
   18170, -3170, -3170, 18170, -3170, 18170,  2210, -3170,  2376,  2376,
   64823, 22958, 22958, 22958, 22958, 22958,   836,  1592, 22958, 22958,
   22958, 22958, 22958, 22958, 22958, 22958, 22958, 24022,   463, -3170,
   -3170,  1173,  2353, 18170, 18170,  2225,  2210, 18170, -3170, 64823,
    1878, -3170,  1884,  1888, 18170, -3170, 64823, -3170, 49793,    -5,
      89,  1896,  1897, -3170, -3170,  1902,  1858, -3170,  1179,  1295,
   49793,  3376,  3617,  4490, -3170, -3170, 18170,  2216, -3170, 18170,
    1898, -3170, -3170, 27597, -3170,  1664,  1182, -3170, 64823, 49793,
    1184, 64823, 39294, -3170, 18702, -3170, 64823, -3170, -3170, -3170,
   -3170, -3170,  1903,  1901, 18170,   110, -3170,  1968,  1904, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170,  1907,  1905, -3170,  1912, 49793, -3170,
   20298, -3170, 59331, -3170, -3170, 18170, 49793, -3170, 18170,  1914,
    8242, -3170, -3170, -3170,   356,  6709,   278,  5399,  5399,  5399,
    6574, -3170, -3170, -3170,  1933, -3170, 22958, 22958, -3170,  5576,
    2158, 10190, -3170, -3170,  2256, -3170,  1235, -3170,  1917, -3170,
   -3170,  2345, -3170, 34630, 41140, 18170,   189, -3170, 18170,  1775,
   18170,  2004,  5399,  5399,  5399,  1129,  1129,   279,   279,   279,
     356,   278, -3170, -3170, -3170,  1925, -3170,  1926,  1929,  2280,
    1594, 18170, -3170, -3170, 27597,  1773,    56,  1968,  1773,  2060,
    2897, -3170,  1231, -3170, -3170, -3170, 40614, 49793, -3170,  1601,
    1931,   432,    81, -3170, 27597,  1963,  1148,  2405, 59331, -3170,
    1939,  2134,  1941, -3170, -3170, -3170,  1946,  1946, 18170,  1899,
    1946, -3170,  2098,    20,  2156,  1448,  1448,  1441,  2160, -3170,
   -3170,  2013, -3170, -3170, -3170, 18170, 11254,  1633, -3170,  1649,
   -3170, -3170, -3170, -3170,  1948, -3170, -3170,  2214, -3170, -3170,
   -3170, -3170,  2039,  1653, 18170,  2196, -3170,   199,  1954,  2320,
     567,  2274, 59331, -3170,   761,   803, -3170,   885,  2327,   226,
    2328,   226, 42263, 42263, 42263,  1186, -3170, -3170,   915, -3170,
   -3170,  1192, -3170,   571, -3170, -3170, -3170,  2048,   861,  1984,
    1653, -3170, -3170, -3170, -3170, -3170, -3170, -3170,   224,   886,
    1653,  2054, -3170,  2055, -3170,  2062,  1028,  1653, -3170, -3170,
     188,   188,   188, 18702, -3170,  2202,  2211,  1965, 40614, 40614,
   40614,  1981, -3170,   375, -3170, 59331, -3170, -3170, -3170,  2000,
    2329,   915, 49793,  2463,  1983,  1383,  1684,  1985, -3170,  2147,
    1203,   190, -3170, 59331, 49793, 49793, 49793,  2025, 49793, -3170,
   -3170, -3170,  1988,  1986, -3170, 63849,    -9,  2217,  2212, 49793,
    1646,  2474, 49793, -3170,  1193, 16042,  2359, 49793,  1996, -3170,
   -3170, -3170, -3170,  2060, -3170, -3170,   616,   616, -3170, 59331,
   -3170, -3170,  1999, -3170,  2001, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170, -3170, 59331, -3170, -3170,
   42263, -3170, 44271, -3170, -3170, -3170, -3170,   915, -3170,   915,
    2233, 59331, 37286,   915, 37788,   915, -3170,  2002, -3170, 40614,
   35140, 40614,  2225, -3170,  2376,   553,   553,   553,  6654,  2346,
     270,  2020,   553,   553,   553,   413,   413,   280,   280,   280,
    2376,   463,  1090, 43267,  2022, -3170, 40614, 40614, -3170, -3170,
    2003, -3170, -3170, -3170, -3170,  2024,  2026, -3170, -3170, -3170,
   -3170, -3170, 59331,  1487, -3170,  1773,    -6,    -6,    -6,    -6,
   -3170, 49793, 49793, 49793, 40614,  2486,  2355, 40614, 49793, -3170,
   -3170, -3170, 49793,  2472,  1202, -3170, -3170, -3170, -3170, -3170,
   40489, 18170, -3170,  2403,  1927, -3170, -3170, 34630, -3170,  2037,
   10190, 40562, -3170,  2349, 35171, -3170, 40614, -3170,  2897, 18170,
    1549,  2555, 18170,  2038, 18170,  2386, -3170, -3170,  2046, -3170,
   -3170, 64823, 18170,  2049,  2750, 22958, 22958,  3786, -3170,  3861,
   18170, 10190, -3170,  2033, 16574, -3170,  2261,  2044, -3170,  2216,
     188,  1927,  2216,  2050, -3170, -3170,  2057, -3170,   513,   327,
    2567,   381,   432, 66284,  2105, -3170, 18170,  2220,  2120,   459,
   30609,  2295, -3170, 59331,  1216, -3170, 32618,  1963, 18170,   653,
     221, -3170, -3170, -3170,  2072, -3170,  1946, -3170, -3170, -3170,
    2297, -3170, -3170, -3170, 49793, -3170, 49793, 35216,  2439, -3170,
   59331, 59331, 59331, -3170, 59331,  2085,  2092,  1201,  2091,   398,
   -3170,  1908,  1201,  2417,   252,  1646,   295,  5195,    68, -3170,
   -3170, -3170,  2171, 49793, -3170, 59331, -3170, -3170, -3170, -3170,
   -3170, 42765, -3170, -3170, -3170, 42263, 34127, 42263, 49793, 49793,
   49793, 49793, 49793, 49793, 49793, 49793, 49793, 49793,  2093,  2099,
    2103,  2033, -3170, -3170, -3170, -3170, -3170, -3170,   629, -3170,
   -3170,   375,   915, -3170,  2110,   876, 45777,  1874,  2579, 49793,
    2097,   100, 58829,  2108,  2112, -3170,  1221,  1984,  2582,  2111,
     807,   311, -3170, -3170,  1094, 45777, -3170, -3170, -3170,  2541,
   -3170,  1383, -3170,   876,  1684, -3170,   876, 40614, 59331,  2166,
   -3170,  1699,  2119, -3170, -3170,  1699, 64823,  1699, -3170, -3170,
     226, -3170,  1247, -3170, -3170, -3170, -3170, 59331,  2117, -3170,
    2117, -3170, -3170,  2117, -3170, -3170, -3170, -3170, 22958,  2452,
    2122, 64823, -3170, -3170, 49793, -3170, -3170, -3170,  1258,  2118,
    2216, 49793, 49793, 49793, 49793, -3170, -3170, -3170, 12318, 18170,
    2159,  2124, -3170, 59331, -3170, -3170, 18170, 40614, -3170,  2127,
   -3170, -3170,  6674, -3170,  2126,  2128, 59331, 18170, -3170, -3170,
     389, 18170, 18170,  5576, -3170,  8416, 18170, 64823,  1264,  5576,
     408, 18170,  2898,  3656, 18170, 18170,  4210, 35266,  2130, 18170,
   35297, 33120, -3170, 27597,  2355,  2131, -3170,  2355,   915, -3170,
    1712, -3170, -3170,   643,  1712,  1712,  1712, -3170, -3170, -3170,
     643,   643,   643, -3170,   158,   712, 66284, 66284,   381,   381,
    2129, -3170, -3170, 66284,   962, -3170, -3170, -3170, -3170, 22426,
   40614, 12850, -3170, -3170, -3170, -3170,  2181, -3170,  1281, -3170,
    2566,  2220, -3170,  2146, 59331, -3170,  2220, 40614, -3170, -3170,
   34630, -3170, -3170, -3170, -3170, -3170, 59331,  2135, -3170,  2137,
    1201, -3170, 59331,  2177, -3170,   260,  2451,   269, -3170, 18170,
   -3170,  2543,  2624,  1908,  2144, 59331, 49793, 22958, -3170,   785,
     222, -3170,  2434, 49793,  2177,  2583, -3170, -3170, -3170,   398,
   -3170,  2478,  2391, -3170,   241, -3170, 18170,   398,  2393,   313,
   59331, -3170, -3170,  3384, -3170, 64823,   226,   226, -3170, -3170,
    2161,  2163,  2164,  2170,  2173,  2174,  2178,  2179,  2180,  2183,
    2187,  2188,  2199,  2201, -3170,  2206,  2207,  2208,  2209,  2215,
    2218,  2221,  2222,  1492,  2223, -3170,  2224,  2072,  2226,  2227,
    2228,  2229,  2230, 65797,  2232,  2234,  2236,  2239,  1498,  2240,
    2241,  1239,  1382, -3170, -3170, -3170,  2243, -3170, -3170, -3170,
   -3170,  1518,  2172, -3170, -3170,  2254, -3170,  2259, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170, -3170,   188,  1533,   368, -3170,
   59331,  2025,  2197,  2651, 17106,  2175,   781,  2678,   632,  2446,
    2213, -3170,   915,  1874, -3170,  1019, 45777,  2025, -3170,  2622,
     726,  2212, -3170,   245,  1874,  2252,  2697, -3170,  2443, 59331,
    2235, -3170, -3170, -3170, -3170, 44271,  2117,  7265, 22958, 64823,
    1287,  1297, -3170,  2760,  2411,  2355, -3170, -3170, -3170, -3170,
   -3170,  2250,   -42,  2253, -3170,  9126,  2247, -3170, -3170, -3170,
   -3170, -3170, -3170, 40614, 40614, 59331,  2436, -3170, -3170, 40614,
   -3170, 18170, -3170, -3170, 36126,  2578,  5576,  5576,  8416,  1298,
   -3170,  5576, 18170, 18170,  5576,  5576, 18170, -3170, -3170, 35541,
   -3170, 63347, -3170, -3170,  2159,   915,  2159, -3170, -3170, -3170,
   -3170, -3170, -3170, -3170, -3170,  1084,   759, -3170, -3170, -3170,
     643,  2260, -3170,    33,  2257, -3170, -3170,  2269,   381,  2264,
   -3170, -3170, -3170,  2774, -3170, 22426, 22426, 22426, 22426, 40741,
   -3170,  2477,  2262,   876,  1623, 59331,   653,    14, -3170, 18170,
   -3170, -3170,  2266,  1201, -3170,  2435,  2177,  2268, -3170, -3170,
   -3170, -3170, -3170, -3170, 35589, -3170,    71, 18170, -3170,  1014,
    6654, -3170, -3170, -3170, -3170,  2177,  1383, -3170, 49793,  2751,
    2633, -3170, -3170, 40614, -3170, -3170,  2060,  2060, -3170, -3170,
    2472, -3170, -3170, -3170, -3170,  1518,   521, 34127, 49793, 49793,
    2271, -3170, -3170,   629,  2668,  1302, -3170,  1094,   876,   876,
   40614, 49793,  2279,  2464,   144,  2571, 66284, 49793,  2649, 45777,
   -3170,  2767, 49793,  2025,  2286, -3170, -3170,   316,   316, -3170,
    2437, -3170,  2438,  2770,   290, -3170, 17638, 49793, -3170, -3170,
   28601, -3170,  7265,  1330, -3170, -3170,  2292,  2300, -3170,  2159,
   18170,  2302, 18170, -3170, 20830,  2299, -3170,  2789, 18170,  2369,
   -3170, -3170, 18170, -3170,  5576,  5576,  5576, -3170,  2517, -3170,
    2436, -3170,  2436, -3170, -3170, -3170, -3170,   381,   962, -3170,
   -3170,  2354, 25600, -3170,  2310, -3170,   239, -3170,  2313, 41188,
   41188,  2829,  2829, 64823, 22426, 22426, 22426, 22426, 22426, 22426,
   22426,  2408,   214, 59331,  2321, 22426, 22426,  1775,  1138, -3170,
   22426,  2556, -3170, 22426,  2409,   998, 22426, 22426, 22426, 22426,
   22426, 22426, 22426, 22426, 22426, 22426,   -35, 12850, -3170,   459,
   -3170, -3170,  2755, 28601,  2710, 40614, -3170, 49793, -3170, 42263,
   -3170,  1201,   464,  2330, 18170, 35741,  2560, -3170, -3170,  2591,
   -3170,  2652, -3170,  2394,   654,  2416, -3170, -3170, -3170, -3170,
    1533,   915,  1874,  2212,  2252, -3170,  2175,   212, -3170, -3170,
   66284,  2822, -3170, 66284, -3170,  2335, 49793,   876,   807, -3170,
    1094, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170, -3170,
   -3170, -3170, -3170,   876,  2793,  2565,  2795,   876, 40614,  2166,
   18170, -3170,  1336,  2790,   317, -3170, -3170,  2859,  2436,  2351,
   20830,  2352, -3170, 59331,  2356, 40614,  2500, -3170, 36284,  2820,
    2033,  2369,  2369,  2399, -3170, 22426, 25600, 25600, -3170, -3170,
   -3170,  2372,   962,  2774, -3170,  1415, 40882,   306,  5545,  5545,
    5545, 41188,  2378, 22958, 22958, -3170, 12850,  7494,  4796, -3170,
    2707, -3170,  1259, -3170,  2363, -3170, -3170,  4835, -3170, 41175,
   22426,   256, 22426,  1775, 22426,  2450,  5545,  5545,  5545,  1149,
    1149,   297,   297,   297,  1415,   306, -3170,  2421, 49793,  1341,
      58,  1383,  1201,  1352, -3170,  2379, -3170, -3170, -3170, -3170,
    1984, -3170, 35833,  2611,   124,  2600,  2330, 18170, -3170,  2455,
   -3170, -3170, -3170,  2858, -3170, -3170, -3170, -3170, -3170,  2479,
    2863, -3170,  1360,  2819,  2700, 45777,  2387,  2252,  2025,  2212,
    2252,  2610, -3170,  2612, -3170,  2401, 35881,  1874, 28601, 59331,
   59331, 59331,  2392,  2369, -3170,  2398, -3170, -3170, -3170, 48789,
   -3170, 18170,   564, -3170, -3170, 22426, 40814,  2402,   754, -3170,
   -3170,  2396, 22426,  4090,  4260, -3170,  1362, -3170, 22426, 22426,
    2739, -3170, -3170,  2406, -3170, -3170, 64823, 22426,  6090, 22958,
   22958,  8258, -3170,  8278, 22426,   876, -3170,  1773, -3170,  2531,
    2591, -3170, 42263, 34127,  1515,   464,  2716, -3170, -3170, -3170,
   -3170,   205,  2632, -3170,  2635, -3170, 40614, -3170,   876,  2412,
   66284, -3170, 66284,  2783, 49793, -3170, 45777, -3170, -3170, -3170,
   -3170, -3170, -3170, 28601,  2790,  1773, -3170, -3170,   324, -3170,
     324, -3170, -3170, -3170, -3170,  1742, 21362, 21362,  2414, 40814,
   22958, -3170, -3170, 25600, 25600, -3170,   873, 22426, 22426,  2418,
   12850,  7494, 41264, 22426, 64823,  1367,  7494, 22426,  5671,  5948,
   22426, 22426, 35185, -3170, -3170, 32618,  2600, -3170, -3170, -3170,
   -3170, -3170,   572,   572,  2815, -3170,  2483, -3170,  2252, 49793,
   -3170, -3170,  2423, -3170,  2424,  1371, 59331, -3170,  1946,  1946,
   24554,  2573,   179, 39806, -3170, -3170, -3170, -3170, -3170,  6332,
   -3170,  2422, -3170,  2419,  7494,  7494, 49793, -3170, 41264,  1375,
   -3170,  7494, 22426, 22426,  7494,  7494, 22426,  1773, -3170, -3170,
    2923, -3170,   267, -3170, -3170, -3170,  2426,  2550, 66284, 66284,
    1874,   324, -3170, -3170,  2920, -3170, -3170, -3170, -3170, -3170,
    1516, -3170, 25600, 25600, -3170, -3170,  7494,  7494,  7494, -3170,
    1201, -3170, -3170, -3170, 49793,  2440,  2724,  1384, -3170,  1386,
    1773,  1946, 21894, -3170, -3170, -3170, -3170, -3170,  2426, -3170,
    2444,  2607, 49793, -3170, -3170, 66284, -3170, -3170, -3170, -3170,
   49793, -3170, -3170,  2444, -3170,  1400,  2830, -3170,  2724, 49793,
    2444,   781,  2725, 66284,  2700, -3170
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     137,   234,     0,  1440,  1439,  1507,   234,     0,  1389,   234,
     634,   551,     0,  1525,  1507,     0,   234,     0,   137,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   234,   709,
       0,  1524,   234,     0,     0,   701,     0,  1487,     0,     0,
       0,     0,     0,     2,     4,     5,     6,     7,     8,     9,
      23,    10,    11,    12,    19,    13,    14,    15,    17,    18,
      20,    21,    22,    25,    26,    27,  1398,    28,    30,    31,
      32,     0,    33,    24,    16,    29,    34,    35,    36,    37,
     670,   657,   714,   669,   136,   815,   677,    38,    39,    40,
      41,    42,    43,    44,  1523,    45,   233,   232,   226,     0,
       0,     0,     0,     0,  1506,     0,   227,  1323,  1547,  1548,
    1549,  1550,  1853,  1551,  1552,  1553,  1554,  1555,  1556,  1557,
    1854,  1558,  1559,  1560,  1561,  1562,  1927,  1563,  1564,  1565,
    1873,  1874,  1928,  1875,  1876,  1566,  1567,  1568,  1569,  1570,
    1571,  1572,  1573,  1877,  1878,  1574,  1575,  1576,  1577,  1578,
    1879,  1929,  1880,  1579,  1580,  1581,  1582,  1583,  1930,  1584,
    1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1931,  1593,
    1594,  1595,  1932,  1933,  1934,  1935,  1936,  1596,  1597,  1598,
    1599,  1600,  1601,  1602,  1881,  1882,  1603,  1604,  1605,  1606,
    1607,  1608,  1609,  1610,  1611,  1855,  1612,  1613,  1614,  1615,
    1616,  1617,  1618,  1619,  1620,  1856,  1857,  1621,  1622,  1623,
    1624,  1625,  1626,  1627,  1628,  1629,  1630,  1883,  1631,  1632,
    1633,  1634,  1635,  1884,  1636,  1637,  1638,  1885,  1639,  1640,
    1641,  1937,  1938,  1642,  1643,  1886,  1940,  1644,  1645,  1858,
    1887,  1888,  1859,  1646,  1647,  1648,  1649,  1650,  1651,  1652,
    1653,  1941,  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,
    1662,  1663,  1664,  1942,  1889,  1665,  1666,  1667,  1668,  1669,
    1890,  1891,  1892,  1670,  1943,  1944,  1671,  1945,  1672,  1860,
    1673,  1674,  1675,  1676,  1677,  1678,  1946,  1679,  1947,  1680,
    1681,  1682,  1683,  1684,  1685,  1686,  1687,  1893,  1688,  1689,
    1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,
    1700,  1701,  1702,  1703,  1704,  1705,  1894,  1949,  1895,  1706,
    1707,  1708,  1861,  1896,  1709,  1710,  1950,  1711,  1897,  1712,
    1898,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,
    1899,  1951,  1722,  1952,  1900,  1723,  1724,  1725,  1726,  1727,
    1728,  1729,  1730,  1731,  1862,  1863,  1732,  1733,  1734,  1901,
    1953,  1735,  1736,  1902,  1737,  1738,  1739,  1740,  1741,  1742,
    1743,  1744,  1864,  1865,  1745,  1746,  1747,  1748,  1903,  1749,
    1750,  1751,  1752,  1753,  1754,  1755,  1866,  1756,  1757,  1758,
    1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1954,
    1768,  1769,  1770,  1904,  1771,  1772,  1773,  1774,  1775,  1776,
    1777,  1778,  1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,
    1955,  1787,  1905,  1788,  1789,  1867,  1790,  1956,  1868,  1791,
    1906,  1792,  1869,  1793,  1794,  1795,  1796,  1797,  1798,  1799,
    1800,  1801,  1802,  1803,  1804,  1907,  1805,  1908,  1806,  1807,
    1808,  1809,  1958,  1810,  1811,  1812,  1813,  1814,  1909,  1910,
    1870,  1815,  1816,  1911,  1817,  1912,  1818,  1819,  1913,  1820,
    1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,  1830,
    1959,  1831,  1832,  1833,  1834,  1835,  1914,  1915,  1836,  1960,
    1837,  1871,  1838,  1839,  1840,  1841,  1872,  1842,  1843,  1844,
    1845,  1846,  1847,  1848,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,  1849,  1850,  1851,  1852,  1325,
    1324,  1326,  1334,  1530,     0,     0,  1305,  1323,  1886,  1893,
    1907,  1387,  1325,  1388,   229,   633,     0,     0,  1322,     0,
       0,     0,     0,     0,     0,   545,   544,     0,  1378,   550,
       0,     0,     0,   186,  1328,   108,  1737,   106,  1327,  1303,
    1506,     0,     0,   572,   573,   563,     0,   582,     0,   565,
     570,   566,     0,   591,     0,   584,   592,   574,   564,   585,
     575,   562,     0,   593,     0,   568,     0,     0,     0,   230,
     195,   551,     0,   137,     0,  1402,  1403,  1404,  1405,  1406,
    1407,  1412,  1408,  1409,  1410,  1411,  1413,  1414,  1415,  1416,
    1417,  1393,  1398,  1418,  1419,  1420,  1421,  1422,  1423,  1424,
    1425,  1426,  1427,  1428,  1429,  1430,  1431,     0,  1389,     0,
       0,  1879,  1929,  1120,  1107,  1116,  1121,  1108,  1110,  1117,
    1884,     0,     0,  1112,  1114,  1897,     0,  1900,  1901,  1771,
    1118,  1908,  1911,  1912,  1913,  1119,  1914,     0,   844,     0,
     672,   819,   829,   844,   849,  1104,   870,  1105,   858,  1327,
    1297,     0,  1472,  1474,  1475,  1471,   176,  1354,  1512,  1909,
    1815,  1526,  1513,  1510,  1511,   231,   708,   706,     0,  1273,
    1644,  1682,  1775,  1786,  1909,  1448,  1452,     0,   228,     0,
    1517,     0,  1528,  1518,   678,  1327,   700,     0,   235,  1486,
       0,  1491,     0,  1751,   683,   686,  1343,   684,   236,   237,
     238,     0,   670,     0,     1,   137,  1397,  1501,     0,   143,
       0,   704,   704,     0,   704,     0,   662,   670,   665,   669,
     816,  1522,  1909,  1815,  1516,  1519,  1652,     0,     0,  1652,
       0,  1652,     0,  1652,     0,  1509,     0,  1265,     0,  1266,
    1306,     0,   516,  1652,   179,   549,   548,   547,   546,   551,
       0,  1652,  1362,     0,   602,   603,     0,     0,     0,     0,
       0,     0,  1373,   109,   107,     0,  1504,   580,   581,     0,
     571,   567,   569,     0,     0,  1335,  1961,   913,  1962,   942,
     920,   942,   942,  1963,  1964,  1965,  1966,  1967,  1968,  1969,
    1970,  1971,   909,   909,  1618,   922,  1972,  1973,  1974,  1652,
    1975,  1976,   910,   911,   947,  1977,  1978,  1979,  1980,  1981,
       0,     0,  1982,   942,  1983,   909,  1984,  1985,  1986,   914,
    1987,   880,  1988,     0,  1989,   912,   881,  1990,   950,   950,
    1991,     0,  1992,   937,  1993,  1336,  1337,   590,     0,   594,
     895,   896,   897,   898,   923,   924,   899,   929,   930,   934,
     900,   982,   909,  1652,   590,  1338,   586,  1652,   590,  1299,
    1652,     0,     0,   191,     0,  1395,  1432,  1994,  1995,  1996,
    1997,  1998,  1999,  2001,  2000,  2002,  2003,  2004,  2005,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2028,
    2026,  2027,  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,
    2037,  2038,  2039,  2040,  2041,  2043,  2042,  2044,  2045,  2046,
    2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,
    2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,
    2067,  2068,  2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,
    2077,  2078,  1433,  1434,  1446,     0,  1447,  1437,  1401,   137,
     632,     0,  1386,  1473,     0,     0,     0,     0,     0,  1222,
       0,   831,   844,   849,     0,     0,     0,     0,   860,     0,
    1237,     0,  1243,     0,     0,     0,   844,   677,     0,   829,
       0,   843,   756,   842,   756,   709,     0,   690,     0,   855,
     853,     0,   855,     0,     0,   855,     0,   756,     0,   845,
     756,   842,     0,   862,   859,  1298,  1392,     0,     0,     0,
       0,  1514,     0,     0,     0,  1308,  1310,  1311,  1194,  1321,
    1091,     0,  1874,  1875,  1876,  1258,  1877,  1878,  1880,  1881,
    1882,  1048,  1883,  1319,  1885,  1887,  1888,  1890,  1891,  1892,
    1894,  1895,     0,  1320,  1898,  1718,  1903,  1904,  1906,  1909,
    1910,  1318,  1915,     0,     0,     0,  1286,  1213,     0,  1090,
       0,     0,     0,  1086,     0,     0,   903,   904,   925,   926,
     905,   931,   932,   906,     0,  1280,   983,  1268,  1138,  1094,
    1103,  1082,  1169,  1080,     0,  1085,  1075,  1276,   690,  1274,
       0,  1076,  1307,  1268,  1259,   690,  1272,  1451,  1449,  1455,
    1450,     0,     0,     0,     0,     0,  1298,  1493,  1494,  1485,
    1483,  1484,  1482,  1481,  1488,     0,  1490,  1398,  1208,  1210,
       0,  1259,   685,     0,     0,     0,     0,   660,   659,     3,
    1343,     0,     0,     0,     0,   702,   703,     0,     0,     0,
       0,     0,     0,     0,     0,   800,   730,   731,   733,   797,
     801,   809,     0,   666,     0,  1520,     0,     0,     0,   124,
     124,     0,     0,     0,     0,     0,   100,    49,    93,     0,
       0,     0,     0,   209,   222,     0,     0,     0,     0,     0,
     219,     0,     0,   202,   196,   198,    51,     0,   124,     0,
      47,     0,     0,     0,    53,     0,   632,  1323,     0,  1927,
    1928,  1929,  1880,  1930,  1931,  1120,  1107,  1116,  1121,  1117,
       0,  1937,  1938,  1886,  1940,  1941,  1942,  1943,  1944,  1945,
    1946,  1947,  1893,  1949,  1950,  1951,  1952,  1953,  1954,  1118,
    1956,  1907,  1958,  1913,  1119,     0,  1960,     0,  1095,  1325,
    1331,  1216,   714,  1214,  1344,     0,  1264,     0,  1345,  2115,
    2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,  2124,  2125,
    2126,  2127,  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,
    2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,
    2146,  2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,
    2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2165,
    2166,  2167,  2168,  2169,  2170,  2171,  2172,  2173,  2174,  2175,
    2176,  2177,  2178,  2179,  2180,  2181,  2182,  2065,  2183,  2184,
    2185,  2186,  2187,  1347,  1346,  1348,  1261,  1304,  1267,     0,
       0,   630,     0,     0,     0,     0,     0,     0,  1359,     0,
       0,  1652,   190,  1652,     0,   516,  1652,   516,  1652,     0,
     180,  1372,  1375,     0,   583,   590,   579,   577,   576,   578,
     941,   928,   936,   935,  1213,   918,   917,   916,     0,   915,
       0,     0,   942,   942,   940,   919,   895,     0,     0,     0,
     946,     0,   944,     0,   588,   589,     0,   560,     0,   888,
     884,     0,   955,   956,   957,   958,   965,   966,   963,   964,
     959,   960,   953,   954,   961,   962,   951,   952,     0,   967,
     968,   969,   970,   971,   972,   973,   974,   901,   907,     0,
       0,   555,     0,  1339,     0,     0,   557,     0,     0,     0,
     551,   137,     0,   203,  1442,  1443,  1441,     0,     0,  1400,
     206,  1445,  1435,  1444,  1399,   223,  1436,  1394,     0,  1390,
     621,     0,     0,     0,     0,     0,     0,  1223,  1224,  1225,
    1226,  1227,  1228,  1229,  1230,  1231,     0,     0,  1232,   828,
     826,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1051,  1080,     0,     0,     0,  1208,  1242,     0,     0,     0,
       0,     0,     0,  1208,  1248,     0,     0,   832,   840,   749,
     755,   827,     0,   825,     0,  1273,   820,     0,   872,     0,
     854,   850,     0,   851,     0,     0,     0,   852,     0,   823,
       0,   840,   824,     0,   869,  1461,  1460,  1469,   177,     0,
    1219,     0,   137,  1515,  1527,     0,  1213,  1083,  1257,     0,
       0,  1088,  1007,     0,     0,  1008,   987,   988,     0,  1285,
    1294,  1208,  1212,     0,  1086,  1208,     0,  1172,  1174,     0,
       0,  1077,  1351,  1079,  1087,     0,  1314,     0,   982,   982,
    1279,  1194,     0,  1187,     0,     0,  1191,  1192,  1193,     0,
       0,     0,  1271,     0,  1202,  1204,     0,     0,  1023,  1200,
       0,  1026,     0,     0,     0,     0,  1188,  1189,  1190,  1181,
    1182,  1183,  1184,  1185,  1186,  1198,  1180,  1004,     0,  1078,
       0,  1141,     0,  1003,  1277,   818,     0,  1312,  1309,     0,
    1260,   818,  1463,  1467,  1468,  1466,     0,  1462,  1454,  1453,
    1458,  1456,  1459,  1457,  1529,     0,  1495,  1479,     0,  1476,
    1211,   813,   687,  1301,     0,     0,   286,  1502,  1500,   142,
     141,     0,     0,   682,   681,   724,   724,   715,   718,   724,
       0,   680,     0,   772,   773,     0,     0,     0,     0,   806,
     804,  1308,  1321,   760,   734,   759,     0,     0,   738,     0,
     764,   983,   799,   664,   728,   729,   732,   663,     0,   802,
       0,   812,   800,   733,     0,  1521,     0,     0,     0,     0,
       0,  1652,     0,     0,    84,    65,   468,   883,   123,     0,
       0,     0,     0,     0,     0,     0,    92,    89,    90,    91,
       0,     0,     0,     0,   207,   208,   221,     0,   212,   213,
     210,   214,   215,     0,     0,   200,   201,     0,     0,     0,
       0,   199,     0,     0,     0,     0,     0,     0,     0,     0,
    1508,  1503,   714,   714,   714,  1101,     0,   712,   713,     0,
       0,  1262,  1265,   620,   524,     0,   514,     0,     0,     0,
     183,   182,     0,     0,     0,     0,   241,   240,     0,     0,
     551,  1363,  1361,  1365,  1364,  1366,  1624,   171,     0,     0,
     189,   187,     0,     0,   513,   487,     0,  1377,     0,     0,
       0,  1652,  1374,     0,   503,  1505,   239,     0,     0,     0,
     590,     0,   939,   938,   889,   885,     0,     0,     0,     0,
       0,     0,   595,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   590,   587,  1340,     0,   590,  1300,     0,   590,
     194,  1396,  1438,   204,   224,   205,   225,   655,     0,   627,
     635,   640,   618,     0,   618,     0,   637,   641,   618,   636,
       0,   618,   631,   632,     0,  1134,     0,  1109,  1111,  1124,
       0,  1113,  1115,     0,   861,     0,     0,  1125,  1053,  1054,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1070,  1069,  1126,
     865,     0,   868,     0,     0,  1240,  1241,     0,  1127,     0,
       0,  1247,     0,     0,     0,  1132,     0,   830,     0,     0,
     744,   751,     0,   754,   748,     0,   690,   671,  1644,  1682,
       0,   701,   701,   701,   689,   699,     0,   777,   833,     0,
       0,   835,   837,     0,   838,     0,     0,   873,     0,     0,
       0,  1303,     0,   178,     0,  1353,     0,  1358,  1356,  1352,
    1355,  1357,     0,     0,     0,  1256,  1252,  1286,     0,  1179,
    1187,  1191,  1192,  1193,  1188,  1189,  1190,  1181,  1182,  1183,
    1184,  1185,  1186,  1206,     0,     0,  1168,     0,     0,  1284,
       0,  1281,     0,  1081,  1092,     0,  1175,  1093,     0,     0,
       0,  1316,  1317,   984,   995,  1027,  1028,   999,  1000,  1001,
    1005,  1350,  1349,  1278,     0,  1270,     0,     0,   985,  1009,
    1014,     0,  1249,  1044,     0,  1032,     0,  1022,     0,  1030,
    1034,  1010,  1025,     0,  1006,     0,  1271,  1203,  1205,     0,
    1201,     0,   996,   997,   998,   989,   990,   991,   992,   993,
     994,  1002,  1178,  1176,  1177,     0,  1269,     0,     0,  1143,
       0,     0,  1029,  1275,     0,   872,   714,  1286,   872,     0,
     982,  1496,  1343,  1489,  1478,  1477,  1209,  1302,  1342,   137,
       0,   299,   278,   300,     0,  1498,     0,   131,     0,   162,
     164,   818,     0,  1268,   722,   723,   727,   727,     0,     0,
     727,   705,   679,  1904,  1771,     0,     0,     0,     0,   765,
     807,     0,   798,   762,   763,     0,   761,  1308,   766,  1307,
     767,   770,   771,   739,   808,  1295,   810,     0,   803,   668,
     667,   814,     0,    50,     0,  1652,    67,     0,     0,     0,
       0,     0,     0,   418,     0,   518,   418,   105,  1652,   590,
    1652,   590,  1551,  1619,  1787,     0,    63,    96,     0,   492,
     117,     0,   477,   521,    86,   101,   110,     0,     0,   197,
      52,   211,   216,   113,   220,   217,  1382,   218,   124,     0,
      48,     0,   111,     0,  1380,     0,     0,    54,   115,  1384,
     712,   712,   712,     0,  1215,     0,     0,     0,  1217,  1218,
    1264,     0,   619,     0,   515,     0,   629,   609,   610,   620,
     181,     0,     0,     0,   516,   516,     0,     0,  1362,     0,
       0,   173,   169,     0,     0,     0,     0,  1545,     0,   506,
     504,   537,     0,   511,   505,   514,     0,     0,   463,     0,
       0,     0,     0,   604,     0,     0,     0,     0,     0,   908,
     921,   561,   895,     0,   949,   948,   950,   950,   895,     0,
     878,   895,     0,   893,     0,   933,   902,   975,   976,   977,
     978,   979,   980,   981,   554,  1341,   556,     0,   558,   622,
       0,   625,     0,   624,   628,   623,   617,     0,   650,     0,
       0,     0,     0,     0,     0,     0,  1391,     0,  1106,  1221,
       0,  1235,  1234,  1052,  1061,  1065,  1066,  1067,  1236,     0,
       0,     0,  1062,  1063,  1064,  1055,  1056,  1057,  1058,  1059,
    1060,  1068,   870,     0,     0,   864,  1245,  1244,  1238,  1239,
       0,  1129,  1130,  1131,  1246,     0,     0,   742,   740,   743,
     745,   741,     0,     0,   841,   872,   701,   701,   701,   701,
     698,     0,     0,     0,   871,     0,   794,   857,     0,   836,
     834,   846,     0,   877,     0,   848,  1470,  1220,   707,  1084,
       0,     0,  1253,     0,  1294,  1050,  1195,     0,  1167,     0,
       0,     0,  1293,     0,  1209,  1173,  1171,  1089,   982,     0,
       0,     0,     0,     0,     0,     0,  1033,  1024,     0,  1031,
    1035,     0,     0,     0,  1018,     0,     0,  1016,  1045,  1012,
       0,     0,  1046,     0,     0,  1142,  1151,   821,   817,   777,
     712,  1294,   777,     0,  1464,  1480,     0,   285,   281,   293,
       0,   324,   299,   286,     0,  1499,     0,   151,     0,     0,
       0,   146,   126,     0,     0,   154,   165,  1498,     0,   168,
       0,   716,   717,   719,     0,  1196,   727,   721,   769,   768,
       0,   737,   805,   735,     0,   811,     0,     0,     0,   467,
       0,     0,     0,   418,     0,   526,     0,   533,     0,     0,
     518,   499,    85,     0,     0,     0,    59,   104,    77,    69,
      55,    83,     0,     0,    88,     0,    81,    98,    99,    97,
     102,     0,   453,   428,   464,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   714,   710,   711,  1096,  1263,   653,   654,   202,   652,
     525,     0,     0,   185,     0,     0,   513,  1377,     0,     0,
    1360,   551,     0,     0,   172,   174,     0,   190,     0,   516,
     195,     0,  1540,   491,   487,   512,   485,   484,   486,     0,
    1546,   516,  1376,     0,     0,   605,     0,   599,     0,  1371,
     927,   891,     0,   945,   943,   892,     0,   890,   886,   894,
     590,   656,     0,   613,   651,   638,   643,     0,   649,   645,
     644,   639,   647,   646,   642,  1122,  1133,  1233,     0,     0,
       0,     0,   863,   866,     0,  1128,  1123,   839,     0,     0,
     777,     0,     0,     0,     0,   692,   691,   697,     0,     0,
    1145,     0,   874,     0,   875,   847,     0,  1255,  1251,     0,
    1207,  1283,  1208,  1288,  1290,     0,     0,     0,  1170,  1315,
     986,     0,     0,  1015,  1250,  1036,     0,     0,     0,  1011,
    1195,     0,     0,     0,     0,     0,  1020,     0,     0,     0,
       0,     0,  1102,   822,   794,     0,  1282,   794,     0,   688,
     281,   279,   280,   281,   281,   281,   281,   291,   297,   292,
     281,   281,   281,   343,     0,   341,   286,   349,   324,   324,
     325,   302,   347,   349,   311,   321,   320,   277,   301,     0,
    1497,     0,  1492,   130,   153,   152,     0,   160,     0,  1268,
       0,   151,   132,     0,     0,   163,   151,   139,   725,   726,
       0,   720,   736,  1296,   118,   418,     0,     0,    66,     0,
     535,   479,   527,   510,   494,     0,     0,     0,   419,     0,
     552,     0,     0,   500,     0,     0,     0,     0,   480,     0,
       0,   439,     0,     0,   510,     0,   517,   435,   436,     0,
      58,    78,     0,    74,     0,   103,     0,     0,     0,     0,
       0,    61,    73,     0,    56,     0,   590,   590,    64,   478,
    1335,  1961,  1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,
    1970,  1971,  1972,  1973,  2092,  1974,  1975,  1976,  1977,  1978,
    1979,  1980,  1981,  2101,  1982,   425,  1983,  1718,  1984,  1985,
    1986,  1987,  1988,     0,  1989,   881,  1990,  1991,  2180,  1992,
    1993,  1181,  1182,   423,   520,   420,  1336,   421,   528,   422,
     424,     0,   523,   114,  1383,     0,   112,     0,  1381,   121,
     119,   116,  1385,  1099,  1100,  1097,   712,   632,   612,   184,
       0,  1545,     0,     0,     0,   246,   272,   262,     0,  1652,
       0,   170,     0,  1377,   188,     0,   513,  1545,  1543,     0,
     543,   463,   538,     0,  1377,  1539,     0,   596,     0,     0,
       0,   887,   879,   559,   626,     0,   648,  1071,     0,     0,
       0,     0,   752,     0,   758,   794,   696,   695,   694,   693,
     775,  1594,  1887,  1770,   776,     0,   780,   774,   778,   783,
     785,   784,   786,   782,   793,     0,   796,   856,   876,  1254,
    1049,  1291,  1292,  1287,     0,   983,  1042,  1040,  1037,     0,
    1038,  1019,     0,     0,  1017,  1013,     0,  1047,  1137,     0,
    1140,  1154,  1149,  1150,  1145,  1096,  1145,  1465,   290,   296,
     289,   288,   287,   294,   298,   284,   341,   346,   342,   344,
     281,     0,   348,   338,     0,   322,   323,   303,   324,     0,
     308,   307,   309,   306,   351,     0,     0,     0,     0,     0,
     354,  1080,   150,     0,     0,     0,   138,   135,   125,     0,
     155,   606,     0,   531,    68,     0,   510,     0,   418,   496,
     495,   498,   493,   497,     0,   553,     0,     0,   437,     0,
     444,   482,   483,   481,   438,   510,   516,   440,     0,     0,
       0,    70,    60,    57,    62,    71,     0,     0,    72,    75,
     877,    87,    80,  2101,  2110,     0,     0,     0,     0,     0,
       0,   608,   615,   202,     0,     0,  1542,   487,     0,     0,
     601,     0,     0,     0,   259,     0,     0,     0,     0,   513,
     175,     0,     0,  1545,     0,   192,  1544,     0,     0,   415,
       0,   460,     0,     0,     0,  1531,     0,     0,  1370,  1369,
       0,   614,  1072,     0,  1073,   867,     0,     0,   750,  1145,
       0,     0,     0,   787,   781,  1144,  1146,     0,     0,   747,
    1289,  1135,     0,  1039,  1043,  1041,  1021,  1139,  1156,  1153,
     796,  1313,   796,   282,   283,   295,   345,   324,   311,   339,
     340,     0,     0,   353,     0,   326,     0,   305,     0,   376,
     377,   358,   359,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1271,     0,     0,     0,     0,     0,     0,   392,
       0,     0,   395,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,     0,
     128,   161,     0,     0,     0,   140,  1197,     0,   418,     0,
     509,   532,   449,   427,     0,     0,     0,   434,   441,   542,
     443,     0,    79,    95,     0,     0,   522,   122,   120,  1098,
     632,     0,  1377,   463,  1539,   598,   246,     0,   270,   258,
       0,     0,   271,     0,   263,     0,     0,     0,   195,  1541,
     487,   476,   469,   470,   471,   472,   473,   474,   475,   490,
     489,   461,   462,     0,     0,     0,     0,     0,   600,  1371,
       0,   166,     0,   157,   157,  1074,   753,     0,   796,     0,
       0,     0,   779,     0,     0,   795,     0,   675,     0,     0,
     714,   747,   747,     0,   319,     0,     0,     0,   334,   337,
     304,   341,   311,   306,   355,   366,   396,   397,   370,   371,
     372,   374,     0,     0,     0,   356,     0,   378,   383,   413,
       0,   401,     0,   391,     0,   399,   403,   379,   394,   375,
       0,  1271,     0,     0,     0,     0,   367,   368,   369,   360,
     361,   362,   363,   364,   365,   373,   398,     0,     0,     0,
       0,   516,   534,     0,   501,   508,   447,   446,   448,   452,
       0,   450,     0,   466,     0,   459,   427,     0,    82,     0,
     529,   607,   611,     0,   417,  1533,   245,   242,   243,     0,
     260,   264,     0,     0,   253,   513,     0,  1539,  1545,   463,
    1539,     0,  1536,     0,   597,     0,     0,  1377,     0,     0,
     159,   159,     0,   747,   789,     0,   788,  1147,  1148,   749,
    1136,     0,  1159,   674,   673,     0,   317,     0,   331,   335,
     352,     0,     0,     0,     0,   275,     0,   274,     0,     0,
       0,   402,   393,     0,   400,   404,     0,     0,   387,     0,
       0,   385,   414,   381,     0,     0,   134,   872,   145,     0,
     542,   488,     0,     0,     0,   449,     0,   442,   539,   540,
     541,     0,   455,   445,   456,    76,    94,   530,     0,     0,
       0,   269,     0,   267,     0,   254,   513,  1534,   193,   416,
    1532,  1537,  1538,     0,   157,   872,   167,   156,   724,   158,
     724,   757,   676,   790,   746,  1155,     0,     0,     0,   317,
       0,   350,   336,     0,     0,   310,   357,     0,     0,     0,
       0,   384,   405,     0,     0,     0,   380,     0,     0,     0,
       0,     0,   389,   129,   133,     0,   459,   502,   507,   426,
     451,   465,     0,     0,     0,   457,     0,   458,  1539,     0,
     261,   265,     0,   268,     0,     0,   159,  1367,   727,   727,
    1873,  1595,  1822,     0,  1157,  1160,  1158,  1152,   318,   315,
     332,   327,   333,   329,   411,   409,     0,   276,   406,     0,
     407,   388,     0,     0,   386,   382,     0,   872,   418,   431,
       0,   430,     0,   519,   454,  1535,   256,     0,     0,     0,
    1377,   724,   148,   147,     0,  1164,  1163,  1162,  1166,  1165,
       0,   316,     0,     0,   273,   408,   412,   410,   390,   144,
     536,   429,   433,   432,     0,     0,     0,     0,   250,     0,
     872,   727,     0,   313,   312,   314,   328,   330,   256,   244,
       0,     0,     0,   266,   252,     0,  1368,   149,  1161,   255,
       0,   248,   249,     0,   251,     0,     0,   247,     0,     0,
       0,   272,     0,     0,   253,   257
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3170, -3170, -3170,  2242,   113,   114,  -747, -1170,  -940, -1177,
   -3170,   162,   116, -3170, -3170,   446, -3170,  1215, -3170,   437,
    -643,   795, -3170,  1310, -3170, -3170,  2966, -3170,   121,   122,
    2358,   123, -3170, -3170, -3170, -3170,  -419,   742, -1184, -3170,
     672, -3170, -3170, -3170, -3170,    69,   422, -3170,     8, -2110,
   -2838,  -379, -3170,  -545, -3170,   -50, -3170,  -465, -3170,  -437,
    -473,  -534, -2539, -1114, -3170,  1806,  -103, -3170,   826, -3170,
   -2441, -3170, -3170,   814, -3170, -1126, -3170, -2147,   415,  -454,
   -2512, -2449, -2072,  -735,   492,  -459,   469, -2043,  -749, -3170,
     838, -3170,  -444, -3170,  -720, -1680,   130, -2572, -1630,    -8,
   -3170,     0, -3170, -3170,  -564, -3170, -2421, -3170, -3170,   131,
    1643, -2000,   132,   765, -3170,    10,   435,   133, -3170, -3170,
     134,    39,  -558,   532, -3170,   135, -3170, -3170,  1565,  -826,
   -3170,  1615,   136, -2435, -3170,  -468, -3170,  -474,  -488, -3170,
   -3170,    37,  -955,  1563, -3170, -3170, -3170,    12, -3170,  -253,
   -3170, -3170, -2491, -3170,    50, -3170, -3170, -3170, -3170,     2,
     552, -3170, -3170,  -369, -1235,  -169, -3170, -2939, -3053, -3170,
   -3170,  -494, -2934, -1961,   137,   126,     4, -3170, -3170, -3170,
   -3170,  -204, -2453, -3170,  -615, -3170,  -620,   -46,  -592,  -575,
   -3170,  -431, -3164,  -544, -3170, -3170,  -608,  2404,  -464, -3170,
   -3170, -1197, -3170,   331, -1274, -3170,   586, -3170,   587, -3170,
    -252, -2693, -3170, -3170,  -447, -3170, -3170, -3170, -2387,   -94,
    -546,  -541, -3170, -2867, -3170, -3170, -2492, -3170, -3170, -3170,
     334, -3170, -3170,  3315,   140,   141, -3170,   949,   142, -1115,
      24,  3116,   -39,   -20, -3170,   -13,    36,    99,  1923, -1013,
   -3170, -1058,  1025, -3170,  2051,  2059, -2066,  -709,   -76, -3170,
     947, -1628, -2067,  -478,  1354,  1934,  1932,   709, -2184, -3170,
    -326, -3170,   268, -3170, -3170,   940,  1392, -1504, -1484, -3170,
   -2053, -3170,  -192,   -33, -3170, -3170, -3170, -3170, -3170, -2367,
   -2725,  -462,  1373, -3170,  1936, -3170, -3170, -3170, -3170,    32,
   -1482,  3068,   982,  -613,  2441,  -539,  -396,  2138,  2077,   285,
    1126,    74,  2462,   752, -3170, -3170,   755, -2030, -1471,   714,
      52,  1692, -3170, -3170,  -525, -1334,  -823, -3170, -3170,   440,
     -66, -3170, -3170, -3170,   449,  2643, -3170, -3170,  2853,  2982,
   -3170,  -636,  3147,  -515,  -809,  2132,  -906,  2133,  -912,  -893,
    -901,  2139,  2143, -1472,  4630, -1423,  4631, -3170,   103, -3170,
   -1500,   -16, -3170, -3170, -3170, -3170, -1919, -3170,  -170, -3170,
    -167, -3170, -3170, -3170,  -383, -3169, -3170,  5224,  1092, -3170,
   -3170, -3170, -1517, -3170,  5538,   990, -3170, -1935,  -991,  -678,
   -1044,  -948, -1185, -1380, -3170, -3170, -3170, -3170, -3170, -3170,
    -737, -1674,    40, -1995, -3170, -3170,  1125, -3170, -3170, -3170,
    -725,  1331,  -567, -1077, -1999,  1589,   396,  -590, -1597, -3170,
   -1621, -2264, -3170, -3170, -2025, -3170,  1505,  -586, -1084,  2673,
   -1218,   146, -3170,  5533,  2919,  2792,    61, -2437, -3170, -3170,
    -579, -2546, -1079, -3170,  -654, -3170, -3170,   147,  1801,    51,
   -3170,   148,  1465, -3170, -3170, -3170,   149, -3170, -3170,   151,
     928, -3170,  1153, -3170,   902,   152, -3170,  3109,  3044,    13,
   -2950
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    42,    43,    44,   595,   596,  1820,  1767,  1555,  1215,
    1757,  1470,   597,  2518,  2519,  2520,  2185,  1196,  3368,  2186,
    1197,  1198,  2522,    48,    49,    50,   105,  1226,   598,   599,
     531,   600,  2239,  3073,  2612,  3074,  2317,  2233,  1479,  2314,
    1877,  1798,  1480,   537,  1892,  2613,  2558,  1878,   601,  2507,
    2854,  3361,  2532,  3583,  2786,  2787,  3358,  3359,  2510,  2187,
    3462,  3463,  2590,  1749,  3457,  2259,  3259,  2191,  2173,  2788,
    2268,  3210,  2900,  2188,  2768,  2260,  3353,  1832,  2261,  3354,
    3028,  2262,  1794,  1825,  2511,  3464,  2192,  1795,  2506,  2855,
    1736,  2263,  3365,  2264,   550,  2772,   602,  2582,  1374,   519,
     520,   521,   522,   856,  1354,  1270,  1355,    56,   551,   603,
     780,  1830,   604,  1368,  1812,   605,  1821,   606,  2573,  2574,
     607,   608,  1137,  2467,  2115,   609,   586,   587,   874,  1417,
     588,   857,   610,   883,    65,   727,  1471,   611,  1472,  1473,
     975,    66,  1556,   977,   978,    67,    68,   613,  3108,  2910,
    1382,  1833,  2271,   552,   614,  2471,  2116,  3204,    71,  2737,
    2119,  1163,  2741,  3271,  2732,  2736,  2474,  3400,  3488,  2738,
    2120,  2121,  3272,  2122,   615,   672,  3298,    73,  1808,  3379,
      74,  3082,  3641,  3631,  3632,  3619,  3475,  2885,  3615,  3586,
    3241,  3381,  2886,  3382,  3543,  3242,  3085,    75,  3425,  3426,
    2464,  2707,  3145,  2111,  2708,  2711,  2461,  2112,  2113,  2998,
    3158,  3004,  3625,  3601,  3501,  2991,  2718,  2719,  2720,  2721,
    3560,  3562,  3417,  3561,  3151,  3152,  2722,  2723,  2724,  2993,
    2994,  2725,  2726,  3009,   616,   617,  1040,  1989,   618,  1740,
     619,  1093,    81,    82,  1017,    83,   701,   714,   715,  1538,
    1964,   707,  1167,  1692,   688,   689,  2227,   735,  1788,  1687,
    1688,  2126,  2481,  1716,  1717,  1176,  1177,  1951,  3287,  1952,
    1953,  1530,  1531,  3118,  1704,  1708,  1709,  2148,  2138,  1695,
    2386,  2936,  2937,  2938,  2939,  2940,  2941,  2942,  1094,  2650,
    3129,  1712,  1713,  1179,  1180,  1181,  1721,  2158,    85,    86,
    2095,  2447,  2448,   661,   662,  1011,  1012,  1030,  1026,  1541,
    1971,   663,   664,  1930,  1931,  2355,  1033,  1967,  1976,  1977,
    2654,  1850,   858,  2174,  1560,  1420,   860,  1095,   861,  1395,
    1096,  1399,   863,  1097,  1098,  1099,   866,  1100,  1101,  1102,
     869,  1391,  1103,  1104,  1410,  1439,  1440,  1441,  1442,  1443,
    1444,  1445,  1446,  1447,  1148,  1509,  1106,  1107,  1108,  1109,
     666,  1110,  1111,  1641,  2089,  2446,  2946,  3125,  3126,  2692,
    2972,  3138,  3290,  3498,  3554,  3555,  1112,  1113,  1587,  1588,
    1589,  2085,  1635,  1636,  1114,  2859,  1638,  2014,  1149,  1524,
    1583,  1272,  1273,  1561,  1496,  1497,  1506,  1906,  1513,  1517,
    1935,  1936,  1525,  2053,  1115,  1995,  1996,  2403,  1569,  1116,
     759,  1277,   760,  1639,  2047,  1125,  1117,  1126,  1119,  1579,
    1580,  2412,  2664,  2665,  2021,  2154,   668,  1673,  1955,   879,
    1356,  1120,  1121,  1122,  1123,  1151,   670,  1274,   526,   872,
    3489,  1453,  1155,  1275,  2189,  2043,  1593,   620,    98,   621,
      89,   622,  1144,   711,  1145,  1147,   623,   682,   683,   624,
     695,   696,  1557,  1658,  1558,   625,    94,   697,   703,   626,
    3105
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     532,   878,   723,  1214,   532,   667,   736,   876,    54,   532,
      59,  1516,    69,    95,  1932,   532,   532,   532,   532,   532,
    1406,  1841,   532,  1474,    79,   532,   532,  1361,   532,  1182,
     973,   532,   532,   719,  1150,  1358,    84,  1771,  1469,    62,
    1412,   720,  1781,  1770,  1008,   721,  1648,  2093,  1451,  1365,
      70,    88,  1456,   659,    84,   612,  2013,   700,  2127,   859,
    2482,  2130,  1735,  2487,   738,  2449,  2512,  2436,  2452,   871,
    1674,   739,  1845,   559,  2438,  1742,  2883,  1491,   559,  1746,
    1784,  1677,  1980,  1489,  1908,  1909,   532,   559,  1493,  1928,
    1559,   532,   532,   532,   532,   532,  1492,  1586,  1118,  2861,
     559,   559,  1035,  1775,  1357,  1645,   974,  1216,   704,  1220,
     523,  1224,  1651,    45,    46,  2857,    47,  2882,   744,   885,
    1014,    51,    52,    53,   665,  1029,  2031,  2032,  2433,  2505,
      55,    57,    58,    60,    61,    63,    64,    72,  1136,   717,
      76,    77,    78,  2901,   979,  2897,  2663,    87,    90,    91,
     675,    92,    93,   524,  2548,  2549,  2550,  2475, -1306, -1332,
     535,   559, -1332,  2560,  -950,  1392,  1393,   524,  -942,  2098,
   -1329, -1329,  1164,  2243,  2713, -1932,   752,  -947,  -658, -1933,
   -1939,  -947,  3239, -2085, -2085, -1934,  -661, -2086, -2086,  2045,
    -950,  1655,  1049, -2087, -2087,   538,   538,  1404, -1935, -1948,
    1049, -1957, -1333,  2150,  1459, -1936, -2088, -2088, -1939, -1932,
    2576, -1948, -1933, -2089, -2089, -1955, -2092, -2092, -1957, -2101,
   -2101,   538,  2987, -2108, -2108,  2153, -2110, -2110, -1959,  3226,
   -1333, -2082, -2082,  2045,  1864, -1934, -2113, -2113, -1330, -1330,
   -1935, -1936, -1955, -1959,  1414,  1463,  2568,  -909,  1738,  -922,
    1049,  1132,  -937,   709,  2401,  2713,  2237,  1175,  2045,  1773,
    3149,  2358,  1755,   538,   538,  1758,  1759,  1027,  3213,  3349,
    1727,  1412,  3047,  1178,  1139,  -658, -2112, -2112,  2618,  2620,
    1782,  2623,   540,  -661,  3375,  3299,  2586,   789,  1414,  1602,
    1602,  1910,  1783,  1603,  1603,  1911,  1652,  1463,   538,  -202,
    2045,  3458,  1049,  1738,  -202,     3,     4,  1483,  3163,  3076,
    1358,  3202,  3164,  2462,  2540,  3066,  2367,  3163,  -770,  1414,
     628,  3164,  1049,  1611,  1611,  3095,  1679,  2974,   871,  3532,
    2976,  2995,  2996,   728,  1806,  3401,  2709,  1414,  2090,  1747,
    1747,  3448,  3171,  3043,  1015,  2640,  3251,   541,  3490,  3596,
    1838,  3171,  3121,  3264,  3377,  1613,  1613,  2761,  1696,   733,
     733,  3265,  3099,  1430,  1431,  2124,    21,  1602,  2156,  3100,
   -1179,  2790,  1730,   104,  3173,  3587,  2404, -1179,  1754,  2659,
     538,  3594,  3029,  3173,  2695,  3101,  3612,  2225,  1696,  2748,
    3032,  1402,  1403,  2760,  3399,    96,  2694,  2713,  3252,  2697,
    1602,  1611,  3091,  1536,  1697,  2629,  3065,  3253,  1542,  1582,
    2369,  1358,  1653,  3103,   973,  3291,  2082,  3292,   706,  2751,
    1392,  1393,  2898,  2083,  1910,  2171,  2696,   729,  1911,  3418,
    3419,  2770,  2516,  1613,  1697,  1404,  3254,  3477, -1199,  3459,
    3480, -2081, -2081,    97,   560, -1199,  1140,  3094,  1141,  2791,
    3587,  2908,  2125,  3638,  1029,  3294,  2771,  2505,  2749,  2505,
    2803,  3030,  2458,  2370,  1769,  1776,  1613,   629,  1014,  2459,
    1698,   627,  2660,   973,  1910,  -658,  2451,   671,  1911,  -791,
    1434,  1435,  2157,  -661,  1016,  2172,  2091,  1680,  2334,  2335,
    2336,  2337,  2338,  3591,  -616,  2342,  2343,  2344,  2345,  2346,
    2347,  2348,  2349,  2350,  2351,  1477,  1724,  3597,  2394,  3044,
    1133,  2368,  1745,  3255,  3208,  2238,  3449,   824,   862,  3224,
    1699,  3249,  1993,  3460,   871,  3256,  1594,  1807,   545,   532,
     546,   532,  1732,  3218,  2792,  3203,   532,  3266,  2700,   532,
    1654,  1574,  1748,  1748,  -658,  3546,  2013,  1415,   532,  3545,
    1699,  2226,  -661,  3403,  3613,   723,   549,  1650,  3119,  1836,
     761,  1048,  2630,  1787,  1910,  3150,  2046,  3378,  1911,   973,
     973, -2115, -2115, -2115,  2916,    29,   855,  3102,   532,   532,
     532,  1786,  1984,  1700,  1650,  1134,   972,  2925,  3585,  1994,
    2899,  1415,  3214,   712,  2906,  1690,  1499,   710,  1043,   986,
     790,  2224,  2166,  1678,  1774,  2371,  2463,  1745,  1745,  3420,
    2435,  3155,  2485,  1700,    34,  3528,  1656,   559,   723,   532,
     532,   532,  1415,  2420,  2421,  2578,   667,   536,  2454,    84,
    2861,   976,  2150,  1390,  3579,  3313,  3233,  3563,   532,  2477,
    1415,   667,  1827,  1771,  1407,  3023,  2857,  2305,   559,   559,
     532,   532,  1733,  2490,   740,   532,   532,    38,  2627,  2541,
     723,  -658,  1183,  3533,  3302,  3240,  1408,   730,  2700,  -661,
    1407,  2986,   757,    39, -1306, -1332,   758,  3439, -1332,  1669,
    1409,   738,   532,   532,  -942,   532,   871,  3130,   739,  1007,
    2560, -1932,  1408,  -947,  3374, -1933, -1939,    40,  2096,   532,
    -658, -1934,  -658,  2293,  1722,   532,  1411,  1416,  -661,  2326,
    -661,   699,  1597,    21, -1935, -1948,  1582, -1957, -1333,   532,
    1723, -1936,   532,  2710, -1939, -1932,  3257, -1948, -1933,  3258,
    1997, -1955,  3033,    54, -1957,    59,  3563,    69,    95,  1570,
    1365,  3373,  1142, -1179, -1959,   665, -1333,  1143,  1269,    79,
    1353, -1934,  3301,  1467,  1468,   983, -1935, -1936, -1955, -1959,
     665,    84,   532,  1394,    62,  1398,  1842,  1843,  -937,   532,
     532,   532,   532,   532,   559,    70,    88,   862,  1765,  1646,
    2099,  1138,  1450,  3020,  1005,   532,  2556,  2557,   524,  2084,
    1629,  1630,  1631,  1632,  1633,  1634,  1634,  1926,  1357,  2224,
    1455,  2508,  1766,   524,  1138,  1467,  1468,  -202,  -202,  3389,
    3070, -1199,  1152,  3388,  3194,  3022,  3478,  2201,  3189,  3190,
    3191,  3192,  3193,  3194,  1879,  3056,  3057,  2204,  2460,  3072,
    2207,    99,  2701,  2702,   724,   855,   757,  3075,    45,    46,
     758,    47,  1941,  -882,  1817,  1693,    51,    52,    53,   725,
    3479,  3580,  1917,  1932,   871,    55,    57,    58,    60,    61,
      63,    64,    72,   686,  2366,    76,    77,    78,  1866,  1358,
     876,  1863,    87,    90,    91,   859,    92,    93,  3356,  1869,
    3097,  2274,  2734,   726,  3163,   871,   871,  1992,  1582,  2714,
    2013,  1852,  2320,  1188,  2715,  2366,  2017,  2321,   973,  1189,
    2716,   871,  2717,  2381,  2382,  2383,  3485,  3041,  3496,  2703,
    1188,  2513,  2704,    21,  2086,  1171,  1189,  2029,  3211,  2735,
     538,  1165,    29,  2086,  2315,  1358,  1968,  1923,  1924,  1925,
    1926,  1972,  3098,  1974,  2409,  1975,  2882,  3581,  3497,  2313,
    3357,  2509,   774,  2375,  1956,   756,  2669,  2298,  2601,  2705,
    3173,  1386,  2297,  2322,  2605,  1694,  2042,  2607,  2300,  2302,
    2303,    34,  2701,  2702,  3582,   769,  2299,  2301,   687,  1364,
     972,  2339,  2256,   862,   974,  1921,  1922,  1923,  1924,  1925,
    1926,  1802,   719,  -882,   532,   532,  3042,  1871,  1947,   532,
     720,  2706,    21,  1173,   721,  1357,  1387,  1188,   532,   532,
     667,   100,   532,  1189,    38,   667,  2199,  1190,  1461,   101,
     774,  1462,  2682,  2683,  2281,    84,  2861,  1594,   775,  2485,
     532,  1747,  1771,  2455,  1190,  2514,  1166,  3094,  2171,   972,
    1269,   855,  2857,   864,  2048,   532,  2304,  3225,  2551,   540,
    2306,  1747,  2704,  2308,  1865,  -670,  2479,   102,   659,   723,
    3331,  2678,    21,   659,  2066,  3140,  3087,  3142,   699,  -670,
    3083, -2115, -2115, -2115,  -670,  1921,  1922,  1923,  1924,  1925,
    1926,  1528,   731,  2220,  2221,  2222,   781,  2033,  1019,  2705,
    1171,  2536,   532,  2163,  1037,  2774,   775,   871,  2502,  1551,
    2250,  2193,   770,  2542,  2537,  1038,  1188,   103,  3352,  3620,
    1586,  1407,  1189,  2054,   541,  1760,  1804,  3413,  3414,  3049,
    2200,  1190,  1765,  1802,  1747,  1020,  -670,  3054,  2340,   665,
    3084,  2706,    29,  1408,   665,   972,   972,   532,  2341,  2210,
     532,  1544,  2055,  2777,  2217,   862,  1766,  -670,  1738,  1747,
    1602,   782,  1022,   732,  1603,   532,   532,  1683,  1684,  1739,
    1691,  1590,  2587,   532,   739,   739,  2592,   739,  1173,  2278,
    3163,    34,   524,  2921,  3164,  1188,  1779,   524,  1191,  2332,
    3369,  1189,   757,  3314,  1611,  3092,   758,  1865,  1388,   532,
     532,   776,  3319,  2067,  2202,  1191,  1191,  -670,  1803,  2205,
    3646,   785,   532,   855,  3171,    21,  -670,  3651,  3332,  2359,
    3278,    29,  2068,  3333,    38,  2917,  1613,  2069,  1174,   532,
    1190,  1357,  2175,   532,   559,   559,  1738,   532,   777,  3492,
    1269,  2988,   871,   733,  1748,  1192,  3173,  1741,   786,  1193,
     757,  2989,  1269,  2013,  1649,  1138, -2079, -2079,  1804,  2539,
      34,  3334,  1218,  1873,  1748,  2070,  1193,  2515,  1049,  2516,
    2056,  2920,   787,  1396,  1761,  2057,   778,  1269,   699,  1194,
    2058,    29,  1762,  1188,  2543,   788,  2364,  2468,  2988,  1189,
    1025,  3143,  1191,  3320,  3144,  1405,  1219,  2517,  3146,  1190,
    3503,  1747,  1533,    38,  3504,   545,   791,   546,  1188,  1745,
     793,  1772,   864,  1389,  1189,  1549,  3216,  2959,  1552,    39,
      34,  2781,  3321,   862,  2651,  1407,   779,  1543,  1407,  1745,
    1547,  1171,  1448,   549,   792,   973,  1172,  1748,  2641,  2642,
    2643,  2644,  2764,    40,    21,   794,  2290,  1408,   882,  1222,
    1408,  1195,  3440,  1193,   862,   862,   871,   699,  3442,   984,
    2801,  1409,  1748,    38,  1411,  -670,  2794,  2782,  1195,   765,
     862,   766,   532,  2524,  3040,  2526,   532,  2614,   985,    39,
    2389,   855,   532,  1223,   757,  2783, -1306,   986,   758,  2327,
    2425,  1191,   734,  2423,   532,  2758,  1811,  1190,  1813,   871,
    1814,  1815,  1745,    40,   987,  2333,  1875,  2450,  2877,  1173,
     988,  1049,   855,   855,  3430,   871,  3335,   699,   989,  2426,
    2071,  2793,  1190,  2802,    29,   532,  2547,  1745,   855,   990,
     532,  2059,   757,  2765,  2360,  1157,   758,  3524,   973,  1586,
    3322,  2365,  2060,  3431,   871,  3323,  3163,   994,  2162,  2979,
    3324,   871,  1193, -2080, -2080,  1195,  2983,  2984,  2985,  1174,
    1191,   532,   532,    34,  1353,  1667,   532,   532,  1668,   532,
     532,   995,  2488,  2393,   972,  3547,  2393,  1049,  2469,  -713,
    3171,  2397,  1194,   871,  -713,  2319,   871,  2784,  3610,  2323,
    1353,   871,  2325,   996,  3000,  2785,  3001,  2603,  2604,   999,
    2766,  3592,  3593,  2767,  1748,   767,    38,   768,   864,  3002,
    3003,  1949,  3173, -2083, -2083,  3112,  1950,    84,   667,   976,
    1396,  1193,    39,  2978, -2084, -2084,  3018,  2980,  2981,  2982,
    2567,  3021,  1424,  1425,  1405,   559,   559,  1000,   559,   532,
    3623,   532,  2427,   667,   532,  3624,    40,  2428,   667,   532,
     667,  1194,   667,    29,  1195,  1001,   862,  -713,  1191,  3113,
     699,   708,   532, -2090, -2090,   532,  3432,  3609,  1002,  1745,
    2485,  3433,   776,  1983,  3637,  1201,  1984,  1048,  1003,  1940,
    1910,  1942,  1943,  1191,  1911,   532,  1004,  1912,  1913,  1914,
     532,   659,    34,  1566,  1202,   699,   659,  2266,   659,  2267,
     659,  3325,  1430,  1431,  1005,  2671,  1990,  -713,  1985,   777,
    3636,  1986,  3326,   559,   855,  2208,  2853,  1032,    84,  1193,
    2093,  1987,  1353,  1195,   747,   532,   750,  2376,   754,  2377,
    3273,  1978,  1988,  1991,  1981,    38,  1034,   665,  1127,  1128,
    2215,  1130, -2091, -2091,  1193,  1203,  2801,  2572,  1039,  2209,
    3024,    39,  2234,  2282,  2288,  2235,  1986,  2289,  1269, -2093,
   -2093,  1353,   665,  1631,  1632,  1633,  1634,   665,  1041,   665,
     864,   665, -2094, -2094,  2216,    40,  1879,   532,  1042,   532,
     524,   532,  3016,  3191,  3192,  3193,  3194,  1044,   719,  2470,
    1043,   862,  2132,   532,   532,  1131,   720,   779,  2429,   739,
    2110, -2095, -2095,  2291,   540,   524,  2289,  1135,  2309,  2430,
     524,  2310,   524,  3071,   524,  2352, -2096, -2096,  2353,  1434,
    1435,  1195,  3434,  3273,  2391,  1143,  2395,  2392,  2530,  2392,
   -1379,  2531,   532,  3435,  2534,  2595,  3147,  2535,  1984,  3427,
     532,   532,  1204,  2378,  2655,  2379,  1195,  2392,  2610,   855,
    1146,   532,   532,   532,   532,  1353,   532,  1353,  2743,  1153,
    2175,  2744,   532,  2893,   532,  2527,  2235,  2529,   973,   541,
     871,  2757,  1154,  2759,  2086,   532,   532,  1168,  1156,  1170,
     532,   532,  1018, -2097, -2097,   532,   532,   532,   532,  2914,
     532,   532,  2915,  1157,  1205,  1158,  1916,    21,  1269,  1161,
    2922,  1162,  1206,  2923,  2913,   862,  2960,  1169,   538,  1986,
     559,   532, -2098, -2098,  1207,   532,   532,   532,  1184,    21,
     559,   532,   559,  3014,  2249,   559,  3015,   106,  1185,  3114,
     534,   559,  1986,   559,  2151,  2152,   532,   589,   864,  3115,
    3133,  1269,  2392,  1986,  3232,   559,  1208,  2235,   862,   685,
     559, -2099, -2099,   698,   559,   559,   559,   559,  1187,   559,
     559,  1019,  2876,   855,   862, -2100, -2100,  2257,  1917,   864,
     864,  2888,  3275,   731,  3052,  1986,  2904,  1353,  3397,  1186,
    3548,  3398,  3549,  3447,  1199,   864,  3398,  -714, -2102, -2102,
    1200,   972,  -714,   862,  3451,  1217,  1880,  3452,  1020,  1210,
     862,  2193,  3471,  2862,  3509,  3472,   855,  3510,  1221,  3570,
    3423,  3424,  1986,  3590,  1021,   539,  3398,  3605,  3273,  1225,
    1986,  1211,   855,  3230,  1360,  1022,  3633,  1999,  3634,  3472,
    1359,  3635,   862,  3427,  2000,   862,   871,  2001,  2002,  2003,
     862,  1881,  3647,  1213,   732,  1455, -2103, -2103, -2104, -2104,
     545,   855,   546,  3199, -2105, -2105,  2485,  1362,   855,  1023,
     532, -2106, -2106,  1363,  1586,  -714,  1369,  1882, -2107, -2107,
   -2109, -2109,   532, -2111, -2111,   548,  1367,   667,   549,  1370,
    2614,  1969,  1487,  3621,   538,   540, -2114, -2114,  1883,  1381,
     855,   532,  1884,   855,   972,  1384,  1269,  1383,   855,  2774,
    3061,  3062,  1390,  3273,  1394,  2775,    29,  1789,  1790,  1397,
    1024, -1379,  -765,  -765,  1885,  -714,  1398,  1886,  2776,  1432,
    1433,  1400,  1434,  1435,   733,   659,  -769,  -769,    29,   559,
     532,  2858,   723,  1401,   532,  1887,  3518,  3519,   532,  1413,
    1406,   871,  -768,  -768,  1201,    34,  1419,  2777,  1418,  2778,
     541,  2701,  2702,  1025,  1421,  1661,  1663,  3529,  1449,  1454,
    1981,  1452,   762,  1202,   764,    35,  3371,    34,  1457,   772,
    1458,   864,   773,  1460,  1478,   532,  3515,  1918,  1919,  1920,
    1481,  1921,  1922,  1923,  1924,  1925,  1926,  1484,    38,  1049,
    1527,  1514,  1422,  1423,  2948,  1532,   665,  3559,   667,   559,
    1536,  2912,  1529,  1537,    39,   542,  1539,  1590,  1540,  1553,
      38,   871,  1546,  1548,  1203,  1554,  1562,  1565,   667,   532,
    -913,  -920,  1563,  1570,   699,  -791,    39,  -792,    40,  1888,
     532,  -910,  -911,  1573,  -914,  1574,   871,  1889,  -912,   524,
    2779,  1578,   699,   543,  1591,  1970,   659,  2853,  1592,  1595,
      40,  1640,  1642,  1990,  3569,  1644,  1659,  1670,  1890,  1671,
    2472,  1675,  1676,  1681,   699,    84,   659,  1682,  1987,  1172,
    1718,   998,  1725,   734,  1424,  1425,  1743,  1720,  1174,  1988,
    1991,   544,   871,  1744,   532,  1891,  1601,  1745,   559,  1602,
    1750,  1752,  1756,  1603,  1353,  1353,  1353,  1018,  1751,  1763,
    1764,  1768,  1778,  1785,  1792,  1797,   864,  1793,  1799,  1809,
    2780,  1204,  1823,  1819,  1810,  2781,  3038,   665,  2484,   862,
    1824,  1822,  1826,  1611,  1828,  1829,  1835,  1837,  1844,  1846,
   -2115,   545,   723,   546,  1847,  1269,  1854,   665,  1855,  1858,
    1426,  1427,  1428,  1429,  1430,  1431,  1865,   532,  1432,  1433,
     547,  1859,  1160,  1860,   532,  1613,   548,  1861,  1870,   549,
     524,  2782,  1895,  1205,  1897,   532,   532,   532,   532,  1898,
     532,  1206,  1900,  1966,  1899,  1901,  1019,   855,  1948,  2783,
     524,   532,  1902,  1207,   532,  1904,  1907,  1937,  1929,   532,
    1938,  1945,  1973,  1994,  1602,  1366,  1982,  1771,  1979,  2023,
    3060,   532,  1372,  1375,  1377,  1379,  1380,  2020,  2025,  2026,
     871,  2086,  2028,  1020,  2027,  1208,  2051,  2062,  1385,   532,
     864,  2044,  1353,  2087,   972,  2065,  2063,  2088,  2422,  1021,
    2094,  3219,  2107,   532,   532,  2108,   532,   559,  2109,  2131,
    1022,   732,  2114,  2141,  2128,  2140,  2142,  2143,   871,  2144,
    2145,  2161,  2164,  2168,  2169,  2170,   733,   667,  2232, -2115,
    2236,  1434,  1435,   864,  2241,  2242,  2251,  2253,  1210,  2247,
    2254,   973,  2255,  1601,  1023,  2269,  1602,  2270, -2115,   864,
    1603,  2784,  2272, -2115,   532,   862,  2275,  2688,  2276,  2785,
    1211,   723,  2277,   532,   532,   532,  2279,  2284,  2307,  2280,
     532,  2285,  2316,  2324,   532,  2283,  1934,  1910,   864,  2286,
    1611,  2287,  1213,  2354,  2295,   864,  1933, -2115,  2296,   532,
    2361, -2115,   723,  2385,   871,  1024,  2362,  2004,  2005,  2006,
    2363,  2007,  2008,  2009,  2010,  2011,  2012,  2372,  2373,  2388,
    3495,  2399,  1613,   855,  2374,  2398,  2405,   864,  2407,  2406,
     864,   723,  2424,   540,  2408,   864,  2417,  2419,  2431,  2440,
    2445,  2457,  3279,  2466,  3281,  2473,  2441,  2443,  1025,   559,
    2444,  2478,  2480,  1978,  -771,   719,   665,  1622,  2491, -1379,
    1436,  1437,   532,   720,  2476,   532,  2495,  2110,   532,  1048,
     862,  2492,  1910,  2494,  2496,  2500,  1911,  2501,  2498,  1912,
    1913,  1914,  2504,  2538,  2523,  2525,   532,  2554,   532,  2544,
    2545,  2552,   532,   532,   532,  2432,   532,  2546,   541,   524,
    2553,  2555,  1504,  2565,  2566,  2562,  2569,  2571,  2581,  2589,
    2584,  2585,  2588,  2853,  2593,   532,  2598,   532,  2600,  2608,
    2617,  2609,  2628,  1353,  2625,  2635, -2115,  1353,  2856,  1353,
     532,   532,   532,   532,   532,   532,   532,   532,   532,   532,
     862,  2631,  2858,  2634,  2648, -2115,  2636,  2649,  2637,  2653,
   -2115,  2658,   871,   884,  2667,  3355, -2115,   559,   532,  2661,
    2674,   532,  2676,  1048,   532,   862,  1910,  2677,  2691,  2693,
    1911,  2680,  2698,  1912,  1913,  1914,  2712,   532,  1811,  2699,
    1813,  3412,  1814,  1815,   559,  2729,  2731,  2733, -2115,  2881,
     532,  2672,  2740,  2750,  3315,  2752,  2756,  2789,   855,   559,
     559,   559,   559,   559,   559,   559,   559,   559,   559,   532,
    2762,   862,  2769,  3454,  2763,  2873,  3450,  2905,  2805,  2884,
    2907,  2874,  2895,   855,  2903,  2875,   532,  2909,  2918,   544,
    2891,  2880,  2896,   532,   532,   532,   532,  2892,  3304,  2911,
    2924,  2945,  2235,  2919,  1622,   532,  2947,  3013,   871,  2950,
    2952,  2951,  2968,  2975,  3017,  2997,  3019,  3025,   532,  3026,
    3027,  3031,  3035, -2115,  3036,  3037,  1915,  3045,  3048,   855,
    1629,  1630,  1631,  1632,  1633,  1634,  3050,   667,  3051,   545,
    3055,   546,  3067,   532, -1329,   557, -2079, -2080,  1916,  3068,
     590,  3078,  1726, -2081,  3069,  1978, -2082, -2083,   547,   677,
    3081, -2084, -2085, -2086,   548,  1753, -2087,   549,   719,   719,
   -2088, -2089,   716,   716,   864,   719,   720,   720,  3086,  3077,
    2110,  2992, -2090,   720, -2091,   659,  1777,  2992,  3088, -2093,
   -2094, -2095, -2096,  3096,  3089,  3104,   532,  3106, -2097,   862,
    3107, -2098,   532, -2115, -2099, -2100, -2102, -2103,   532, -2104,
   -2105, -2106, -2107, -2108,   532, -2109,  3110, -2110,  1601, -2111,
    1917,  1602, -2112, -2113, -2114,  1603, -1330,   532,   532,  3116,
    3117,  3120,  3124,   748,  3122,   532,  3132,   862,  3128,  3153,
    3148,  3154,  1916,  3157,  3156,  3196,  3207,  3197,  3206,  3209,
    3222,  3221,   532,  3229,  3231,  1611,   665,   855,  3355,   525,
     533,  3237, -2115,  3238,   558,  3243,  3246,  3247,  3250,   558,
    3263,  3261,  3262,   669,  3276,   674,   674,   676,   558,   681,
    3487,  3277,   681,  3280,  3283,   702,   705,  1613,   705,  3284,
    3286,   558,   558,  3289,  3295,  2856,  3300,   559,  3303,   524,
    3163,  3312,  3316,  3328,  3330,  3348,  3350,  3044,  3364,  3366,
   -2115,  3360,  3383,   862,  1917,  3367,  3385,  1629,  1630,  1631,
    1632,  1633,  1634,  3370,  3391,  3392,  3393,  3399,  3402,  1801,
    1422,  1423,   532,  3404,  3406,  1818,  3409,  2971,  3411,  3415,
     864,  2988,  3422,  3429,  3436,  3444,   702,  3445,   532,  3453,
    3456,   705,   558,   705,   705,   705,   723,  3461,  3468,  3473,
    2681,   532,  3467,  3470,  3469,  3474,  1048,   972,  3476,  1910,
    3481,   855,  3482,  1911,  3491,  3513,  1912,  1913,  1914,  3093,
    3493,   871,  3483,  3525,  3502,  3505,  3531,  3514,  2858,  3534,
     553, -2115,  3536,  3539,  2962,  3542,  3557,   532,   871,  3532,
    3566,  3533,   673,   673,  3588,  3589,  3595,  3611,  3602,  3603,
   -2115,  3614,  1424,  1425,  3616, -2115,  3622,  3630,  3642,  3653,
    3648,  3058,  3629,   532,  2804,  3640,  2195,  1159,  2808,  1918,
    1919,  1920,  2521,  1921,  1922,  1923,  1924,  1925,  1926,  2104,
     561,  2561,  2611,  2878,  3111,   864,   982,  3465,  3584,  3217,
    3530,  3537,  3578, -2115,  1734,  3260,  2503,  2528,  3527,   871,
    2902,   862,  2773,  3535,  2809,  2499,  3526,   532,  1805,  2746,
    1422,  1423,  2894,  2570,  1862,  1840,  3395,  3201,  1426,  1427,
    1428,  1429,  1430,  1431,   755,  1872,  1432,  1433,  2745,  3486,
    3347,  3577,  3376,  3649,  3655,  3236,  3639,  3198,  3200,  3628,
     532,  3541,  1965,  3652,  3617,   991,  3567,  2990,  2727,  1622,
    2728,  3421,  3558,  3293,  3645,   864,  3626,  2999,  2456,  2856,
     532,   532,  3627,  1918,  1919,  1920,  1534,  1921,  1922,  1923,
    1924,  1925,  1926,   532,  1535,  2483,  1672,  2160,   719,   532,
     864,   532,  2639,  3494,   532,  2493,   720,  2137,  3405,   660,
    3244,  3282,  1424,  1425,   667,  2159,  2465,   862,  1009,   532,
    1545,  2390,  3234,  3235,   993,  2633,  2652,  2632,  1714,   559,
    1853,  1715,  3223,  3407,  3556,  1719,    80,  3408,  2415,  2486,
    2402,  1488,  1490,  2231,  1957,  1916,   864,  3012,  1494,   559,
     559,  1500,  1495,  2103,    80,  2396,   684,   658,   745,  1434,
    1435,     0,     0,     0,   719,     0,     0,     0, -2115,    80,
       0,     0,   720,   559,     0,   855,     0,   722,  1426,  1427,
    1428,  1429,  1430,  1431,     0,   532,  1432,  1433,     0,     0,
       0,     0,  2102,     0,  2105,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2117,   667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1917,     0,   532,
     737,  1353,     0,     0,     0,     0,     0,     0,     0,     0,
      80,     0,     0,   665,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2155,     0,   865,     0,   784,
       0,     0,   719,     0,     0,   719,     0,     0,   532,     0,
     720,     0,     0,   720,  3380,     0,     0,  3384,     0,     0,
       0,     0,     0,     0,   864, -2115,   524,     0,  1436,  1437,
       0,   881,  1629,  1630,  1631,  1632,  1633,  1634,     0,     0,
       0,  3387,     0,     0,     0,   532,     0,     0,  1438,  1434,
    1435,     0,     0,     0,     0,     0,     0,  3390,   719,   719,
       0,  3394,   864,     0,     0,     0,   720,   720,     0,     0,
       0,     0,     0,     0,  2240,     0,   665,     0,  2244,  2245,
    2246,     0,  1188,     0,  2248,     0,     0,     0,  1189,     0,
       0,     0,     0,     0,     0,     0,  1201,     0,     0,   705,
       0,   705,     0,     0,     0,     0,   705,     0,     0,   705,
     532,     0,     0,     0,     0,  1202,     0,     0,   558,   524,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   864,     0,
     862,     0,     0,     0,     0,     0, -1811,   532,   875,   558,
     558,     0,   667,     0,     0,     0,   716,   862,     0,     0,
       0,   532,   532,   532,     0,     0,  1203,     0,  1436,  1437,
       0,   532,     0,     0,     0,     0,  1918,  1919,  1920,   559,
    1921,  1922,  1923,  1924,  1925,  1926,     0,     0,     0,   981,
     533,   674,     0,     0,  1201,     0,  1190,     0,   855,     0,
       0,     0,     0,     0,   525,     0,     0,   867,   705,     0,
       0,     0,     0,  1202,  1353,  2856,     0,     0,   862,   669,
    1013,  1013,     0,     0,     0,  1013,  1031,     0,     0,     0,
       0,     0,   719,     0,   719,  2380,   532,   667,   532,  3523,
     720,     0,   720, -1811,  3540,     0,  3380,     0,     0,     0,
    1124,  1124,   681,   681,     0,   681,   865,     0,     0,     0,
       0,     0,  3538,  1204,  1203,   719,   719,     0,     0,   705,
       0,   665,     0,   720,   720,   558,   855,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   864,   532,     0,   705,
       0,     0,   705,     0,     0,     0,     0,     0, -1811,     0,
       0,   532,     0,     0,     0,     0,     0,     0,   532,     0,
       0,     0, -1811,     0,   524,  1205,   980, -1811,   673,     0,
       0,     0, -1811,  1206,     0,     0,     0,     0,   532,     0,
       0,     0,   705, -1811,  2797,  1207,   868,     0, -1811,   705,
     705,   705,   705,   705,     0,     0,     0,     0,     0,     0,
     719,   719,     0,     0,     0,   705,   665,  1191,   720,   720,
    1036,  1204,  3380,  3618,   719,   719,     0,  1208,     0, -1811,
       0,     0,   720,   720,     0,     0,   532,     0,     0,     0,
       0,  1129,   864,     0,     0,     0,     0, -1813,     0,     0,
   -1811,     0,     0,     0,   532,     0,     0,   719,     0,   524,
       0,     0,   532,     0,     0,   720,     0,     0,     0,  3644,
       0,   532,     0,  1205,  1209,   719,     0,     0,  1193,     0,
    1210,  1206,    80,   720,     0,     0,     0,  3654,     0,     0,
       0,     0,     0,  1207,  1048,     0,     0,  1910,     0,     0,
   -1811,  1911,  1211, -1811,  1912,  1913,  1914,     0,  1212, -1811,
       0,     0,   865,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2963,     0,  1213,  1208,   867,     0,     0,     0,
       0,   559,     0,     0,     0,     0,     0,     0,     0,    80,
     722,     0,     0,     0, -1813,     0,     0,     0, -1811,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   870,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1811,     0,     0,     0,     0,  2564,  1210,     0,
    1195,     0,     0,     0,     0,     0,     0,     0,   992,  2577,
    2579,     0,     0,  2583,     0,     0,     0,     0,     0, -1813,
    1211,     0,     0,  1006,  2591,     0,     0,  2594,     0,     0,
       0,     0,  2599, -1813,  1013,  1031,     0,     0, -1813,   705,
       0,     0,  1213, -1813,  1601,     0,     0,  1602,  1013,  1013,
     706,  1603,   558,     0, -1813,     0,     0,     0,   669, -1813,
       0,     0,     0,   669,     0,   722,     0,   737,     0,     0,
     558,     0,     0,     0,     0,   868,   716,     0, -1811,     0,
       0,  1611,     0,     0,     0,  1564,     0, -1811, -2115,     0,
   -1813,    80,     0,     0,   865,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1811,     0, -1811, -1811,
       0, -1813,     0,  1613,     0,     0,     0,     0,     0,  1601,
       0,     0,  1602,     0,     0,     0,  1603,     0,     0,     0,
       0,     0,   558,  1916,     0,   864,  2645,  2646,  2647,     0,
       0,     0,   867,     0,     0, -1811,     0,  1476, -1811, -1811,
   -1811,     0,   864,     0,     0,     0,  1611,     0,  1498,     0,
       0, -1813,     0, -2115, -1813,     0,     0,     0,     0,     0,
   -1813,     0,     0,     0,     0,     0,     0,  1664,     0,     0,
    1666,     0,     0,     0,     0,     0,  2684,     0,  1613,     0,
       0,     0,     0,     0,     0,   558,   558,     0,     0,     0,
       0,     0,     0,   705,     0,  1917,  1476,     0,     0, -1813,
       0,     0,     0,   864,     0,     0,     0, -2115,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   705,
    1737,     0,     0, -1813,     0,     0, -2115,     0,     0,     0,
     870, -2115,   705,     0,     0,     0,     0,     0,     0,  2753,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   705,
       0,  2685,   865,   705,  1596,     0,     0,  1780,     0,     0,
       0,   868,     0,  1599,     0,     0,     0,     0,     0, -2115,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1647,
       0,   706, -2115,   865,   865,     0,     0,     0,     0,     0,
    1657,     0,  1476,  1476,   867,     0,     0,     0,     0,   865,
       0, -2115,     0,     0,     0,     0, -2115,     0,     0, -1813,
       0,     0,     0,     0,  2887,     0,     0,  2890, -1813,     0,
       0,     0,     0,     0,     0,  1622,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    80,     0, -1813,  1048, -1813,
   -1813,  1910,     0,     0, -2115,  1911,     0,     0,  1912,  1913,
    1914,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3507,     0,  1867,     0,
    1868,     0,   658,     0,     0,     0, -1813,   658,     0, -1813,
   -1813, -1813,     0,     0,     0,     0,  2926,  2927,  2928,  2929,
       0,     0,  1796,     0,     0,     0,   705,     0,     0,     0,
    1622,     0,   705,     0,  1918,  1919,  1920,  1567,  1921,  1922,
    1923,  1924,  1925,  1926,  1834,     0,     0,     0,  1571,     0,
       0,     0,     0,   868, -2115,     0,   870,     0,     0,  1601,
       0,     0,  1602,     0,     0,     0,  1603,  1604,  1605,  1606,
    1607,  1608,     0,     0,  1584,  1851,     0,     0,     0,     0,
    1851,     0,     0,     0,     0,     0,     0,  1609,  1601,     0,
       0,  1602,   867,     0,     0,  1603,  1611,     0,     0,     0,
       0,     0,     0,  1612,     0,     0,     0,     0,     0,     0,
       0,   875,   875,     0,     0,   865,   558,   558,     0,   558,
     875,     0,     0,   867,   867,  1611,     0,     0,  1613, -2115,
       0,     0, -2115,     0,     0,     0,     0,     0,  1048,   867,
       0,  1910,     0,     0,     0,  1911,     0,     0,  1912,  1913,
    1914,     0,  1800,   737,   737,     0,   737,  1613,  3046,     0,
       0, -2115,     0,     0,     0,     0,  3508,     0,  1629,  1630,
    1631,  1632,  1633,  1634,     0,     0,   525,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1916,     0,  1013,
       0,  1954,     0,     0,   558,     0,  1124,  1124,     0,   705,
       0,   669,     0,     0,     0,     0,   669,     0,   669,     0,
     669,     0,   558,     0,     0,   558,     0,     0,   870,     0,
       0,   868,     0,     0,     0,     0,     0,     0,     0,     0,
    2966,     0,  1614,     0,     0,  2015, -2115,     0,     0,     0,
    2019,     0,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,
     865,  1615,   868,   868,     0,     0,  1616,     0,     0,  1917,
       0, -2115,     0,     0,     0,     0,     0,     0,   868,     0,
    1893,     0,  2167,     0,     0,   875,     0,     0,  1617,  1618,
   -2115,     0,  2176,     0,  2179, -2115,     0,  2190,     0,     0,
       0,     0,     0,  2194,  1619,  2196,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1124,  2203,     0,     0,
       0,     0,  2206,     0,     0,     0,  2211,  2212,  2213,  2214,
       0,  2218,  2219, -2115,     0,   867,     0,  2101,     0,   705,
       0,   705,     0,  1620,     0,     0,  1621,     0,     0,     0,
       0,     0,     0,   705,  2123,     0,     0,     0,     0,     0,
    1622,     0,     0,  1623,     0,     0,     0,  1916,     0,  1998,
   -1827,     0,     0,     0,   865,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1622,
       0,     0,   705,     0,     0,     0,   870,     0,     0,     0,
    1737,   558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   558,  2177,   558,  2181,     0,   558,   865,     0,     0,
       0,     0,   558,     0,   558,     0,     0,   870,   870,     0,
       0,     0,     0,   865,     0,   875,   558,     0,     0,  1917,
     875,   558,     0,   870,     0,   558,   558,   558,   558,     0,
     558,   558,     0,     0,     0,  2100,     0,    80,     0,  1624,
       0,     0,   865,     0,   868,     0,  2887, -1827,     0,   865,
     867,   705,  3245,     0,     0,   705,   705,   705,  1918,  1919,
    1920,   705,  1921,  1922,  1923,  1924,  1925,  1926, -2115,     0,
       0,     0,  3269,     0,     0,     0,  2265,     0,     0,     0,
       0,   865,     0,     0,   865,     0,     0,     0,     0,   865,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1827,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   658, -1827,     0,     0,     0,
     658, -1827,   658,     0,   658,     0, -1827,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1827,    80,     0,
       0,     0, -1827,     0,     0,     0,  1625,     0,     0,  1626,
    1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,
       0,     0,     0,     0,   867,     0,  1903,     0,     0,     0,
       0,     0,  3351, -1827,     0, -2115,     0,     0,     0,   868,
       0,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,     0,
       0,     0,  2052,     0, -1827,     0,     0,     0,     0,     0,
     558,     0,     0,     0,     0,     0,     0,   867,     0,   870,
       0,  3386,   705,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   867,     0,   669,     0,     0,  1918,  1919,
    1920,   558,  1921,  1922,  1923,  1924,  1925,  1926,     0,     0,
    1867,     0,     0,     0, -1827,     0,     0, -1827,     0,     0,
       0,     0,   867, -1827,     0,     0,     0,     0,  1476,   867,
       0,     0,  2318,     0,  1048,     0,     0,  3163,   737,     0,
     558,  3164,     0,     0,  2413,     0,     0,     0,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   867, -1827,   868,   867,     0,     0,     0,     0,   867,
       0,  3171,     0,  1048,     0,     0,  3163,     0, -2115,     0,
    3164,     0,     0,     0,     0,  2015, -1827,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3173,     0,     0,   868,     0,     0,     0,
    3171,     0,     0,     0,   870,     0,   669, -2115,     0,     0,
       0,  1188,   868,     0,     0,     0,     0,  1189,     0,   558,
       0,  1476,     0,     0,     0,  1201,   669,     0,   865,     0,
    2123,     0,  3173,     0,   706,     0,     0,     0,     0,     0,
       0,   868,     0,     0,  1202,     0,     0,     0,   868,  2580,
       0,     0,  2252,     0,     0,     0,     0,     0,     0,    80,
       0,     0, -1827,     0,     0,     0,  3428,     0,     0,     0,
       0, -1827,     0,     0,     0,     0,     0,     0,     0,     0,
     868,     0,     0,   868,  1796,     0,     0,     0,   868,     0,
   -1827,     0, -1827, -1827,     0,  1203,     0, -2115,     0,  3544,
       0,     0,     0,     0,     0,  3437,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2115,     0,   870,     0,
       0, -2115,     0,     0,     0,  1190,     0,     0,     0, -1827,
       0,     0, -1827, -1827, -1827,     0, -2115,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1796,     0,     0,
       0,     0,     0,     0,   705, -2115,     0,     0,     0, -2115,
   -2115,   870,     0,     0,  2887,  1796,   705,   705,   558,     0,
     705,     0,     0,     0,     0,     0,     0,   870,     0,     0,
       0,   705,     0,     0,   705,     0,     0,     0,     0,   705,
       0,  3604,  1204,     0,   865,     0,     0,     0, -2115,     0,
       0,  2606,     0,     0,     0,     0,   870,     0,     0,   658,
       0,     0,     0,   870,     0,  1917,     0,     0,     0,   875,
       0,     0,     0,     0,     0,     0,     0,  2533,     0,     0,
       0,     0,     0,  1796,  1796,     0,  1796,     0,   867,  2887,
       0,     0,     0,     0,  1205,   870,     0,     0,   870,     0,
       0,     0,  1206,   870,  1917,     0,     0,  3643,     0,     0,
       0,     0,     0,     0,  1207,   525,     0,     0,     0,     0,
       0,     0,  2559,     0,  3650,     0,     0,     0,     0,     0,
    2563,     0,     0,     0,  2638,     0,  1191,  1584,     0,  2754,
    2575,     0,     0,   705,   705,   705,  1208,     0,     0,   865,
     558,     0,     0,     0,   558,  2052,     0,     0,     0,     0,
       0,     0,     0,     0, -2115,     0,  2806,     0,     0,  2015,
       0,  2442,     0,     0,     0,     0,     0,     0,     0,     0,
     658,  2863,  2864,  2865,  2866,  2867,  2868,  2869,  2870,  2871,
    2872,     0,     0,  2197,     0,    80,     0,  1193,     0,  1210,
     658,  1476,    80, -2115,     0,  1201,  2615,     0,  2616,     0,
       0,     0,  2621,     0,  2624,     0,     0,   868,     0,   865,
       0,  1211,     0,     0,  1202,     0,     0,  2198,     0,     0,
       0,     0,  2739,     0,     0,  2742,     0,     0,  2123,     0,
       0,     0,     0,  1213,   865,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   867,     0,   705,     0,   558,     0,
       0,     0,  1796,  1737,  1796,     0,  1834,     0,     0,     0,
       0, -2115,     0,     0,     0,  1203,  2795,     0,  3189,  3190,
    3191,  3192,  3193,  3194,  2796,   558,     0,  2807,  1105,  1105,
     865,     0,     0,     0,     0,     0,     0,     0,     0,  1195,
     558,   558,   558,   558,   558,   558,   558,   558,   558,   558,
   -2115,     0,     0,     0,     0,     0,     0,  3189,  3190,  3191,
    3192,  3193,  3194,     0,     0,     0,     0,     0,  2265,     0,
       0,   705,     0,     0,   705,     0,     0,   722,     0,     0,
       0,     0,     0,     0,     0,  2797,     0,  1737,     0,     0,
       0,     0,     0,     0,     0,     0,  1271,  1276,     0,   867,
    1834,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1204,     0,     0,     0,     0,  1601,     0,  1796,
    1602,     0,   870,   868,  1603,     0,     0, -2115, -2115, -2115,
       0,     0,     0,     0,     0,     0,   558,     0,     0,     0,
       0,     0,     0,   705,   705,   705,   705,     0,     0,     0,
       0,     0,     0,     0,  1611,   875,     0,     0,   865,  3039,
       0,  1612,     0,     0,  1205,  2860,     0,     0,  2953,   867,
       0,     0,  1206,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1207,     0,  1613,  2798,     0,     0,
    2559,  2879,     0,  2973,   867,   669,   865,     0,     0,     0,
       0,     0,     0,     0,     0,  1600,     0,     0,     0,     0,
    1601,     0,     0,  1602,     0,     0,  1208,  1603,  1604,  1605,
    1606,  1607,  1608,     0,     0,     0,     0,     0,   868,     0,
       0,     0,     0,  1124,     0,     0,  1584,     0,  1609,     0,
     867,     0,  1610,     0,     0,     0,  2123,  1611,     0,     0,
       0,     0,  2015,     0,  1612,     0,     0,     0,  1737,     0,
       0,     0,     0,  1048,  1796,     0,  3163,  1584,     0,  1210,
    3164,     0,   865, -2115, -2115, -2115,     0,   875,   558,  1613,
       0,     0,     0,     0,     0,   705,     0,     0,   870,     0,
    1614,  1211,     0,     0,  1601,     0,   722,  1602,   868,     0,
    3171,  1603,  3059,     0,     0,     0,     0,  3172,     0,  1615,
       0,     0,     0,  1213,  1616,  2799,     0,     0,  2800,     0,
       0,     0,     0,   868,  1482,     0,     0,  2977,     0,     0,
       0,  1611,  3173,     0,     0,     0,  1503,     0, -2115,  1505,
       0,  1510,  1515,  1518,  1523,  1526,     0,     0,     0,     0,
       0,     0,  1619,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1613,     0,     0,     0,     0,   867,   868,
       0,     0,     0,     0,     0,     0,     0,     0,  1271,     0,
       0,     0,  1796,  1614,     0,     0,     0,     0,     0,  1048,
       0,    80,  1910,   870,     0,  1568,  1911,     0,  2265,  1912,
    1913,  1914,  1615,     0,     0,     0,   867,  1616,  1622,     0,
       0,  3109,  1572,     0,     0,     0,     0,  3572,     0,    80,
     865,     0,    80,  1575,  1576,  1577,  1745,  1581,  1585,  1617,
    1618,  3220,     0,     0,     0,     0,  3175,     0,     0,     0,
       0,     0,     0,     0,     0,  1619,     0,  3127,     0,     0,
       0,  3227,  3228,     0,  1643,  3176,     0,     0,     0,     0,
    3177,     0,     0,   870,     0,     0,     0, -2115,     0,     0,
       0,     0,     0,  3139,     0,  3248,     0,     0,     0,     0,
       0,     0,   867,     0,  1620,     0, -2115,  1621,   870,     0,
       0, -2115,     0,     0,     0,     0,     0,   868,  3180,     0,
       0,  1622,     0,     0,  1623,     0,     0,  1624,     0,  1689,
       0,     0,     0,  1705,  1710,  1711,   865,  2739,     0,   658,
       0,  3090,     0,     0,     0,     0,     0,     0,     0, -2115,
       0,     0,     0,     0,   870,   868,     0,     0,     0,     0,
       0,     0,     0,     0,  1476,     0,     0,     0,     0,     0,
     558,     0,     0,     0,  1917,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1271,     0,
     558,   558,     0,     0,     0,     0,     0,     0,     0,     0,
    1271,     0,     0,   705,     0,  1622,     0,     0,     0,   705,
       0,  1737,     0,     0,   558,     0,     0,     0,     0,     0,
    1624,     0,     0,     0,  3141,  1271,     0,     0,  1916,   705,
       0,   868,  3274,     0,  1625,     0,     0, -2115, -2115, -2115,
       0,  1629,  1630,  1631,  1632,  1633,  1634,     0,     0,     0,
     867,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3184,     0,     0,     0,     0,     0,     0,
       0,     0,   870,     0,     0,     0,  1048,     0,     0,  1910,
       0,     0,     0,  1911,     0,   875,  1912,  1913,  1914,     0,
    1917,     0,     0,     0, -2115,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3573,     0,  2860,     0,     0,  1124,
     870,     0,     0,     0,     0,  3274,     0,  1625,     0,   705,
    1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,
       0,    80,     0,     0,     0,     0,   867,     0,     0,     0,
       0,  3446,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   705,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   868,
    3185,  1584,     0, -2115, -2115, -2115,     0,  3189,  3190,  3191,
    3192,  3193,  3194,     0,     0,     0,   870,     0,     0,     0,
       0,     0,     0,     0,     0,  3127,     0,     0,     0,   865,
       0, -2115,     0,     0,     0,     0,     0,     0,  1629,  1630,
    1631,  1632,  1633,  1634,     0,     0,   865,     0,  1048,     0,
       0,  3163,     0,     0,     0,  3164,     0,     0,  1124,     0,
       0,     0,     0,     0,  1896,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
      80,     0,     0,     0,     0,  3171,     0,     0,  1510,  1510,
     558,     0, -2115,  1510,     0,   868,     0,     0,     0,  1523,
    3372,  1523,  1523,     0,     0,     0,     0,   865,     0,     0,
       0,     0,     0,     0,  1105,  1105,     0,  3173,     0,     0,
       0,     0,     0,     0,     0,  1916,     0,  1737,     0,  1918,
    1919,  1920,     0,  1921,  1922,  1923,  1924,  1925,  1926,     0,
    3274,   875,   875,   875,    80,    80,     0,     0,     0,     0,
       0,  1954,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   870,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1511,     0,     0,  2030,     0,     0,
       0,     0,     0,  2034,  2035,  2036,  2037,  2038,  2039,  2040,
    3517,     0,     0,     0,  2049,  2050,     0,  1917,     0,  2061,
       0,     0,     0,  2064,     0,     0,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2079,  2080,     0,   705,  2081,  1737,     0,
       0, -2115,     0,     0,  1105,  3274,  1271,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   867,
   -2115,     0,     0,  2052,     0, -2115,     0,     0,     0,     0,
    2106,     0,  1124,     0,     0,     0,   867,     0,     0,     0,
     870,     0,     0,     0,     0,     0,     0,  2123,     0,     0,
    3159,  3160,  3161,  3162,     0,     0,  2139,     0,     0,     0,
       0,   705,     0, -2115,     0,     0,  1576,  1577,   875,     0,
    1048,     0,     0,  1910,     0,     0,     0,  1911,     0,     0,
    1912,  1913,  1914,     0,     0,     0,     0,     0,   705,     0,
       0,     0,     0,    80,     0,     0,     0,   867,     0,     0,
       0,     0,  2860,     0,     0,     0,     0,     0,     0,    80,
       0,     0,     0,    80,     0,     0,     0,     0,     0,  1917,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   705,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1271,     0,   868,  2228,
    2229,     0,  2230,     0,   705,     0,     0,     0,     0,     0,
       0,     0,   558,     0,     0,   868,     0,     0,     0,     0,
       0,   705,     0,     0,     0,     0,     0,     0,     0,  2052,
       0,  3600,     0,     0,     0,     0,  1918,  1919,  1920,  1271,
    1921,  1922,  1923,  1924,  1925,  1926,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3305,
    3306,  3307,  3308,  3309,  3310,  3311,     0,     0, -2115,     0,
    3317,  3318,     0,     0,     0,  3327,   868,     0,  3329,     0,
       0,  3336,  3337,  3338,  3339,  3340,  3341,  3342,  3343,  3344,
    3345,  1475,     0,     0,     0,     0,     0,     0,     0,     0,
    1485,  1486,     0,     0,     0,     0,     0,  1501,  1502,     0,
    2329,     0,     0,  2330,     0,  2331,     0,     0,  1512,     0,
       0,     0,  1510,  1510,  1510,  1510,  1510,     0,     0,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1916,
       0,    80,     0,  2356,  2357,     0,     0,  2106,     0,     0,
    1475,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,   870,    80,  1602,     0,     0,     0,  1603,
       0,     0,  1606,  1607,  1608, -2115,  2384,     0,     0,  2387,
     870,     0,  3189,  3190,  3191,  3192,  3193,  3194,     0,     0,
    3416,     0,     0,     0,  1271,     0,     0,     0,     0,  1611,
       0,     0,     0,     0,  2400,     0,  1612,     0,     0,     0,
       0,  1917,     0,     0,     0,     0,     0,  1598,     0,     0,
       0,     0,     0,  1637,     0,  3438,     0,  3441,     0,  3443,
    2411,  1613,     0,     0,     0,  2414,     0,     0,  2416,     0,
       0,   870,  1048,     0,  1475,  1910,  1475,  1475,     0,  1911,
       0,     0,  1912,  1913,  1914,     0,     0,  1510,  1510,     0,
       0,     0,  1601,     0,     0,  1602,  1637,     0,     0,  1603,
    1604,  1605,  1606,  1607,  1608,  2434,     0,     0,  2437,     0,
    2439,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1609,     0,     0,     0,  2666,     0,     0,  1601,     0,  1611,
    1602,     0,     0,     0,  1603,     0,  1612,  1606,  1607,  1608,
    3499,  1511,  1511,     0,     0,  1475,  1511,  3506,  1475,  1475,
       0,     0,     0,  3511,  3512,  1609,     0,     0,     0,     0,
       0,  1613,  3516,     0,  1611,  1614,     0,     0,  1689,  3522,
       0,  1612,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1615,  1710,  2079,     0,     0,  1616,
       0,     0,     0,     0,     0,     0,  1613,     0,     0,     0,
       0,     0,     0,     0,  2497,     0,     0,     0,     0,     0,
       0,  1617,  1618,     0,     0,     0,     0,     0,     0,  1637,
       0,     0,     0,     0,  1637,     0,     0,  1619,     0,     0,
       0,     0,  3564,  3565,     0,     0,     0,     0,  3568,     0,
       0,     0,  3571,     0,     0,  3574,  3575,     0,     0,     0,
    1918,  1919,  1920,     0,  1921,  1922,  1923,  1924,  1925,  1926,
       0,     0,     0,  1271,     0,  1614,  1620,     0,     0,  1621,
       0,     0,     0,     0,     0,     0,  2092,     0,     0,     0,
       0,     0,     0,  1622,  1615,     0,     0,     0,     0,  1616,
       0,  1916,     0,     0,     0,     0,     0,  3606,  3607,     0,
    1614,  3608,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1617,  1618,     0,     0,  2597,     0,     0,     0,  1615,
       0,     0,     0,     0,  1616,     0,     0,  1619,     0,  1511,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1839,     0,     0,     0,     0,  1617,  1618,     0,     0,
       0,     0,  1848,     0,  1849,     0,     0,     0,     0,     0,
       0,     0,  1619,  1917,  1856,     0,  1620,     0,     0,  1621,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1857,  1624,  1622,     0,     0,  1623,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1620,     0,     0,  1621,     0,     0,     0,     0,     0,
    1874,  1876,     0,     0,     0,     0,     0,     0,  1622,     0,
       0,  1623,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2657,     0,     0,     0,     0,     0,     0,     0,     0,
    2662,  1637,     0,  1637,     0,  1512,  1512,  1927,     0,  2670,
    1512,     0,  2673,  1637,  2675,     0,  1637,     0,     0,     0,
       0,  1637,  2679,     0,  1637,     0,  1510,  1510,     0,     0,
    2686,  2687,  1624,     0,  2690,     0,     0,     0,     0,  1625,
       0,     0,  1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,
    1633,  1634,     0,     0,     0,     0,  2730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1637,  1624,  2747,     0,
    1637,     0,     0,  1637,  1637,  1637,     0,     0,     0,  1637,
       0,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1511,  1511,  1511,  1511,  1511,
       0,     0,  1511,  1511,  1511,  1511,  1511,  1511,  1511,  1511,
    1511,  1511,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1918,  1919,  1920,     0,  1921,  1922,  1923,  1924,
    1925,  1926,     0,     0,     0,     0,     0,     0,     0,  1625,
       0,  1637,  1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,
    1633,  1634,     0,     0,     0,     0,  2024,     0,     0,     0,
    1601,     0,     0,  1602,     0,     0,     0,  1603,  1604,  1605,
    1606,  1607,  1608,     0,  1625,     0,     0,  1626,  1627,  1628,
       0,  1629,  1630,  1631,  1632,  1633,  1634,  1637,  1609,     0,
       0,     0,     0,     0,     0,     0,     0,  1611,     0,  2149,
    2149,     0,     0,  1637,  1612,     0,     0,     0,  1637,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1613,
    1511,  1511,     0,  1048,     0,     0,  1910,     0,  2943,  2944,
    1911,     0,     0,  1912,  1913,  1914,  2949,     0,     0,     0,
    1475,     0,     0,     0,     0,     0,     0,  2954,  2955,     0,
    1475,  2956,  2957,  1475,     0,     0,  2958,     0,     0,     0,
       0,  2961,     0,     0,  2964,  2965,     0,     0,     0,  2969,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1602,     0,     0,     0,  1603,  1604,
    1605,  1606,  1607,  1608,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
    3010,  1105,     0,     0,     0,     0,     0,     0,  1611,     0,
       0,     0,     0,  1614,     0,  1612,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2292,  2294,     0,
       0,     0,  1615,     0,     0,     0,     0,  1616,     0,  3034,
    1613,     0,     0,     0,     0,     0,     0,     0,  1510,     0,
       0,     0,  1475,     0,     0,     0,     0,     0,     0,  1617,
    1618,     0,     0,     0,     0,     0,  3053,     0,     0,     0,
       0,     0,     0,     0,  1637,  1619,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1927,  1927,     0,  1512,
    1512,  1512,  1512,  1512,     0,     0,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1927,     0,     0,     0,
       0,     0,     0,     0,  1620,     0,     0,  1621,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1622, -2115,     0,  1623,     0,     0,     0,     0,     0,
       0,     0,  1048,     0,  1614,  3163,     0,     0,     0,  3164,
       0,     0,     0,     0,  3080,  1475,     0,     0,     0,     0,
       0,     0,     0,  1615,     0,     0,     0,     0,  1616,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3171,
       0,     0,     0,     0,     0,     0, -2115,     0,     0,  1510,
    1617,  1618,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1917,  1585,  1619,     0,  1637,     0,
       0,  3173,  1637,  1637,  1637,  1637,  1637,  1637,  1637,     0,
       0,  2411,     0,     0,  1512,  1512,     0,  1637,  1637,     0,
    1624,     0,  3134,  3135,     0,     0,  3136,     0,     0,  1637,
       0,     0,  1637,     0,     0,  1620,     0,     0,  1621,     0,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
       0,     0,  1622,     0,     0,  1623,     0,     0,     0,     0,
       0,     0,  2453,     0,     0,     0,  3010,  3010,  3010,  3010,
       0,     0,     0,     0,  1637,     0,     0,     0,     0,  3205,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1511,
    1511,     0,     0,     0,     0,     0,     0,  3215,  2489,  2489,
       0,     0,     0,     0,     0, -2115,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2115,     0,     0,  1625,     0, -2115,
    1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,
       0,     0,     0,     0,  2024,     0,     0,     0,     0,     0,
       0,  1624,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3268, -2115,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2943,     0,     0,     0,  3285,     0,
       0,     0,  3288,     0,     0,     0,  1637,  1637,  1637,     0,
       0,     0,     0,  1918,  1919,  1920,     0,  1921,  1922,  1923,
    1924,  1925,  1926,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1917,     0,  3010,  3010,  3010,  3010,  3010,
    3010,  3010,     0,     0,     0,     0,  3010,  3010,     0,     0,
       0,  3010,     0,     0,  3010,     0,  2602,  3010,  3010,  3010,
    3010,  3010,  3010,  3010,  3010,  3010,  3010,  1105,  1625,     0,
       0,  1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,
    1634,     0,     0,     0,  3362,  2328,     0,     0,     0,     0,
       0,     0,  1511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1637,  1637,  1637,
       0,     0,  1927,  1927,  1927,  1927,  1927,     0,     0,     0,
    1927,  1927,  1927,  1927,  1927,  1927,  1927,  1927,  1927,  1927,
       0,     0, -2115,     0,  1637,  1637,     0,     0,     0,     0,
    3396,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2943,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1637,     0,     0,  1637,  3010,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1637,     0,
       0,     0,     0,     0,  1510,  1510,  1105,     0,     0,  1637,
       0,     0,  1637,  3011,  1637,     0,     0,     0,  1927,  1927,
       0,  3010,     0,  3010,     0,  3010,     0,     0,     0,     0,
       0,     0,  1637,  1512,  1512,  1637,     0,  1637,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3466,     0, -2115,
       0,  1511,     0,     0,     0,     0,  3189,  3190,  3191,  3192,
    3193,  3194,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3010,     0,     0,     0,
       0,     0,     0,  3010,     0,     0,     0,     0,     0,  3010,
    3010,     0,     0,     0,     0,     0,     0,     0,  3010,  1475,
    1510,  1510,     0,     0,     0,  3010,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3553,  3553,     0,     0,
       0,  1510,     0,     0,     0,  1637,     0,     0,  3010,  3010,
    1105,     0,  1511,     0,  3010,     0,     0,     0,  3010,     0,
       0,  3010,  3010,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,     0,     0,     0,     0,
    1637,     0,     0,  3010,  3010,     0,     0,  3010,  1637,     0,
       0,  1637,     0,  1637,     0,     0,     0,  1637,     0,     0,
    1927,  1927,     0,     0,  1637,  1637,     0,     0,  1637,  3011,
    3011,  3011,  3011,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1601,     0,  3553,  1602,     0,     0,     0,  1603,  1604,  1605,
    1606,  1607,  1608,     0,     0,     0,  1048,     0,  1637,  3163,
       0,     0,     0,  3164,     0,     0,     0,     0,  1609,     0,
       0,     0,     0,     0,     0,  1637,  1048,  1611,     0,  3163,
       0,     0,     0,  3164,  1612,     0,     0,     0,     0,     0,
       0,     0,     0,  3171,     0,     0,     0,     0,     0,     0,
   -2115,     0,     0,     0,     0,  1512,     0,     0,     0,  1613,
       0,     0,     0,  3171,     0,     0,     0,  1475,     0,     0,
   -2115,     0,  1475,  1601,     0,  3173,  1602,     0,     0,     0,
    1603,  1604,  1605,  1606,  1607,  1608,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3173,     0,     0,     0,     0,
       0,  1609,     0,     0,     0,     0,  2124,     0,     0,     0,
    1611,     0,     0,     0,     0,     0,     0,  1612,     0,     0,
       0,     0,     0,     0,  1874,  1876,     0,     0,  3011,  3011,
    3011,  3011,  3011,  3011,  3011,     0,     0,     0,     0,  3011,
    3011,     0,  1613,     0,  3011,     0,     0,  3011,  3520,     0,
    3011,  3011,  3011,  3011,  3011,  3011,  3011,  3011,  3011,  3011,
    3346,     0,     0,  1614,  1601,     0,     0,  1602,  3521,     0,
       0,  1603,     0,     0,  1606,  1607,  1608,     0,     0, -2115,
       0,     0,  1615,     0,     0,     0,     0,  1616,     0,     0,
       0,     0,     0,  2125,     0,  1927,  1512,     0, -2115, -2115,
       0,  1611,     0, -2115,     0,     0,     0,     0,  1612,  1617,
    1618,     0,     0,     0,     0,     0,     0,     0, -2115,     0,
       0,  1637,  1637, -2115,     0,  1619,     0,  1637,     0,     0,
       0,     0,  1637,  1613,  1637,  1637,  1637,     0,     0,  1637,
       0, -2115,  1637,  1637,     0,     0,  1614,  1637,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3011,
       0, -2115,     0,     0,  1620,  1615,     0,  1621,     0,     0,
    1616,     0,     0,     0,     0,     0,     0,  1511,  1511,     0,
       0,  1622,     0,     0,  1623,     0,     0,  3195,     0,     0,
       0,     0,  1617,  1618,  3011,     0,  3011,  1917,  3011,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1619,     0,
       0,     0,  1637,     0,     0,     0,     0,  1917,  1927,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1874,
    1876,  1637,     0,     0,     0,     0,     0,  1614,     0,     0,
    1475,     0,     0,     0,     0,     0,     0,  1620,     0,     0,
    1621,     0,     0,     0,     0,     0,  1615,     0,  1637,     0,
       0,  1616,     0,     0,  1622,     0,     0,  1623,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3011,
    1624,     0,     0, -2115, -2115,     0,  3011,     0,     0,     0,
    1927,     0,  3011,  3011,     0,     0, -2115,     0,     0,  1619,
       0,  3011,     0,  1511,  1511,     0,     0,     0,  3011,     0,
       0,     0,  1637,  1637,  1637,     0, -2115,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3195,  3195,  3195,
    3195, -2115,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1622,     0,     0,     0,     0,
       0,     0,     0,  1624,  1511,     0,     0,     0,     0,     0,
       0,  3011,  3011,     0,     0,     0,     0,  3011,     0,     0,
       0,  3011,     0,  1637,  3011,  3011,     0,  1625,     0,     0,
    1626,  1627,  1628,  1637,  1629,  1630,  1631,  1632,  1633,  1634,
       0,     0,     0, -2115,  2418,     0,     0,     0,     0,     0,
    3189,  3190,  3191,  3192,  3193,  3194,     0,     0,     0,     0,
       0,     0,     0, -2115,     0,     0,  2129,     0,     0,     0,
    3189,  3190,  3191,  3192,  3193,  3194,  3011,  3011,     0,     0,
    3011,     0,     0,     0,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,     0,  1624,     0,     0,     0,     0,     0,
       0,     0,     0,  1637,     0,     0,  1637,     0,     0,     0,
    1625,     0,     0,  1626,  1627,  1628,     0,  1629,  1630,  1631,
    1632,  1633,  1634,  3195,  3195,  3195,  3195,  3195,  3195,  3195,
       0,  1512,  1512,     0,     0,  3195,  3195,     0,     0,     0,
       0,     0,     0,     0,     0,  3195,     0,  3195,     0,     0,
       0,     0,     0,     0,  3195,  3195,  3195,  3195,  3195,  3195,
    3195,  3195,  3195,  3195,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1625,     0,     0,  1626,  1627,  1628,     0,  1629,  1630,
    1631,  1632,  1633,  1634,  1637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3195,     0,     0,     0,     0,     0,
       0,  1927,  1927,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3195,  1512,  1512,  3195,
       0,  3195,     0,     0,     0,     0,  1475,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3195,  1512,     0,
       0,     0,     0,     0,  3195,     0,     0,     0,     0,  3195,
    3195,     0,     0,     0,  3195,     0,  1927,  1927,     0,     0,
    3195,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1637,     0,     0,     0,     0,     0,  1927,     0,     0,
       0,     0,  3195,  3195,     0,     0,  3195,     0,     0,  3195,
       0,     0,  3195,  3195,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   107,
    1045,   538,  1046,  1047,  1048,  1049,  1050,     0,     0,     0,
       0,     0,     0,     0,  3195,  3195,  3195,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1051,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1052,
     132,  1053,  1054,     0,   135,   136,   137,   138,   139,   140,
    1055,   630,   141,   142,  1056,  1057,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1058,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1059,  1060,   186,  1061,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1062,   218,   219,   220,   221,   222,   640,
    1063,   224,     0,   225,   226,  1064,   228,     0,   229,     0,
     230,   231,    21,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1065,  1066,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1067,  1068,     0,
    1069,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1070,   317,  1071,   319,   320,   321,   322,   323,  1072,   324,
     325,   326,   327,  1073,   645,   329,  1074,   331,   332,   333,
       0,   334,   335,     0,     0,  1075,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1076,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1077,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    29,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1078,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
      34,   451,   452,   453,   454,   455,   456,   457,     0,  1079,
    1080,     0,   460,     0,   461,   462,   652,   464,   653,  1081,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   656,  1082,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,    39,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1083,     0,    40,     0,     0,     0,     0,  1084,  1085,
       0,     0,     0,     0,     0,  1087,     0,  1088,  3123,     0,
       0,     0,     0,  1089,  1090,     0,     0,     0,     0,  1091,
    1092,  1227,  1045,   538,  1046,  1047,  1048,  1049,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,  1228,   117,
     118,   119,     0,     0,     0,     0,   120,  1051,     0,     0,
     121,   122,     0,   123,   124,   125,  1229,   127,   128,   129,
     130,  1052,  1230,  1053,  1054,     0,   135,   136,   137,   138,
     139,   140,  1055,   630,   141,   142,  1056,  1057,   145,     0,
     146,   147,   148,   149,   631,     0,  1231,     0,  1232,   153,
     154,   155,   156,   157,  1233,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,  1234,   169,   170,   171,
    1235,  1236,  1237,  1238,   637,   638,  1239,   177,   178,   179,
     180,   181,   182,   183,  1059,  1060,   186,  1061,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,  1240,     0,   200,   201,   814,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1062,   218,   219,   220,   221,
     222,   640,  1063,   224,     0,   225,   226,  1064,   228,     0,
     229,     0,   230,  1241,     0,  1242,   233,   234,  1243,  1244,
     237,     0,   238,   239,     0,     0,  1065,  1066,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,  1245,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,  1246,   264,   265,   266,   267,   268,   269,  1067,
    1068,     0,  1069,     0,   273,  1247,  1248,   276,  1249,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,  1250,
     287,  1251,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,  1252,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1070,  1253,  1071,   319,   320,   321,   322,   323,
    1072,   324,   325,  1254,   327,  1073,   645,   329,  1074,   331,
     332,   333,     0,   334,   335,     0,     0,  1075,   337,   338,
       0,     0,   339,   340,  1255,   342,  1256,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,  1257,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1076,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,  1258,   400,   401,
     402,  1077,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,  1259,
     421,   422,   423,   424,   425,   426,  1260,   428,   429,  1078,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,  1261,   446,   651,   448,     0,
     449,   450,     0,   451,  1262,   453,   454,   455,   456,   457,
       0,  1079,  1080,     0,   460,     0,   461,   462,   652,   464,
     653,  1081,   466,   467,  1263,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,  1264,     0,
     481,   482,   483,   484,   485,   486,  1082,  1265,   488,  1266,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1083,     0,     0,     0,     0,     0,     0,
    1084,  1085,  1267,     0,     0,     0,     0,  1087,     0,  1088,
    1268,     0,     0,     0,     0,  1089,  1090,     0,     0,     0,
       0,  1091,  1092,   107,  1045,   538,  1046,  1047,  1048,  1049,
    1050,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1051,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1052,   132,  1053,  1054,     0,   135,   136,
     137,   138,   139,   140,  1055,   630,   141,   142,  1056,  1057,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1058,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1059,  1060,   186,  1061,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   814,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1062,   218,   219,
     220,   221,   222,   640,  1063,   224,     0,   225,   226,  1064,
     228,     0,   229,     0,   230,   231,    21,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1065,  1066,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1067,  1068,     0,  1069,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1070,   317,  1071,   319,   320,   321,
     322,   323,  1072,   324,   325,   326,   327,  1073,   645,   329,
    1074,   331,   332,   333,     0,   334,   335,     0,     0,  1075,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1076,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1077,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    29,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1078,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,    34,   451,   452,   453,   454,   455,
     456,   457,     0,  1079,  1080,     0,   460,     0,   461,   462,
     652,   464,   653,  1081,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   656,  1082,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,    39,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1083,     0,    40,     0,     0,
       0,     0,  1084,  1085,     0,     0,     0,     0,     0,  1087,
       0,  1088,     0,     0,     0,     0,     0,  1089,  1090,     0,
       0,     0,     0,  1091,  1092,   107,  1045,   538,  1046,  1047,
    1048,  1049,  1050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1051,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1052,   132,  1053,  1054,  1519,
     135,   136,   137,   138,   139,   140,  1055,   630,   141,   142,
    1056,  1057,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1058,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1059,  1060,
     186,  1061,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   814,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1062,
     218,   219,   220,   221,   222,   640,  1063,   224,     0,   225,
     226,  1064,   228,     0,   229,     0,   230,   231,  1520,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1065,  1066,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1067,  1068,     0,  1069,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,  1521,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1070,   317,  1071,   319,
     320,   321,   322,   323,  1072,   324,   325,   326,   327,  1073,
     645,   329,  1074,   331,   332,   333,     0,   334,   335,     0,
       0,  1075,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1076,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1077,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1078,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1079,  1080,     0,   460,  1522,
     461,   462,   652,   464,   653,  1081,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1082,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1083,     0,     0,
       0,     0,     0,     0,  1084,  1085,     0,     0,     0,     0,
       0,  1087,     0,  1088,     0,     0,     0,     0,     0,  1089,
    1090,     0,     0,     0,     0,  1091,  1092,   107,  1045,   538,
    1046,  1047,  1048,  1049,  1050,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116, -1185,   117,   118,   119,     0,     0,
       0, -1185,   120,  1051,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1052,   132,  1053,
    1054,     0,   135,   136,   137,   138,   139,   140,  1055,   630,
     141,   142,  1056,  1057,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1058,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1059,  1060,   186,  1061,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   814,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1062,   218,   219,   220,   221,   222,   640,  1063,   224,
       0,   225,   226,  1064,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1065,  1066,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1067,  1068,     0,  1069,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1070,   317,
    1071,   319,   320,   321,   322,   323,  1072,   324,   325,   326,
     327,  1073,   645,   329,  1074,   331,   332,   333,     0,   334,
     335,     0,     0,  1075,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1076,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1077,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1078,   431, -1185,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1079,  1080,     0,
     460,     0,   461,   462,   652,   464,   653,  1081,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1082,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1083,
       0,     0,     0,     0,     0,     0,  1084,  1085,     0,     0,
       0,     0,     0,  1087,     0,  1088,     0,     0,     0,     0,
       0,  1089,  1090,     0,     0,     0,     0,  1091,  1092,   107,
    1045,   538,  1046,  1047,  1048,  1049,  1050,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,  1685,   117,   118,   119,
       0,     0,     0,     0,   120,  1051,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1052,
     132,  1053,  1054,     0,   135,   136,   137,   138,   139,   140,
    1055,   630,   141,   142,  1056,  1057,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1058,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1059,  1060,   186,  1061,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1062,   218,   219,   220,   221,   222,   640,
    1063,   224,     0,   225,   226,  1064,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1065,  1066,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1067,  1068,     0,
    1069,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1070,   317,  1071,   319,   320,   321,   322,   323,  1072,   324,
     325,   326,   327,  1073,   645,   329,  1074,   331,   332,   333,
       0,   334,   335,     0,     0,  1075,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1076,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1077,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1078,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1079,
    1080,     0,   460,     0,   461,   462,   652,   464,   653,  1081,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1082,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1083,     0,     0,     0,     0,     0,     0,  1084,  1085,
    1686,     0,     0,     0,     0,  1087,     0,  1088,     0,     0,
       0,     0,     0,  1089,  1090,     0,     0,     0,     0,  1091,
    1092,   107,  1045,   538,  1046,  1047,  1048,  1049,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,  2930,   117,
     118,   119,     0,     0,     0,     0,   120,  1051,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1052,   132,  1053,  1054,     0,   135,   136,   137,   138,
     139,   140,  1055,   630,   141,   142,  1056,  1057,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,  1058,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,  2931,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1059,  1060,   186,  1061,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   814,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1062,   218,   219,   220,   221,
     222,   640,  1063,   224,     0,   225,   226,  1064,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  2932,  1066,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1067,
    1068,     0,  1069,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1070,   317,  1071,   319,   320,   321,   322,   323,
    1072,   324,   325,   326,   327,  1073,   645,   329,  1074,   331,
     332,   333,     0,   334,   335,     0,     0,  1075,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1076,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
    2933,  1077,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1078,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,     0,   451,   452,   453,   454,   455,   456,   457,
       0,  1079,  1080,     0,   460,     0,   461,   462,   652,   464,
     653,  1081,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1082,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1083,     0,     0,     0,     0,     0,     0,
    1084,  1085,  2934,     0,     0,     0,     0,  1087,     0,  2935,
       0,     0,     0,     0,     0,  1089,  1090,     0,     0,     0,
       0,  1091,  1092,   107,  1045,   538,  1046,  1047,  1048,  1049,
    1050,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1051,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1052,   132,  1053,  1054,     0,   135,   136,
     137,   138,   139,   140,  1055,   630,   141,   142,  1056,  1057,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1058,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1059,  1060,   186,  1061,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   814,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1062,   218,   219,
     220,   221,   222,   640,  1063,   224,     0,   225,   226,  1064,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1065,  1066,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1067,  1068,     0,  1069,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1070,   317,  1071,   319,   320,   321,
     322,   323,  1072,   324,   325,   326,   327,  1073,   645,   329,
    1074,   331,   332,   333,     0,   334,   335,     0,     0,  1075,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1076,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1077,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1078,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1079,  1080,     0,   460,     0,   461,   462,
     652,   464,   653,  1081,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1082,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1083,     0,     0,     0,     0,
       0,     0,  1084,  1085,  1086,     0,     0,     0,     0,  1087,
       0,  1088,     0,     0,     0,     0,     0,  1089,  1090,     0,
       0,     0,     0,  1091,  1092,   107,  1701,   538,  1046,  1047,
    1048,  1702,  1050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,  1703,   117,   118,   119,     0,     0,     0,     0,
     120,  1051,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1052,   132,  1053,  1054,     0,
     135,   136,   137,   138,   139,   140,  1055,   630,   141,   142,
    1056,  1057,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1058,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1059,  1060,
     186,  1061,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   814,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1062,
     218,   219,   220,   221,   222,   640,  1063,   224,     0,   225,
     226,  1064,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1065,  1066,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1067,  1068,     0,  1069,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1070,   317,  1071,   319,
     320,   321,   322,   323,  1072,   324,   325,   326,   327,  1073,
     645,   329,  1074,   331,   332,   333,     0,   334,   335,     0,
       0,  1075,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1076,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1077,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1078,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1079,  1080,     0,   460,     0,
     461,   462,   652,   464,   653,  1081,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1082,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1083,     0,     0,
       0,     0,     0,     0,  1084,  1085,     0,     0,     0,     0,
       0,  1087,     0,  1088,     0,     0,     0,     0,     0,  1089,
    1090,     0,     0,     0,     0,  1091,  1092,   107,  1045,   538,
    1046,  1047,  1048,  1049,  1050,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1051,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1052,   132,  1053,
    1054,     0,   135,   136,   137,   138,   139,   140,  1055,   630,
     141,   142,  1056,  1057,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1058,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1059,  1060,   186,  1061,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   814,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1062,   218,   219,   220,   221,   222,   640,  1063,   224,
       0,   225,   226,  1064,   228,     0,   229,     0,   230,   231,
    1520,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1065,  1066,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1067,  1068,     0,  1069,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1070,   317,
    1071,   319,   320,   321,   322,   323,  1072,   324,   325,   326,
     327,  1073,   645,   329,  1074,   331,   332,   333,     0,   334,
     335,     0,     0,  1075,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1076,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1077,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1078,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1079,  1080,     0,
     460,     0,   461,   462,   652,   464,   653,  1081,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1082,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1083,
       0,     0,     0,     0,     0,     0,  1084,  1085,     0,     0,
       0,     0,     0,  1087,     0,  1088,     0,     0,     0,     0,
       0,  1089,  1090,     0,     0,     0,     0,  1091,  1092,   107,
    1045,   538,  1046,  1047,  1048,  1049,  1050,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1051,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1052,
     132,  1053,  1054,     0,   135,   136,   137,   138,   139,   140,
    1055,   630,   141,   142,  1056,  1057,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1058,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1059,  1060,   186,  1061,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1062,   218,   219,   220,   221,   222,   640,
    1063,   224,     0,   225,   226,  1064,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1065,  1066,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1067,  1068,     0,
    1069,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1070,   317,  1071,   319,   320,   321,   322,   323,  1072,   324,
     325,   326,   327,  1073,   645,   329,  1074,   331,   332,   333,
       0,   334,   335,     0,     0,  1075,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1076,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1077,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1078,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1079,
    1080,     0,   460,     0,   461,   462,   652,   464,   653,  1081,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1082,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1083,     0,     0,     0,     0,     0,     0,  1084,  1085,
       0,     0,     0,     0,     0,  1087,     0,  1088,  2016,     0,
       0,     0,     0,  1089,  1090,     0,     0,     0,     0,  1091,
    1092,  1227,  1045,   538,  1046,  1047,  1048,  1049,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1051,     0,     0,
     121,   122,     0,   123,   124,   125,  1229,   127,   128,   129,
     130,  1052,  1230,  1053,  1054,     0,   135,   136,   137,   138,
     139,   140,  1055,   630,   141,   142,  1056,  1057,   145,     0,
     146,   147,   148,   149,   631,     0,  1231,     0,  1232,   153,
     154,   155,   156,   157,  1233,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,  1234,   169,   170,   171,
    1235,  1236,  1237,  1238,   637,   638,  1239,   177,   178,   179,
     180,   181,   182,   183,  1059,  1060,   186,  1061,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   814,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1062,   218,   219,   220,   221,
     222,   640,  1063,   224,     0,   225,   226,  1064,   228,     0,
     229,     0,   230,  1241,     0,  1242,   233,   234,  1243,  1244,
     237,     0,   238,   239,     0,     0,  1065,  1066,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,  1245,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,  1246,   264,   265,   266,   267,   268,   269,  1067,
    1068,     0,  1069,     0,   273,  1247,  1248,   276,  1249,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,  1250,
     287,  1251,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,  1252,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1070,  1253,  1071,   319,   320,   321,   322,   323,
    1072,   324,   325,  1254,   327,  1073,   645,   329,  1074,   331,
     332,   333,     0,   334,   335,     0,     0,  1075,   337,   338,
       0,     0,   339,   340,  1255,   342,  1256,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,  1257,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1076,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,  1258,   400,   401,
     402,  1077,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,  1259,
     421,   422,   423,   424,   425,   426,  1260,   428,   429,  1078,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,  1261,   446,   651,   448,     0,
     449,   450,     0,   451,  1262,   453,   454,   455,   456,   457,
       0,  1079,  1080,     0,   460,     0,   461,   462,   652,   464,
     653,  1081,   466,   467,  1263,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,  1264,     0,
     481,   482,   483,   484,   485,   486,  1082,  2223,   488,  1266,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1083,     0,     0,     0,     0,     0,     0,
    1084,  1085,     0,     0,     0,     0,     0,  1087,     0,  1088,
       0,     0,     0,     0,     0,  1089,  1090,     0,     0,     0,
       0,  1091,  1092,  1227,  1045,   538,  1046,  1047,  1048,  1049,
    1050,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1051,
       0,     0,   121,   122,     0,   123,   124,   125,  1229,   127,
     128,   129,   130,  1052,  1230,  1053,  1054,     0,   135,   136,
     137,   138,   139,   140,  1055,   630,   141,   142,  1056,  1057,
     145,     0,   146,   147,   148,   149,   631,     0,  1231,     0,
    1232,   153,   154,   155,   156,   157,  1233,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,  1234,   169,
     170,   171,  1235,  1236,  1237,  1238,   637,   638,  1239,   177,
     178,   179,   180,   181,   182,   183,  1059,  1060,   186,  1061,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   814,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1062,   218,   219,
     220,   221,   222,   640,  1063,   224,     0,   225,   226,  1064,
     228,     0,   229,     0,   230,  1241,     0,  1242,   233,   234,
    1243,  1244,   237,     0,   238,   239,     0,     0,  1065,  1066,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
    1245,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,  1246,   264,   265,   266,   267,   268,
     269,  1067,  1068,     0,  1069,     0,   273,  1247,  1248,   276,
    1249,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,  1250,   287,  1251,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,  1252,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1070,  1253,  1071,   319,   320,   321,
     322,   323,  1072,   324,   325,  1254,   327,  1073,   645,   329,
    1074,   331,   332,   333,     0,   334,   335,     0,     0,  1075,
     337,   338,     0,     0,   339,   340,  1255,   342,  1256,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,  1257,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1076,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,  1258,
     400,   401,   402,  1077,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,  1259,   421,   422,   423,   424,   425,   426,  1260,   428,
     429,  1078,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,  1261,   446,   651,
     448,     0,   449,   450,     0,   451,  1262,   453,   454,   455,
     456,   457,     0,  1079,  1080,     0,   460,     0,   461,   462,
     652,   464,   653,  1081,   466,   467,  1263,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
    1264,     0,   481,   482,   483,   484,   485,   486,  1082,     0,
     488,  1266,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1083,     0,     0,     0,     0,
       0,     0,  1084,  1085,     0,     0,     0,     0,     0,  1087,
       0,  1088,  2273,     0,     0,     0,     0,  1089,  1090,     0,
       0,     0,     0,  1091,  1092,   107,  1045,   538,  1046,  1047,
    1048,  1049,  1050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1051,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1052,   132,  1053,  1054,     0,
     135,   136,   137,   138,   139,   140,  1055,   630,   141,   142,
    1056,  1057,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1058,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1059,  1060,
     186,  1061,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   814,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1062,
     218,   219,   220,   221,   222,   640,  1063,   224,     0,   225,
     226,  1064,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1065,  1066,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1067,  1068,     0,  1069,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1070,   317,  1071,   319,
     320,   321,   322,   323,  1072,   324,   325,   326,   327,  1073,
     645,   329,  1074,   331,   332,   333,     0,   334,   335,     0,
       0,  1075,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1076,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1077,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1078,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,  2596,   451,   452,   453,
     454,   455,   456,   457,     0,  1079,  1080,     0,   460,     0,
     461,   462,   652,   464,   653,  1081,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1082,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1083,     0,     0,
       0,     0,     0,     0,  1084,  1085,     0,     0,     0,     0,
       0,  1087,     0,  1088,     0,     0,     0,     0,     0,  1089,
    1090,     0,     0,     0,     0,  1091,  1092,   107,  1045,   538,
    1046,  1047,  1048,  1049,  1050,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1051,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1052,   132,  1053,
    1054,     0,   135,   136,   137,   138,   139,   140,  1055,   630,
     141,   142,  1056,  1057,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1058,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1059,  1060,   186,  1061,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   814,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1062,   218,   219,   220,   221,   222,   640,  1063,   224,
       0,   225,   226,  1064,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1065,  1066,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1067,  1068,     0,  1069,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1070,   317,
    1071,   319,   320,   321,   322,   323,  1072,   324,   325,   326,
     327,  1073,   645,   329,  1074,   331,   332,   333,     0,   334,
     335,     0,     0,  1075,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1076,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1077,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1078,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1079,  1080,     0,
     460,     0,   461,   462,   652,   464,   653,  1081,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1082,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,  2689,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1083,
       0,     0,     0,     0,     0,     0,  1084,  1085,     0,     0,
       0,     0,     0,  1087,     0,  1088,     0,     0,     0,     0,
       0,  1089,  1090,     0,     0,     0,     0,  1091,  1092,   107,
    1045,   538,  1046,  1047,  1048,  1049,  1050,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1051,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1052,
     132,  1053,  1054,     0,   135,   136,   137,   138,   139,   140,
    1055,   630,   141,   142,  1056,  1057,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1058,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1059,  1060,   186,  1061,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1062,   218,   219,   220,   221,   222,   640,
    1063,   224,     0,   225,   226,  1064,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1065,  1066,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1067,  1068,     0,
    1069,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1070,   317,  1071,   319,   320,   321,   322,   323,  1072,   324,
     325,   326,   327,  1073,   645,   329,  1074,   331,   332,   333,
       0,   334,   335,     0,     0,  1075,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1076,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1077,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1078,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
    3079,   451,   452,   453,   454,   455,   456,   457,     0,  1079,
    1080,     0,   460,     0,   461,   462,   652,   464,   653,  1081,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1082,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1083,     0,     0,     0,     0,     0,     0,  1084,  1085,
       0,     0,     0,     0,     0,  1087,     0,  1088,     0,     0,
       0,     0,     0,  1089,  1090,     0,     0,     0,     0,  1091,
    1092,   107,  1045,   538,  1046,  1047,  1048,  1049,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1051,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1052,   132,  1053,  1054,     0,   135,   136,   137,   138,
     139,   140,  1055,   630,   141,   142,  1056,  1057,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,  1058,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1059,  1060,   186,  1061,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   814,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1062,   218,   219,   220,   221,
     222,   640,  1063,   224,     0,   225,   226,  1064,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  1065,  1066,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1067,
    1068,     0,  1069,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1070,   317,  1071,   319,   320,   321,   322,   323,
    1072,   324,   325,   326,   327,  1073,   645,   329,  1074,   331,
     332,   333,     0,   334,   335,     0,     0,  1075,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1076,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,  1077,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1078,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,  3267,   451,   452,   453,   454,   455,   456,   457,
       0,  1079,  1080,     0,   460,     0,   461,   462,   652,   464,
     653,  1081,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1082,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1083,     0,     0,     0,     0,     0,     0,
    1084,  1085,     0,     0,     0,     0,     0,  1087,     0,  1088,
       0,     0,     0,     0,     0,  1089,  1090,     0,     0,     0,
       0,  1091,  1092,   107,  1045,   538,  1046,  1047,  1048,  1049,
    1050,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1051,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1052,   132,  1053,  1054,     0,   135,   136,
     137,   138,   139,   140,  1055,   630,   141,   142,  1056,  1057,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1058,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1059,  1060,   186,  1061,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   814,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1062,   218,   219,
     220,   221,   222,   640,  1063,   224,     0,   225,   226,  1064,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1065,  1066,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1067,  1068,     0,  1069,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1070,   317,  1071,   319,   320,   321,
     322,   323,  1072,   324,   325,   326,   327,  1073,   645,   329,
    1074,   331,   332,   333,     0,   334,   335,     0,     0,  1075,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1076,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1077,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1078,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1079,  1080,     0,   460,     0,   461,   462,
     652,   464,   653,  1081,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1082,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1083,     0,     0,     0,     0,
       0,     0,  1084,  1085,     0,     0,     0,     0,     0,  1087,
       0,  1088,     0,     0,     0,     0,     0,  1089,  1090,     0,
       0,     0,     0,  1091,  1092,  1227,  1045,   538,  1046,  1047,
    1048,  1049,  1050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1051,     0,     0,   121,   122,     0,   123,   124,   125,
    1229,   127,   128,   129,   130,  1052,  1230,  1053,  1054,     0,
     135,   136,   137,   138,   139,   140,  1055,   630,   141,   142,
    1056,  1057,   145,     0,   146,   147,   148,   149,   631,     0,
    1231,     0,  1232,   153,   154,   155,   156,   157,  1233,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
    1234,   169,   170,   171,  1235,  1236,  1237,  1238,   637,   638,
    1239,   177,   178,   179,   180,   181,   182,   183,  1059,  1060,
     186,  1061,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   814,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1062,
     218,   219,   220,   221,   222,   640,  1063,   224,     0,   225,
     226,  1064,   228,     0,   229,     0,   230,  1241,     0,  1242,
     233,   234,  1243,  1244,   237,     0,   238,   239,     0,     0,
    1065,  1066,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,  1245,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,  1246,   264,   265,   266,
     267,   268,   269,  1067,  1068,     0,  1069,     0,   273,  1247,
    1248,   276,  1249,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,  1250,   287,  1251,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,  1252,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1070,  1253,  1071,   319,
     320,   321,   322,   323,  1072,   324,   325,  1254,   327,  1073,
     645,   329,  1074,   331,   332,   333,     0,   334,   335,     0,
       0,  1075,   337,   338,     0,     0,   339,   340,  1255,   342,
    1256,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,  1257,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1076,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,  1258,   400,   401,   402,  1077,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,  1259,   421,   422,   423,   424,   425,   426,
    1260,   428,   429,  1078,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,  1261,
     446,   651,   448,     0,   449,   450,     0,   451,  1262,   453,
     454,   455,   456,   457,     0,  1079,  1080,     0,   460,     0,
     461,   462,   652,   464,   653,  1081,   466,   467,  1263,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,  1264,     0,   481,   482,   483,   484,   485,   486,
    1082,     0,   488,  1266,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1083,     0,     0,
       0,     0,     0,     0,  1084,  1085,     0,     0,     0,     0,
       0,  1087,     0,  1088,     0,     0,     0,     0,     0,  1089,
    1090,     0,     0,     0,     0,  1091,  1092,   107,  1045,   538,
    1046,  1047,  1048,  1049,  1050,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1051,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1052,   132,  1053,
    1054,     0,   135,   136,   137,   138,   139,   140,  1055,   630,
     141,   142,  1056,  1057,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1058,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1059,  1060,   186,  1061,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   814,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1062,   218,   219,   220,   221,   222,   640,  1063,   224,
       0,   225,   226,  1064,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1065,  1066,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1067,  1068,     0,  1069,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1070,   317,
    1071,   319,   320,   321,   322,   323,  1072,   324,   325,   326,
     327,  1073,   645,   329,  1074,   331,   332,   333,     0,   334,
     335,     0,     0,  1075,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1076,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1077,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1078,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1079,  1080,     0,
     460,     0,   461,   462,   652,   464,   653,  1081,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1082,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1083,
       0,     0,     0,     0,     0,     0,  1706,  1707,     0,     0,
       0,     0,     0,  1087,     0,  1088,     0,     0,     0,     0,
       0,  1089,  1090,     0,     0,     0,     0,  1091,  1092,   107,
    2147,   538,  1046,  1047,  1048,  1049,  1050,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1051,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1052,
     132,  1053,  1054,     0,   135,   136,   137,   138,   139,   140,
    1055,   630,   141,   142,  1056,  1057,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1058,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1059,  1060,   186,  1061,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1062,   218,   219,   220,   221,   222,   640,
    1063,   224,     0,   225,   226,  1064,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1065,  1066,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1067,  1068,     0,
    1069,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1070,   317,  1071,   319,   320,   321,   322,   323,  1072,   324,
     325,   326,   327,  1073,   645,   329,  1074,   331,   332,   333,
       0,   334,   335,     0,     0,  1075,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1076,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1077,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1078,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1079,
    1080,     0,   460,     0,   461,   462,   652,   464,   653,  1081,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1082,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1083,     0,     0,     0,     0,     0,     0,  1084,  1085,
       0,     0,     0,     0,     0,  1087,     0,  1088,     0,     0,
       0,     0,     0,  1089,  1090,     0,     0,     0,     0,  1091,
    1092,   107,  1045,   538,  1046,  1047,  1048,  1049,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1051,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1052,   132,  1053,  1054,     0,   135,   136,   137,   138,
     139,   140,  1055,   630,   141,   142,  1056,  1057,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,  1058,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1059,  1060,   186,  1061,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   814,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1062,   218,   219,   220,   221,
     222,   640,  1063,   224,     0,   225,   226,  1064,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  1065,  1066,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1067,
    1068,     0,  1069,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1070,   317,  1071,   319,   320,   321,   322,   323,
    1072,   324,   325,   326,   327,  1073,   645,   329,  1074,   331,
     332,   333,     0,   334,   335,     0,     0,  1075,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1076,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,  1077,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1078,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,     0,   451,   452,   453,   454,   455,   456,   457,
       0,  1079,  1080,     0,   460,     0,   461,   462,   652,   464,
     653,  1081,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1082,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1083,     0,     0,     0,     0,     0,     0,
    1084,  1085,     0,     0,     0,     0,     0,  1087,     0,  2410,
       0,     0,     0,     0,     0,  1089,  1090,     0,     0,     0,
       0,  1091,  1092,   107,  1045,   538,  1046,  1047,  1048,  1049,
    1050,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1051,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1052,   132,  1053,  1054,     0,   135,   136,
     137,   138,   139,   140,  1055,   630,   141,   142,  1056,  1057,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1058,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
    2931,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1059,  1060,   186,  1061,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   814,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1062,   218,   219,
     220,   221,   222,   640,  1063,   224,     0,   225,   226,  1064,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  2932,  1066,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1067,  1068,     0,  1069,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1070,   317,  1071,   319,   320,   321,
     322,   323,  1072,   324,   325,   326,   327,  1073,   645,   329,
    1074,   331,   332,   333,     0,   334,   335,     0,     0,  1075,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1076,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,  2933,  1077,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1078,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1079,  1080,     0,   460,     0,   461,   462,
     652,   464,   653,  1081,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1082,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1083,     0,     0,     0,     0,
       0,     0,  1084,  1085,     0,     0,     0,     0,     0,  1087,
       0,  2935,     0,     0,     0,     0,     0,  1089,  1090,     0,
       0,     0,     0,  1091,  1092,   107,  1045,   538,  1046,  1047,
    1048,  1049,  1050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1051,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,  3550,  1052,   132,  1053,  1054,     0,
     135,   136,   137,   138,   139,   140,  1055,   630,   141,   142,
    1056,  1057,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1058,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,  3551,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1059,  1060,
     186,  1061,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   814,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1062,
     218,   219,   220,   221,   222,   640,  1063,   224,     0,   225,
     226,  1064,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1065,  1066,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1067,  1068,     0,  1069,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1070,   317,  1071,   319,
     320,   321,   322,   323,  1072,   324,   325,   326,   327,  1073,
     645,   329,  1074,   331,   332,   333,     0,   334,   335,     0,
       0,  1075,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1076,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1077,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1078,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1079,  1080,     0,   460,     0,
     461,   462,   652,   464,   653,  1081,   466,   467,   654,   469,
     470,  3552,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1082,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1083,     0,     0,
       0,     0,     0,     0,  1084,  1085,     0,     0,     0,     0,
       0,  1087,     0,  1088,     0,     0,     0,     0,     0,  1089,
    1090,     0,     0,     0,     0,  1091,  1092,   107,  1045,   538,
    1046,  1047,  1048,  1049,  1050,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1051,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1052,   132,  1053,
    1054,     0,   135,   136,   137,   138,   139,   140,  1055,   630,
     141,   142,  1056,  1057,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1058,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,  3551,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1059,  1060,   186,  1061,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   814,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1062,   218,   219,   220,   221,   222,   640,  1063,   224,
       0,   225,   226,  1064,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1065,  1066,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1067,  1068,     0,  1069,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1070,   317,
    1071,   319,   320,   321,   322,   323,  1072,   324,   325,   326,
     327,  1073,   645,   329,  1074,   331,   332,   333,     0,   334,
     335,     0,     0,  1075,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1076,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1077,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1078,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1079,  1080,     0,
     460,     0,   461,   462,   652,   464,   653,  1081,   466,   467,
     654,   469,   470,  3552,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1082,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1083,
       0,     0,     0,     0,     0,     0,  1084,  1085,     0,     0,
       0,     0,     0,  1087,     0,  1088,     0,     0,     0,     0,
       0,  1089,  1090,     0,     0,     0,     0,  1091,  1092,   107,
    1045,   538,  1046,  1047,     0,  1049,  1050,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1051,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1052,
     132,  1053,  1054,     0,   135,   136,   137,   138,   139,   140,
    1055,   630,   141,   142,  1056,  1057,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1059,  1060,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1062,   218,   219,   220,   221,   222,   640,
    1063,   224,     0,   225,   226,  1064,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1065,  1066,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1067,  1068,     0,
    1069,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1070,   317,  1071,   319,   320,   321,   322,   323,  3005,   324,
     325,   326,   327,  1073,   645,   329,  1074,   331,   332,   333,
       0,   334,   335,     0,     0,   336,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1076,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1077,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1078,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1079,
    1080,     0,   460,     0,   461,   462,   652,   464,   653,  1081,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1082,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  3006,     0,     0,     0,     0,     0,     0,  3007,  3008,
       0,     0,     0,     0,     0,  1087,     0,  1088,     0,     0,
       0,     0,     0,  1089,  1090,     0,     0,     0,     0,  1091,
    1092,   107,  1045,   538,  1046,  1047,  1048,  1049,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1051,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1052,   132,  1053,  1054,     0,   135,   136,   137,   138,
     139,   140,  1055,   630,   141,   142,  1056,  1057,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1059,  1060,   186,     0,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   814,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1062,   218,   219,   220,   221,
     222,   640,  1063,   224,     0,   225,   226,  1064,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  1065,  1066,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1067,
    1068,     0,  1069,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1070,   317,  1071,   319,   320,   321,   322,   323,
       0,   324,   325,   326,   327,  1073,   645,   329,  1074,   331,
     332,   333,     0,   334,   335,     0,     0,  1075,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1076,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,  1077,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1078,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,     0,   451,   452,   453,   454,   455,   456,   457,
       0,  1079,  1080,     0,   460,     0,   461,   462,   652,   464,
     653,  1081,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1082,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,     0,     0,     0,     0,     0,     0,     0,
    1507,  1508,     0,     0,     0,     0,     0,  1087,     0,  1088,
       0,     0,     0,     0,     0,  1089,  1090,     0,     0,     0,
       0,  1091,  1092,   107,  1045,   538,  1046,  1047,     0,  1049,
    1050,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1051,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1052,   132,  1053,  1054,     0,   135,   136,
     137,   138,   139,   140,  1055,   630,   141,   142,  1056,  1057,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1059,  1060,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   814,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1062,   218,   219,
     220,   221,   222,   640,  1063,   224,     0,   225,   226,  1064,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1065,  1066,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1067,  1068,     0,  1069,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1070,   317,  1071,   319,   320,   321,
     322,   323,     0,   324,   325,   326,   327,  1073,   645,   329,
    1074,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1076,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  2133,  2134,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1078,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1079,  1080,     0,   460,     0,   461,   462,
     652,   464,   653,  1081,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1082,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,     0,     0,     0,     0,     0,
       0,     0,  2135,  2136,     0,     0,     0,     0,     0,  1087,
       0,  1088,     0,     0,     0,     0,     0,  1089,  1090,     0,
       0,     0,     0,  1091,  1092,   107,  1045,   538,  1046,  1047,
    1048,  1049,  1050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1051,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1052,   132,  1053,  1054,     0,
     135,   136,   137,   138,   139,   140,  1055,   630,   141,   142,
    1056,  1057,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1059,  1060,
     186,     0,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   814,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1062,
     218,   219,   220,   221,   222,   640,  1063,   224,     0,   225,
     226,  1064,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1065,  1066,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1067,  1068,     0,  1069,     0,   273,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1070,   317,  1071,   319,
     320,   321,   322,   323,     0,   324,   325,   326,   327,  1073,
     645,   329,  1074,   331,   332,   333,     0,   334,   335,     0,
       0,  1075,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1076,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1077,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1078,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1079,  1080,     0,   460,     0,
     461,   462,   652,   464,   653,  1081,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1082,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,     0,     0,     0,
       0,     0,     0,     0,  1507,  1508,     0,     0,     0,     0,
       0,  1087,     0,  1088,     0,     0,     0,     0,     0,  1089,
    1090,     0,     0,     0,     0,  1091,  1092,   107,  1045,   538,
    1046,  1047,  1048,  1049,  1050,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1051,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129, -2115,  1052,   132,  1053,
    1054,     0,   135,   136,   137,   138,   139,   140,  1055,   630,
     141,   142,  1056,  1057,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1058,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,  3551,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1059,  1060,   186,  1061,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   814,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1062,   218,   219,   220,   221,   222,   640,  1063,   224,
       0,   225,   226,  1064,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235, -2115,   237,     0,   238,   239,
       0,     0,  1065,  1066,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250, -2115,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1067,  1068,     0,  1069,     0,
     273,     0,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287, -2115,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1070,   317,
    1071,   319,   320,   321,   322,   323,     0,   324,   325,     0,
     327,  1073,   645,   329,  1074,   331,   332,   333,     0,   334,
     335,     0,     0,  1075,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1076,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1077,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426, -2115,   428,   429,  1078,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1079,  1080,     0,
     460,     0,   461,   462,   652,   464,   653,  1081,   466,   467,
     654,   469,   470,  3552,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1082,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518, -2115,
       0,     0,     0,     0,     0,     0,  1084,  1085,     0,     0,
       0,     0,     0,  1087,     0,  1088,     0,     0,     0,     0,
       0,  1089,  1090,     0,     0,     0,     0,  1091,  1092,   107,
    1045,   538,  1046,  1047,  1048,  1049,  1050,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1051,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,     0,  1052,
     132,  1053,  1054,     0,   135,   136,   137,   138,   139,   140,
    1055,   630,   141,   142,  1056,  1057,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1058,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1059,  1060,   186,  1061,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,     0,   212,     0,   213,
     214,   215,   216,  1062,   218,   219,   220,   221,   222,   640,
    1063,   224,     0,   225,   226,  1064,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,     0,   237,     0,
     238,   239,     0,     0,  1065,  1066,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,     0,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1067,  1068,     0,
    1069,     0,   273,     0,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,     0,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1070,   317,  1071,   319,   320,   321,   322,   323,     0,   324,
     325,     0,   327,  1073,   645,   329,  1074,   331,   332,   333,
       0,   334,   335,     0,     0,  1075,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1076,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1077,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,     0,   428,   429,  1078,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1079,
    1080,     0,   460,     0,   461,   462,   652,   464,   653,  1081,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1082,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,     0,     0,     0,     0,     0,     0,     0,  1084,  1085,
       0,     0,     0,   718,     0,  1087,     0,  1088,     0,     0,
       0,     0,     0,  1089,  1090,     0,     0,     0,     0,  1091,
    1092,   108,   109,   110,   111,     0,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,     0,   123,   124,   125,     0,   127,
     128,   129,   130,   131,     0,   133,   134,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,     0,     0,     0,
     152,   153,   154,   155,   156,   157,     0,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   169,
     170,   171,     0,     0,     0,     0,     0,     0,     0,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
       0,   196,   197,   198,   199,     0,     0,   200,   201,   202,
     203,   204,     0,     0,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,     0,   225,   226,   227,
     228,     0,   229,     0,   230,     0,     0,     0,   233,   234,
     528,     0,   237,     0,   238,     0,     0,     0,   240,   241,
       0,   243,     0,   244,   245,   246,   247,   248,   249,   250,
       0,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   264,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   273,     0,     0,   276,
       0,   278,     0,   280,   281,   282,   283,   284,     0,     0,
     285,     0,   287,     0,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   529,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   318,   319,   320,   321,
       0,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,     0,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
       0,   356,     0,   357,   358,   359,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,     0,
       0,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,     0,   421,   422,   423,   424,     0,   426,     0,     0,
     429,   430,   431,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   530,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   453,   454,   455,
     456,   457,     0,   458,   459,     0,     0,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,   473,     0,   562,   474,   475,   476,   477,   478,   479,
       0,     0,   481,   482,   483,   484,   485,   486,   487,     0,
     488,     0,   490,     0,   492,   493,   494,   495,     0,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   -46,     0,     0,   563,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3296,     0,     0,   564,     0,     1,     0,     0,     0,
     562,  3297,     0,     0,     0,     0,     0,     2,     0,     3,
       4,     0,   565,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     0,     0,     0,     0,     6,     0,     0,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     8,     0,     0,
       0,   566,     0,     0,     0,   563,     0,     0,     9,     0,
       0,   567,     0,     0,     0,     0,     0,     0,     0,     0,
      10,   564,    11,   568,     0,     0,     0,     0,   569,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   565,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,     0,    14,     0,   570,     0,
       0,     0,     0,     0,     0,    15,     0,     0,     0,     0,
       0,     0,     0,    16,     0,     0,     0,     0,   566,     0,
       0,    17,     0,    18,    19,     0,     0,     0,   567,     0,
       0,     0,     0,     0,     0,     0,     0,    20,     0,     0,
     568,    21,     0,     0,   571,   569,     0,     0,   572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
       0,     0,     0,     0,     0,   570,     0,     0,     0,     0,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    24,     0,     0,   573,     0,     0,     0,     0,     0,
       0,   571,     0,     0,     0,   572,     0,     0,     0,     0,
     574,   575,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   576,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,   578,     0,     0,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   573,    25,     0,     0,    26,     0,     0,     0,     0,
     580,     0,     0,     0,     0,     0,     0,     0,   575,     0,
       0,     0,     0,     0,   581,     0,     0,     0,     0,     0,
       0,   582,     0,     0,     0,     0,     0,    27,     0,     0,
       0,   583,     0,     0,     0,     0,    28,   584,     0,     0,
       0,     0,   576,     0,     0,   577,     0,     0,     0,     0,
      29,     0,     0,   578,     0,     0,   579,    30,     0,     0,
       0,     0,    31,     0,   585,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,     0,     0,   580,     0,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,    34,
       0,   581,     0,     0,     0,     0,     0,     0,   582,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   583,    35,
       0,     0,     0,     0,   584,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,    37,     0,     0,
       0,     0,    38,     0,     0,     0,     0,     0,     0,     0,
       0,   585,     0,     0,     0,     0,     0,     0,    39,     0,
       0,     0,     0,     0,     0,   527,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,    41,     0,     0,   -46,
     120,     0,  1010,     0,   121,   122,     0,   123,   124,   125,
       0,   127,   128,   129,   130,   131,     0,   133,   134,     0,
     135,   136,   137,   138,   139,   140,     0,     0,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,     0,
       0,     0,   152,   153,   154,   155,   156,   157,     0,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   169,   170,   171,     0,     0,     0,     0,     0,     0,
       0,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,     0,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   202,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,  -670,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,  -670,   225,
     226,   227,   228,  -670,   229,     0,   230,     0,     0,     0,
     233,   234,   528,     0,   237,     0,   238,   239,     0,     0,
     240,   241,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,     0,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,  -670,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,     0,   287,     0,  -670,   289,   290,   291,
       0,     0,   292,   293,   294,   295,   296,   529,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,   327,     0,
     328,   329,   330,   331,   332,   333,  -670,   334,   335,     0,
       0,   336,   337,   338,     0,  -670,   339,   340,     0,   342,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,     0,   421,   422,   423,   424,   425,   426,
       0,   428,   429,   430,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   530,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   453,
     454,   455,   456,   457,     0,   458,   459,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,   473,  -670,     0,   474,   475,   476,   477,
     478,   479,     0,     0,   481,   482,   483,   484,   485,   486,
     487,     0,   488,     0,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   107,     0,   554,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1157,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,     0,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,     0,   135,   136,   137,   138,   139,   140,     0,   630,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   202,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   640,     0,   224,
       0,   225,   226,   227,   228,     0,   229,     0,   230,   231,
      21,   232,   233,   234,   235,   236,   237,     0,   238,   239,
     641,     0,   240,   241,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   642,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,     0,   324,   325,   326,
     327,     0,   645,   329,   330,   331,   332,   333,     0,   334,
     335,     0,   646,   336,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   649,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    29,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,    34,   451,
     452,   453,   454,   455,   456,   457,     0,   458,   459,     0,
     460,     0,   461,   462,   652,   464,   653,     0,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   656,   487,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,    39,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,     0,
     107,    40,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   657,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,   630,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   631,     0,   632,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   633,
     634,   635,   636,   637,   638,   639,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     640,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,   231,     0,   232,   233,   234,   235,   236,   237,
       0,   238,   239,   641,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   642,     0,   285,   286,   287,
     288,     0,   289,   290,   291,   643,   644,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,     0,
     324,   325,   326,   327,     0,   645,   329,   330,   331,   332,
     333,     0,   334,   335,     0,   646,   336,   337,   338,     0,
       0,   339,   340,   341,   342,   343,   647,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   648,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   649,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,   650,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   651,   448,     0,   449,
     450,     0,   451,   452,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   652,   464,   653,
       0,   466,   467,   654,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   655,     0,   481,
     482,   483,   484,   485,   656,   487,     0,   488,   489,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   107,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   657,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,   630,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   631,     0,   632,     0,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   633,   634,   635,   636,   637,   638,   639,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   640,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,   231,     0,   232,   233,   234,   235,
     236,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
     286,   287,   288,     0,   289,   290,   291,   643,   644,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,     0,   324,   325,   326,   327,     0,   645,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,   341,   342,   343,   647,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   648,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   649,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     650,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   651,   448,
       0,   449,   450,     0,   451,   452,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   652,
     464,   653,     0,   466,   467,   654,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,   655,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
     489,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   107,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     699,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,   630,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   631,     0,   632,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   633,   634,   635,   636,   637,   638,   639,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   640,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,   231,     0,   232,   233,
     234,   235,   236,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,   286,   287,   288,     0,   289,   290,   291,   643,
     644,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,     0,   324,   325,   326,   327,     0,   645,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     647,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   648,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   650,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     651,   448,     0,   449,   450,     0,   451,   452,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   652,   464,   653,     0,   466,   467,   654,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   655,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,   489,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   886,  1463,   538,     0,
       0,     0,  1049,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3270,     0,   108,   109,   110,   111,     0,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,     0,     0,     0,     0,   121,   122,     0,   123,   124,
     125,   887,   127,   128,   129,   888,   889,   890,   891,   892,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   893,   894,   145,     0,   146,   147,   148,   149,   895,
       0,   896,     0,   897,   153,   154,   155,   156,   157,   898,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,   899,   169,   170,   171,   900,   901,   902,   903,     0,
       0,   904,   177,   178,   179,   180,   181,   182,   183,   905,
     906,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,     0,     0,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     907,   218,   219,   220,   221,   222,   908,  1464,   224,     0,
     225,   226,   909,   228,     0,   229,     0,   230,   910,     0,
     911,   233,   234,   912,   913,   237,     0,   238,     0,     0,
       0,   914,   915,     0,   243,     0,   244,   245,   246,   247,
     248,   249,   250,   916,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,   917,   918,   265,
     266,   267,   268,   269,   919,   920,     0,   921,     0,   273,
     922,   923,   276,   924,   278,     0,   280,   281,   282,   283,
     284,     0,     0,   285,   925,   287,   926,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   927,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   928,   929,   930,
     319,   320,   321,     0,   931,     0,   324,   325,   932,   327,
       0,   933,   329,   934,   331,   332,   333,     0,   334,   335,
    1465,     0,   336,   337,   338,     0,     0,   339,   935,   936,
     342,   937,   938,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,     0,   356,     0,   357,   358,   939,   940,
     361,   362,   941,   364,   365,   366,     0,   367,   368,   369,
     370,   371,     0,     0,   374,     0,   375,   376,   377,   942,
     379,   380,   381,   382,     0,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   943,   400,   401,   402,   944,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   945,   421,   946,   423,   424,     0,
     426,   947,     0,   429,   948,   431,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     949,   446,   950,   448,     0,   449,   450,     0,   451,   951,
     453,   454,   455,   456,   457,     0,   952,   953,     0,     0,
       0,   461,   462,   954,   464,   955,  1466,   466,   467,   956,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   957,     0,   481,   482,   483,   484,   485,
    1347,   959,     0,   488,   960,   490,     0,   492,   493,   494,
     495,     0,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   961,   962,   963,   964,   965,   966,   967,
     968,   969,   970,   971,   515,   516,   517,   518,   886,     0,
       0,     0,     0,     0,     0,  1467,  1468,  2311,     0,     0,
       0,     0,     0,     0,  2312,     0,   108,   109,   110,   111,
       0,   113,   114,   115,   116,     0,   117,   118,   119,     3,
       4,     0,     0,     0,     0,     0,     0,   121,   122,     0,
     123,   124,   125,   887,   127,   128,   129,   888,   889,   890,
     891,   892,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   893,   894,   145,     0,   146,   147,   148,
     149,   895,     0,   896,     0,   897,   153,   154,   155,   156,
     157,   898,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,   899,   169,   170,   171,   900,   901,   902,
     903,     0,     0,   904,   177,   178,   179,   180,   181,   182,
     183,   905,   906,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,     0,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,     0,     0,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   907,   218,   219,   220,   221,   222,   908,     0,
     224,     0,   225,   226,   909,   228,     0,   229,     0,   230,
     910,    21,   911,   233,   234,   912,   913,   237,     0,   238,
       0,     0,     0,   914,   915,     0,   243,     0,   244,   245,
     246,   247,   248,   249,   250,   916,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,   917,
     918,   265,   266,   267,   268,   269,   919,   920,     0,   921,
       0,   273,   922,   923,   276,   924,   278,     0,   280,   281,
     282,   283,   284,     0,     0,   285,   925,   287,   926,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     927,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   928,
     929,   930,   319,   320,   321,     0,   931,     0,   324,   325,
     932,   327,     0,   933,   329,   934,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     935,   936,   342,   937,   938,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,     0,   356,     0,   357,   358,
     939,   940,   361,   362,   941,   364,   365,   366,     0,   367,
     368,   369,   370,   371,     0,     0,   374,     0,   375,   376,
     377,   942,   379,   380,   381,   382,     0,   383,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,   943,   400,   401,   402,   944,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      29,   415,   416,   417,   418,   419,   945,   421,   946,   423,
     424,     0,   426,   947,     0,   429,   948,   431,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   949,   446,   950,   448,     0,   449,   450,    34,
     451,   951,   453,   454,   455,   456,   457,     0,   952,   953,
       0,     0,     0,   461,   462,   954,   464,   955,     0,   466,
     467,   956,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   957,     0,   481,   482,   483,
     484,   485,   958,   959,     0,   488,   960,   490,     0,   492,
     493,   494,   495,     0,     0,     0,   497,     0,    39,   498,
     499,   500,   501,   502,   503,   961,   962,   963,   964,   965,
     966,   967,   968,   969,   970,   971,   515,   516,   517,   518,
     527,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   699,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   741,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,    21,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    29,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,    34,   451,     0,   453,   454,   455,   456,   457,     0,
     742,   459,     0,   460,     0,   743,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   656,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
      39,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   699,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,    21,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    29,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,    34,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   656,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,    39,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,     0,   527,    40,   554,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     699,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,     0,     0,     0,   121,   122,     0,   123,   124,   125,
       0,   127,   128,   129,   130,   131,     0,   133,   134,     0,
     135,   136,   137,   138,   139,   140,     0,     0,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,     0,
       0,     0,   152,   153,   154,   155,   156,   157,     0,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   169,   170,   171,     0,     0,     0,     0,     0,     0,
       0,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,     0,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   202,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,     0,   225,
     226,   227,   228,     0,   229,     0,   230,     0,     0,     0,
     233,   234,   528,     0,   237,     0,   238,   239,     0,     0,
     240,   241,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,     0,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,     0,   287,     0,     0,   289,   290,   291,
       0,     0,   292,   293,   294,   295,   296,   529,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,   327,     0,
     328,   329,   330,   331,   332,   333,     0,   334,   335,     0,
       0,   336,   337,   338,     0,     0,   339,   340,     0,   342,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,     0,   421,   422,   423,   424,   425,   426,
       0,   428,   429,   430,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   530,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   453,
     454,   455,   456,   457,     0,   458,   459,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,     0,     0,   481,   482,   483,   484,   485,   486,
     487,     0,   488,     0,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   527,     0,   554,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   997,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,     0,     0,     0,   121,   122,     0,   123,
     124,   125,     0,   127,   128,   129,   130,   131,     0,   133,
     134,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     150,     0,     0,     0,   152,   153,   154,   155,   156,   157,
       0,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,     0,   169,   170,   171,     0,     0,     0,     0,
       0,     0,     0,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   202,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
       0,   225,   226,   227,   228,     0,   229,     0,   230,     0,
       0,     0,   233,   234,   528,     0,   237,     0,   238,   239,
       0,     0,   240,   241,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,     0,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   264,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     273,     0,     0,   276,     0,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,     0,   287,     0,     0,   289,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   529,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
     327,     0,   328,   329,   330,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,   340,
       0,   342,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,     0,   421,   422,   423,   424,
     425,   426,     0,   428,   429,   430,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   530,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   453,   454,   455,   456,   457,     0,   458,   459,     0,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,     0,     0,   481,   482,   483,   484,
     485,   486,   487,     0,   488,     0,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   527,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1550,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,     0,     0,     0,   121,   122,
       0,   123,   124,   125,     0,   127,   128,   129,   130,   131,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
       0,     0,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,     0,     0,     0,   152,   153,   154,   155,
     156,   157,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   169,   170,   171,     0,     0,
       0,     0,     0,     0,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,     0,   225,   226,   227,   228,     0,   229,     0,
     230,     0,     0,     0,   233,   234,   528,     0,   237,     0,
     238,   239,     0,     0,   240,   241,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,     0,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,     0,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,     0,   287,     0,
       0,   289,   290,   291,     0,     0,   292,   293,   294,   295,
     296,   529,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,   327,     0,   328,   329,   330,   331,   332,   333,
       0,   334,   335,     0,     0,   336,   337,   338,     0,     0,
     339,   340,     0,   342,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,     0,   421,   422,
     423,   424,   425,   426,     0,   428,   429,   430,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   530,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   453,   454,   455,   456,   457,     0,   458,
     459,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,     0,     0,   481,   482,
     483,   484,   485,   486,   487,     0,   488,     0,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   527,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2018,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,     0,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   127,   128,   129,
     130,   131,     0,   133,   134,     0,   135,   136,   137,   138,
     139,   140,     0,     0,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,     0,     0,     0,   152,   153,
     154,   155,   156,   157,     0,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,     0,   169,   170,   171,
       0,     0,     0,     0,     0,     0,     0,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   528,     0,
     237,     0,   238,   239,     0,     0,   240,   241,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,     0,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   264,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   273,     0,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,     0,
     287,     0,     0,   289,   290,   291,     0,     0,   292,   293,
     294,   295,   296,   529,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,   327,     0,   328,   329,   330,   331,
     332,   333,     0,   334,   335,     0,     0,   336,   337,   338,
       0,     0,   339,   340,     0,   342,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,     0,
     421,   422,   423,   424,   425,   426,     0,   428,   429,   430,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   530,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   453,   454,   455,   456,   457,
       0,   458,   459,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,     0,     0,
     481,   482,   483,   484,   485,   486,   487,     0,   488,     0,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   527,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2118,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,     0,
       0,     0,   121,   122,     0,   123,   124,   125,     0,   127,
     128,   129,   130,   131,     0,   133,   134,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,     0,     0,     0,
     152,   153,   154,   155,   156,   157,     0,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   169,
     170,   171,     0,     0,     0,     0,     0,     0,     0,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   202,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,     0,   225,   226,   227,
     228,     0,   229,     0,   230,     0,     0,     0,   233,   234,
     528,     0,   237,     0,   238,   239,     0,     0,   240,   241,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
       0,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   264,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   273,     0,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,     0,   287,     0,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   529,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,     0,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,     0,   421,   422,   423,   424,   425,   426,     0,   428,
     429,   430,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   530,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   453,   454,   455,
     456,   457,     0,   458,   459,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
       0,     0,   481,   482,   483,   484,   485,   486,   487,     0,
     488,     0,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   718,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2971,     0,   108,   109,   110,   111,     0,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,     0,   123,   124,   125,
       0,   127,   128,   129,   130,   131,     0,   133,   134,     0,
     135,   136,   137,   138,   139,   140,     0,     0,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,     0,
       0,     0,   152,   153,   154,   155,   156,   157,     0,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   169,   170,   171,     0,     0,     0,     0,     0,     0,
       0,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,     0,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   196,   197,   198,   199,     0,     0,   200,
     201,   202,   203,   204,     0,     0,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,     0,   225,
     226,   227,   228,     0,   229,     0,   230,     0,    21,     0,
     233,   234,   528,     0,   237,     0,   238,     0,     0,     0,
     240,   241,     0,   243,     0,   244,   245,   246,   247,   248,
     249,   250,     0,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,     0,   280,   281,   282,   283,   284,
       0,     0,   285,     0,   287,     0,     0,   289,   290,   291,
       0,     0,   292,   293,   294,   295,   296,   529,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   318,   319,
     320,   321,     0,   323,     0,   324,   325,     0,   327,     0,
     328,   329,   330,   331,   332,   333,     0,   334,   335,     0,
       0,   336,   337,   338,     0,     0,   339,   340,     0,   342,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,     0,   356,     0,   357,   358,   359,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,     0,     0,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    29,   415,   416,
     417,   418,   419,     0,   421,   422,   423,   424,     0,   426,
       0,     0,   429,   430,   431,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   530,
     446,   447,   448,     0,   449,   450,    34,   451,     0,   453,
     454,   455,   456,   457,     0,   458,   459,     0,     0,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,     0,     0,   481,   482,   483,   484,   485,   656,
     487,     0,   488,     0,   490,     0,   492,   493,   494,   495,
       0,     0,     0,   497,     0,    39,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,     0,     0,    40,
    2810,  1463,   538,     0,     0,  1999,  1049,     0,     0,     0,
       0,     0,  2000,   699,     0,  2001,  2002,  2003,   108,   109,
     110,   111,     0,   113,   114,   115,   116,  1279,   117,   118,
     119,  1280,  1281,  1282,  1283,     0,  1284,  1285,  1286,   121,
     122,  1287,   123,   124,   125,  2811,   127,   128,   129,     0,
     797,  2812,   799,   800,  1288,   135,   136,   137,   138,   139,
     140,  1289,  1290,   141,   142,   801,   802,   145,  1291,   146,
     147,   148,   149,     0,  1292,  2813,  1293,  2814,   153,   154,
     155,   156,   157,  2815,   159,   160,   161,  1294,   162,   163,
     164,   165,   166,   167,  1295,  2816,   169,   170,   171,  2817,
    2818,  2819,  2820,  1296,  1297,  2821,   177,   178,   179,   180,
     181,   182,   183,   812,   813,   186,  1298,   187,  1299,   188,
     189,   190,   191,   192,   193,  1300,   194,     0,   196,   197,
     198,   199,  1301,  1302,   200,   201,   814,   203,   204,     0,
       0,  1303,   207,   208,   209,  1304,   210,   211,   212,  1305,
     213,   214,   215,   216,     0,   218,   219,   220,   221,   222,
       0,  1306,   224,  1307,   225,   226,   815,   228,  1308,   229,
    1309,   230,  2822,  1310,  2823,   233,   234,  2824,  2825,   237,
    1311,   238,     0,  1312,  1313,     0,     0,     0,   243,  1314,
     244,   245,   246,   247,   248,   249,   250,  2826,   252,   253,
     254,   255,  1315,   256,   257,   258,   259,   260,   261,  1316,
     262,  2827,     0,   265,   266,   267,   268,   269,   822,   823,
    1317,   824,  1318,   273,  2828,  2829,   276,  2830,   278,     0,
     280,   281,   282,   283,   284,  1319,  1320,   285,  2831,   287,
    2832,  1321,   289,   290,   291,  1322,  1323,   292,   293,   294,
     295,   296,  2833,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   831,  2834,   833,   319,   320,   321,     0,  2835,  1324,
     324,   325,  2836,   327,  1325,     0,   329,   835,   331,   332,
     333,  1326,   334,   335,  1327,  1328,  2837,   337,   338,  1329,
    1330,   339,     0,  2838,   342,  2839,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,     0,   356,  1331,
     357,   358,     0,  2840,   361,   362,     0,   364,   365,   366,
    1332,   367,   368,   369,   370,   371,     0,     0,   374,  1333,
     375,   376,   377,   839,   379,   380,   381,   382,  1334,   383,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,  1335,   397,   398,  2841,   400,   401,   402,
     841,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1336,   415,   416,   417,   418,   419,  2842,   421,
    2843,   423,   424,     0,   426,  2844,     0,   429,   845,   431,
    1337,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,  2845,   446,     0,   448,  1338,   449,
     450,  1339,   451,  2846,   453,   454,   455,   456,   457,  1340,
     848,   849,  1341,     0,  1342,   461,   462,     0,   464,     0,
    1343,   466,   467,  2847,   469,   470,   471,   472,   473,  2848,
    1345,   474,   475,   476,   477,   478,   479,  2849,  1346,   481,
     482,   483,   484,   485,     0,   853,  1348,   488,  2850,   490,
       0,   492,   493,   494,   495,     0,  1349,  1350,   497,  1351,
    1352,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   515,   516,
     517,   518,     0,   527,     0,  2004,  2005,  2006,  1999,  2851,
    2852,  2009,  2010,  2011,  2012,  2000,     0,     0,  2001,  2002,
    2003,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,     0,
       0,     0,   121,   122,     0,   123,   124,   125,     0,   127,
     128,   129,   130,   131,     0,   133,   134,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,     0,     0,     0,
     152,   153,   154,   155,   156,   157,     0,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   169,
     170,   171,     0,     0,     0,     0,     0,     0,     0,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   202,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,     0,   225,   226,   227,
     228,     0,   229,     0,   230,     0,     0,     0,   233,   234,
     528,     0,   237,     0,   238,   239,     0,     0,   240,   241,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
       0,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   264,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   273,     0,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,     0,   287,     0,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   529,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,     0,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,     0,   421,   422,   423,   424,   425,   426,     0,   428,
     429,   430,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   530,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   453,   454,   455,
     456,   457,     0,   458,   459,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
       0,     0,   481,   482,   483,   484,   485,   486,   487,     0,
     488,     0,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,     0,     0,     0,  2004,  2005,
    2006,     0,  2007,  2008,  2009,  2010,  2011,  2012,  1601,     0,
       0,  1602,     0,     0,     0,  1603,  1604,  1605,  1606,  1607,
    1608,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1609,     0,     0,  1601,
       0,     0,  1602,     0,     0,  1611,  1603,  1604,  1605,  1606,
    1607,  1608,  1612,  1048,     0,     0,  3163,     0,     0,     0,
    3164,     0,     0,     0,     0,     0,     0,  1609,     0,     0,
       0,     0,     0,     0,     0,     0,  1611,  1613,     0,     0,
       0,     0,     0,  1612,  1601,     0,     0,  1602,     0,     0,
    3171,  1603,  1604,  1605,  1606,  1607,  1608, -2115,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1613,     0,
       0,     0,  1609,     0,     0,     0,     0,     0,     0,     0,
       0,  1611,  3173,     0,     0,     0,     0,     0,  1612,     0,
       0,     0,     0,     0,  1601,     0,     0,  1602,     0,     0,
       0,  1603,  1604,  1605,  1606,  1607,  1608,     0,     0,     0,
       0,     0,     0,  1613,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,     0,     0,  1601,     0,     0,  1602,     0,
       0,  1611,  1603,  1604,  1605,  1606,  1607,  1608,  1612,     0,
       0,  1614,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1609,     0,  3576,     0,     0,     0,     0,
    1615,     0,  1611,  1613,     0,  1616,     0,     0,     0,  1612,
       0,     0,  1614,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2115,  1617,  1618,     0,
       0,  1615,     0,     0,  1613,     0,  1616,     0,     0,     0,
       0,     0,     0,  1619,     0, -2115,     0,     0,     0,     0,
   -2115,     0,     0,     0,     0,     0,     0,  1614,  1617,  1618,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1619,     0,  1615,     0,     0,     0,
       0,  1616,  1620,     0,     0,  1621,     0,     0, -2115,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1622,
       0,     0,  1623,  1617,  1618,     0,     0,  1614,     0,     0,
       0,     0,     0,  1620,     0,     0,  1621,     0,     0,  1619,
       0,     0,     0,     0,     0,     0,  1615,     0,     0,     0,
    1622,  1616,     0,  1623,     0,     0,     0,     0,  1614,     0,
       0,     0,     0,     0,  1917,     0,     0,     0,     0,     0,
       0,     0,     0,  1617,  1618,     0,     0,  1615,  1620,     0,
       0,  1621,  1616,     0,     0,     0,     0,     0,     0,  1619,
       0,     0,     0,     0,     0,  1622,     0,     0,  1623,     0,
       0,     0,     0,     0,  1617,  1618,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1624,     0,
    1619,     0,     0,     0,     0,     0,     0,     0,  1620,  1601,
       0,  1621,  1602,     0,     0,     0,  1603,  1604,  1605,  1606,
    1607,  1608,     0,     0,     0,  1622,     0,     0,  1623,  1624,
       0,     0,     0,     0,     0,     0,     0,  1609,     0,  1620,
       0,     0,  1621, -2115,     0,     0,  1611,     0,     0,     0,
       0,     0,     0,  1612,     0,     0,  1622,  1601,     0,  1623,
    1602,     0,     0,     0,  1603,  1604,  1605,  1606,  1607,  1608,
       0,     0,     0,     0,  1624,     0,     0,     0,  1613,     0,
       0,     0,     0,     0,     0,  1609,     0,     0,     0,     0,
       0,     0,     0,     0,  1611,     0,     0,     0,     0,     0,
       0,  1612,     0,     0,     0,  1625,     0,     0,  1626,  1627,
    1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,     0,
       0,     0,  2626,     0,  1624,     0,  1613,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1625,     0,     0,  1626,
    1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,
   -2115,     0,     0,  2668,     0,  1624,     0,  3189,  3190,  3191,
    3192,  3193,  3194,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1625,  1614,     0,  1626,  1627,  1628,     0,  1629,  1630,
    1631,  1632,  1633,  1634,     0,     0,     0,     0,  2755,     0,
       0,  1615,     0,     0,     0,     0,  1616,     0,     0,  1601,
       0,     0,  1602,     0,     0,     0,  1603,  1604,  1605,  1606,
    1607,  1608,     0,     0,     0,     0,     0,     0,  1617,  1618,
    1614,  1625,     0,     0,  1626,  1627,  1628,  1609,  1629,  1630,
    1631,  1632,  1633,  1634,  1619,     0,  1611,     0,  2967,  1615,
       0,     0,     0,  1612,  1616,     0,     0,     0,     0,     0,
       0,     0,  1625,     0,     0,  1626,  1627,  1628,     0,  1629,
    1630,  1631,  1632,  1633,  1634,     0,  1617,  1618,  1613,  2970,
       0,     0,     0,  1620,     0,     0,  1621,     0,     0,     0,
       0,     0,  1619,     0,     0,     0,     0,     0,     0,     0,
    1622,  1601,     0,  1623,  1602,     0,     0,     0,  1603,  1604,
    1605,  1606,  1607,  1608,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,  1620,     0,     0,  1621,     0,     0,     0,  1611,     0,
       0,     0,     0,     0,     0,  1612,     0,     0,  1622,  1601,
       0,  1623,  1602,     0,     0,     0,  1603,  1604,  1605,  1606,
    1607,  1608,     0,     0,     0,     0,     0,     0,     0,     0,
    1613,     0,     0,     0,     0,     0,     0,  1609,     0,     0,
       0,     0,  1614,     0,     0,     0,  1611,     0,     0,     0,
       0,     0,     0,  1612,     0,     0,     0,     0,     0,  1624,
       0,  1615,     0,     0,     0,     0,  1616,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1613,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1617,  1618,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1619,     0,     0,  1624,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,     0,     0,
    1602,     0,     0,     0,  1603,  1604,  1605,  1606,  1607,  1608,
       0,     0,     0,     0,  1614,     0,     0,     0,     0,     0,
       0,     0,     0,  1620,     0,  1609,  1621,     0,     0,     0,
       0,     0,     0,  1615,  1611,     0,     0,     0,  1616,     0,
    1622,  1612,     0,  1623,     0,     0,  1625,     0,     0,  1626,
    1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,
    1617,  1618,  1614,  3137,     0,     0,  1613,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1619,     0,     0,     0,
       0,  1615,     0,     0,     0,     0,  1616,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,     0,  1626,  1627,  1628,
       0,  1629,  1630,  1631,  1632,  1633,  1634,     0,  1617,  1618,
       0,  3212,     0,     0,     0,  1620,     0,     0,  1621,     0,
       0,     0,     0,     0,  1619,     0,     0,     0,     0,     0,
       0,     0,  1622,     0,  1601,  1623,     0,  1602,     0,  1624,
       0,  1603,  1604,  1605,  1606,  1607,  1608,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,  1620,     0,     0,  1621,     0,     0,     0,
    1614,  1611,     0,     0,     0,     0,     0,     0,  1612,     0,
    1622,     0,     0,  1623,     0,     0,     0,     0,     0,  1615,
       0,     0,     0,     0,  1616,     0,     0,     0,     0,     0,
       0,     0,     0,  1613,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1617,  1618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1624,  1619,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1625,     0,     0,  1626,
    1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,
       0,     0,     0,  3363,     0,     0,     0,     0,     0,     0,
       0,  1620,     0,     0,  1621,     0,     0,     0,     0,  1624,
       0,     0,     0,     0,     0,     0,     0,     0,  1622,     0,
       0,  1623,  1601,     0,     0,  1602,     0,     0,     0,  1603,
    1604,  1605,  1606,  1607,  1608,     0,     0,  1614,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1609,     0,     0,     0,     0,     0,  1615,     0,     0,  1611,
       0,  1616,     0,     0,     0,     0,  1612,     0,  1625,     0,
       0,  1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,
    1634,     0,     0,  1617,  1618,  3455,     0,     0,     0,     0,
       0,  1613,     0,     0,     0,     0,     0,     0,     0,  1619,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1625,  1624,     0,  1626,
    1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,
       0,     0,     0,  3484,     0,     0,     0,     0,  1620,     0,
       0,  1621,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1622,     0,     0,  1623,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1614,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1615,     0,     0,     0,     0,  1616,
       0,     0,     0,     0,  1625,     0,     0,  1626,  1627,  1628,
       0,  1629,  1630,  1631,  1632,  1633,  1634,     0,     0,  1791,
       0,  1617,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1624,     0,     0,  1619,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1620,     0,     0,  1621,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1622,     0,     0,  1623,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1625,     0,     0,  1626,  1627,  1628,     0,  1629,  1630,
    1631,  1632,  1633,  1634,     0,     0,  3131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1624,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1278,     0,  1625,
       0,     0,  1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,
    1633,  1634,     0,     0,  3410,   108,   109,   110,   111,     0,
     113,   114,   115,   116,  1279,   117,   118,   119,  1280,  1281,
    1282,  1283,     0,  1284,  1285,  1286,   121,   122,  1287,   123,
     124,   125,   887,   127,   128,   129,   888,   889,   890,   891,
     892,  1288,   135,   136,   137,   138,   139,   140,  1289,  1290,
     141,   142,   893,   894,   145,  1291,   146,   147,   148,   149,
     895,  1292,   896,  1293,   897,   153,   154,   155,   156,   157,
     898,   159,   160,   161,  1294,   162,   163,   164,   165,   166,
     167,  1295,   899,   169,   170,   171,   900,   901,   902,   903,
    1296,  1297,   904,   177,   178,   179,   180,   181,   182,   183,
     905,   906,   186,  1298,   187,  1299,   188,   189,   190,   191,
     192,   193,  1300,   194,     0,   196,   197,   198,   199,  1301,
    1302,   200,   201,   202,   203,   204,     0,     0,  1303,   207,
     208,   209,  1304,   210,   211,   212,  1305,   213,   214,   215,
     216,   907,   218,   219,   220,   221,   222,   908,  1306,   224,
    1307,   225,   226,   909,   228,  1308,   229,  1309,   230,   910,
    1310,   911,   233,   234,   912,   913,   237,  1311,   238,     0,
    1312,  1313,   914,   915,     0,   243,  1314,   244,   245,   246,
     247,   248,   249,   250,   916,   252,   253,   254,   255,  1315,
     256,   257,   258,   259,   260,   261,  1316,   262,   917,   918,
     265,   266,   267,   268,   269,   919,   920,  1317,   921,  1318,
     273,   922,   923,   276,   924,   278,     0,   280,   281,   282,
     283,   284,  1319,  1320,   285,   925,   287,   926,  1321,   289,
     290,   291,  1322,  1323,   292,   293,   294,   295,   296,   927,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   928,   929,
     930,   319,   320,   321,     0,   931,  1324,   324,   325,   932,
     327,  1325,   933,   329,   934,   331,   332,   333,  1326,   334,
     335,  1327,  1328,   336,   337,   338,  1329,  1330,   339,   935,
     936,   342,   937,   938,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,     0,   356,  1331,   357,   358,   939,
     940,   361,   362,   941,   364,   365,   366,  1332,   367,   368,
     369,   370,   371,     0,     0,   374,  1333,   375,   376,   377,
     942,   379,   380,   381,   382,  1334,   383,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
    1335,   397,   398,   943,   400,   401,   402,   944,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,  1336,
     415,   416,   417,   418,   419,   945,   421,   946,   423,   424,
       0,   426,   947,     0,   429,   948,   431,  1337,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   949,   446,   950,   448,  1338,   449,   450,  1339,   451,
     951,   453,   454,   455,   456,   457,  1340,   952,   953,  1341,
       0,  1342,   461,   462,   954,   464,   955,  1343,   466,   467,
     956,   469,   470,   471,   472,   473,  1344,  1345,   474,   475,
     476,   477,   478,   479,   957,  1346,   481,   482,   483,   484,
     485,  1347,   959,  1348,   488,   960,   490,     0,   492,   493,
     494,   495,     0,  1349,  1350,   497,  1351,  1352,   498,   499,
     500,   501,   502,   503,   961,   962,   963,   964,   965,   966,
     967,   968,   969,   970,   971,   515,   516,   517,   518,   527,
       0,     0,     0,     0,     0,     0,     0,     0,  2097,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,     0,     0,     0,   121,   122,
       0,   123,   124,   125,     0,   127,   128,   129,   130,   131,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
       0,     0,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,     0,     0,     0,   152,   153,   154,   155,
     156,   157,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   169,   170,   171,     0,     0,
       0,     0,     0,     0,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,     0,   225,   226,   227,   228,     0,   229,     0,
     230,     0,     0,     0,   233,   234,   528,     0,   237,     0,
     238,   239,     0,     0,   240,   241,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,     0,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,     0,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,     0,   287,     0,
       0,   289,   290,   291,     0,     0,   292,   293,   294,   295,
     296,   529,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,   327,     0,   328,   329,   330,   331,   332,   333,
       0,   334,   335,     0,     0,   336,   337,   338,     0,     0,
     339,   340,     0,   342,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,     0,   421,   422,
     423,   424,   425,   426,     0,   428,   429,   430,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   530,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   453,   454,   455,   456,   457,     0,   458,
     459,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,     0,     0,   481,   482,
     483,   484,   485,   486,   487,     0,   488,     0,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   527,     0,     0,     0,     0,     0,     0,     0,     0,
    2619,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,     0,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   127,   128,   129,
     130,   131,     0,   133,   134,     0,   135,   136,   137,   138,
     139,   140,     0,     0,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,     0,     0,     0,   152,   153,
     154,   155,   156,   157,     0,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,     0,   169,   170,   171,
       0,     0,     0,     0,     0,     0,     0,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   528,     0,
     237,     0,   238,   239,     0,     0,   240,   241,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,     0,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   264,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   273,     0,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,     0,
     287,     0,     0,   289,   290,   291,     0,     0,   292,   293,
     294,   295,   296,   529,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,   327,     0,   328,   329,   330,   331,
     332,   333,     0,   334,   335,     0,     0,   336,   337,   338,
       0,     0,   339,   340,     0,   342,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,     0,
     421,   422,   423,   424,   425,   426,     0,   428,   429,   430,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   530,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   453,   454,   455,   456,   457,
       0,   458,   459,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,     0,     0,
     481,   482,   483,   484,   485,   486,   487,     0,   488,     0,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   886,  1463,   538,     0,     0,     0,  1049,
       0,     0,  2622,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,     0,   123,   124,   125,   887,   127,
     128,   129,   888,   889,   890,   891,   892,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   893,   894,
     145,     0,   146,   147,   148,   149,   895,     0,   896,     0,
     897,   153,   154,   155,   156,   157,   898,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   899,   169,
     170,   171,   900,   901,   902,   903,     0,     0,   904,   177,
     178,   179,   180,   181,   182,   183,   905,   906,   186,  1660,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
       0,   196,   197,   198,   199,     0,     0,   200,   201,   202,
     203,   204,     0,     0,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,   907,   218,   219,
     220,   221,   222,   908,  1464,   224,     0,   225,   226,   909,
     228,     0,   229,     0,   230,   910,     0,   911,   233,   234,
     912,   913,   237,     0,   238,     0,     0,     0,   914,   915,
       0,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     916,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   917,   918,   265,   266,   267,   268,
     269,   919,   920,     0,   921,     0,   273,   922,   923,   276,
     924,   278,     0,   280,   281,   282,   283,   284,     0,     0,
     285,   925,   287,   926,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   927,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   928,   929,   930,   319,   320,   321,
       0,   931,     0,   324,   325,   932,   327,     0,   933,   329,
     934,   331,   332,   333,     0,   334,   335,  1465,     0,   336,
     337,   338,     0,     0,   339,   935,   936,   342,   937,   938,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
       0,   356,     0,   357,   358,   939,   940,   361,   362,   941,
     364,   365,   366,     0,   367,   368,   369,   370,   371,     0,
       0,   374,     0,   375,   376,   377,   942,   379,   380,   381,
     382,     0,   383,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   943,
     400,   401,   402,   944,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   945,   421,   946,   423,   424,     0,   426,   947,     0,
     429,   948,   431,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   949,   446,   950,
     448,     0,   449,   450,     0,   451,   951,   453,   454,   455,
     456,   457,     0,   952,   953,     0,     0,     0,   461,   462,
     954,   464,   955,  1466,   466,   467,   956,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     957,     0,   481,   482,   483,   484,   485,  1347,   959,     0,
     488,   960,   490,     0,   492,   493,   494,   495,     0,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     961,   962,   963,   964,   965,   966,   967,   968,   969,   970,
     971,   515,   516,   517,   518,   886,  1463,   538,     0,     0,
       0,  1049,  1467,  1468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,     0,   123,   124,   125,
     887,   127,   128,   129,   888,   889,   890,   891,   892,     0,
     135,   136,   137,   138,   139,   140,     0,     0,   141,   142,
     893,   894,   145,     0,   146,   147,   148,   149,   895,     0,
     896,     0,   897,   153,   154,   155,   156,   157,   898,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     899,   169,   170,   171,   900,   901,   902,   903,     0,     0,
     904,   177,   178,   179,   180,   181,   182,   183,   905,   906,
     186,  1662,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   196,   197,   198,   199,     0,     0,   200,
     201,   202,   203,   204,     0,     0,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,   907,
     218,   219,   220,   221,   222,   908,  1464,   224,     0,   225,
     226,   909,   228,     0,   229,     0,   230,   910,     0,   911,
     233,   234,   912,   913,   237,     0,   238,     0,     0,     0,
     914,   915,     0,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   916,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   917,   918,   265,   266,
     267,   268,   269,   919,   920,     0,   921,     0,   273,   922,
     923,   276,   924,   278,     0,   280,   281,   282,   283,   284,
       0,     0,   285,   925,   287,   926,     0,   289,   290,   291,
       0,     0,   292,   293,   294,   295,   296,   927,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   928,   929,   930,   319,
     320,   321,     0,   931,     0,   324,   325,   932,   327,     0,
     933,   329,   934,   331,   332,   333,     0,   334,   335,  1465,
       0,   336,   337,   338,     0,     0,   339,   935,   936,   342,
     937,   938,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,     0,   356,     0,   357,   358,   939,   940,   361,
     362,   941,   364,   365,   366,     0,   367,   368,   369,   370,
     371,     0,     0,   374,     0,   375,   376,   377,   942,   379,
     380,   381,   382,     0,   383,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   943,   400,   401,   402,   944,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   945,   421,   946,   423,   424,     0,   426,
     947,     0,   429,   948,   431,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   949,
     446,   950,   448,     0,   449,   450,     0,   451,   951,   453,
     454,   455,   456,   457,     0,   952,   953,     0,     0,     0,
     461,   462,   954,   464,   955,  1466,   466,   467,   956,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   957,     0,   481,   482,   483,   484,   485,  1347,
     959,     0,   488,   960,   490,     0,   492,   493,   494,   495,
       0,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   961,   962,   963,   964,   965,   966,   967,   968,
     969,   970,   971,   515,   516,   517,   518,   886,  1463,   538,
       0,     0,     0,  1049,  1467,  1468,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,     0,   123,
     124,   125,   887,   127,   128,   129,   888,   889,   890,   891,
     892,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     141,   142,   893,   894,   145,     0,   146,   147,   148,   149,
     895,     0,   896,     0,   897,   153,   154,   155,   156,   157,
     898,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   899,   169,   170,   171,   900,   901,   902,   903,
       0,     0,   904,   177,   178,   179,   180,   181,   182,   183,
     905,   906,   186,     0,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,     0,   196,   197,   198,   199,     0,
       0,   200,   201,   202,   203,   204,     0,     0,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   907,   218,   219,   220,   221,   222,   908,  1464,   224,
       0,   225,   226,   909,   228,     0,   229,     0,   230,   910,
       0,   911,   233,   234,   912,   913,   237,     0,   238,     0,
       0,     0,   914,   915,     0,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   916,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   917,   918,
     265,   266,   267,   268,   269,   919,   920,     0,   921,     0,
     273,   922,   923,   276,   924,   278,     0,   280,   281,   282,
     283,   284,     0,     0,   285,   925,   287,   926,     0,   289,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   927,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   928,   929,
     930,   319,   320,   321,     0,   931,     0,   324,   325,   932,
     327,     0,   933,   329,   934,   331,   332,   333,     0,   334,
     335,  1465,     0,   336,   337,   338,     0,     0,   339,   935,
     936,   342,   937,   938,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,     0,   356,     0,   357,   358,   939,
     940,   361,   362,   941,   364,   365,   366,     0,   367,   368,
     369,   370,   371,     0,     0,   374,     0,   375,   376,   377,
     942,   379,   380,   381,   382,     0,   383,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   943,   400,   401,   402,   944,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   945,   421,   946,   423,   424,
       0,   426,   947,     0,   429,   948,   431,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   949,   446,   950,   448,     0,   449,   450,     0,   451,
     951,   453,   454,   455,   456,   457,     0,   952,   953,     0,
       0,     0,   461,   462,   954,   464,   955,  1466,   466,   467,
     956,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   957,     0,   481,   482,   483,   484,
     485,  1347,   959,     0,   488,   960,   490,     0,   492,   493,
     494,   495,     0,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   961,   962,   963,   964,   965,   966,
     967,   968,   969,   970,   971,   515,   516,   517,   518,     0,
       0,  1601,     0,     0,  1602,     0,  1467,  1468,  1603,  1604,
    1605,  1606,  1607,  1608,  1601,     0,     0,  1602,     0,     0,
       0,  1603,  1604,  1605,  1606,  1607,  1608,     0,     0,  1609,
       0,     0,     0,     0,     0,     0,     0,     0,  1611,     0,
       0,     0,  1609,     0,     0,  1612,     0,     0,     0,     0,
       0,  1611,     0,     0,  1601,     0,     0,  1602,  1612,     0,
       0,  1603,  1604,  1605,  1606,  1607,  1608,     0,     0,     0,
    1613,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,  1613,     0,     0,  1894,     0,     0,     0,
       0,  1611,     0,     0,     0,     0,     0,     0,  1612,     0,
       0,     0,     0,     0,  1601,     0,     0,  1602,     0,     0,
       0,  1603,  1604,  1605,  1606,  1607,  1608,     0,     0,     0,
       0,     0,     0,  1613,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,     0,     0,     0,     0,     0,     0,     0,
       0,  1611,     0,     0,     0,     0,     0,     0,  1612,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1933,     0,     0,     0,     0,  1934,
       0,     0,     0,  1613,  1614,     0,  3598,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1614,     0,     0,
       0,     0,     0,  1615,     0,     0,     0,     0,  1616,     0,
       0,     0,     0,     0,     0,     0,  1615,     0,     0,     0,
       0,  1616,     0,     0,     0,     0,     0,     0,     0,     0,
    1617,  1618,     0,     0,     0,     0,     0,  1614,     0,     0,
       0,     0,     0,  1617,  1618,     0,  1619,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1615,     0,     0,  1619,
       0,  1616,     0,  1601,     0,     0,  1602,     0,     0,     0,
    1603,  1604,  1605,  1606,  1607,  1608,     0,     0,     0,     0,
       0,     0,     0,  1617,  1618,  1620,     0,  1614,  1621,     0,
       0,  1609,     0,     0,     0,  1939,     0,     0,  1620,  1619,
    1611,  1621,  1622,     0,     0,  1623,  1615,  1612,     0,     0,
       0,  1616,     0,     0,     0,  1622,     0,     0,  1623,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1613,  1617,  1618,     0,     0,     0,  1620,     0,
       0,  1621,     0,     0,  3599,     0,     0,     0,     0,  1619,
       0,     0,     0,     0,     0,  1622,     0,     0,  1623,     0,
       0,     0,     0,     0,     0,     0,  1601,     0,     0,  1602,
       0,     0,     0,  1603,  1604,  1605,  1606,  1607,  1608,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1620,     0,
       0,  1621,     0,     0,  1609,     0,     0,     0,     0,     0,
       0,  1624,     0,  1611,     0,  1622,     0,     0,  1623,     0,
    1612,     0,     0,     0,  1624,  1601,     0,     0,  1602,     0,
       0,     0,  1603,  1604,  1605,  1606,  1607,  1608,  1905,     0,
       0,     0,     0,     0,     0,  1613,  1614,     0,     0,     0,
       0,     0,     0,  1609,     0,     0,     0,  1946,     0,     0,
       0,     0,  1611,     0,  1624,  1615,     0,     0,     0,  1612,
    1616,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1617,  1618,  1613,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1619,     0,
       0,     0,     0,     0,  1624,     0,     0,     0,  1625,     0,
       0,  1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,
    1634,  1625,     0,     0,  1626,  1627,  1628,     0,  1629,  1630,
    1631,  1632,  1633,  1634,  1944,     0,     0,  1620,     0,  1614,
    1621,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1622,     0,     0,  1623,  1615,     0,
       0,  1625,     0,  1616,  1626,  1627,  1628,     0,  1629,  1630,
    1631,  1632,  1633,  1634,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1617,  1618,     0,  1614,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1619,     0,     0,     0,     0,     0,  1615,     0,     0,
       0,  1625,  1616,     0,  1626,  1627,  1628,     0,  1629,  1630,
    1631,  1632,  1633,  1634,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1617,  1618,     0,     0,     0,     0,
    1620,     0,     0,  1621,     0,     0,     0,     0,     0,     0,
    1619,     0,     0,  1624,     0,     0,     0,  1622,  1601,     0,
    1623,  1602,     0,     0,     0,  1603,  1604,  1605,  1606,  1607,
    1608,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1609,     0,     0,  1620,
       0,     0,  1621,     0,     0,  1611,     0,     0,     0,     0,
       0,     0,  1612,     0,     0,     0,  1622,  1601,     0,  1623,
    1602,     0,     0,     0,  1603,  1604,  1605,  1606,  1607,  1608,
       0,     0,     0,     0,     0,     0,     0,  1613,     0,     0,
       0,     0,     0,     0,     0,  1609,     0,     0,     0,     0,
       0,     0,     0,     0,  1611,     0,     0,     0,     0,     0,
       0,  1612,     0,     0,     0,     0,  1624,     0,     0,     0,
    1625,     0,     0,  1626,  1627,  1628,     0,  1629,  1630,  1631,
    1632,  1633,  1634,     0,     0,     0,  1613,     0,     0,     0,
    1601,     0,     0,  1602,     0,     0,     0,  1603,  1604,  1605,
    1606,  1607,  1608,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1624,     0,     0,  1609,     0,
       0,     0,  2666,     0,     0,     0,     0,  1611,     0,     0,
       0,  2022,     0,     0,  1612,     0,     0,     0,     0,     0,
       0,  1614,  1601,     0,     0,  1602,     0,     0,     0,  1603,
    1604,  1605,  1606,  1607,  1608,     0,     0,     0,     0,  1613,
    1615,     0,     0,     0,     0,  1616,     0,     0,     0,     0,
    1609,     0,     0,  1625,     0,     0,  1626,  1627,  1628,  1611,
    1629,  1630,  1631,  1632,  1633,  1634,  1612,  1617,  1618,     0,
    1614,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1619,     0,     0,     0,     0,     0,  1615,
       0,  1613,     0,     0,  1616,     0,     0,     0,     0,     0,
       0,     0,  1625,     0,     0,  1626,  1627,  1628,     0,  1629,
    1630,  1631,  1632,  1633,  1634,     0,  1617,  1618,     0,     0,
       0,     0,  1620,     0,     0,  1621,     0,     0,     0,     0,
       0,     0,  1619,     0,     0,     0,     0,     0,     0,  1622,
       0,     0,  1623,  1614,     0,     0,     0,     0,     0,  1048,
       0,     0,  3163,     0,     0,     0,  3164,  3165,  3166,  3167,
    3168,  3169,  1615,     0,     0,     0,     0,  1616,     0,     0,
       0,  1620,     0,     0,  1621,     0,     0,  3170,     0,     0,
       0,     0,     0,     0,     0,     0,  3171,     0,  1622,  1617,
    1618,  1623,     0,  3172,     0,  1614,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1619,     0,     0,     0,     0,
       0,     0,     0,     0,  1615,     0,     0,     0,  3173,  1616,
       0,  3174,  1048,     0,     0,  3163,     0,     0,     0,  3164,
    3165,  3166,  3167,  3168,  3169,     0,     0,     0,  1624,     0,
       0,  1617,  1618,     0,  1620,     0,     0,  1621,     0,     0,
    3170,     0,     0,     0,     0,     0,     0,  1619,     0,  3171,
       0,  1622,     0,     0,  1623,     0,  3172,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1624,     0,     0,
    1048,  3173,     0,  3163,     0,     0,  1620,  3164,     0,  1621,
    3167,  3168,  3169,     0,     0,     0,     0,     0,     0,     0,
    3500,     0,     0,  1622,     0,     0,  1623,     0,  3170,     0,
       0,  2656,  3175,     0,     0,     0,     0,  3171,     0,     0,
       0,     0,     0,     0,  3172,     0,     0,     0,     0,     0,
       0,  3176,     0,     0,     0,  1625,  3177,     0,  1626,  1627,
    1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,  3173,
    1624,     0,     0,     0,     0,     0,     0,     0,  3178,  3179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,  3175,     0,  1626,  1627,  1628,
       0,  1629,  1630,  1631,  1632,  1633,  1634,     0,     0,     0,
       0,     0,  1624,     0,  3176,     0,     0,     0,     0,  3177,
       0,     0,     0,  3181,  1601,     0,  3182,  1602,     0,     0,
       0,  1603,  1604,  1605,  1606,  1607,  1608,     0,     0,     0,
    1917,  3178,  3179,  3183,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,     0,     0,     0,     0,  3180,     0,     0,
       0,  1611,     0,  3175,     0,     0,     0,  1625,  1612,     0,
    1626,  1627,  1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,
       0,     0,  3176,     0,     0,     0,     0,  3177,     0,     0,
       0,     0,     0,  1613,     0,     0,  3181,     0,     0,  3182,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3178,
    3179,     0,     0,  1917,     0,     0,  3183,     0,     0,  1625,
       0,     0,  1626,  1627,  1628,  3180,  1629,  1630,  1631,  1632,
    1633,  1634,     0,     0,     0,     0,     0,     0,     0,  3184,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,  1603,     0,     0,  1606,  1607,
    1608,     0,     0,     0,  3181,     0,     0,  3182,     0,     0,
       0,     0,     0,     0,     0,     0,  1609,     0,     0,     0,
       0,  1917,     0,  1048,  3183,  1611,  3163,     0,     0,     0,
    3164,     0,  1612,  3167,  3168,  3169,  1048,  1614,     0,  3163,
       0,     0,     0,  3164,     0,     0,  3167,  3168,  3169,     0,
       0,  3170,  3184,     0,     0,     0,  1615,  1613,     0,     0,
    3171,  1616,     0,     0,     0,     0,     0,  3172,     0,     0,
       0,     0,     0,  3171,     0,     0,     0,     0,     0,     0,
    3172,     0,     0,  1617,  1618,     0,  3185,     0,     0,  3186,
    3187,  3188,  3173,  3189,  3190,  3191,  3192,  3193,  3194,  1619,
       0,     0,     0,     0,     0,  3173,     0,     0,     0,     0,
       0,     0,  1048,     0,     0,  3163,     0,     0,     0,  3164,
    3184,     0,  3167,  3168,  3169,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1620,     0,
       0,  1621,     0,     0,     0,     0,     0,     0,     0,  3171,
       0,     0,     0,     0,     0,  1622,  3172,     0,  1623,  3185,
       0,  1614,  3186,  3187,  3188,     0,  3189,  3190,  3191,  3192,
    3193,  3194,     0,     0,     0,     0,     0,     0,     0,     0,
    1615,  3173,     0,     0,     0,  1616,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3175,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1617,  1618,  3175,
       0,     0,     0,     0,     0,  3176,     0,     0,     0,     0,
    3177,     0,     0,  1619,     0,     0,     0,  3185,  3176,     0,
    3186,  3187,  3188,  3177,  3189,  3190,  3191,  3192,  3193,  3194,
       0,     0,  3178,  3179,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1624,  3178,  3179,     0,  3180,     0,
       0,     0,  1620,     0,     0,  1621,     0,     0,     0,     0,
       0,  3180,     0,     0,     0,     0,     0,     0,     0,  1622,
       0,     0,     0,     0,     0,  3175,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3181,     0,     0,
    3182,     0,     0,     0,  3176,     0,     0,     0,     0,  3177,
    3181,     0,     0,  3182,  1917,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1917,     0,     0,
       0, -2115, -2115,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3180,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1625,     0,     0,  1626,  1627,  1628,     0,  1629,  1630,
    1631,  1632,  2146,  1634,     0,     0,     0,     0,  1624,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2115,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1917,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3184,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3184,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1625,     0,     0,  1626,  1627,
    1628,     0,  1629,  1630,  1631,  1632,  1633,  1634,     0,     0,
       0,     0,  3184,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3185,     0,     0,  3186,  3187,  3188,     0,  3189,  3190,  3191,
    3192,  3193,  3194,  3185,     0,     0,  3186,  3187,  3188,     0,
    3189,  3190,  3191,  3192,  3193,  3194,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1278,     0,  2041,     0,     0,  3185,
       0,     0,  3186,  3187,  3188,     0,  3189,  3190,  3191,  3192,
    3193,  3194,   108,   109,   110,   111,     0,   113,   114,   115,
     116,  1279,   117,   118,   119,  1280,  1281,  1282,  1283,     0,
    1284,  1285,  1286,   121,   122,  1287,   123,   124,   125,   887,
     127,   128,   129,   888,   889,   890,   891,   892,  1288,   135,
     136,   137,   138,   139,   140,  1289,  1290,   141,   142,   893,
     894,   145,  1291,   146,   147,   148,   149,   895,  1292,   896,
    1293,   897,   153,   154,   155,   156,   157,   898,   159,   160,
     161,  1294,   162,   163,   164,   165,   166,   167,  1295,   899,
     169,   170,   171,   900,   901,   902,   903,  1296,  1297,   904,
     177,   178,   179,   180,   181,   182,   183,   905,   906,   186,
    1298,   187,  1299,   188,   189,   190,   191,   192,   193,  1300,
     194,     0,   196,   197,   198,   199,  1301,  1302,   200,   201,
     202,   203,   204,     0,     0,  1303,   207,   208,   209,  1304,
     210,   211,   212,  1305,   213,   214,   215,   216,   907,   218,
     219,   220,   221,   222,   908,  1306,   224,  1307,   225,   226,
     909,   228,  1308,   229,  1309,   230,   910,  1310,   911,   233,
     234,   912,   913,   237,  1311,   238,     0,  1312,  1313,   914,
     915,     0,   243,  1314,   244,   245,   246,   247,   248,   249,
     250,   916,   252,   253,   254,   255,  1315,   256,   257,   258,
     259,   260,   261,  1316,   262,   917,   918,   265,   266,   267,
     268,   269,   919,   920,  1317,   921,  1318,   273,   922,   923,
     276,   924,   278,     0,   280,   281,   282,   283,   284,  1319,
    1320,   285,   925,   287,   926,  1321,   289,   290,   291,  1322,
    1323,   292,   293,   294,   295,   296,   927,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   928,   929,   930,   319,   320,
     321,     0,   931,  1324,   324,   325,   932,   327,  1325,   933,
     329,   934,   331,   332,   333,  1326,   334,   335,  1327,  1328,
     336,   337,   338,  1329,  1330,   339,   935,   936,   342,   937,
     938,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,     0,   356,  1331,   357,   358,   939,   940,   361,   362,
     941,   364,   365,   366,  1332,   367,   368,   369,   370,   371,
       0,     0,   374,  1333,   375,   376,   377,   942,   379,   380,
     381,   382,  1334,   383,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,  1335,   397,   398,
     943,   400,   401,   402,   944,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1336,   415,   416,   417,
     418,   419,   945,   421,   946,   423,   424,     0,   426,   947,
       0,   429,   948,   431,  1337,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   949,   446,
     950,   448,  1338,   449,   450,  1339,   451,   951,   453,   454,
     455,   456,   457,  1340,   952,   953,  1341,     0,  1342,   461,
     462,   954,   464,   955,  1343,   466,   467,   956,   469,   470,
     471,   472,   473,  1344,  1345,   474,   475,   476,   477,   478,
     479,   957,  1346,   481,   482,   483,   484,   485,  1347,   959,
    1348,   488,   960,   490,     0,   492,   493,   494,   495,     0,
    1349,  1350,   497,  1351,  1352,   498,   499,   500,   501,   502,
     503,   961,   962,   963,   964,   965,   966,   967,   968,   969,
     970,   971,   515,   516,   517,   518,  1278,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   113,
     114,   115,   116,  1279,   117,   118,   119,  1280,  1281,  1282,
    1283,     0,  1284,  1285,  1286,   121,   122,  1287,   123,   124,
     125,   887,   127,   128,   129,   888,   889,   890,   891,   892,
    1288,   135,   136,   137,   138,   139,   140,  1289,  1290,   141,
     142,   893,   894,   145,  1291,   146,   147,   148,   149,   895,
    1292,   896,  1293,   897,   153,   154,   155,   156,   157,   898,
     159,   160,   161,  1294,   162,   163,   164,   165,   166,   167,
    1295,   899,   169,   170,   171,   900,   901,   902,   903,  1296,
    1297,   904,   177,   178,   179,   180,   181,   182,   183,   905,
     906,   186,  1298,   187,  1299,   188,   189,   190,   191,   192,
     193,  1300,   194,     0,   196,   197,   198,   199,  1301,  1302,
     200,   201,   202,   203,   204,     0,     0,  1303,   207,   208,
     209,  1304,   210,   211,   212,  1305,   213,   214,   215,   216,
     907,   218,   219,   220,   221,   222,   908,  1306,   224,  1307,
     225,   226,   909,   228,  1308,   229,  1309,   230,   910,  1310,
     911,   233,   234,   912,   913,   237,  1311,   238,     0,  1312,
    1313,   914,   915,     0,   243,  1314,   244,   245,   246,   247,
     248,   249,   250,   916,   252,   253,   254,   255,  1315,   256,
     257,   258,   259,   260,   261,  1316,   262,   917,   918,   265,
     266,   267,   268,   269,   919,   920,  1317,   921,  1318,   273,
     922,   923,   276,   924,   278,     0,   280,   281,   282,   283,
     284,  1319,  1320,   285,   925,   287,   926,  1321,   289,   290,
     291,  1322,  1323,   292,   293,   294,   295,   296,   927,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   928,   929,   930,
     319,   320,   321,     0,   931,  1324,   324,   325,   932,   327,
    1325,   933,   329,   934,   331,   332,   333,  1326,   334,   335,
    1327,  1328,   336,   337,   338,  1329,  1330,   339,   935,   936,
     342,   937,   938,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,     0,   356,  1331,   357,   358,   939,   940,
     361,   362,   941,   364,   365,   366,  1332,   367,   368,   369,
     370,   371,     0,     0,   374,  1333,   375,   376,   377,   942,
     379,   380,   381,   382,  1334,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,  1335,
     397,   398,   943,   400,   401,   402,   944,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1336,   415,
     416,   417,   418,   419,   945,   421,   946,   423,   424,     0,
     426,   947,     0,   429,   948,   431,  1337,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     949,   446,   950,   448,  1338,   449,   450,  1339,   451,   951,
     453,   454,   455,   456,   457,  1340,   952,   953,  1341,     0,
    1342,   461,   462,   954,   464,   955,  1343,   466,   467,   956,
     469,   470,   471,   472,   473,  1344,  1345,   474,   475,   476,
     477,   478,   479,   957,  1346,   481,   482,   483,   484,   485,
    1347,   959,  1348,   488,   960,   490,     0,   492,   493,   494,
     495,     0,  1349,  1350,   497,  1351,  1352,   498,   499,   500,
     501,   502,   503,   961,   962,   963,   964,   965,   966,   967,
     968,   969,   970,   971,   515,   516,   517,   518,  1278,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,  2182,   114,   115,   116,  1279,   117,   118,   119,  1280,
    1281,  1282,  1283,     0,  1284,  1285,  1286,   121,   122,  1287,
     123,   124,   125,   887,   127,   128,   129,   888,   889,   890,
     891,   892,  1288,   135,   136,   137,   138,   139,   140,  1289,
    1290,   141,   142,   893,   894,   145,  1291,   146,   147,   148,
     149,   895,  1292,   896,  1293,   897,   153,   154,   155,   156,
     157,   898,   159,   160,   161,  1294,   162,   163,   164,   165,
     166,   167,  1295,   899,   169,   170,   171,   900,   901,   902,
     903,  1296,  1297,   904,   177,   178,   179,   180,   181,   182,
     183,   905,   906,   186,  1298,   187,  1299,   188,   189,   190,
     191,   192,   193,  1300,   194,     0,   196,   197,   198,   199,
    1301,  1302,   200,   201,   202,  2183,   204,     0,     0,  1303,
     207,   208,   209,  1304,   210,   211,   212,  1305,   213,   214,
     215,   216,   907,   218,   219,   220,   221,   222,   908,  1306,
     224,  1307,   225,   226,   909,   228,  1308,   229,  1309,   230,
     910,  1310,   911,   233,   234,   912,   913,   237,  1311,   238,
       0,  1312,  1313,   914,   915,     0,   243,  1314,   244,   245,
     246,   247,   248,   249,   250,   916,   252,   253,   254,   255,
    1315,   256,   257,   258,   259,   260,   261,  1316,   262,   917,
     918,   265,   266,   267,   268,   269,   919,   920,  1317,   921,
    1318,   273,   922,   923,   276,   924,   278,     0,   280,   281,
     282,   283,   284,  1319,  1320,   285,   925,   287,   926,  1321,
     289,   290,   291,  1322,  1323,   292,   293,   294,   295,   296,
     927,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   928,
     929,   930,   319,   320,   321,     0,   931,  1324,   324,   325,
     932,   327,  1325,   933,   329,   934,   331,   332,   333,  1326,
     334,   335,  1327,  1328,   336,   337,   338,  1329,  1330,   339,
     935,   936,   342,   937,   938,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,     0,   356,  1331,   357,   358,
     939,   940,   361,   362,   941,   364,   365,   366,  1332,   367,
     368,   369,   370,   371,     0,     0,   374,  1333,   375,   376,
     377,   942,   379,   380,   381,   382,  1334,   383,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,  1335,   397,   398,   943,   400,   401,   402,   944,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
    1336,   415,   416,   417,   418,   419,   945,  2184,   946,   423,
     424,     0,   426,   947,     0,   429,   948,   431,  1337,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   949,   446,   950,   448,  1338,   449,   450,  1339,
     451,   951,   453,   454,   455,   456,   457,  1340,   952,   953,
    1341,     0,  1342,   461,   462,   954,   464,   955,  1343,   466,
     467,   956,   469,   470,   471,   472,   473,  1344,  1345,   474,
     475,   476,   477,   478,   479,   957,  1346,   481,   482,   483,
     484,   485,  1347,   959,  1348,   488,   960,   490,     0,   492,
     493,   494,   495,     0,  1349,  1350,   497,  1351,  1352,   498,
     499,   500,   501,   502,   503,   961,   962,   963,   964,   965,
     966,   967,   968,   969,   970,   971,   515,   516,   517,   518,
     107,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,   630,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   631,     0,   632,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   633,
     634,   635,   636,   637,   638,   639,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     640,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,   231,     0,   232,   233,   234,   235,   236,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,   286,   287,
     288,     0,   289,   290,   291,   643,   644,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,     0,
     324,   325,   326,   327,     0,   645,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,   341,   342,   343,   647,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   648,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,   650,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   651,   448,     0,   449,
     450,     0,   451,   452,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   652,   464,   653,
       0,   466,   467,   654,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   655,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,   489,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   107,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,   231,     0,   232,   233,   234,   235,
     236,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
     286,   287,   288,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,     0,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,   480,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
     489,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   886,     0,   538,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,     0,
       0,     0,     0,   121,   122,     0,   123,   124,   125,   887,
     127,   128,   129,   888,   889,   890,   891,   892,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   893,
     894,   145,     0,   146,   147,   148,   149,   895,     0,   896,
       0,   897,   153,   154,   155,   156,   157,   898,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,   899,
     169,   170,   171,   900,   901,   902,   903,     0,     0,   904,
     177,   178,   179,   180,   181,   182,   183,   905,   906,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,     0,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,     0,     0,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   907,   218,
     219,   220,   221,   222,   908,  1464,   224,     0,   225,   226,
     909,   228,     0,   229,     0,   230,   910,     0,   911,   233,
     234,   912,   913,   237,     0,   238,     0,     0,     0,   914,
     915,     0,   243,     0,   244,   245,   246,   247,   248,   249,
     250,   916,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,   917,   918,   265,   266,   267,
     268,   269,   919,   920,     0,   921,     0,   273,   922,   923,
     276,   924,   278,     0,   280,   281,   282,   283,   284,     0,
       0,   285,   925,   287,   926,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   927,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   928,   929,   930,   319,   320,
     321,     0,   931,     0,   324,   325,   932,   327,     0,   933,
     329,   934,   331,   332,   333,     0,   334,   335,  1465,     0,
     336,   337,   338,     0,     0,   339,   935,   936,   342,   937,
     938,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,     0,   356,     0,   357,   358,   939,   940,   361,   362,
     941,   364,   365,   366,     0,   367,   368,   369,   370,   371,
       0,     0,   374,     0,   375,   376,   377,   942,   379,   380,
     381,   382,     0,   383,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     943,   400,   401,   402,   944,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   945,   421,   946,   423,   424,     0,   426,   947,
       0,   429,   948,   431,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   949,   446,
     950,   448,     0,   449,   450,     0,   451,   951,   453,   454,
     455,   456,   457,     0,   952,   953,     0,     0,     0,   461,
     462,   954,   464,   955,  1466,   466,   467,   956,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   957,     0,   481,   482,   483,   484,   485,  1347,   959,
       0,   488,   960,   490,     0,   492,   493,   494,   495,     0,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   961,   962,   963,   964,   965,   966,   967,   968,   969,
     970,   971,   515,   516,   517,   518,   886,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   113,
     114,   115,   116,     0,   117,   118,   119,     3,     4,     0,
       0,     0,     0,     0,     0,   121,   122,     0,   123,   124,
     125,   887,   127,   128,   129,   888,   889,   890,   891,   892,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   893,   894,   145,     0,   146,   147,   148,   149,   895,
       0,   896,     0,   897,   153,   154,   155,   156,   157,   898,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,   899,   169,   170,   171,   900,   901,   902,   903,     0,
       0,   904,   177,   178,   179,   180,   181,   182,   183,   905,
     906,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,     0,     0,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     907,   218,   219,   220,   221,   222,   908,     0,   224,     0,
     225,   226,   909,   228,     0,   229,     0,   230,   910,     0,
     911,   233,   234,   912,   913,   237,     0,   238,     0,     0,
       0,   914,   915,     0,   243,     0,   244,   245,   246,   247,
     248,   249,   250,   916,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,   917,   918,   265,
     266,   267,   268,   269,   919,   920,     0,   921,     0,   273,
     922,   923,   276,   924,   278,     0,   280,   281,   282,   283,
     284,     0,     0,   285,   925,   287,   926,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   927,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   928,   929,   930,
     319,   320,   321,     0,   931,     0,   324,   325,   932,   327,
       0,   933,   329,   934,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   935,   936,
     342,   937,   938,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,     0,   356,     0,   357,   358,   939,   940,
     361,   362,   941,   364,   365,   366,     0,   367,   368,   369,
     370,   371,     0,     0,   374,     0,   375,   376,   377,   942,
     379,   380,   381,   382,     0,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   943,   400,   401,   402,   944,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   945,   421,   946,   423,   424,     0,
     426,   947,     0,   429,   948,   431,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     949,   446,   950,   448,     0,   449,   450,     0,   451,   951,
     453,   454,   455,   456,   457,     0,   952,   953,     0,     0,
       0,   461,   462,   954,   464,   955,     0,   466,   467,   956,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   957,     0,   481,   482,   483,   484,   485,
    1347,   959,     0,   488,   960,   490,     0,   492,   493,   494,
     495,     0,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   961,   962,   963,   964,   965,   966,   967,
     968,   969,   970,   971,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,  1727,   146,   147,   148,
     149,   150,     0,     0,  1728,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,  1729,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,  1730,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,  1731,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,  1732,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,  1733,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,  1727,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,  1729,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
    1730,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
    2258,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
    1732,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
    1733,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     3,     4,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   555,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   556,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,   646,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   751,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,   646,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   783,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,  1949,     0,     0,     0,     0,  1950,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,  1958,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,  1959,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,  1960,   451,     0,   453,  1961,
     455,  1962,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,  1963,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     538,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   249,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   678,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     679,   459,     0,   460,     0,   680,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   713,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   746,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   749,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   753,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   763,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   771,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   877,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   880,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,  1010,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   249,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,  1028,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,  1371,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,  1373,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,  1376,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,  1378,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,  2178,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,  2889,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   690,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     691,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   692,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   693,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   694,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   873,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   692,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     694,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,  1665,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,     0,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,  1831,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,  2165,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,  2180,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,     0,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,     0,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   795,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,     0,     0,  -883,
       0,   121,   122,     0,   123,   124,   125,   796,   127,   128,
     129,     0,   797,   798,   799,   800,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   801,   802,   145,
       0,   146,   147,   148,   149,     0,     0,   803,     0,   804,
     153,   154,   155,   156,   157,   805,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,   806,   169,   170,
     171,   807,   808,   809,   810,     0,     0,   811,   177,   178,
     179,   180,   181,   182,   183,   812,   813,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,     0,
     196,   197,   198,   199,     0,     0,   200,   201,   814,   203,
     204,     0,     0,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,     0,   218,   219,   220,
     221,   222,     0,     0,   224,     0,   225,   226,   815,   228,
       0,   229,     0,   230,   816,     0,   817,   233,   234,  -883,
     818,   237,     0,   238,     0,     0,     0,     0,     0,     0,
     243,     0,   244,   245,   246,   247,   248,   249,   250,   820,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,   821,     0,   265,   266,   267,   268,   269,
     822,   823,     0,   824,     0,   273,   825,   826,   276,   827,
     278,     0,   280,   281,   282,   283,   284,     0,     0,   285,
     828,   287,   829,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   830,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   831,   832,   833,   319,   320,   321,     0,
       0,     0,   324,   325,   834,   327,     0,     0,   329,   835,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,     0,   836,   342,   837,     0,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,     0,
     356,     0,   357,   358,     0,   838,   361,   362,     0,   364,
     365,   366,     0,   367,   368,   369,   370,   371,     0,     0,
     374,     0,   375,   376,   377,   839,   379,   380,   381,   382,
       0,   383,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   840,   400,
     401,   402,   841,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     842,   421,   843,   423,   424,     0,   426,   844,     0,   429,
     845,   431,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   846,   446,     0,   448,
       0,   449,   450,     0,   451,   847,   453,   454,   455,   456,
     457,     0,   848,   849,     0,     0,     0,   461,   462,     0,
     464,     0,     0,   466,   467,   850,   469,   470,   471,   472,
     473,   851,     0,   474,   475,   476,   477,   478,   479,   852,
       0,   481,   482,   483,   484,   485,     0,   853,     0,   488,
     854,   490,     0,   492,   493,   494,   495,     0,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     515,   516,   517,   518,     0,     0,     0,   108,   109,   110,
     111,     0,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
       0,   123,   124,   125,   796,   127,   128,   129,     0,   797,
     798,   799,   800,     0,   135,   136,   137,   138,   139,   140,
       0,     0,   141,   142,   801,   802,   145,     0,   146,   147,
     148,   149,     0,     0,   803,     0,   804,   153,   154,   155,
     156,   157,   805,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   806,   169,   170,   171,   807,   808,
     809,   810,     0,     0,   811,   177,   178,   179,   180,   181,
     182,   183,   812,   813,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,     0,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,     0,     0,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,     0,   218,   219,   220,   221,   222,     0,
       0,   224,     0,   225,   226,   815,   228,     0,   229,     0,
     230,   816,     0,   817,   233,   234,     0,   818,   237,     0,
     238,     0,     0,     0,     0,     0,     0,   243,     0,   244,
     245,   246,   247,   248,   819,   250,   820,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     821,     0,   265,   266,   267,   268,   269,   822,   823,     0,
     824,     0,   273,   825,   826,   276,   827,   278,     0,   280,
     281,   282,   283,   284,     0,     0,   285,   828,   287,   829,
       0,   289,   290,   291,     0,     0,   292,   293,   294,   295,
     296,   830,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     831,   832,   833,   319,   320,   321,     0,     0,     0,   324,
     325,   834,   327,     0,     0,   329,   835,   331,   332,   333,
       0,   334,   335,     0,     0,   336,   337,   338,     0,     0,
     339,     0,   836,   342,   837,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,     0,     0,   356,     0,   357,
     358,     0,   838,   361,   362,     0,   364,   365,   366,     0,
     367,   368,   369,   370,   371,     0,     0,   374,     0,   375,
     376,   377,   839,   379,   380,   381,   382,     0,   383,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   840,   400,   401,   402,   841,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   842,   421,   843,
     423,   424,     0,   426,   844,     0,   429,   845,   431,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   846,   446,     0,   448,     0,   449,   450,
       0,   451,   847,   453,   454,   455,   456,   457,     0,   848,
     849,     0,     0,     0,   461,   462,     0,   464,     0,     0,
     466,   467,   850,   469,   470,   471,   472,   473,   851,     0,
     474,   475,   476,   477,   478,   479,   852,     0,   481,   482,
     483,   484,   485,     0,   853,     0,   488,   854,   490,     0,
     492,   493,   494,   495,     0,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   515,   516,   517,
     518,     0,     0,     0,   108,   109,   110,   111,     0,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,     0,     0,     0,     0,   121,   122,     0,   123,   124,
     125,   796,   127,   128,   129,     0,   797,   798,   799,   800,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   801,   802,   145,     0,   146,   147,   148,   149,     0,
       0,   803,     0,   804,   153,   154,   155,   156,   157,   805,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,   806,   169,   170,   171,   807,   808,   809,   810,     0,
       0,   811,   177,   178,   179,   180,   181,   182,   183,   812,
     813,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   196,   197,   198,   199,     0,     0,
     200,   201,   814,   203,   204,     0,     0,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
       0,   218,   219,   220,   221,   222,     0,     0,   224,     0,
     225,   226,   815,   228,     0,   229,     0,   230,   816,     0,
     817,   233,   234,     0,   818,   237,     0,   238,     0,     0,
       0,     0,     0,     0,   243,     0,   244,   245,   246,   247,
     248,   249,   250,   820,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,   821,     0,   265,
     266,   267,   268,   269,   822,   823,     0,   824,     0,   273,
     825,   826,   276,   827,   278,     0,   280,   281,   282,   283,
     284,     0,     0,   285,   828,   287,   829,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   830,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   831,   832,   833,
     319,   320,   321,     0,     0,     0,   324,   325,   834,   327,
       0,     0,   329,   835,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,     0,   836,
     342,   837,     0,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,     0,   356,     0,   357,   358,     0,   838,
     361,   362,     0,   364,   365,   366,     0,   367,   368,   369,
     370,   371,     0,     0,   374,     0,   375,   376,   377,   839,
     379,   380,   381,   382,     0,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   840,   400,   401,   402,   841,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   842,   421,   843,   423,   424,     0,
     426,   844,     0,   429,   845,   431,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     846,   446,     0,   448,     0,   449,   450,     0,   451,   847,
     453,   454,   455,   456,   457,     0,   848,   849,     0,     0,
       0,   461,   462,     0,   464,     0,     0,   466,   467,   850,
     469,   470,   471,   472,   473,   851,     0,   474,   475,   476,
     477,   478,   479,   852,     0,   481,   482,   483,   484,   485,
       0,   853,     0,   488,   854,   490,     0,   492,   493,   494,
     495,     0,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   515,   516,   517,   518,     0,     0,
       0,   108,   109,   110,   111,     0,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,     0,   123,   124,   125,   796,   127,
     128,   129,     0,   797,   798,   799,   800,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   801,   802,
     145,     0,   146,   147,   148,   149,     0,     0,   803,     0,
     804,   153,   154,   155,   156,   157,   805,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   806,   169,
     170,   171,   807,   808,   809,   810,     0,     0,   811,   177,
     178,   179,   180,   181,   182,   183,   812,   813,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
       0,   196,   197,   198,   199,     0,     0,   200,   201,   814,
     203,   204,     0,     0,     0,   207,   208,   209,     0,  1816,
     211,   212,     0,   213,   214,   215,   216,     0,   218,   219,
     220,   221,   222,     0,     0,   224,     0,   225,   226,   815,
     228,     0,   229,     0,   230,   816,     0,   817,   233,   234,
       0,   818,   237,     0,   238,     0,     0,     0,     0,     0,
       0,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     820,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   821,     0,   265,   266,   267,   268,
     269,   822,   823,     0,   824,     0,   273,   825,   826,   276,
     827,   278,     0,   280,   281,   282,   283,   284,     0,     0,
     285,   828,   287,   829,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   830,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   831,   832,   833,   319,   320,   321,
       0,     0,     0,   324,   325,   834,   327,     0,     0,   329,
     835,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,     0,   836,   342,   837,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
       0,   356,     0,   357,   358,     0,   838,   361,   362,     0,
     364,   365,   366,     0,   367,   368,   369,   370,   371,     0,
       0,   374,     0,   375,   376,   377,   839,   379,   380,   381,
     382,     0,   383,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   840,
     400,   401,   402,   841,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   842,   421,   843,   423,   424,     0,   426,   844,     0,
     429,   845,   431,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   846,   446,     0,
     448,     0,   449,   450,     0,   451,   847,   453,   454,   455,
     456,   457,     0,   848,   849,     0,     0,     0,   461,   462,
       0,   464,     0,     0,   466,   467,   850,   469,   470,   471,
     472,   473,   851,     0,   474,   475,   476,   477,   478,   479,
     852,     0,   481,   482,   483,   484,   485,     0,   853,     0,
     488,   854,   490,     0,   492,   493,   494,   495,     0,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
    2810,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   515,   516,   517,   518,     0,     0,     0,   108,   109,
     110,   111,     0,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     122,     0,   123,   124,   125,  2811,   127,   128,   129,     0,
     797,  2812,   799,   800,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   801,   802,   145,     0,   146,
     147,   148,   149,     0,     0,  2813,     0,  2814,   153,   154,
     155,   156,   157,  2815,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,  2816,   169,   170,   171,  2817,
    2818,  2819,  2820,     0,     0,  2821,   177,   178,   179,   180,
     181,   182,   183,   812,   813,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   196,   197,
     198,   199,     0,     0,   200,   201,   814,   203,   204,     0,
       0,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,     0,   218,   219,   220,   221,   222,
       0,     0,   224,     0,   225,   226,   815,   228,     0,   229,
       0,   230,  2822,     0,  2823,   233,   234,  2824,  2825,   237,
       0,   238,     0,     0,     0,     0,     0,     0,   243,     0,
     244,   245,   246,   247,   248,   249,   250,  2826,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,  2827,     0,   265,   266,   267,   268,   269,   822,   823,
       0,   824,     0,   273,  2828,  2829,   276,  2830,   278,     0,
     280,   281,   282,   283,   284,     0,     0,   285,  2831,   287,
    2832,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,  3063,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   831,  2834,   833,   319,   320,   321,     0,     0,     0,
     324,   325,  2836,   327,     0,     0,   329,   835,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,     0,  2838,   342,  2839,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,     0,   356,     0,
     357,   358,     0,  2840,   361,   362,     0,   364,   365,   366,
       0,   367,   368,   369,   370,   371,     0,     0,   374,     0,
     375,   376,   377,   839,   379,   380,   381,   382,     0,   383,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,  2841,   400,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,  2842,   421,
       0,   423,   424,     0,   426,  2844,     0,   429,   845,   431,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,  3064,   446,     0,   448,     0,   449,
     450,     0,   451,  2846,   453,   454,   455,   456,   457,     0,
     848,   849,     0,     0,     0,   461,   462,     0,   464,     0,
       0,   466,   467,  2847,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,  2849,     0,   481,
     482,   483,   484,   485,     0,   853,     0,   488,  2850,   490,
       0,   492,   493,   494,   495,     0,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   515,   516,
     517,   518,     0,     0,     0,   108,   109,   110,   111,     0,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,     0,   123,
     124,   125,     0,   127,   128,   129,   130,   131,     0,   133,
     134,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     150,     0,     0,     0,   152,   153,   154,   155,   156,   157,
       0,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,     0,   169,   170,   171,     0,     0,     0,     0,
       0,     0,     0,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,     0,   196,   197,   198,   199,     0,
       0,   200,   201,   202,   203,   204,     0,     0,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
       0,   225,   226,   227,   228,     0,   229,     0,   230,     0,
       0,     0,   233,   234,   528,     0,   237,     0,   238,     0,
       0,     0,   240,   241,     0,   243,     0,   244,   245,   246,
     247,   248,   249,   250,     0,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   264,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     273,     0,     0,   276,     0,   278,     0,   280,   281,   282,
     283,   284,     0,     0,   285,     0,   287,     0,     0,   289,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   529,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     318,   319,   320,   321,     0,   323,     0,   324,   325,     0,
     327,     0,   328,   329,   330,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,   340,
       0,   342,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,     0,   356,     0,   357,   358,   359,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,     0,     0,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,     0,   421,   422,   423,   424,
       0,   426,     0,     0,   429,   430,   431,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   530,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   453,   454,   455,   456,   457,     0,   458,   459,     0,
       0,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,     0,     0,   481,   482,   483,   484,
     485,   486,   487,     0,   488,     0,   490,     0,   492,   493,
     494,   495,     0,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,     0,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
       0,   123,   124,   125,   796,   127,   128,   129,     0,   797,
     798,   799,   800,     0,   135,   136,   137,   138,   139,   140,
       0,     0,   141,   142,   801,   802,   145,     0,   146,   147,
     148,   149,     0,     0,   803,     0,   804,   153,   154,   155,
     156,   157,   805,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   806,   169,   170,   171,   807,   808,
     809,   810,     0,     0,   811,   177,   178,   179,   180,   181,
     182,   183,   812,   813,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,     0,   196,   197,   198,
     199,     0,     0,   200,   201,   814,   203,   204,     0,     0,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,     0,   218,   219,   220,   221,   222,     0,
       0,   224,     0,   225,   226,   815,   228,     0,   229,     0,
     230,   816,     0,   817,   233,   234,     0,   818,   237,     0,
     238,     0,     0,     0,     0,     0,     0,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   820,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     821,     0,   265,   266,   267,   268,   269,   822,   823,     0,
     824,     0,   273,   825,   826,   276,   827,   278,     0,   280,
     281,   282,   283,   284,     0,     0,   285,   828,   287,   829,
       0,   289,   290,   291,     0,     0,   292,   293,   294,   295,
     296,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     831,   832,   833,   319,   320,   321,     0,     0,     0,   324,
     325,   834,   327,     0,     0,   329,   835,   331,   332,   333,
       0,   334,   335,     0,     0,   336,   337,   338,     0,     0,
     339,     0,   836,   342,   837,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,     0,     0,   356,     0,   357,
     358,     0,   838,   361,   362,     0,   364,   365,   366,     0,
     367,   368,   369,   370,   371,     0,     0,   374,     0,   375,
     376,   377,   839,   379,   380,   381,   382,     0,   383,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   840,   400,   401,   402,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   842,   421,     0,
     423,   424,     0,   426,   844,     0,   429,   845,   431,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   446,     0,   448,     0,   449,   450,
       0,   451,   847,   453,   454,   455,   456,   457,     0,   848,
     849,     0,     0,     0,   461,   462,     0,   464,     0,     0,
     466,   467,   850,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   852,     0,   481,   482,
     483,   484,   485,     0,   853,     1,   488,   854,   490,     0,
     492,   493,   494,   495,     0,     1,     2,   497,     3,     4,
     498,   499,   500,   501,   502,   503,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     6,     0,   515,   516,   517,
     518,     0,     0,     0,     7,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     8,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     8,     9,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     9,     0,    10,
       0,   591,     0,     0,     0,     0,     0,     0,     0,    10,
       0,   591,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,    13,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,   592,     0,     0,     0,     0,     0,
       0,     0,    16,     0,   592,     0,     0,     0,     0,     0,
      17,     0,    16,     0,     0,     0,     0,     0,     0,     0,
      17,     0,     0,     0,     0,     0,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,     0,     0,    26,     0,     0,     0,     0,     0,
       0,    25,     0,     0,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,     0,    28,    27,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,     0,     0,    29,
       0,    31,     0,     0,     0,     0,    30,     0,     0,     0,
       0,    31,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,    33,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    33,     0,     0,     0,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,    38,     0,     0,     0,   593,    37,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,   594,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   699
};

static const yytype_int16 yycheck[] =
{
       8,   587,    41,   750,    12,    21,    82,   586,     0,    17,
       0,  1002,     0,     0,  1514,    23,    24,    25,    26,    27,
     843,  1401,    30,   978,     0,    33,    34,   762,    36,   738,
     594,    39,    40,    41,   712,   760,     0,  1214,   978,     0,
     849,    41,  1226,  1213,   657,    41,  1123,  1644,   874,   769,
       0,     0,   878,    21,    18,    18,  1573,    33,  1686,   584,
    2127,  1689,  1188,  2130,    84,  2095,  2176,  2066,  2098,   584,
    1154,    84,  1406,    12,  2069,  1190,  2567,   989,    17,  1193,
    1265,  1160,  1553,   989,  1507,  1508,    94,    26,   989,  1512,
    1038,    99,   100,   101,   102,   103,   989,  1088,   688,  2536,
      39,    40,   669,  1218,   758,  1118,   594,   750,    34,   752,
       7,   754,  1125,     0,     0,  2536,     0,  2566,    94,   593,
     659,     0,     0,     0,    21,   664,  1598,  1599,  2063,  2172,
       0,     0,     0,     0,     0,     0,     0,     0,   705,    40,
       0,     0,     0,  2584,   612,  2580,  2410,     0,     0,     0,
      24,     0,     0,     7,  2220,  2221,  2222,  2118,     5,     5,
      54,   100,     5,  2235,     5,   801,   802,    21,     5,  1651,
      13,    14,   730,  1803,    16,     5,   102,     5,     0,     5,
       5,     9,    38,    13,    14,     5,     0,    13,    14,    44,
       5,  1131,     9,    13,    14,     5,     5,   833,     5,     5,
       9,     5,     5,  1707,   882,     5,    13,    14,     5,     5,
    2253,     5,     5,    13,    14,     5,    13,    14,     5,    13,
      14,     5,  2714,    13,    14,  1709,    13,    14,     5,  3067,
       5,    13,    14,    44,  1452,     5,    13,    14,    13,    14,
       5,     5,     5,     5,    62,     4,  2246,     5,    79,     5,
       9,   176,     5,   177,   144,    16,   176,   735,    44,    90,
     227,  1935,  1202,     5,     5,  1205,  1206,   663,   197,  3203,
      71,  1080,  2784,   735,     3,    97,    13,    14,  2321,  2322,
    1228,  2324,   182,    97,  3234,  3152,   295,   111,    62,    11,
      11,    11,  1240,    15,    15,    15,     3,     4,     5,     4,
      44,   177,     9,    79,     9,    34,    35,   985,    11,  2881,
    1035,   297,    15,   232,    90,  2861,   321,    11,   298,    62,
      72,    15,     9,    45,    45,  2897,   199,  2694,   843,   124,
    2697,  2718,  2719,   124,   280,  3274,     9,    62,   373,   253,
     253,   283,    45,   121,   385,  2375,    30,   247,  3401,   170,
    1394,    45,   394,    63,   142,    77,    77,  2504,   233,   303,
     303,    71,  2901,   265,   266,    41,   176,    11,   286,   124,
      30,   119,   173,   112,    77,  3539,  1997,    37,  1201,  2404,
       5,  3550,   122,    77,  2450,   140,   119,   199,   233,   168,
     121,    68,    69,  2503,    77,   438,  2449,    16,    82,  2452,
      11,    45,  2893,  1016,   279,   135,  2843,    91,  1021,  1087,
     321,  1136,   119,  2904,   978,  3140,    30,  3142,   424,  2486,
    1056,  1057,   111,    37,    11,   461,  2451,   218,    15,  3296,
    3297,    33,   364,    77,   279,  1071,   120,  3387,    30,   315,
    3390,    13,    14,   486,   112,    37,   175,  2896,   177,   197,
    3614,  2598,   128,  3622,   993,  3148,    58,  2500,   237,  2502,
     392,   201,    30,   374,   378,   378,    77,   219,  1007,    37,
     345,   112,  2407,  1037,    11,   297,  2097,   112,    15,   521,
     382,   383,   400,   297,   525,   521,   521,   360,  1911,  1912,
    1913,  1914,  1915,  3546,   126,  1918,  1919,  1920,  1921,  1922,
    1923,  1924,  1925,  1926,  1927,   979,  1184,   328,  1979,   287,
     435,   516,   521,   197,  3026,   435,   458,   224,   584,  3065,
     395,  3093,  1566,   399,  1039,   209,  1093,   473,   428,   537,
     430,   539,   333,  3045,   282,   521,   544,   247,    25,   547,
     247,   521,   456,   456,   366,  3484,  2063,   365,   556,  3483,
     395,   363,   366,  3278,   287,   594,   456,  1124,  2925,  1385,
     536,     8,   292,  1272,    11,   532,   421,   355,    15,  1133,
    1134,    18,    19,    20,  2617,   385,   584,   332,   586,   587,
     588,   525,   525,   458,  1151,   510,   594,  2640,  3538,   479,
     279,   365,   521,   521,  2594,    58,   992,   521,   523,   171,
     424,  1786,  1728,  1161,   435,   516,   525,   521,   521,  3302,
     421,  2998,  2129,   458,   424,  3453,  1131,   556,   657,   627,
     628,   629,   365,  2046,  2047,  2255,   642,   521,  2100,   593,
    3067,   594,  2136,   470,    62,   421,  3077,  3504,   646,  2121,
     365,   657,  1377,  1820,   485,  2755,  3067,  1865,   587,   588,
     658,   659,   453,  2137,   525,   663,   664,   467,  2332,   435,
     699,   483,   738,   458,  3156,   521,   507,   458,    25,   483,
     485,   513,   519,   483,   521,   521,   523,   421,   521,  1147,
     521,   701,   690,   691,   521,   693,  1201,  2951,   701,   657,
    2762,   521,   507,   521,  3233,   521,   521,   507,  1646,   707,
     522,   521,   524,   520,  1182,   713,   521,   525,   522,  1893,
     524,   521,   521,   176,   521,   521,  1394,   521,   521,   727,
    1182,   521,   730,   396,   521,   521,   410,   521,   521,   413,
     514,   521,   463,   725,   521,   725,  3603,   725,   725,   521,
    1460,  3232,   471,   403,   521,   642,   521,   710,   756,   725,
     758,   521,   513,   512,   513,   629,   521,   521,   521,   521,
     657,   725,   770,   521,   725,   521,  1402,  1403,   521,   777,
     778,   779,   780,   781,   713,   725,   725,   843,   483,   521,
     521,   707,   525,  2744,   521,   793,   411,   412,   642,   403,
     512,   513,   514,   515,   516,   517,   517,   517,  1452,  1984,
     525,    40,   507,   657,   730,   512,   513,   512,   513,  3250,
    2876,   403,   713,  3248,   517,  2750,  3388,  1757,   512,   513,
     514,   515,   516,   517,  1478,   512,   513,  1767,   396,   461,
    1770,   208,   319,   320,     0,   843,   519,  2880,   725,   725,
     523,   725,  1520,    40,  1369,   168,   725,   725,   725,   524,
    3389,   279,   299,  2353,  1369,   725,   725,   725,   725,   725,
     725,   725,   725,    30,  1948,   725,   725,   725,  1454,  1594,
    1449,  1450,   725,   725,   725,  1400,   725,   725,   414,  1458,
     154,  1829,   423,   471,    11,  1400,  1401,  1565,  1566,   508,
    2407,  1416,   282,    26,   513,  1979,  1574,   287,  1462,    32,
     519,  1416,   521,  1961,  1962,  1963,  3397,   122,   344,   396,
      26,    26,   399,   176,  1639,   166,    32,  1595,  3028,   460,
       5,    30,   385,  1648,  1879,  1650,  1539,   514,   515,   516,
     517,  1544,   206,  1546,  2018,  1548,  3385,   365,   374,  1879,
     476,   180,   178,  1956,  1534,   521,  2418,  1859,  2282,   436,
      77,    87,  1858,   343,  2288,   278,  1610,  2291,  1859,  1860,
    1861,   424,   319,   320,   392,   360,  1859,  1860,   135,   112,
     978,   135,   156,  1039,  1462,   512,   513,   514,   515,   516,
     517,   349,   990,   180,   992,   993,   201,  1461,  1527,   997,
     990,   478,   176,   244,   990,  1649,   132,    26,  1006,  1007,
    1016,   378,  1010,    32,   467,  1021,  1753,   140,   522,   386,
     178,   525,  2435,  2436,  1840,   979,  3453,  1584,   254,  2536,
    1028,   253,  2199,  2102,   140,   140,   135,  3476,   461,  1037,
    1038,  1039,  3453,   584,  1613,  1043,  1862,   516,  2223,   182,
    1866,   253,   399,  1869,   523,   152,  2123,   424,  1016,  1088,
      52,  2431,   176,  1021,    52,  2974,   424,  2976,   521,   166,
     279,   508,   509,   510,   171,   512,   513,   514,   515,   516,
     517,  1010,   152,  1782,  1783,  1784,   112,  1602,   177,   436,
     166,   510,  1090,  1726,   510,    71,   254,  1602,   521,  1028,
    1810,  1745,   185,  2208,   523,   521,    26,   474,  3208,  3590,
    2091,   485,    32,   135,   247,   110,   474,  3291,  3292,  2789,
    1753,   140,   483,   349,   253,   214,   223,  2797,   282,  1016,
     339,   478,   385,   507,  1021,  1133,  1134,  1135,   292,  1772,
    1138,   230,   164,   119,  1777,  1201,   507,   244,    79,   253,
      11,   208,   241,   223,    15,  1153,  1154,  1167,  1168,    90,
    1170,  1090,  2266,  1161,  1167,  1168,  2270,  1170,   244,  1837,
      11,   424,  1016,  2634,    15,    26,   378,  1021,   301,  1906,
     516,    32,   519,  3172,    45,   156,   523,   523,   314,  1187,
    1188,   349,  3177,   181,  1763,   301,   301,   294,   424,  1768,
    3643,   198,  1200,  1201,    45,   176,   303,  3650,   200,  1936,
    3119,   385,   200,   205,   467,  2628,    77,   205,   294,  1217,
     140,  1865,  1737,  1221,  1153,  1154,    79,  1225,   386,  3403,
    1228,   509,  1737,   303,   456,   358,    77,    90,     3,   362,
     519,   519,  1240,  2750,   523,  1161,    13,    14,   474,   378,
     424,   243,   358,     4,   456,   243,   362,   362,     9,   364,
     282,  2631,   260,   813,   259,   287,   424,  1265,   521,   392,
     292,   385,   267,    26,   378,   441,  1944,   119,   509,    32,
     369,   187,   301,   135,   190,   835,   392,   392,   519,   140,
     526,   253,  1014,   467,   530,   428,   424,   430,    26,   521,
     185,  1217,   843,   429,    32,  1027,   282,  2677,  1030,   483,
     424,   287,   164,  1369,  2388,   485,   474,  1022,   485,   521,
    1025,   166,   872,   456,   474,  1879,   171,   456,  2376,  2377,
    2378,  2379,   121,   507,   176,   381,  1851,   507,   521,   358,
     507,   464,  3331,   362,  1400,  1401,  1851,   521,  3333,   521,
    2517,   521,   456,   467,   521,   452,  2516,   333,   464,   428,
    1416,   430,  1360,  2179,  2777,  2181,  1364,  2312,   521,   483,
    1973,  1369,  1370,   392,   519,   351,   521,   171,   523,  1894,
     135,   301,   452,  2051,  1382,  2501,  1368,   140,  1368,  1894,
    1368,  1368,   521,   507,   521,  1910,     4,  2096,  2558,   244,
     521,     9,  1400,  1401,   135,  1910,   398,   521,   521,   164,
     398,  2515,   140,  2517,   385,  1413,   378,   521,  1416,   521,
    1418,   443,   519,   212,  1939,   522,   523,  3447,  1982,  2410,
     282,  1946,   454,   164,  1939,   287,    11,   521,   358,  2703,
     292,  1946,   362,    13,    14,   464,  2710,  2711,  2712,   294,
     301,  1449,  1450,   424,  1452,   522,  1454,  1455,   525,  1457,
    1458,   521,     4,  1978,  1462,  3485,  1981,     9,   310,   166,
      45,  1986,   392,  1978,   171,  1884,  1981,   453,  3578,  1888,
    1478,  1986,  1891,   521,   512,   461,   514,  2286,  2287,   521,
     279,  3548,  3549,   282,   456,   428,   467,   430,  1039,   527,
     528,     4,    77,    13,    14,  2918,     9,  1461,  1514,  1462,
    1060,   362,   483,  2700,    13,    14,  2741,  2704,  2705,  2706,
    2245,  2746,   195,   196,  1074,  1454,  1455,   521,  1457,  1527,
       4,  1529,   287,  1539,  1532,     9,   507,   292,  1544,  1537,
    1546,   392,  1548,   385,   464,   176,  1602,   244,   301,  2919,
     521,    36,  1550,    13,    14,  1553,   287,  3577,   521,   521,
    3067,   292,   349,   522,  3621,    40,   525,     8,   521,  1519,
      11,  1521,  1522,   301,    15,  1573,   521,    18,    19,    20,
    1578,  1539,   424,   519,    59,   521,  1544,   483,  1546,   485,
    1548,   443,   265,   266,   521,    36,  1562,   294,   522,   386,
    3620,   525,   454,  1532,  1602,   358,  2536,   507,  1562,   362,
    3197,  1562,  1610,   464,    99,  1613,   101,   428,   103,   430,
    3110,  1550,  1562,  1562,  1553,   467,   514,  1514,   690,   691,
     358,   693,    13,    14,   362,   110,  2803,   424,   521,   392,
    2756,   483,   522,   522,   522,   525,   525,   525,  1646,    13,
      14,  1649,  1539,   514,   515,   516,   517,  1544,   504,  1546,
    1201,  1548,    13,    14,   392,   507,  2310,  1665,   229,  1667,
    1514,  1669,  2739,   514,   515,   516,   517,   297,  1676,   521,
     523,  1737,  1692,  1681,  1682,   504,  1676,   474,   443,  1692,
    1676,    13,    14,   522,   182,  1539,   525,   523,   522,   454,
    1544,   525,  1546,  2877,  1548,   522,    13,    14,   525,   382,
     383,   464,   443,  3203,   522,  1668,   522,   525,   522,   525,
     208,   525,  1720,   454,   522,   522,  2990,   525,   525,  3316,
    1728,  1729,   207,   428,   522,   430,   464,   525,  2307,  1737,
     175,  1739,  1740,  1741,  1742,  1743,  1744,  1745,   522,   525,
    2265,   525,  1750,   522,  1752,  2182,   525,  2184,  2312,   247,
    2265,  2500,   521,  2502,  2479,  1763,  1764,   732,   525,   734,
    1768,  1769,    98,    13,    14,  1773,  1774,  1775,  1776,   522,
    1778,  1779,   525,   522,   259,   522,   227,   176,  1786,   176,
     522,   302,   267,   525,  2610,  1851,   522,    58,     5,   525,
    1729,  1799,    13,    14,   279,  1803,  1804,  1805,   521,   176,
    1739,  1809,  1741,   522,   302,  1744,   525,     6,   504,   522,
       9,  1750,   525,  1752,   373,   374,  1824,    16,  1369,   522,
     522,  1829,   525,   525,   522,  1764,   311,   525,  1894,    28,
    1769,    13,    14,    32,  1773,  1774,  1775,  1776,   157,  1778,
    1779,   177,  2551,  1851,  1910,    13,    14,  1823,   299,  1400,
    1401,  2571,   522,   152,  2794,   525,  2591,  1865,   522,   229,
    3488,   525,  3490,   522,   358,  1416,   525,   166,    13,    14,
     157,  1879,   171,  1939,   522,   157,    54,   525,   214,   364,
    1946,  2535,   522,  2537,   522,   525,  1894,   525,   157,   522,
    3313,  3314,   525,   522,   230,   112,   525,   522,  3398,    40,
     525,   386,  1910,  3073,   521,   241,   522,     8,   522,   525,
     522,   525,  1978,  3510,    15,  1981,  2431,    18,    19,    20,
    1986,    99,   522,   408,   223,   525,    13,    14,    13,    14,
     428,  1939,   430,   310,    13,    14,  3453,   282,  1946,   275,
    1948,    13,    14,   176,  2935,   244,    40,   125,    13,    14,
      13,    14,  1960,    13,    14,   453,   282,  1973,   456,   474,
    2915,   297,     3,  3591,     5,   182,    13,    14,   146,    86,
    1978,  1979,   150,  1981,  1982,   487,  1984,   157,  1986,    71,
    2806,  2807,   470,  3483,   521,    77,   385,    13,    14,   329,
     326,   208,   373,   374,   172,   294,   521,   175,    90,   269,
     270,   157,   382,   383,   303,  1973,   373,   374,   385,  1948,
    2018,  2536,  2051,   521,  2022,   193,  3439,  3440,  2026,   521,
    2843,  2536,   373,   374,    40,   424,    39,   119,   521,   121,
     247,   319,   320,   369,   521,  1133,  1134,   522,   157,   157,
    1979,   523,   537,    59,   539,   444,  3230,   424,   157,   544,
     297,  1602,   547,   360,   521,  2063,  3436,   508,   509,   510,
     435,   512,   513,   514,   515,   516,   517,   521,   467,     9,
     522,   521,   113,   114,  2653,   521,  1973,  3500,  2094,  2018,
    2693,  2606,   426,   225,   483,   302,   230,  2026,   306,   521,
     467,  2606,   230,   230,   110,   304,    40,   521,  2114,  2107,
       5,     5,   242,   521,   521,   521,   483,   521,   507,   287,
    2118,     5,     5,   521,     5,   521,  2631,   295,     5,  1973,
     212,   153,   521,   340,     9,   461,  2094,  3067,     3,   521,
     507,   484,   308,  2109,  3514,   525,   101,   525,   316,   522,
    2116,    40,   257,   225,   521,  2109,  2114,   392,  2109,   171,
     171,   646,   242,   452,   195,   196,   521,   292,   294,  2109,
    2109,   378,  2677,   435,  2172,   343,     8,   521,  2107,    11,
      90,   435,    58,    15,  2182,  2183,  2184,    98,   525,    58,
     435,   272,   435,   522,   532,   483,  1737,   435,   157,   157,
     282,   207,    40,   282,    97,   287,  2775,  2094,   299,  2265,
     521,   282,   282,    45,   282,   521,     3,   521,    39,   433,
      52,   428,  2251,   430,   433,  2223,   519,  2114,   519,   435,
     261,   262,   263,   264,   265,   266,   523,  2235,   269,   270,
     447,   435,   727,   435,  2242,    77,   453,   435,   522,   456,
    2094,   333,   522,   259,   522,  2253,  2254,  2255,  2256,   522,
    2258,   267,   176,   480,   522,   522,   177,  2265,   521,   351,
    2114,  2269,   522,   279,  2272,   522,   522,   525,   522,  2277,
     522,   522,   230,   479,    11,   770,   525,  3454,   521,   520,
    2805,  2289,   777,   778,   779,   780,   781,   360,   525,   525,
    2805,  3016,   532,   214,   529,   311,   521,   287,   793,  2307,
    1851,   433,  2310,   187,  2312,   435,   521,   167,   150,   230,
     176,  3046,   525,  2321,  2322,   522,  2324,  2256,   521,   272,
     241,   223,   461,   233,   525,   395,   298,   321,  2843,   321,
     525,   522,   521,   233,   282,   233,   303,  2353,   338,   181,
     295,   382,   383,  1894,   176,   474,   521,   521,   364,   425,
     157,  2915,   157,     8,   275,   157,    11,   483,   200,  1910,
      15,   453,   157,   205,  2372,  2431,    40,  2443,   282,   461,
     386,  2410,   297,  2381,  2382,  2383,   522,   504,   297,   522,
    2388,   504,    40,    58,  2392,   519,   176,    11,  1939,   522,
      45,   522,   408,    40,   522,  1946,   171,    52,   522,  2407,
     522,   243,  2441,   187,  2919,   326,   522,   508,   509,   510,
     522,   512,   513,   514,   515,   516,   517,   521,   521,   521,
    3411,   520,    77,  2431,   522,   522,   522,  1978,   523,   522,
    1981,  2470,   176,   182,   522,  1986,   522,   504,   521,   435,
     160,   510,  3120,   480,  3122,    40,   521,   521,   369,  2388,
     521,   510,   506,  2392,   298,  2463,  2353,   299,   298,   208,
     501,   502,  2470,  2463,   525,  2473,   252,  2463,  2476,     8,
    2536,   458,    11,   525,   435,   521,    15,   157,   282,    18,
      19,    20,   208,   435,   157,   157,  2494,   522,  2496,   435,
     435,   289,  2500,  2501,  2502,   150,  2504,   435,   247,  2353,
     289,   520,   997,    40,   521,   176,   521,   360,   483,   297,
     522,   525,   295,  3453,    40,  2523,   157,  2525,   522,   520,
     287,   520,   176,  2531,   522,   522,   181,  2535,  2536,  2537,
    2538,  2539,  2540,  2541,  2542,  2543,  2544,  2545,  2546,  2547,
    2606,   521,  3067,   521,    58,   200,   522,   192,   522,    77,
     205,   148,  3067,   302,   205,  3209,   398,  2496,  2566,   522,
     522,  2569,   176,     8,  2572,  2631,    11,   521,   307,   525,
      15,   522,   522,    18,    19,    20,     9,  2585,  2570,   522,
    2570,  3290,  2570,  2570,  2523,   480,   366,   467,   243,  2565,
    2598,    36,   297,   521,  3173,   298,   157,   180,  2606,  2538,
    2539,  2540,  2541,  2542,  2543,  2544,  2545,  2546,  2547,  2617,
     525,  2677,   521,  3360,   522,   522,  3351,  2593,   447,    40,
    2596,   522,    40,  2631,    83,   522,  2634,   461,   176,   378,
     522,   521,   521,  2641,  2642,  2643,  2644,   525,  3163,   520,
     522,   482,   525,   521,   299,  2653,   522,   466,  3163,   522,
     522,   525,   522,   522,    88,   526,   510,   522,  2666,   522,
     483,   210,   119,   505,    40,   521,   205,   233,    85,  2677,
     512,   513,   514,   515,   516,   517,   198,  2693,   287,   428,
     287,   430,   510,  2691,   523,    12,   523,   523,   227,   435,
      17,    40,  1187,   523,   435,  2634,   523,   523,   447,    26,
     525,   523,   523,   523,   453,  1200,   523,   456,  2716,  2717,
     523,   523,    39,    40,  2265,  2723,  2716,  2717,    40,   522,
    2716,  2717,   523,  2723,   523,  2693,  1221,  2723,   282,   523,
     523,   523,   523,   111,   521,   483,  2744,    40,   523,  2805,
     297,   523,  2750,   398,   523,   523,   523,   523,  2756,   523,
     523,   523,   523,   523,  2762,   523,   521,   523,     8,   523,
     299,    11,   523,   523,   523,    15,   523,  2775,  2776,     9,
     359,   521,   525,   100,   521,  2783,   198,  2843,   342,   522,
     520,   512,   227,     9,   520,   308,   351,   525,   522,   521,
     157,    40,  2800,   522,   126,    45,  2693,  2805,  3452,     7,
       8,   522,    52,   339,    12,   234,   157,    40,   522,    17,
      40,   374,   374,    21,   522,    23,    24,    25,    26,    27,
    3399,   521,    30,   521,   525,    33,    34,    77,    36,    40,
     461,    39,    40,   316,   480,  2843,   526,  2776,   525,  2693,
      11,   433,   521,   287,   435,    90,   136,   287,   257,   197,
     505,   521,    30,  2919,   299,   461,   521,   512,   513,   514,
     515,   516,   517,   447,    71,   300,    71,    77,     9,  1364,
     113,   114,  2880,   522,   522,  1370,   376,   521,    58,   480,
    2431,   509,   504,   176,   521,   435,    94,   466,  2896,   510,
     279,    99,   100,   101,   102,   103,  2935,   297,    40,    80,
     150,  2909,   447,    40,   425,   205,     8,  2915,   521,    11,
     300,  2919,   300,    15,   522,   176,    18,    19,    20,  2895,
     522,  3436,   521,   392,   522,   529,   210,   521,  3453,   297,
      11,   181,   297,   521,    36,   152,   522,  2945,  3453,   124,
     522,   458,    23,    24,   521,   521,   373,    24,   526,   530,
     200,   525,   195,   196,   404,   205,    36,   233,   351,   234,
     130,  2799,   522,  2971,  2518,   521,  1751,   725,  2531,   508,
     509,   510,  2177,   512,   513,   514,   515,   516,   517,  1669,
      14,  2239,  2310,  2561,  2915,  2536,   628,  3366,  3533,  3039,
    3455,  3464,  3526,   243,  1188,  3098,  2170,  2183,  3452,  3514,
    2585,  3067,  2510,  3462,  2535,  2167,  3450,  3015,  1365,  2477,
     113,   114,  2577,  2248,  1449,  1400,  3269,  3015,   261,   262,
     263,   264,   265,   266,   105,  1462,   269,   270,  2476,  3398,
    3199,  3525,  3236,  3648,  3654,  3081,  3628,  3013,  3014,  3614,
    3048,  3472,  1537,  3651,  3588,   641,  3510,  2716,  2462,   299,
    2463,  3303,  3499,  3147,  3640,  2606,  3602,  2723,  2109,  3067,
    3068,  3069,  3603,   508,   509,   510,  1015,   512,   513,   514,
     515,   516,   517,  3081,  1015,  2128,  1153,  1723,  3086,  3087,
    2631,  3089,  2373,  3409,  3092,  2145,  3086,  1695,  3280,    21,
    3086,  3124,   195,   196,  3110,  1722,  2114,  3163,   657,  3107,
    1023,  1975,  3078,  3079,   642,  2353,  2392,  2352,  1176,  3048,
    1418,  1177,  3060,  3283,  3497,  1179,     0,  3284,  2026,  2129,
    1995,   989,   989,  1792,  1535,   227,  2677,  2731,   989,  3068,
    3069,   993,   989,  1668,    18,  1982,    27,    21,    94,   382,
     383,    -1,    -1,    -1,  3152,    -1,    -1,    -1,   398,    33,
      -1,    -1,  3152,  3092,    -1,  3163,    -1,    41,   261,   262,
     263,   264,   265,   266,    -1,  3173,   269,   270,    -1,    -1,
      -1,    -1,  1667,    -1,  1669,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1681,  3203,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,  3207,
      84,  3209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    -1,  3110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1720,    -1,   584,    -1,   556,
      -1,    -1,  3240,    -1,    -1,  3243,    -1,    -1,  3246,    -1,
    3240,    -1,    -1,  3243,  3240,    -1,    -1,  3243,    -1,    -1,
      -1,    -1,    -1,    -1,  2805,   505,  3110,    -1,   501,   502,
      -1,   588,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,  3247,    -1,    -1,    -1,  3283,    -1,    -1,   521,   382,
     383,    -1,    -1,    -1,    -1,    -1,    -1,  3263,  3296,  3297,
      -1,  3267,  2843,    -1,    -1,    -1,  3296,  3297,    -1,    -1,
      -1,    -1,    -1,    -1,  1799,    -1,  3203,    -1,  1803,  1804,
    1805,    -1,    26,    -1,  1809,    -1,    -1,    -1,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,   537,
      -1,   539,    -1,    -1,    -1,    -1,   544,    -1,    -1,   547,
    3348,    -1,    -1,    -1,    -1,    59,    -1,    -1,   556,  3203,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2919,    -1,
    3436,    -1,    -1,    -1,    -1,    -1,     0,  3385,   586,   587,
     588,    -1,  3398,    -1,    -1,    -1,   713,  3453,    -1,    -1,
      -1,  3399,  3400,  3401,    -1,    -1,   110,    -1,   501,   502,
      -1,  3409,    -1,    -1,    -1,    -1,   508,   509,   510,  3348,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,   627,
     628,   629,    -1,    -1,    40,    -1,   140,    -1,  3436,    -1,
      -1,    -1,    -1,    -1,   642,    -1,    -1,   584,   646,    -1,
      -1,    -1,    -1,    59,  3452,  3453,    -1,    -1,  3514,   657,
     658,   659,    -1,    -1,    -1,   663,   664,    -1,    -1,    -1,
      -1,    -1,  3470,    -1,  3472,  1960,  3474,  3483,  3476,  3445,
    3470,    -1,  3472,    97,  3470,    -1,  3472,    -1,    -1,    -1,
     688,   689,   690,   691,    -1,   693,   843,    -1,    -1,    -1,
      -1,    -1,  3468,   207,   110,  3503,  3504,    -1,    -1,   707,
      -1,  3398,    -1,  3503,  3504,   713,  3514,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3067,  3525,    -1,   727,
      -1,    -1,   730,    -1,    -1,    -1,    -1,    -1,   152,    -1,
      -1,  3539,    -1,    -1,    -1,    -1,    -1,    -1,  3546,    -1,
      -1,    -1,   166,    -1,  3398,   259,   627,   171,   629,    -1,
      -1,    -1,   176,   267,    -1,    -1,    -1,    -1,  3566,    -1,
      -1,    -1,   770,   187,   180,   279,   584,    -1,   192,   777,
     778,   779,   780,   781,    -1,    -1,    -1,    -1,    -1,    -1,
    3588,  3589,    -1,    -1,    -1,   793,  3483,   301,  3588,  3589,
     671,   207,  3588,  3589,  3602,  3603,    -1,   311,    -1,   223,
      -1,    -1,  3602,  3603,    -1,    -1,  3614,    -1,    -1,    -1,
      -1,   692,  3163,    -1,    -1,    -1,    -1,     0,    -1,    -1,
     244,    -1,    -1,    -1,  3632,    -1,    -1,  3635,    -1,  3483,
      -1,    -1,  3640,    -1,    -1,  3635,    -1,    -1,    -1,  3635,
      -1,  3649,    -1,   259,   358,  3653,    -1,    -1,   362,    -1,
     364,   267,   536,  3653,    -1,    -1,    -1,  3653,    -1,    -1,
      -1,    -1,    -1,   279,     8,    -1,    -1,    11,    -1,    -1,
     294,    15,   386,   297,    18,    19,    20,    -1,   392,   303,
      -1,    -1,  1039,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,   408,   311,   843,    -1,    -1,    -1,
      -1,  3640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   593,
     594,    -1,    -1,    -1,    97,    -1,    -1,    -1,   342,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   584,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   366,    -1,    -1,    -1,    -1,  2242,   364,    -1,
     464,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   642,  2254,
    2255,    -1,    -1,  2258,    -1,    -1,    -1,    -1,    -1,   152,
     386,    -1,    -1,   657,  2269,    -1,    -1,  2272,    -1,    -1,
      -1,    -1,  2277,   166,   992,   993,    -1,    -1,   171,   997,
      -1,    -1,   408,   176,     8,    -1,    -1,    11,  1006,  1007,
     424,    15,  1010,    -1,   187,    -1,    -1,    -1,  1016,   192,
      -1,    -1,    -1,  1021,    -1,   699,    -1,   701,    -1,    -1,
    1028,    -1,    -1,    -1,    -1,   843,  1153,    -1,   452,    -1,
      -1,    45,    -1,    -1,    -1,  1043,    -1,   461,    52,    -1,
     223,   725,    -1,    -1,  1201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   480,    -1,   482,   483,
      -1,   244,    -1,    77,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    -1,    -1,    -1,
      -1,    -1,  1090,   227,    -1,  3436,  2381,  2382,  2383,    -1,
      -1,    -1,  1039,    -1,    -1,   519,    -1,   978,   522,   523,
     524,    -1,  3453,    -1,    -1,    -1,    45,    -1,   989,    -1,
      -1,   294,    -1,    52,   297,    -1,    -1,    -1,    -1,    -1,
     303,    -1,    -1,    -1,    -1,    -1,    -1,  1135,    -1,    -1,
    1138,    -1,    -1,    -1,    -1,    -1,   150,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,  1153,  1154,    -1,    -1,    -1,
      -1,    -1,    -1,  1161,    -1,   299,  1037,    -1,    -1,   342,
      -1,    -1,    -1,  3514,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1187,
    1188,    -1,    -1,   366,    -1,    -1,   200,    -1,    -1,    -1,
     843,   205,  1200,    -1,    -1,    -1,    -1,    -1,    -1,  2494,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1217,
      -1,   150,  1369,  1221,  1095,    -1,    -1,  1225,    -1,    -1,
      -1,  1039,    -1,  1104,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1120,
      -1,   424,   181,  1400,  1401,    -1,    -1,    -1,    -1,    -1,
    1131,    -1,  1133,  1134,  1201,    -1,    -1,    -1,    -1,  1416,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,   452,
      -1,    -1,    -1,    -1,  2569,    -1,    -1,  2572,   461,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   979,    -1,   480,     8,   482,
     483,    11,    -1,    -1,   243,    15,    -1,    -1,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,  1455,    -1,
    1457,    -1,  1016,    -1,    -1,    -1,   519,  1021,    -1,   522,
     523,   524,    -1,    -1,    -1,    -1,  2641,  2642,  2643,  2644,
      -1,    -1,  1360,    -1,    -1,    -1,  1364,    -1,    -1,    -1,
     299,    -1,  1370,    -1,   508,   509,   510,  1051,   512,   513,
     514,   515,   516,   517,  1382,    -1,    -1,    -1,  1062,    -1,
      -1,    -1,    -1,  1201,   398,    -1,  1039,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,  1088,  1413,    -1,    -1,    -1,    -1,
    1418,    -1,    -1,    -1,    -1,    -1,    -1,    36,     8,    -1,
      -1,    11,  1369,    -1,    -1,    15,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1449,  1450,    -1,    -1,  1602,  1454,  1455,    -1,  1457,
    1458,    -1,    -1,  1400,  1401,    45,    -1,    -1,    77,   398,
      -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,     8,  1416,
      -1,    11,    -1,    -1,    -1,    15,    -1,    -1,    18,    19,
      20,    -1,  1363,  1167,  1168,    -1,  1170,    77,  2783,    -1,
      -1,   505,    -1,    -1,    -1,    -1,    36,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,  1514,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,  1527,
      -1,  1529,    -1,    -1,  1532,    -1,  1534,  1535,    -1,  1537,
      -1,  1539,    -1,    -1,    -1,    -1,  1544,    -1,  1546,    -1,
    1548,    -1,  1550,    -1,    -1,  1553,    -1,    -1,  1201,    -1,
      -1,  1369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,    -1,   181,    -1,    -1,  1573,   505,    -1,    -1,    -1,
    1578,    -1,    -1,   512,   513,   514,   515,   516,   517,    -1,
    1737,   200,  1400,  1401,    -1,    -1,   205,    -1,    -1,   299,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,  1416,    -1,
    1481,    -1,  1729,    -1,    -1,  1613,    -1,    -1,   227,   228,
     200,    -1,  1739,    -1,  1741,   205,    -1,  1744,    -1,    -1,
      -1,    -1,    -1,  1750,   243,  1752,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1644,  1764,    -1,    -1,
      -1,    -1,  1769,    -1,    -1,    -1,  1773,  1774,  1775,  1776,
      -1,  1778,  1779,   243,    -1,  1602,    -1,  1665,    -1,  1667,
      -1,  1669,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,  1681,  1682,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,    -1,    -1,    -1,   227,    -1,  1570,
       0,    -1,    -1,    -1,  1851,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,  1720,    -1,    -1,    -1,  1369,    -1,    -1,    -1,
    1728,  1729,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1739,  1740,  1741,  1742,    -1,  1744,  1894,    -1,    -1,
      -1,    -1,  1750,    -1,  1752,    -1,    -1,  1400,  1401,    -1,
      -1,    -1,    -1,  1910,    -1,  1763,  1764,    -1,    -1,   299,
    1768,  1769,    -1,  1416,    -1,  1773,  1774,  1775,  1776,    -1,
    1778,  1779,    -1,    -1,    -1,  1656,    -1,  1461,    -1,   398,
      -1,    -1,  1939,    -1,  1602,    -1,  3081,    97,    -1,  1946,
    1737,  1799,  3087,    -1,    -1,  1803,  1804,  1805,   508,   509,
     510,  1809,   512,   513,   514,   515,   516,   517,   398,    -1,
      -1,    -1,  3107,    -1,    -1,    -1,  1824,    -1,    -1,    -1,
      -1,  1978,    -1,    -1,  1981,    -1,    -1,    -1,    -1,  1986,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1539,   166,    -1,    -1,    -1,
    1544,   171,  1546,    -1,  1548,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,  1562,    -1,
      -1,    -1,   192,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,  1851,    -1,   525,    -1,    -1,    -1,
      -1,    -1,  3207,   223,    -1,   505,    -1,    -1,    -1,  1737,
      -1,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,  1616,    -1,   244,    -1,    -1,    -1,    -1,    -1,
    1948,    -1,    -1,    -1,    -1,    -1,    -1,  1894,    -1,  1602,
      -1,  3246,  1960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1910,    -1,  1973,    -1,    -1,   508,   509,
     510,  1979,   512,   513,   514,   515,   516,   517,    -1,    -1,
    2107,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,  1939,   303,    -1,    -1,    -1,    -1,  1879,  1946,
      -1,    -1,  1883,    -1,     8,    -1,    -1,    11,  1692,    -1,
    2018,    15,    -1,    -1,  2022,    -1,    -1,    -1,  2026,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1978,   342,  1851,  1981,    -1,    -1,    -1,    -1,  1986,
      -1,    45,    -1,     8,    -1,    -1,    11,    -1,    52,    -1,
      15,    -1,    -1,    -1,    -1,  2063,   366,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,  1894,    -1,    -1,    -1,
      45,    -1,    -1,    -1,  1737,    -1,  2094,    52,    -1,    -1,
      -1,    26,  1910,    -1,    -1,    -1,    -1,    32,    -1,  2107,
      -1,  1982,    -1,    -1,    -1,    40,  2114,    -1,  2265,    -1,
    2118,    -1,    77,    -1,   424,    -1,    -1,    -1,    -1,    -1,
      -1,  1939,    -1,    -1,    59,    -1,    -1,    -1,  1946,  2256,
      -1,    -1,  1816,    -1,    -1,    -1,    -1,    -1,    -1,  1823,
      -1,    -1,   452,    -1,    -1,    -1,   150,    -1,    -1,    -1,
      -1,   461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1978,    -1,    -1,  1981,  2172,    -1,    -1,    -1,  1986,    -1,
     480,    -1,   482,   483,    -1,   110,    -1,   181,    -1,  3474,
      -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,  1851,    -1,
      -1,   205,    -1,    -1,    -1,   140,    -1,    -1,    -1,   519,
      -1,    -1,   522,   523,   524,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2235,    -1,    -1,
      -1,    -1,    -1,    -1,  2242,   200,    -1,    -1,    -1,   243,
     205,  1894,    -1,    -1,  3539,  2253,  2254,  2255,  2256,    -1,
    2258,    -1,    -1,    -1,    -1,    -1,    -1,  1910,    -1,    -1,
      -1,  2269,    -1,    -1,  2272,    -1,    -1,    -1,    -1,  2277,
      -1,  3566,   207,    -1,  2431,    -1,    -1,    -1,   243,    -1,
      -1,  2289,    -1,    -1,    -1,    -1,  1939,    -1,    -1,  1973,
      -1,    -1,    -1,  1946,    -1,   299,    -1,    -1,    -1,  2307,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2188,    -1,    -1,
      -1,    -1,    -1,  2321,  2322,    -1,  2324,    -1,  2265,  3614,
      -1,    -1,    -1,    -1,   259,  1978,    -1,    -1,  1981,    -1,
      -1,    -1,   267,  1986,   299,    -1,    -1,  3632,    -1,    -1,
      -1,    -1,    -1,    -1,   279,  2353,    -1,    -1,    -1,    -1,
      -1,    -1,  2233,    -1,  3649,    -1,    -1,    -1,    -1,    -1,
    2241,    -1,    -1,    -1,  2372,    -1,   301,  2051,    -1,  2496,
    2251,    -1,    -1,  2381,  2382,  2383,   311,    -1,    -1,  2536,
    2388,    -1,    -1,    -1,  2392,  2069,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,  2523,    -1,    -1,  2407,
      -1,  2085,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2094,  2538,  2539,  2540,  2541,  2542,  2543,  2544,  2545,  2546,
    2547,    -1,    -1,   358,    -1,  2109,    -1,   362,    -1,   364,
    2114,  2312,  2116,   398,    -1,    40,  2317,    -1,  2319,    -1,
      -1,    -1,  2323,    -1,  2325,    -1,    -1,  2265,    -1,  2606,
      -1,   386,    -1,    -1,    59,    -1,    -1,   392,    -1,    -1,
      -1,    -1,  2470,    -1,    -1,  2473,    -1,    -1,  2476,    -1,
      -1,    -1,    -1,   408,  2631,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2431,    -1,  2494,    -1,  2496,    -1,
      -1,    -1,  2500,  2501,  2502,    -1,  2504,    -1,    -1,    -1,
      -1,   505,    -1,    -1,    -1,   110,   111,    -1,   512,   513,
     514,   515,   516,   517,   119,  2523,    -1,  2525,   688,   689,
    2677,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   464,
    2538,  2539,  2540,  2541,  2542,  2543,  2544,  2545,  2546,  2547,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,  2566,    -1,
      -1,  2569,    -1,    -1,  2572,    -1,    -1,  2251,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   180,    -1,  2585,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   756,   757,    -1,  2536,
    2598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   207,    -1,    -1,    -1,    -1,     8,    -1,  2617,
      11,    -1,  2265,  2431,    15,    -1,    -1,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,  2634,    -1,    -1,    -1,
      -1,    -1,    -1,  2641,  2642,  2643,  2644,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,  2653,    -1,    -1,  2805,  2776,
      -1,    52,    -1,    -1,   259,  2536,    -1,    -1,  2666,  2606,
      -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   279,    -1,    77,   282,    -1,    -1,
    2561,  2562,    -1,  2691,  2631,  2693,  2843,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,   311,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,  2536,    -1,
      -1,    -1,    -1,  2731,    -1,    -1,  2410,    -1,    36,    -1,
    2677,    -1,    40,    -1,    -1,    -1,  2744,    45,    -1,    -1,
      -1,    -1,  2750,    -1,    52,    -1,    -1,    -1,  2756,    -1,
      -1,    -1,    -1,     8,  2762,    -1,    11,  2441,    -1,   364,
      15,    -1,  2919,    18,    19,    20,    -1,  2775,  2776,    77,
      -1,    -1,    -1,    -1,    -1,  2783,    -1,    -1,  2431,    -1,
     181,   386,    -1,    -1,     8,    -1,  2470,    11,  2606,    -1,
      45,    15,  2800,    -1,    -1,    -1,    -1,    52,    -1,   200,
      -1,    -1,    -1,   408,   205,   410,    -1,    -1,   413,    -1,
      -1,    -1,    -1,  2631,   984,    -1,    -1,  2698,    -1,    -1,
      -1,    45,    77,    -1,    -1,    -1,   996,    -1,    52,   999,
      -1,  1000,  1002,  1003,  1004,  1005,    -1,    -1,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,  2805,  2677,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1038,    -1,
      -1,    -1,  2880,   181,    -1,    -1,    -1,    -1,    -1,     8,
      -1,  2565,    11,  2536,    -1,  1055,    15,    -1,  2896,    18,
      19,    20,   200,    -1,    -1,    -1,  2843,   205,   299,    -1,
      -1,  2909,  1072,    -1,    -1,    -1,    -1,    36,    -1,  2593,
    3067,    -1,  2596,  1083,  1084,  1085,   521,  1087,  1088,   227,
     228,  3048,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   243,    -1,  2945,    -1,    -1,
      -1,  3068,  3069,    -1,  1114,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,  2606,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,  2971,    -1,  3092,    -1,    -1,    -1,    -1,
      -1,    -1,  2919,    -1,   282,    -1,   200,   285,  2631,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,  2805,   243,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,   398,    -1,  1169,
      -1,    -1,    -1,  1173,  1174,  1174,  3163,  3015,    -1,  2693,
      -1,  2892,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,  2677,  2843,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2915,    -1,    -1,    -1,    -1,    -1,
    3048,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1228,    -1,
    3068,  3069,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1240,    -1,    -1,  3081,    -1,   299,    -1,    -1,    -1,  3087,
      -1,  3089,    -1,    -1,  3092,    -1,    -1,    -1,    -1,    -1,
     398,    -1,    -1,    -1,  2975,  1265,    -1,    -1,   227,  3107,
      -1,  2919,  3110,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
    3067,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2805,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    -1,  3173,    18,    19,    20,    -1,
     299,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,  3067,    -1,    -1,  3197,
    2843,    -1,    -1,    -1,    -1,  3203,    -1,   505,    -1,  3207,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,  2895,    -1,    -1,    -1,    -1,  3163,    -1,    -1,    -1,
      -1,  3348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3246,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3067,
     505,  2935,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,  2919,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3283,    -1,    -1,    -1,  3436,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,  3453,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    -1,    -1,  3316,    -1,
      -1,    -1,    -1,    -1,  1484,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3013,
    3014,    -1,    -1,    -1,    -1,    45,    -1,    -1,  1507,  1508,
    3348,    -1,    52,  1512,    -1,  3163,    -1,    -1,    -1,  1519,
    3231,  1521,  1522,    -1,    -1,    -1,    -1,  3514,    -1,    -1,
      -1,    -1,    -1,    -1,  1534,  1535,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   227,    -1,  3385,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
    3398,  3399,  3400,  3401,  3078,  3079,    -1,    -1,    -1,    -1,
      -1,  3409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3067,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1000,    -1,    -1,  1597,    -1,    -1,
      -1,    -1,    -1,  1603,  1604,  1605,  1606,  1607,  1608,  1609,
     150,    -1,    -1,    -1,  1614,  1615,    -1,   299,    -1,  1619,
      -1,    -1,    -1,  1623,    -1,    -1,  1626,  1627,  1628,  1629,
    1630,  1631,  1632,  1633,  1634,    -1,  3474,  1637,  3476,    -1,
      -1,   181,    -1,    -1,  1644,  3483,  1646,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3436,
     200,    -1,    -1,  3177,    -1,   205,    -1,    -1,    -1,    -1,
    1670,    -1,  3510,    -1,    -1,    -1,  3453,    -1,    -1,    -1,
    3163,    -1,    -1,    -1,    -1,    -1,    -1,  3525,    -1,    -1,
    3005,  3006,  3007,  3008,    -1,    -1,  1695,    -1,    -1,    -1,
      -1,  3539,    -1,   243,    -1,    -1,  1706,  1707,  3546,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    -1,    -1,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,  3566,    -1,
      -1,    -1,    -1,  3247,    -1,    -1,    -1,  3514,    -1,    -1,
      -1,    -1,  3453,    -1,    -1,    -1,    -1,    -1,    -1,  3263,
      -1,    -1,    -1,  3267,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1786,    -1,  3436,  1789,
    1790,    -1,  1792,    -1,  3632,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3640,    -1,    -1,  3453,    -1,    -1,    -1,    -1,
      -1,  3649,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3333,
      -1,   119,    -1,    -1,    -1,    -1,   508,   509,   510,  1829,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3164,
    3165,  3166,  3167,  3168,  3169,  3170,    -1,    -1,   398,    -1,
    3175,  3176,    -1,    -1,    -1,  3180,  3514,    -1,  3183,    -1,
      -1,  3186,  3187,  3188,  3189,  3190,  3191,  3192,  3193,  3194,
    3195,   978,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     987,   988,    -1,    -1,    -1,    -1,    -1,   994,   995,    -1,
    1900,    -1,    -1,  1903,    -1,  1905,    -1,    -1,  1000,    -1,
      -1,    -1,  1911,  1912,  1913,  1914,  1915,    -1,    -1,  1918,
    1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,   227,
      -1,  3445,    -1,  1933,  1934,    -1,    -1,  1937,    -1,    -1,
    1037,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,  3436,  3468,    11,    -1,    -1,    -1,    15,
      -1,    -1,    18,    19,    20,   505,  1966,    -1,    -1,  1969,
    3453,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
    3295,    -1,    -1,    -1,  1984,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,    -1,  1994,    -1,    52,    -1,    -1,    -1,
      -1,   299,    -1,    -1,    -1,    -1,    -1,  1104,    -1,    -1,
      -1,    -1,    -1,  1105,    -1,  3330,    -1,  3332,    -1,  3334,
    2020,    77,    -1,    -1,    -1,  2025,    -1,    -1,  2028,    -1,
      -1,  3514,     8,    -1,  1131,    11,  1133,  1134,    -1,    15,
      -1,    -1,    18,    19,    20,    -1,    -1,  2046,  2047,    -1,
      -1,    -1,     8,    -1,    -1,    11,  1148,    -1,    -1,    15,
      16,    17,    18,    19,    20,  2065,    -1,    -1,  2068,    -1,
    2070,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,     8,    -1,    45,
      11,    -1,    -1,    -1,    15,    -1,    52,    18,    19,    20,
    3415,  1507,  1508,    -1,    -1,  1202,  1512,  3422,  1205,  1206,
      -1,    -1,    -1,  3428,  3429,    36,    -1,    -1,    -1,    -1,
      -1,    77,  3437,    -1,    45,   181,    -1,    -1,  2128,  3444,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,  2145,  2146,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2164,    -1,    -1,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,  1271,
      -1,    -1,    -1,    -1,  1276,    -1,    -1,   243,    -1,    -1,
      -1,    -1,  3507,  3508,    -1,    -1,    -1,    -1,  3513,    -1,
      -1,    -1,  3517,    -1,    -1,  3520,  3521,    -1,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,  2223,    -1,   181,   282,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,  1642,    -1,    -1,    -1,
      -1,    -1,    -1,   299,   200,    -1,    -1,    -1,    -1,   205,
      -1,   227,    -1,    -1,    -1,    -1,    -1,  3572,  3573,    -1,
     181,  3576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,  2275,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,   205,    -1,    -1,   243,    -1,  1695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1398,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,    -1,  1409,    -1,  1411,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   243,   299,  1421,    -1,   282,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1438,   398,   299,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
    1467,  1468,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2401,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2410,  1503,    -1,  1505,    -1,  1507,  1508,  1509,    -1,  2419,
    1512,    -1,  2422,  1515,  2424,    -1,  1518,    -1,    -1,    -1,
      -1,  1523,  2432,    -1,  1526,    -1,  2435,  2436,    -1,    -1,
    2440,  2441,   398,    -1,  2444,    -1,    -1,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,  2466,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1568,   398,  2478,    -1,
    1572,    -1,    -1,  1575,  1576,  1577,    -1,    -1,    -1,  1581,
      -1,    -1,    -1,  1585,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1911,  1912,  1913,  1914,  1915,
      -1,    -1,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,
    1926,  1927,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,  1643,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,   522,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,  1689,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,  1706,
    1707,    -1,    -1,  1705,    52,    -1,    -1,    -1,  1710,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2628,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
    2046,  2047,    -1,     8,    -1,    -1,    11,    -1,  2648,  2649,
      15,    -1,    -1,    18,    19,    20,  2656,    -1,    -1,    -1,
    1757,    -1,    -1,    -1,    -1,    -1,    -1,  2667,  2667,    -1,
    1767,  2671,  2672,  1770,    -1,    -1,  2676,    -1,    -1,    -1,
      -1,  2681,    -1,    -1,  2684,  2685,    -1,    -1,    -1,  2689,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
    2729,  2731,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,   181,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1854,  1855,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,  2769,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2777,    -1,
      -1,    -1,  1879,    -1,    -1,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,    -1,    -1,  2796,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1896,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1908,  1909,    -1,  1911,
    1912,  1913,  1914,  1915,    -1,    -1,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,  1927,  1928,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,   227,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,   181,    11,    -1,    -1,    -1,    15,
      -1,    -1,    -1,    -1,  2884,  1982,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,  2918,
     227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,  2935,   243,    -1,  2030,    -1,
      -1,    77,  2034,  2035,  2036,  2037,  2038,  2039,  2040,    -1,
      -1,  2951,    -1,    -1,  2046,  2047,    -1,  2049,  2050,    -1,
     398,    -1,  2962,  2963,    -1,    -1,  2966,    -1,    -1,  2061,
      -1,    -1,  2064,    -1,    -1,   282,    -1,    -1,   285,    -1,
    2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,
      -1,    -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,
      -1,    -1,  2099,    -1,    -1,    -1,  3005,  3006,  3007,  3008,
      -1,    -1,    -1,    -1,  2106,    -1,    -1,    -1,    -1,  3019,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2435,
    2436,    -1,    -1,    -1,    -1,    -1,    -1,  3037,  2135,  2136,
      -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,    -1,   505,    -1,   205,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3106,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3124,    -1,    -1,    -1,  3128,    -1,
      -1,    -1,  3132,    -1,    -1,    -1,  2228,  2229,  2230,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,  3164,  3165,  3166,  3167,  3168,
    3169,  3170,    -1,    -1,    -1,    -1,  3175,  3176,    -1,    -1,
      -1,  3180,    -1,    -1,  3183,    -1,  2283,  3186,  3187,  3188,
    3189,  3190,  3191,  3192,  3193,  3194,  3195,  3197,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,  3214,   522,    -1,    -1,    -1,    -1,
      -1,    -1,  2628,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2329,  2330,  2331,
      -1,    -1,  2334,  2335,  2336,  2337,  2338,    -1,    -1,    -1,
    2342,  2343,  2344,  2345,  2346,  2347,  2348,  2349,  2350,  2351,
      -1,    -1,   398,    -1,  2356,  2357,    -1,    -1,    -1,    -1,
    3270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2384,    -1,    -1,  2387,  3295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2400,    -1,
      -1,    -1,    -1,    -1,  3313,  3314,  3316,    -1,    -1,  2411,
      -1,    -1,  2414,  2729,  2416,    -1,    -1,    -1,  2420,  2421,
      -1,  3330,    -1,  3332,    -1,  3334,    -1,    -1,    -1,    -1,
      -1,    -1,  2434,  2435,  2436,  2437,    -1,  2439,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3367,    -1,   505,
      -1,  2777,    -1,    -1,    -1,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2497,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3415,    -1,    -1,    -1,
      -1,    -1,    -1,  3422,    -1,    -1,    -1,    -1,    -1,  3428,
    3429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3437,  2536,
    3439,  3440,    -1,    -1,    -1,  3444,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3496,  3497,    -1,    -1,
      -1,  3500,    -1,    -1,    -1,  2597,    -1,    -1,  3507,  3508,
    3510,    -1,  2918,    -1,  3513,    -1,    -1,    -1,  3517,    -1,
      -1,  3520,  3521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2628,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2657,    -1,    -1,    -1,    -1,
    2662,    -1,    -1,  3572,  3573,    -1,    -1,  3576,  2670,    -1,
      -1,  2673,    -1,  2675,    -1,    -1,    -1,  2679,    -1,    -1,
    2682,  2683,    -1,    -1,  2686,  2687,    -1,    -1,  2690,  3005,
    3006,  3007,  3008,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,  3622,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,     8,    -1,  2730,    11,
      -1,    -1,    -1,    15,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,  2747,     8,    45,    -1,    11,
      -1,    -1,    -1,    15,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,  2777,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    45,    -1,    -1,    -1,  2794,    -1,    -1,
      52,    -1,  2799,     8,    -1,    77,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,    -1,  2851,  2852,    -1,    -1,  3164,  3165,
    3166,  3167,  3168,  3169,  3170,    -1,    -1,    -1,    -1,  3175,
    3176,    -1,    77,    -1,  3180,    -1,    -1,  3183,   150,    -1,
    3186,  3187,  3188,  3189,  3190,  3191,  3192,  3193,  3194,  3195,
    3196,    -1,    -1,   181,     8,    -1,    -1,    11,   150,    -1,
      -1,    15,    -1,    -1,    18,    19,    20,    -1,    -1,   181,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,   128,    -1,  2917,  2918,    -1,   200,   181,
      -1,    45,    -1,   205,    -1,    -1,    -1,    -1,    52,   227,
     228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,  2943,  2944,   205,    -1,   243,    -1,  2949,    -1,    -1,
      -1,    -1,  2954,    77,  2956,  2957,  2958,    -1,    -1,  2961,
      -1,   243,  2964,  2965,    -1,    -1,   181,  2969,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3295,
      -1,   243,    -1,    -1,   282,   200,    -1,   285,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,  3313,  3314,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,  3009,    -1,    -1,
      -1,    -1,   227,   228,  3330,    -1,  3332,   299,  3334,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,  3034,    -1,    -1,    -1,    -1,   299,  3040,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3056,
    3057,  3053,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
    3067,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,   200,    -1,  3080,    -1,
      -1,   205,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3415,
     398,    -1,    -1,   227,   228,    -1,  3422,    -1,    -1,    -1,
    3112,    -1,  3428,  3429,    -1,    -1,   398,    -1,    -1,   243,
      -1,  3437,    -1,  3439,  3440,    -1,    -1,    -1,  3444,    -1,
      -1,    -1,  3134,  3135,  3136,    -1,   398,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3159,  3160,  3161,
    3162,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,  3500,    -1,    -1,    -1,    -1,    -1,
      -1,  3507,  3508,    -1,    -1,    -1,    -1,  3513,    -1,    -1,
      -1,  3517,    -1,  3205,  3520,  3521,    -1,   505,    -1,    -1,
     508,   509,   510,  3215,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,   505,   522,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   461,    -1,    -1,    -1,
     512,   513,   514,   515,   516,   517,  3572,  3573,    -1,    -1,
    3576,    -1,    -1,    -1,    -1,    -1,  3268,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3285,    -1,    -1,  3288,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,  3305,  3306,  3307,  3308,  3309,  3310,  3311,
      -1,  3313,  3314,    -1,    -1,  3317,  3318,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3327,    -1,  3329,    -1,    -1,
      -1,    -1,    -1,    -1,  3336,  3337,  3338,  3339,  3340,  3341,
    3342,  3343,  3344,  3345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,  3396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3416,    -1,    -1,    -1,    -1,    -1,
      -1,  3423,  3424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3438,  3439,  3440,  3441,
      -1,  3443,    -1,    -1,    -1,    -1,  3453,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3466,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3499,  3500,    -1,
      -1,    -1,    -1,    -1,  3506,    -1,    -1,    -1,    -1,  3511,
    3512,    -1,    -1,    -1,  3516,    -1,  3518,  3519,    -1,    -1,
    3522,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3553,    -1,    -1,    -1,    -1,    -1,  3559,    -1,    -1,
      -1,    -1,  3564,  3565,    -1,    -1,  3568,    -1,    -1,  3571,
      -1,    -1,  3574,  3575,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3606,  3607,  3608,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,   507,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,   522,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
     522,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,   507,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    37,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,   522,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,    -1,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,     3,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    23,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     0,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    94,    -1,    21,    -1,    -1,    -1,
      23,   531,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,
      35,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
      -1,   151,    -1,    -1,    -1,    78,    -1,    -1,    83,    -1,
      -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    94,    97,   173,    -1,    -1,    -1,    -1,   178,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,   208,    -1,
      -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   148,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   156,    -1,   158,   159,    -1,    -1,    -1,   161,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
     173,   176,    -1,    -1,   254,   178,    -1,    -1,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   204,
      -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   219,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   246,    -1,    -1,   324,    -1,    -1,    -1,    -1,    -1,
      -1,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,    -1,
     340,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,   378,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   386,    -1,    -1,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   324,   327,    -1,    -1,   330,    -1,    -1,    -1,    -1,
     410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   341,    -1,
      -1,    -1,    -1,    -1,   424,    -1,    -1,    -1,    -1,    -1,
      -1,   431,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,
      -1,   441,    -1,    -1,    -1,    -1,   371,   447,    -1,    -1,
      -1,    -1,   375,    -1,    -1,   378,    -1,    -1,    -1,    -1,
     385,    -1,    -1,   386,    -1,    -1,   389,   392,    -1,    -1,
      -1,    -1,   397,    -1,   474,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   408,    -1,    -1,    -1,   410,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,   424,
      -1,   424,    -1,    -1,    -1,    -1,    -1,    -1,   431,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   441,   444,
      -1,    -1,    -1,    -1,   447,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   459,    -1,    -1,   462,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   474,    -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   507,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,   521,    -1,    -1,   524,
      38,    -1,    40,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,   244,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   522,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,   298,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
       3,   507,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,   298,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
     297,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    34,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,   176,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,   507,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,   176,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,     3,   507,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,   176,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,   507,
       3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    15,   521,    -1,    18,    19,    20,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    -1,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,    -1,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,    -1,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,    -1,   186,   187,    -1,    -1,    -1,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
     323,   324,    -1,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,   504,    -1,     3,    -1,   508,   509,   510,     8,   512,
     513,   514,   515,   516,   517,    15,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    45,    15,    16,    17,    18,
      19,    20,    52,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    77,    -1,    -1,
      -1,    -1,    -1,    52,     8,    -1,    -1,    11,    -1,    -1,
      45,    15,    16,    17,    18,    19,    20,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    77,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    45,    15,    16,    17,    18,    19,    20,    52,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,   150,    -1,    -1,    -1,    -1,
     200,    -1,    45,    77,    -1,   205,    -1,    -1,    -1,    52,
      -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   181,   227,   228,    -1,
      -1,   200,    -1,    -1,    77,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,   181,   227,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,   200,    -1,    -1,    -1,
      -1,   205,   282,    -1,    -1,   285,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,   302,   227,   228,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
     299,   205,    -1,   302,    -1,    -1,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,   200,   282,    -1,
      -1,   285,   205,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,
     243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,     8,
      -1,   285,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,   299,    -1,    -1,   302,   398,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,   282,
      -1,    -1,   285,   398,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,   299,     8,    -1,   302,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    -1,   398,    -1,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
     505,    -1,    -1,   522,    -1,   398,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,   181,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   522,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,
     181,   505,    -1,    -1,   508,   509,   510,    36,   512,   513,
     514,   515,   516,   517,   243,    -1,    45,    -1,   522,   200,
      -1,    -1,    -1,    52,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,   227,   228,    77,   522,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,     8,    -1,   302,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,   299,     8,
      -1,   302,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,   181,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,   398,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,   398,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,    36,   285,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    45,    -1,    -1,    -1,   205,    -1,
     299,    52,    -1,   302,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
     227,   228,   181,   522,    -1,    -1,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,   227,   228,
      -1,   522,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,     8,   302,    -1,    11,    -1,   398,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,   282,    -1,    -1,   285,    -1,    -1,    -1,
     181,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
     299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,   398,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,   302,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    45,
      -1,   205,    -1,    -1,    -1,    -1,    52,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,   227,   228,   522,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,   398,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,   520,
      -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,   520,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,   520,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    -1,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,    -1,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,    -1,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,   403,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,   297,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,     4,     5,    -1,    -1,
      -1,     9,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,   297,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,     4,     5,
      -1,    -1,    -1,     9,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,   297,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,     8,    -1,    -1,    11,    -1,   512,   513,    15,    16,
      17,    18,    19,    20,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    36,    -1,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,     8,    -1,    -1,    11,    52,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    77,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    77,   181,    -1,   170,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,   227,   228,    -1,   243,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,   243,
      -1,   205,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   227,   228,   282,    -1,   181,   285,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,   282,   243,
      45,   285,   299,    -1,    -1,   302,   200,    52,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    77,   227,   228,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,    -1,   328,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    45,    -1,   299,    -1,    -1,   302,    -1,
      52,    -1,    -1,    -1,   398,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,   322,    -1,
      -1,    -1,    -1,    -1,    -1,    77,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    -1,   398,   200,    -1,    -1,    -1,    52,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   227,   228,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,   176,    -1,    -1,   282,    -1,   181,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   200,    -1,
      -1,   505,    -1,   205,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   227,   228,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,   505,   205,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,
     243,    -1,    -1,   398,    -1,    -1,    -1,   299,     8,    -1,
     302,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,   282,
      -1,    -1,   285,    -1,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,   299,     8,    -1,   302,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    77,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    -1,    -1,
      -1,   171,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,   181,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    77,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      36,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    45,
     512,   513,   514,   515,   516,   517,    52,   227,   228,    -1,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,   200,
      -1,    77,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,   227,   228,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,   302,   181,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,   282,    -1,    -1,   285,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,   299,   227,
     228,   302,    -1,    52,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    77,   205,
      -1,    80,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,   398,    -1,
      -1,   227,   228,    -1,   282,    -1,    -1,   285,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    45,
      -1,   299,    -1,    -1,   302,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,
       8,    77,    -1,    11,    -1,    -1,   282,    15,    -1,   285,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      96,    -1,    -1,   299,    -1,    -1,   302,    -1,    36,    -1,
      -1,   432,   181,    -1,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,   505,   205,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    77,
     398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   181,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   398,    -1,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,   282,     8,    -1,   285,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
     299,   227,   228,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    45,    -1,   181,    -1,    -1,    -1,   505,    52,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,   282,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,   243,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    -1,    -1,    18,    19,
      20,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,   299,    -1,     8,   302,    45,    11,    -1,    -1,    -1,
      15,    -1,    52,    18,    19,    20,     8,   181,    -1,    11,
      -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,    -1,
      -1,    36,   398,    -1,    -1,    -1,   200,    77,    -1,    -1,
      45,   205,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,   227,   228,    -1,   505,    -1,    -1,   508,
     509,   510,    77,   512,   513,   514,   515,   516,   517,   243,
      -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
     398,    -1,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,    -1,    -1,   299,    52,    -1,   302,   505,
      -1,   181,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    77,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,   181,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,   243,    -1,    -1,    -1,   505,   200,    -1,
     508,   509,   510,   205,   512,   513,   514,   515,   516,   517,
      -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   227,   228,    -1,   243,    -1,
      -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,
     282,    -1,    -1,   285,   299,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   398,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,     5,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    -1,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,    -1,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,    -1,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    -1,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,    -1,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,    -1,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    -1,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,    -1,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,    -1,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
      -1,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    -1,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,   297,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,   173,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
     173,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
     243,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    34,    35,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,   298,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,   298,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,     4,    -1,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    40,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    40,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    -1,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    -1,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
      -1,    -1,   283,   284,   285,   286,    -1,    -1,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,    -1,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,    -1,   326,   327,   328,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,    -1,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,    -1,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,   504,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    -1,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,    -1,   181,   182,    -1,
     184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,    -1,    -1,   283,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,    -1,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,    -1,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,    -1,   468,    -1,   470,   471,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,
     504,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    -1,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,    -1,   181,   182,    -1,   184,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,    -1,    -1,   283,   284,   285,   286,
      -1,    -1,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,    -1,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,    -1,   326,
     327,   328,    -1,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,    -1,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
      -1,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,   504,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    -1,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
      -1,   181,   182,    -1,   184,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,    -1,    -1,   283,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,    -1,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,    -1,   326,   327,   328,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
      -1,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,    -1,   468,    -1,
     470,   471,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   501,   502,   503,   504,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    -1,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,    -1,    -1,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,    -1,    -1,
     283,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,    -1,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,    -1,   326,   327,   328,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,    -1,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,    -1,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,   504,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
      -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    -1,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,    -1,   181,   182,    -1,
     184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,    -1,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,    -1,    -1,   283,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,    -1,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,    -1,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,    -1,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,    -1,   468,    21,   470,   471,   472,    -1,
     474,   475,   476,   477,    -1,    21,    32,   481,    34,    35,
     484,   485,   486,   487,   488,   489,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,   501,   502,   503,
     504,    -1,    -1,    -1,    60,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    -1,    72,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    72,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    95,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   129,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,   140,    -1,    -1,    -1,    -1,    -1,
     156,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     156,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   327,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   327,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   371,   362,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,   385,
      -1,   397,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,   397,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   408,    -1,   420,    -1,    -1,    -1,   424,    -1,
      -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,   424,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   444,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   444,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,   471,   462,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   507,    -1,    -1,    -1,   521,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    32,    34,    35,    46,    51,    60,    72,    83,
      95,    97,   115,   129,   131,   140,   148,   156,   158,   159,
     172,   176,   204,   219,   246,   327,   330,   362,   371,   385,
     392,   397,   408,   420,   424,   444,   459,   462,   467,   483,
     507,   521,   536,   537,   538,   539,   540,   547,   558,   559,
     560,   563,   564,   566,   583,   631,   642,   644,   647,   650,
     652,   655,   656,   660,   667,   669,   676,   680,   681,   682,
     689,   693,   709,   712,   715,   732,   769,   770,   773,   775,
     776,   777,   778,   780,   781,   833,   834,   982,   984,   985,
     986,   991,   994,  1000,  1001,  1004,   438,   486,   983,   208,
     378,   386,   424,   474,   112,   561,   983,     3,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    31,    32,    33,
      38,    42,    43,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    58,    59,    60,    61,    62,
      63,    66,    67,    68,    69,    70,    72,    73,    74,    75,
      76,    78,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    91,    92,    93,    94,    95,    96,    98,    99,
     100,   101,   102,   103,   104,   105,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   120,   122,   123,
     124,   125,   126,   127,   129,   130,   131,   132,   133,   134,
     137,   138,   139,   140,   141,   142,   143,   145,   146,   147,
     149,   150,   151,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   165,   167,   168,   169,   170,   172,
     174,   175,   177,   178,   179,   180,   181,   182,   184,   185,
     188,   189,   190,   191,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   206,   207,   208,   209,
     210,   211,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   224,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   240,   241,   242,   243,   245,
     246,   247,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   283,   284,   285,   286,   288,   289,
     290,   291,   292,   293,   295,   296,   299,   300,   301,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   334,   335,   336,
     337,   338,   339,   340,   341,   343,   344,   345,   346,   347,
     348,   349,   350,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   422,
     423,   425,   426,   427,   428,   429,   430,   431,   433,   434,
     436,   438,   439,   440,   441,   442,   444,   445,   446,   447,
     448,   449,   450,   451,   454,   455,   456,   457,   458,   459,
     460,   462,   463,   464,   465,   466,   467,   468,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   481,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   634,
     635,   636,   637,   893,   966,   970,   973,     3,   180,   255,
     417,   565,   634,   970,   983,    54,   521,   578,     5,   112,
     182,   247,   302,   340,   378,   428,   430,   447,   453,   456,
     629,   643,   688,   969,     5,    30,   330,   964,   970,   971,
     112,   561,    23,    78,    94,   112,   151,   161,   173,   178,
     208,   254,   258,   324,   340,   341,   375,   378,   386,   389,
     410,   424,   431,   441,   447,   474,   661,   662,   665,   983,
     964,    97,   140,   471,   521,   539,   540,   547,   563,   564,
     566,   583,   631,   644,   647,   650,   652,   655,   656,   660,
     667,   672,   676,   682,   689,   709,   769,   770,   773,   775,
     982,   984,   986,   991,   994,  1000,  1004,   112,    72,   219,
      65,    76,    78,   102,   103,   104,   105,   106,   107,   108,
     163,   186,   238,   248,   249,   288,   298,   309,   325,   374,
     391,   419,   440,   442,   446,   460,   467,   521,   776,   834,
     836,   838,   839,   846,   847,   893,   895,   896,   961,   970,
     971,   112,   710,   969,   970,   710,   970,   964,    30,   433,
     438,   970,   992,   993,  1002,   983,    30,   135,   789,   790,
     182,   247,   378,   390,   433,   995,   996,  1002,   983,   521,
     775,   781,   970,  1003,   846,   970,   424,   786,   961,   177,
     521,   988,   521,   349,   782,   783,   964,   782,     3,   634,
     636,   711,   776,   777,     0,   524,   471,   670,   124,   218,
     458,   152,   223,   303,   452,   792,   793,   776,   778,   780,
     525,    30,   433,   438,   775,  1003,   198,   961,   964,   198,
     961,   198,   846,   198,   961,   969,   521,   519,   523,   945,
     947,   775,   961,   198,   961,   428,   430,   428,   430,   360,
     185,   198,   961,   961,   178,   254,   349,   386,   424,   474,
     645,   112,   208,    30,   964,   198,     3,   260,   441,   111,
     424,   424,   474,   185,   381,     3,    48,    53,    54,    55,
      56,    68,    69,    78,    80,    86,    98,   102,   103,   104,
     105,   108,   116,   117,   139,   169,   175,   177,   181,   198,
     200,   214,   221,   222,   224,   227,   228,   230,   241,   243,
     255,   274,   275,   276,   285,   290,   306,   308,   326,   346,
     369,   373,   391,   393,   398,   401,   417,   426,   433,   434,
     446,   452,   460,   468,   471,   634,   638,   666,   857,   859,
     861,   863,   865,   867,   869,   870,   871,   873,   874,   875,
     877,   878,   974,   198,   663,   970,   975,   198,   962,   964,
     198,   964,   521,   668,   302,   672,     3,    48,    52,    53,
      54,    55,    56,    68,    69,    76,    78,    80,    86,    98,
     102,   103,   104,   105,   108,   116,   117,   157,   163,   169,
     175,   177,   180,   181,   188,   189,   200,   214,   215,   221,
     222,   224,   227,   228,   230,   241,   243,   255,   274,   275,
     276,   281,   285,   288,   290,   305,   306,   308,   309,   325,
     326,   329,   346,   369,   373,   391,   393,   398,   401,   417,
     419,   426,   433,   434,   440,   442,   446,   460,   467,   468,
     471,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   634,   639,   673,   675,   676,   678,   679,   670,
     969,   970,   565,   710,   521,   521,   171,   521,   521,   521,
     521,   732,   776,   847,   521,   521,   521,   521,   961,   521,
     521,   176,   521,   521,   521,   521,   776,   834,   838,   839,
      40,   840,   841,   970,   840,   385,   525,   779,    98,   177,
     214,   230,   241,   275,   326,   369,   843,   841,    40,   840,
     842,   970,   507,   851,   514,   947,   969,   510,   521,   521,
     771,   504,   229,   523,   297,     4,     6,     7,     8,     9,
      10,    39,    53,    55,    56,    64,    68,    69,    80,   116,
     117,   119,   157,   164,   169,   188,   189,   221,   222,   224,
     274,   276,   282,   287,   290,   299,   346,   373,   401,   433,
     434,   443,   468,   505,   512,   513,   514,   519,   521,   527,
     528,   533,   534,   776,   823,   862,   865,   868,   869,   870,
     872,   873,   874,   877,   878,   889,   891,   892,   893,   894,
     896,   897,   911,   912,   919,   939,   944,   951,   952,   953,
     966,   967,   968,   969,   970,   950,   952,   995,   995,   969,
     995,   504,   176,   435,   510,   523,   947,   657,   846,     3,
     175,   177,   471,   676,   987,   989,   175,   990,   889,   923,
     924,   970,   782,   525,   521,   977,   525,   522,   522,   538,
     961,   176,   302,   696,   657,    30,   135,   787,   787,    58,
     787,   166,   171,   244,   294,   798,   800,   801,   826,   828,
     829,   830,   792,   793,   521,   504,   229,   157,    26,    32,
     140,   301,   358,   362,   392,   464,   552,   555,   556,   358,
     157,    40,    59,   110,   207,   259,   267,   279,   311,   358,
     364,   386,   392,   408,   541,   544,   555,   157,   358,   392,
     555,   157,   358,   392,   555,    40,   562,     3,    30,    48,
      54,    78,    80,    86,    98,   102,   103,   104,   105,   108,
     135,   175,   177,   180,   181,   200,   214,   227,   228,   230,
     241,   243,   255,   275,   285,   306,   308,   326,   369,   391,
     398,   417,   426,   446,   460,   469,   471,   514,   522,   634,
     640,   889,   926,   927,   972,   978,   889,   946,     3,    30,
      34,    35,    36,    37,    39,    40,    41,    44,    57,    64,
      65,    71,    77,    79,    90,    97,   106,   107,   119,   121,
     128,   135,   136,   144,   148,   152,   164,   166,   171,   173,
     176,   183,   186,   187,   192,   205,   212,   223,   225,   238,
     239,   244,   248,   249,   282,   287,   294,   297,   298,   302,
     303,   322,   333,   342,   351,   366,   385,   403,   421,   424,
     432,   435,   437,   443,   452,   453,   461,   467,   469,   479,
     480,   482,   483,   634,   639,   641,   965,   979,   945,   522,
     521,   618,   282,   176,   112,   629,   961,   282,   648,    40,
     474,   198,   961,   198,   633,   961,   198,   961,   198,   961,
     961,    86,   685,   157,   487,   961,    87,   132,   314,   429,
     470,   876,   876,   876,   521,   864,   864,   329,   521,   866,
     157,   521,    68,    69,   876,   864,   861,   485,   507,   521,
     879,   521,   879,   521,    62,   365,   525,   664,   521,    39,
     860,   521,   113,   114,   195,   196,   261,   262,   263,   264,
     265,   266,   269,   270,   382,   383,   501,   502,   521,   880,
     881,   882,   883,   884,   885,   886,   887,   888,   864,   157,
     525,   664,   523,   976,   157,   525,   664,   157,   297,   924,
     360,   522,   525,     4,   164,   297,   443,   512,   513,   543,
     546,   671,   673,   674,   677,   968,   969,   672,   521,   573,
     577,   435,   889,   924,   521,   968,   968,     3,   880,   881,
     882,   883,   884,   885,   886,   887,   929,   930,   969,   841,
     842,   968,   968,   889,   961,   889,   931,   512,   513,   890,
     891,   912,   919,   933,   521,   889,   923,   934,   889,    57,
     176,   239,   437,   889,   924,   937,   889,   522,   971,   426,
     806,   807,   521,   807,   789,   790,   838,   225,   784,   230,
     306,   844,   838,   844,   230,   843,   230,   844,   230,   807,
     521,   971,   807,   521,   304,   543,   677,   997,   999,   926,
     859,   928,    40,   242,   970,   521,   519,   776,   889,   943,
     521,   776,   889,   521,   521,   889,   889,   889,   153,   954,
     955,   889,   924,   925,   776,   889,   923,   913,   914,   915,
     971,     9,     3,   981,   947,   521,   969,   521,   968,   969,
       3,     8,    11,    15,    16,    17,    18,    19,    20,    36,
      40,    45,    52,    77,   181,   200,   205,   227,   228,   243,
     282,   285,   299,   302,   398,   505,   508,   509,   510,   512,
     513,   514,   515,   516,   517,   917,   918,   919,   921,   948,
     484,   898,   308,   889,   525,   784,   521,   969,   948,   523,
     947,   784,     3,   119,   247,   543,   878,   969,   998,   101,
     119,   999,   119,   999,   970,    40,   970,   522,   525,   670,
     525,   522,   783,   962,   963,    40,   257,   977,   657,   199,
     360,   225,   392,   778,   778,    30,   514,   794,   795,   889,
      58,   778,   788,   168,   278,   814,   233,   279,   345,   395,
     458,     4,     9,    30,   809,   889,   512,   513,   810,   811,
     889,   891,   826,   827,   801,   800,   798,   799,   171,   829,
     292,   831,   798,   826,   924,   242,   961,    71,    79,    90,
     173,   198,   333,   453,   600,   610,   625,   970,    79,    90,
     774,    90,   774,   521,   435,   521,   598,   253,   456,   598,
      90,   525,   435,   961,   861,   543,    58,   545,   543,   543,
     110,   259,   267,    58,   435,   483,   507,   542,   272,   378,
     542,   544,   846,    90,   435,   774,   378,   961,   435,   378,
     970,   573,   926,   926,   927,   522,   525,   792,   793,    13,
      14,   520,   532,   435,   617,   622,   970,   483,   576,   157,
     969,   961,   349,   424,   474,   645,   280,   473,   713,   157,
      97,   583,   649,   650,   682,  1004,   149,   859,   961,   282,
     541,   651,   282,    40,   521,   618,   282,   618,   282,   521,
     646,   198,   612,   686,   970,     3,   664,   521,   925,   968,
     666,   928,   876,   876,    39,   860,   433,   433,   968,   968,
     856,   970,   859,   856,   519,   519,   968,   968,   435,   435,
     435,   435,   663,   975,   965,   523,   962,   964,   964,   975,
     522,   672,   678,     4,   968,     4,   968,   575,   582,   979,
      54,    99,   125,   146,   150,   172,   175,   193,   287,   295,
     316,   343,   579,   969,    40,   522,   889,   522,   522,   522,
     176,   522,   522,   525,   522,   322,   932,   522,   890,   890,
      11,    15,    18,    19,    20,   205,   227,   299,   508,   509,
     510,   512,   513,   514,   515,   516,   517,   919,   890,   522,
     848,   849,   895,   171,   176,   935,   936,   525,   522,    40,
     937,   924,   937,   937,   176,   522,    40,   840,   521,     4,
       9,   802,   804,   805,   970,   963,   952,   950,   182,   247,
     424,   428,   430,   456,   785,   961,   480,   852,   838,   297,
     461,   845,   838,   230,   838,   838,   853,   854,   971,   521,
     853,   971,   525,   522,   525,   522,   525,   656,   689,   772,
     775,   984,   924,   925,   479,   940,   941,   514,   969,     8,
      15,    18,    19,    20,   508,   509,   510,   512,   513,   514,
     515,   516,   517,   917,   922,   970,   522,   924,   521,   970,
     360,   959,   171,   520,   522,   525,   525,   529,   532,   924,
     889,   888,   888,   859,   889,   889,   889,   889,   889,   889,
     889,     5,   979,   980,   433,    44,   421,   949,   975,   889,
     889,   521,   776,   938,   135,   164,   282,   287,   292,   443,
     454,   889,   287,   521,   889,   435,    52,   181,   200,   205,
     243,   398,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,    30,    37,   403,   916,   945,   187,   167,   899,
     373,   521,   912,   953,   176,   835,   926,   514,   835,   521,
     969,   970,   961,   987,   558,   961,   889,   525,   522,   521,
     711,   738,   742,   743,   461,   659,   691,   961,   521,   695,
     705,   706,   708,   970,    41,   128,   796,   796,   525,   461,
     796,   272,   778,   373,   374,   512,   513,   811,   813,   891,
     395,   233,   298,   321,   321,   525,   516,     4,   812,   968,
     812,   373,   374,   813,   960,   961,   286,   400,   832,   827,
     799,   522,   358,   555,   521,   198,   610,   964,   233,   282,
     233,   461,   521,   603,   858,   859,   964,   970,   198,   964,
     198,   970,    26,   140,   392,   551,   554,   594,   608,   979,
     964,   602,   621,   979,   964,   552,   964,   358,   392,   541,
     555,   543,   975,   964,   543,   975,   964,   543,   358,   392,
     555,   964,   964,   964,   964,   358,   392,   555,   964,   964,
     792,   792,   792,   469,   927,   199,   363,   791,   889,   889,
     889,   946,   338,   572,   522,   525,   295,   176,   435,   567,
     961,   176,   474,   633,   961,   961,   961,   425,   961,   302,
     629,   521,   776,   521,   157,   157,   156,   775,   243,   600,
     610,   613,   616,   626,   628,   970,   483,   485,   605,   157,
     483,   687,   157,   522,   926,    40,   282,   297,   924,   522,
     522,   664,   522,   519,   504,   504,   522,   522,   522,   525,
     859,   522,   968,   520,   968,   522,   522,   881,   883,   884,
     885,   884,   885,   885,   664,   965,   664,   297,   664,   522,
     525,   514,   521,   543,   574,   677,    40,   571,   969,   571,
     282,   287,   343,   571,    58,   571,   573,   859,   522,   889,
     889,   889,   935,   859,   890,   890,   890,   890,   890,   135,
     282,   292,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   522,   525,    40,   850,   889,   889,   936,   935,
     859,   522,   522,   522,   924,   859,   963,   321,   516,   321,
     374,   516,   521,   521,   522,   784,   428,   430,   428,   430,
     961,   786,   786,   786,   889,   187,   815,   889,   521,   838,
     845,   522,   525,   859,   853,   522,   997,   859,   522,   520,
     889,   144,   941,   942,   955,   522,   522,   523,   522,   963,
     521,   889,   956,   970,   889,   913,   889,   522,   522,   504,
     890,   890,   150,   924,   176,   135,   164,   287,   292,   443,
     454,   521,   150,   922,   889,   421,   949,   889,   938,   889,
     435,   521,   776,   521,   521,   160,   900,   836,   837,   852,
     792,   955,   852,   968,   888,   977,   772,   510,    30,    37,
     396,   741,   232,   525,   735,   837,   480,   658,   119,   310,
     521,   690,   775,    40,   701,   708,   525,   835,   510,   948,
     506,   797,   797,   795,   299,   917,   920,   797,     4,   968,
     813,   298,   458,   810,   525,   252,   435,   889,   282,   625,
     521,   157,   521,   603,   208,   622,   623,   584,    40,   180,
     593,   619,   584,    26,   140,   362,   364,   392,   548,   549,
     550,   556,   557,   157,   664,   157,   664,   594,   608,   594,
     522,   525,   587,   969,   522,   525,   510,   523,   435,   378,
      90,   435,   774,   378,   435,   435,   435,   378,   791,   791,
     791,   927,   289,   289,   522,   520,   411,   412,   581,   969,
     617,   572,   176,   969,   961,    40,   521,   618,   646,   521,
     648,   360,   424,   653,   654,   969,   622,   961,   633,   961,
     964,   483,   632,   961,   522,   525,   295,   598,   295,   297,
     597,   961,   598,    40,   961,   522,   424,   889,   157,   961,
     522,   860,   968,   879,   879,   860,   970,   860,   520,   520,
     975,   575,   569,   580,   677,   969,   969,   287,   622,   514,
     622,   969,   514,   622,   969,   522,   522,   936,   176,   135,
     292,   521,   851,   848,   521,   522,   522,   522,   970,   802,
     852,   786,   786,   786,   786,   961,   961,   961,    58,   192,
     824,   963,   854,    77,   855,   522,   432,   889,   148,   959,
     922,   522,   889,   956,   957,   958,    40,   205,   522,   888,
     889,    36,    36,   889,   522,   889,   176,   521,   928,   889,
     522,   150,   890,   890,   150,   150,   889,   889,   793,   480,
     889,   307,   904,   525,   815,   791,   959,   815,   522,   522,
      25,   319,   320,   396,   399,   436,   478,   736,   739,     9,
     396,   740,     9,    16,   508,   513,   519,   521,   751,   752,
     753,   754,   761,   762,   763,   766,   767,   741,   743,   480,
     889,   366,   699,   467,   423,   460,   700,   694,   704,   970,
     297,   697,   970,   522,   525,   695,   658,   889,   168,   237,
     521,   797,   298,   961,   964,   522,   157,   623,   610,   623,
     584,   612,   525,   522,   121,   212,   279,   282,   609,   521,
      33,    58,   630,   619,    71,    77,    90,   119,   121,   212,
     282,   287,   333,   351,   453,   461,   589,   590,   604,   180,
     119,   197,   282,   598,   542,   111,   119,   180,   282,   410,
     413,   544,   598,   392,   550,   447,   964,   970,   554,   621,
       3,    48,    54,    78,    80,    86,    98,   102,   103,   104,
     105,   108,   175,   177,   180,   181,   200,   214,   227,   228,
     230,   241,   243,   255,   275,   281,   285,   299,   306,   308,
     326,   369,   391,   393,   398,   417,   426,   446,   452,   460,
     471,   512,   513,   543,   585,   624,   634,   641,   859,   920,
     969,   972,   979,   964,   964,   964,   964,   964,   964,   964,
     964,   964,   964,   522,   522,   522,   792,   542,   581,   969,
     521,   775,   616,   687,    40,   722,   727,   961,   629,   198,
     961,   522,   525,   522,   651,    40,   521,   668,   111,   279,
     607,   605,   613,    83,   618,   775,   646,   775,   612,   461,
     684,   520,   859,   664,   522,   525,   622,   890,   176,   521,
     928,   853,   522,   525,   522,   815,   961,   961,   961,   961,
      30,   100,   188,   372,   514,   521,   816,   817,   818,   819,
     820,   821,   822,   889,   889,   482,   901,   522,   975,   889,
     522,   525,   522,   970,   889,   891,   889,   889,   889,   928,
     522,   889,    36,    36,   889,   889,   150,   522,   522,   889,
     522,   521,   905,   970,   824,   522,   824,   969,   736,   739,
     736,   736,   736,   739,   739,   739,   513,   761,   509,   519,
     738,   750,   711,   764,   765,   753,   753,   526,   744,   765,
     512,   514,   527,   528,   746,   282,   505,   512,   513,   768,
     891,   912,   951,   466,   522,   525,   948,    88,   699,   510,
     708,   699,   922,   584,   610,   522,   522,   483,   615,   122,
     201,   210,   121,   463,   889,   119,    40,   521,   975,   964,
     890,   122,   201,   121,   287,   233,   961,   615,    85,   630,
     198,   287,   543,   889,   630,   287,   512,   513,   546,   970,
     859,   664,   664,   255,   417,   972,   976,   510,   435,   435,
     791,   573,   461,   568,   570,   622,   632,   522,    40,   424,
     889,   525,   716,   279,   339,   731,    40,   424,   282,   521,
     969,   687,   156,   775,   616,   632,   111,   154,   206,   597,
     124,   140,   332,   687,   483,  1005,    40,   297,   683,   970,
     521,   580,   890,   928,   522,   522,     9,   359,   808,   824,
     521,   394,   521,   522,   525,   902,   903,   970,   342,   825,
     956,   520,   198,   522,   889,   889,   889,   522,   906,   970,
     901,   969,   901,   187,   190,   737,   519,   739,   520,   227,
     532,   759,   760,   522,   512,   753,   520,     9,   745,   768,
     768,   768,   768,    11,    15,    16,    17,    18,    19,    20,
      36,    45,    52,    77,    80,   181,   200,   205,   227,   228,
     243,   282,   285,   302,   398,   505,   508,   509,   510,   512,
     513,   514,   515,   516,   517,   919,   308,   525,   775,   310,
     775,   694,   297,   521,   692,   889,   522,   351,   615,   521,
     606,   584,   522,   197,   521,   889,   282,   590,   615,   618,
     964,    40,   157,   855,   976,   516,   585,   964,   964,   522,
     542,   126,   522,   605,   775,   775,   722,   522,   339,    38,
     521,   725,   730,   234,   711,   961,   157,    40,   964,   632,
     522,    30,    82,    91,   120,   197,   209,   410,   413,   601,
     601,   374,   374,    40,    63,    71,   247,   424,   889,   961,
     521,   698,   707,   895,   970,   522,   522,   521,   901,   924,
     521,   924,   818,   525,    40,   889,   461,   803,   889,   316,
     907,   825,   825,   754,   746,   480,   521,   531,   711,   758,
     526,   513,   761,   525,   859,   768,   768,   768,   768,   768,
     768,   768,   433,   421,   949,   975,   521,   768,   768,   938,
     135,   164,   282,   287,   292,   443,   454,   768,   287,   768,
     435,    52,   200,   205,   243,   398,   768,   768,   768,   768,
     768,   768,   768,   768,   768,   768,   912,   700,    90,   707,
     136,   961,   584,   611,   614,   979,   414,   476,   591,   592,
     521,   586,   889,   522,   257,   627,   197,   461,   553,   516,
     447,   573,   969,   687,   597,  1005,   716,   142,   355,   714,
     711,   726,   728,    30,   711,   521,   961,   775,   668,   605,
     775,    71,   300,    71,   775,   684,   889,   522,   525,    77,
     702,   702,     9,   825,   522,   817,   522,   903,   905,   376,
     520,    58,   792,   803,   803,   480,   768,   757,   758,   758,
     746,   745,   504,   890,   890,   733,   734,   953,   150,   176,
     135,   164,   287,   292,   443,   454,   521,   150,   768,   421,
     949,   768,   938,   768,   435,   466,   964,   522,   283,   458,
     618,   522,   525,   510,   541,   522,   279,   599,   177,   315,
     399,   297,   595,   596,   620,   586,   889,   447,    40,   425,
      40,   522,   525,    80,   205,   721,   521,  1005,   632,   597,
    1005,   300,   300,   521,   522,   687,   698,   975,   703,   975,
     703,   522,   803,   522,   805,   923,   344,   374,   908,   768,
      96,   749,   522,   526,   530,   529,   768,    36,    36,   522,
     525,   768,   768,   176,   521,   928,   768,   150,   890,   890,
     150,   150,   768,   775,   852,   392,   627,   614,   585,   522,
     592,   210,   124,   458,   297,   620,   297,   595,   775,   521,
     711,   726,   152,   729,   961,   707,   702,   852,   796,   796,
      52,   101,   449,   889,   909,   910,   909,   522,   749,   890,
     755,   758,   756,   758,   768,   768,   522,   733,   768,   928,
     522,   768,    36,    36,   768,   768,   150,   706,   596,    62,
     279,   365,   392,   588,   588,  1005,   724,   727,   521,   521,
     522,   703,   797,   797,   910,   373,   170,   328,   170,   328,
     119,   748,   526,   530,   961,   522,   768,   768,   768,   852,
     584,    24,   119,   287,   525,   723,   404,   728,   711,   720,
     687,   796,    36,     4,     9,   747,   755,   756,   724,   522,
     233,   718,   719,   522,   522,   525,   852,   797,   910,   723,
     521,   717,   351,   961,   711,   962,   717,   522,   130,   719,
     961,   717,   731,   234,   711,   721
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   535,   536,   537,   537,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   547,   547,   547,
     547,   547,   547,   547,   547,   548,   548,   549,   549,   550,
     550,   550,   550,   551,   551,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   552,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   552,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   553,   553,   554,   554,   554,   554,
     555,   555,   556,   557,   557,   557,   655,   655,   655,   655,
     773,   773,   773,   773,   773,   773,   773,   773,   773,   773,
     773,   773,   773,   774,   774,   689,   690,   690,   690,   690,
     690,   691,   691,   692,   692,   692,   693,   693,   694,   695,
     695,   696,   696,   696,   697,   697,   697,   698,   698,   698,
     699,   699,   700,   700,   701,   701,   702,   702,   703,   703,
     704,   704,   705,   705,   706,   706,   707,   707,   708,   652,
     652,   652,   653,   653,   654,   654,   769,   769,   769,   642,
     642,   642,   642,   642,   642,   642,   643,   650,   650,   651,
     651,   667,   667,   667,   668,   668,   540,   540,   541,   541,
     542,   542,   542,   543,   543,   543,   543,   544,   544,   544,
     544,   544,   544,   544,   544,   544,   544,   544,   544,   544,
     544,   545,   545,   546,   546,   546,   982,   982,   982,   982,
     982,   982,   983,   983,   983,   985,   711,   711,   711,   712,
     713,   713,   714,   714,   715,   716,   716,   717,   718,   719,
     720,   720,   721,   721,   722,   723,   723,   724,   725,   725,
     726,   726,   727,   727,   728,   728,   729,   729,   730,   730,
     731,   731,   731,   732,   733,   734,   734,   735,   735,   736,
     736,   736,   737,   737,   737,   738,   738,   739,   739,   739,
     739,   739,   740,   740,   741,   741,   741,   741,   741,   741,
     742,   742,   743,   744,   744,   745,   745,   746,   746,   746,
     746,   746,   747,   747,   748,   748,   749,   749,   750,   751,
     752,   752,   753,   753,   753,   754,   754,   755,   755,   756,
     756,   757,   757,   757,   758,   758,   758,   759,   759,   760,
     760,   761,   761,   761,   762,   762,   763,   763,   764,   764,
     765,   766,   766,   767,   768,   768,   768,   768,   768,   768,
     768,   768,   768,   768,   768,   768,   768,   768,   768,   768,
     768,   768,   768,   768,   768,   768,   768,   768,   768,   768,
     768,   768,   768,   768,   768,   768,   768,   768,   768,   768,
     768,   768,   768,   768,   768,   768,   768,   768,   768,   768,
     768,   768,   768,   768,   768,   768,   768,   768,   768,   768,
     768,   768,   768,   768,   768,   583,   583,   583,   584,   584,
     585,   585,   585,   585,   585,   585,   586,   586,   587,   588,
     588,   588,   588,   588,   589,   589,   589,   589,   590,   590,
     590,   590,   590,   590,   590,   590,   591,   591,   592,   592,
     593,   593,   593,   594,   595,   596,   596,   596,   596,   596,
     597,   597,   597,   597,   598,   599,   599,   600,   600,   601,
     601,   601,   601,   601,   601,   601,   601,   602,   602,   603,
     604,   604,   604,   604,   605,   605,   605,   605,   606,   607,
     607,   607,   608,   609,   609,   609,   609,   609,   609,   610,
     610,   611,   611,   612,   613,   613,   613,   614,   614,   615,
     615,   616,   616,   616,   617,   618,   618,   619,   619,   620,
     621,   621,   621,   621,   622,   622,   623,   623,   624,   624,
     624,   625,   625,   625,   625,   625,   625,   626,   626,   627,
     627,   627,   627,   628,   629,   629,   629,   629,   629,   629,
     629,   629,   630,   630,   660,   660,   660,   660,   660,   660,
     660,   660,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     662,   662,   662,   662,   662,   662,   663,   663,   664,   664,
     664,   665,   665,   665,   666,   666,   644,   644,   644,   644,
     644,   644,   645,   645,   646,   646,   984,   566,   566,   567,
     567,   568,   568,   569,   569,   570,   570,   571,   571,   572,
     572,   573,   573,   574,   574,   574,   574,   574,   575,   576,
     576,   577,   577,   578,   578,   579,   579,   579,   579,   579,
     579,   579,   579,   579,   579,   579,   579,   579,   579,   579,
     579,   580,   581,   581,   581,   582,   582,   775,   775,   776,
     776,   777,   777,   777,   777,   777,   777,   777,   777,   778,
     778,   779,   779,   780,   780,   780,   780,   780,   780,   780,
     780,   780,   780,   781,   781,   781,   782,   782,   783,   784,
     784,   785,   785,   785,   785,   785,   785,   785,   785,   785,
     786,   786,   787,   787,   787,   788,   789,   789,   790,   790,
     791,   791,   791,   792,   792,   793,   793,   793,   794,   794,
     795,   795,   796,   796,   796,   797,   797,   797,   798,   798,
     798,   798,   799,   799,   800,   800,   800,   800,   801,   801,
     802,   802,   802,   802,   802,   802,   803,   803,   804,   804,
     805,   805,   805,   805,   806,   807,   807,   808,   808,   809,
     809,   809,   809,   809,   810,   811,   811,   811,   812,   812,
     813,   813,   814,   814,   815,   815,   815,   815,   816,   816,
     817,   817,   818,   818,   818,   818,   818,   819,   820,   821,
     822,   823,   823,   824,   824,   825,   825,   826,   826,   827,
     827,   828,   828,   829,   830,   830,   830,   830,   831,   831,
     832,   832,   832,   833,   833,   834,   834,   835,   835,   836,
     836,   837,   837,   838,   838,   838,   838,   838,   838,   838,
     838,   838,   839,   839,   839,   839,   839,   839,   839,   840,
     840,   840,   840,   841,   841,   842,   842,   842,   842,   842,
     843,   843,   843,   843,   844,   844,   845,   845,   846,   846,
     846,   846,   847,   847,   848,   849,   849,   850,   850,   851,
     851,   852,   852,   853,   853,   854,   855,   855,   856,   856,
     857,   857,   858,   858,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   860,   860,   860,   861,   861,   861,   861,
     861,   861,   861,   862,   862,   862,   862,   863,   864,   864,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   866,   866,   867,   867,   868,   868,   869,   870,   871,
     871,   872,   872,   873,   874,   875,   875,   875,   875,   875,
     875,   876,   876,   877,   877,   877,   877,   878,   879,   879,
     879,   880,   880,   881,   881,   882,   882,   883,   883,   884,
     884,   885,   885,   886,   886,   887,   887,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     892,   892,   892,   892,   892,   893,   893,   893,   893,   893,
     893,   893,   894,   894,   895,   895,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   897,   897,   898,   898,   899,
     899,   899,   900,   900,   901,   901,   902,   902,   903,   904,
     904,   904,   905,   906,   906,   907,   907,   908,   908,   908,
     909,   909,   910,   910,   910,   910,   910,   911,   911,   912,
     912,   913,   914,   914,   915,   915,   916,   916,   916,   917,
     917,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   919,   919,   920,   920,   921,   921,
     921,   921,   921,   921,   921,   921,   922,   922,   923,   923,
     924,   924,   925,   925,   926,   926,   927,   927,   927,   928,
     928,   929,   929,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   931,   931,   932,   933,   933,   934,   934,
     934,   934,   934,   934,   935,   936,   937,   937,   937,   938,
     938,   939,   940,   940,   941,   942,   942,   943,   943,   944,
     944,   945,   945,   945,   946,   946,   947,   947,   948,   948,
     949,   949,   950,   950,   951,   951,   952,   952,   953,   953,
     953,   953,   953,   954,   954,   955,   955,   956,   957,   957,
     958,   958,   959,   959,   959,   960,   960,   961,   961,   962,
     962,   963,   963,   964,   965,   966,   966,   967,   967,   967,
     967,   967,   967,   967,   967,   967,   967,   967,   967,   967,
     967,   968,   969,   970,   970,   970,   970,   971,   971,   972,
     972,   972,   973,   973,   973,   974,   974,   974,   975,   975,
     976,   976,   977,   977,   978,   979,   979,   979,   979,   980,
     980,   981,   770,   771,   771,   772,   772,   772,   772,   647,
     647,   648,   648,   649,   649,   649,   649,   682,   682,   683,
     684,   684,   685,   685,   686,   686,   687,   687,   688,   688,
     539,   539,   539,   539,   539,   539,   564,   564,   565,   565,
     680,   680,   681,   669,   669,   669,   669,   670,   670,   671,
     671,   671,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   673,   673,   673,   674,   674,   675,   675,   676,
     676,   677,   677,   677,   677,   678,   679,   679,   994,   994,
     994,   994,   995,   995,   995,   995,   996,   996,   996,   996,
     997,   997,   998,   998,   998,   998,   998,   998,   998,   999,
     999,   709,   709,   709,   710,   710,   986,   986,   986,   986,
     986,   987,   987,   987,   987,   987,   988,   988,   989,   989,
     990,   990,   656,   656,   657,   657,   657,   658,   658,   659,
     659,   558,   558,   559,   560,   560,   561,   561,   562,   562,
     991,   992,   992,   993,   993,   993,  1000,  1000,  1000,  1000,
    1000,  1000,  1000,  1000,  1001,  1001,  1002,  1002,  1003,  1003,
     563,  1004,  1004,  1004,  1004,  1004,  1005,  1005,  1005,  1005,
     631,   631,   631,   632,   632,   632,   633,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     8,     1,     4,     4,     7,
       2,     1,     3,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,
       8,     5,     1,     0,     1,     3,     2,     4,     5,     3,
       4,     6,     5,     5,     8,     7,     1,     5,     8,     1,
       0,     3,     9,    12,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     0,     2,     1,     1,     1,     5,
       1,     1,     1,     1,    16,     3,     0,     3,     2,     2,
       1,     3,     5,     0,     5,     3,     0,    13,     1,     0,
       1,     3,     1,     3,     1,     3,     4,     0,     4,     3,
       2,     2,     0,    14,     1,     1,     3,     2,     0,     1,
       1,     0,     1,     1,     0,     2,     0,     2,     2,     2,
       2,     1,     1,     0,     3,     4,     3,     2,     3,     0,
       1,     3,     3,     1,     3,     1,     0,     1,     1,     1,
       5,     0,     1,     1,     2,     0,     3,     0,     6,     4,
       1,     1,     2,     2,     0,     1,     3,     1,     3,     1,
       3,     1,     3,     3,     1,     2,     3,     2,     0,     1,
       1,     1,     2,     1,     2,     3,     2,     1,     1,     0,
       5,     2,     5,     3,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     3,     3,
       5,     4,     6,     3,     5,     4,     6,     4,     6,     5,
       7,     3,     2,     4,     3,     2,     3,     3,     3,     3,
       4,     3,     4,     3,     4,     5,     6,     6,     7,     6,
       7,     6,     7,     3,     4,     9,    12,    11,     0,     2,
       1,     1,     1,     1,     1,     1,     3,     0,     1,     2,
       1,     1,     2,     2,     3,     1,     1,     2,     2,     1,
       2,     3,     5,     3,     2,     5,     1,     1,     1,     0,
       5,     7,     5,     2,     3,     1,     1,     2,     2,     0,
       3,     4,     4,     0,     3,     2,     0,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       1,     2,     2,     2,     2,     2,     2,     0,     3,     3,
       3,     0,     1,     2,     1,     2,     2,     2,     2,     3,
       4,     1,     3,     1,     1,     1,     1,     3,     1,     2,
       0,     1,     2,     0,     1,     3,     0,     2,     0,     3,
       3,     1,     5,     3,     1,     3,     1,     2,     1,     4,
       5,     5,     6,     3,     7,     4,    11,     1,     3,     2,
       2,     2,     0,     3,     1,     1,     2,     2,     2,     2,
       1,     0,     1,     2,     6,     4,     6,     4,     6,     8,
       4,     6,     1,     1,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       2,     2,     1,     3,     1,     1,     1,     3,     1,     1,
       0,     1,     1,     1,     1,     3,     8,    11,    10,     7,
      10,     9,     1,     1,     2,     3,     8,    11,     9,     1,
       1,     3,     0,     1,     3,     1,     0,     1,     0,     1,
       0,     1,     3,     1,     1,     1,     3,     0,     2,     2,
       0,     2,     0,     1,     0,     1,     1,     1,     3,     3,
       1,     1,     3,     3,     3,     3,     3,     3,     4,     3,
       2,     1,     1,     1,     1,     1,     3,     1,     1,     3,
       3,     1,     2,     4,     4,     2,     3,     5,     5,     1,
       1,     3,     0,    11,    11,    10,    12,     1,     2,     5,
       4,     4,     4,     2,     2,     3,     1,     3,     6,     2,
       0,     3,     3,     4,     4,     4,     4,     3,     2,     1,
       1,     0,     1,     1,     0,     2,     1,     5,     1,     0,
       2,     2,     0,     1,     0,     3,     5,     5,     1,     3,
       4,     3,     1,     1,     0,     2,     2,     0,     2,     2,
       1,     1,     1,     0,     2,     4,     5,     4,     2,     3,
       2,     2,     2,     2,     1,     2,     3,     0,     1,     0,
       5,     1,     4,     6,     2,     1,     0,     4,     0,     1,
       1,     2,     2,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     0,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     1,     2,     2,     0,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     1,
       4,     2,     3,     4,     5,     4,     5,     4,     4,     5,
       2,     4,     1,     1,     0,     1,     4,     5,     4,     0,
       2,     2,     2,     1,     1,     0,     4,     2,     1,     2,
       2,     4,     2,     6,     2,     1,     3,     4,     0,     2,
       0,     2,     0,     1,     3,     3,     2,     0,     2,     4,
       1,     1,     1,     0,     2,     3,     5,     6,     2,     3,
       5,     5,     5,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     3,     3,     3,
       3,     4,     3,     4,     3,     4,     5,     6,     6,     7,
       6,     7,     6,     7,     3,     4,     4,     6,     1,     6,
       4,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     5,     6,     6,     7,     1,     1,     2,     2,     2,
       1,     3,     1,     2,     4,     1,     1,     2,     2,     4,
       1,     1,     3,     3,     1,     3,     6,     7,     9,     7,
       7,     4,     5,     1,     1,     1,     5,     1,     1,     4,
       1,     4,     1,     4,     1,     4,     1,     1,     1,     1,
       1,     1,     6,     6,     4,     4,     4,     4,     6,     5,
       5,     5,     4,     6,     4,     7,     9,     5,     0,     5,
       4,     0,     1,     0,     2,     0,     1,     3,     3,     2,
       2,     0,     6,     1,     0,     3,     0,     2,     2,     0,
       1,     4,     2,     2,     2,     2,     2,     4,     3,     1,
       5,     3,     1,     3,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     4,     1,     4,
       1,     2,     1,     2,     1,     2,     1,     3,     1,     3,
       1,     2,     1,     0,     1,     3,     1,     3,     3,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     3,     2,     3,     0,     3,     3,
       2,     2,     1,     0,     2,     2,     3,     2,     1,     1,
       3,     5,     1,     2,     4,     2,     0,     1,     0,     1,
       2,     2,     3,     5,     1,     0,     1,     2,     0,     2,
       1,     0,     1,     0,     1,     3,     1,     2,     3,     2,
       1,     3,     5,     4,     2,     1,     0,     3,     1,     3,
       1,     2,     4,     2,     0,     1,     3,     1,     2,     1,
       3,     1,     2,     1,     1,     1,     2,     1,     1,     2,
       1,     1,     2,     7,     2,     5,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     5,     3,     0,     1,     1,     1,     1,     4,
       7,     2,     0,     1,     1,     1,     1,    13,    16,     1,
       2,     0,     1,     0,     1,     0,     2,     0,     1,     0,
       6,     8,     6,     8,     6,     8,     3,     2,     1,     0,
       4,     6,     3,     2,     4,     3,     5,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     2,     3,
       3,     3,     1,     3,     3,     2,     3,     3,     3,     3,
       1,     1,     1,     1,     3,     5,     1,     1,     1,     1,
       3,     2,     2,     3,     1,     1,     4,     5,     5,     4,
       6,     1,     1,     1,     1,     1,     1,     0,     1,     3,
       1,     0,     7,     3,     1,     2,     3,     2,     0,     2,
       0,     2,     4,     5,     3,     5,     1,     0,     2,     0,
       2,     1,     1,     1,     2,     3,     2,     2,     2,     2,
       3,     4,     2,     1,     1,     1,     1,     3,     1,     3,
       2,     9,    12,    11,    12,    14,     3,     4,     4,     0,
       7,    10,     9,     2,     3,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 540 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 556 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 568 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 618 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 18583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 18612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 18621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 18629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 18653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 18894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 18900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-5].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 18913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 18965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 18973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 18982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 18994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_conf_expr: ON CONSTRAINT name  */
#line 82 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_conf_expr: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_with_clause: with_clause  */
#line 97 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_with_clause: %empty  */
#line 98 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* insert_column_item: ColId opt_indirection  */
#line 104 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* set_clause: set_target '=' a_expr  */
#line 116 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_or_action: OR REPLACE  */
#line 146 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* opt_or_action: OR IGNORE_P  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_or_action: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 162 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 172 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_on_conflict: %empty  */
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 188 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 199 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 210 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* returning_clause: RETURNING target_list  */
#line 224 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* returning_clause: %empty  */
#line 225 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* override_kind: USER  */
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* override_kind: SYSTEM_P  */
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* set_target_list: set_target  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* set_target_list: set_target_list ',' set_target  */
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_collate: COLLATE any_name  */
#line 244 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_collate: %empty  */
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_class: any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_class: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* insert_column_list: insert_column_item  */
#line 256 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 258 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* set_clause_list: set_clause  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause_list: set_clause_list ',' set_clause  */
#line 264 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* set_clause_list_opt_comma: set_clause_list  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_params: index_elem  */
#line 272 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_params: index_params ',' index_elem  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* set_target: ColId opt_indirection  */
#line 279 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name  */
#line 10 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* CreateDatabaseStmt: CREATE_P opt_extension_name DATABASE qualified_name  */
#line 16 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
				    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
				    n->extension = (yyvsp[-2].str);
                    n->name = (yyvsp[0].range);
                    (yyval.node) = (PGNode *)n;
				}
#line 19424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name  */
#line 29 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name FROM Sconst  */
#line 35 "third_party/libpg_query/grammar/statements/create_database.y"
                {
                    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
                    n->name = (yyvsp[-2].range);
                    n->path = (yyvsp[0].str);
                    (yyval.node) = (PGNode *)n;
                }
#line 19455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name FROM Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* opt_extension_name: Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/create_database.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* OptSeqOptList: SeqOptList  */
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* OptSeqOptList: %empty  */
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 19586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 19628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 19634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 19640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 19646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 19652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 19661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 19667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 19675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 19691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 19699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 19731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 19739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 19747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 19756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 19786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 19792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 19798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 19804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 19810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 19841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 19880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 19886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 19892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 19902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* PGQ_IDENT: col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 19931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 19943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 19949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 19955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 19967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 19996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* Discriminator: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 20007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 133 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 20022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 147 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* EdgeTableDefinitionList: %empty  */
#line 149 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 157 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-12].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-10].list);
				n->src_name = (yyvsp[-9].range);
				n->src_pk = (yyvsp[-8].list);
				n->dst_fk = (yyvsp[-6].list);
				n->dst_name = (yyvsp[-5].range);
				n->dst_pk = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 20055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* IdentOptionalAs: PGQ_IDENT  */
#line 182 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 20061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 184 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 20067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* QualifiednameOptionalAs: qualified_name  */
#line 188 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 20073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 190 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 20079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* PropertiesList: IdentOptionalAs  */
#line 194 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* ExceptOptional: %empty  */
#line 204 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 20103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 20112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* PropertiesClause: NO PROPERTIES  */
#line 218 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 20124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 221 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* PropertiesClause: %empty  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* GraphTableStmt: '(' PGQ_IDENT ',' MATCH PathPatternList KeepOptional WHERE pgq_expr COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-12].str);
				n->paths = (yyvsp[-9].list);
				if ((yyvsp[-8].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-8].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 20162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* ColumnSpec: target_el  */
#line 258 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 20168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* ColumnList: ColumnSpec  */
#line 262 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* KeepOptional: KEEP PathPrefix  */
#line 268 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* KeepOptional: %empty  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 20192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* GroupOrGroupsOptional: GROUP_P  */
#line 278 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* GroupOrGroupsOptional: GROUPS  */
#line 280 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* GroupOrGroupsOptional: %empty  */
#line 282 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 20210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* PathVariableOptional: PGQ_IDENT '='  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 20216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* PathVariableOptional: %empty  */
#line 288 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 20222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 20228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 294 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 20234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 296 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 20240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 298 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 20246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* PathModeOptional: PathOrPathsOptional  */
#line 300 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 20252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* TopKOptional: ICONST  */
#line 304 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* TopKOptional: %empty  */
#line 306 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 20264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 311 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 323 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 20294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 335 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* PathPrefix: ALL PathModeOptional  */
#line 347 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 359 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 20339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* PathPrefix: %empty  */
#line 371 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* PathPatternList: PathPattern  */
#line 385 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 388 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 393 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 20392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PatternUnion: '|'  */
#line 417 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 20398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PatternUnion: '|' '+' '|'  */
#line 419 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* KleeneQuantifierOptional: ICONST  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* KleeneQuantifierOptional: %empty  */
#line 425 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 20416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* KleeneOptional: '*'  */
#line 431 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* KleeneOptional: '+'  */
#line 440 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* KleeneOptional: '?'  */
#line 449 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 458 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* KleeneOptional: %empty  */
#line 467 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* CostNum: ICONST  */
#line 477 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* CostNum: FCONST  */
#line 479 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 20488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* CostDefault: DEFAULT CostNum  */
#line 483 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 20494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* CostDefault: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 20500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* CostOptional: COST b_expr CostDefault  */
#line 490 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* CostOptional: %empty  */
#line 500 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation WHERE pgq_expr CostOptional  */
#line 510 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-5].keyword);
				n->mode = (PGPathMode) (yyvsp[-4].ival);
				n->path = (yyvsp[-3].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 522 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 20547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* PathElement: VertexPattern  */
#line 530 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* PathElement: EdgePattern  */
#line 532 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* PathSequence: EnclosedSubPath PathSequence  */
#line 537 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 20585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* PathSequence: PathElement PathSequence  */
#line 559 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 20591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* PathSequence: %empty  */
#line 561 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 20597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* PathConcatenation: PathSequence  */
#line 565 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 568 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 20615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* OrLabelExpression: LabelExpression  */
#line 578 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 581 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* AndLabelExpression: LabelExpression  */
#line 591 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 594 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* ComposedLabelExpression: LabelExpression  */
#line 604 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 607 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 616 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* LabelExpression: PGQ_IDENT  */
#line 627 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 20692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* LabelExpression: '!' LabelExpression  */
#line 635 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 20704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 643 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 647 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 20716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* LabelExpressionOptional: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 20722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* ArrowRight: '-'  */
#line 661 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 20728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* ArrowRight: '-' '>'  */
#line 663 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 20734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ArrowRight: LAMBDA_ARROW  */
#line 665 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ArrowLeftBracket: '-' '['  */
#line 669 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 20746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ArrowLeftBracket: '<' '-' '['  */
#line 671 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 20752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* AbbreviatedEdge: '<' ArrowRight  */
#line 676 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 20761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* AbbreviatedEdge: ArrowRight  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 20770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* VariableOptional: PGQ_IDENT  */
#line 689 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* VariableOptional: %empty  */
#line 691 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 20782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* FullElementSpec: VariableOptional LabelExpressionOptional WHERE pgq_expr CostOptional  */
#line 696 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-3].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 707 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 723 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* VertexPattern: '(' FullElementSpec ')'  */
#line 750 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* pgq_expr: c_expr  */
#line 782 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 784 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 20878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 786 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 794 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 20900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* pgq_expr: '+' pgq_expr  */
#line 809 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* pgq_expr: '-' pgq_expr  */
#line 811 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 813 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 815 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 817 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 819 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 821 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 823 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 825 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 827 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 829 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 831 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 833 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 835 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 837 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 840 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 842 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 844 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: NOT pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: NOT_LA pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 850 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 855 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 860 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 867 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 872 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 879 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 884 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 891 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 896 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 904 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 21121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 912 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 21133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 920 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 21145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 928 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 21157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: pgq_expr IS NULL_P  */
#line 946 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: pgq_expr ISNULL  */
#line 954 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 962 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 970 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr NOTNULL  */
#line 978 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 986 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 21229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 994 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 21237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: row OVERLAPS row  */
#line 998 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 21257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1014 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1022 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1030 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1038 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1046 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1054 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1062 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1066 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1070 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1074 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1078 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1086 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1094 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1102 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1110 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 21433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1130 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 21790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 21796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 22182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 22212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* drop_type_any_name: DATABASE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 22782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* drop_type_any_name: SEQUENCE  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* drop_type_any_name: FUNCTION  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* drop_type_any_name: MACRO  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* drop_type_any_name: MACRO TABLE  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 22806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* drop_type_any_name: VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 22812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 22818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* drop_type_any_name: INDEX  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 22824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* drop_type_any_name: FOREIGN TABLE  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 22830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* drop_type_any_name: COLLATION  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* drop_type_any_name: CONVERSION_P  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* drop_type_any_name: SCHEMA  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* drop_type_any_name: STATISTICS  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* drop_type_name: ACCESS METHOD  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* drop_type_name: EVENT TRIGGER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* drop_type_name: EXTENSION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_name: PUBLICATION  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_name: SERVER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* any_name_list: any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* any_name_list: any_name_list ',' any_name  */
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* opt_drop_behavior: CASCADE  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_drop_behavior: RESTRICT  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_drop_behavior: %empty  */
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* drop_type_name_on_any_name: POLICY  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* drop_type_name_on_any_name: RULE  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* drop_type_name_on_any_name: TRIGGER  */
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* type_name_list: Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 22968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* type_name_list: type_name_list ',' Typename  */
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 22974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 23021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 23082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 23218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 23721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 23729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* with_clause: WITH cte_list  */
#line 285 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* with_clause: WITH_LA cte_list  */
#line 292 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* with_clause: WITH RECURSIVE cte_list  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* cte_list: common_table_expr  */
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* cte_list: cte_list ',' common_table_expr  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 23811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* into_clause: INTO OptTempTableName  */
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* into_clause: %empty  */
#line 335 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* OptTempTableName: TABLE qualified_name  */
#line 385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* OptTempTableName: qualified_name  */
#line 390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* opt_table: TABLE  */
#line 396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* opt_table: %empty  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* all_or_distinct: ALL  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* all_or_distinct: DISTINCT  */
#line 402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* all_or_distinct: %empty  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* by_name: BY NAME_P  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* distinct_clause: DISTINCT  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* opt_all_clause: ALL  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_all_clause: %empty  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_ignore_nulls: %empty  */
#line 426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_sort_clause: sort_clause  */
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 24002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_sort_clause: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* sort_clause: ORDER BY sortby_list  */
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* sort_clause: ORDER BY '*' opt_asc_desc opt_nulls_order  */
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* sortby_list: sortby  */
#line 459 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 24048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* sortby_list: sortby_list ',' sortby  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 24054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 24080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* opt_asc_desc: ASC_P  */
#line 483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 24086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* opt_asc_desc: DESC_P  */
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 24092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* opt_asc_desc: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 24098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 24104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* opt_nulls_order: %empty  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* select_limit: limit_clause offset_clause  */
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 24122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* select_limit: offset_clause limit_clause  */
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 24128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* select_limit: limit_clause  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 24134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* select_limit: offset_clause  */
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 24140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* opt_select_limit: select_limit  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* opt_select_limit: %empty  */
#line 502 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 24152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* limit_clause: LIMIT select_limit_value  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* offset_clause: OFFSET select_offset_value  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* sample_count: FCONST '%'  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* sample_count: ICONST '%'  */
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* sample_count: FCONST PERCENT  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* sample_count: ICONST PERCENT  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* sample_count: ICONST  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 24235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* sample_count: ICONST ROWS  */
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 24243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* sample_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_sample_func: ColId  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_sample_func: %empty  */
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* tablesample_entry: sample_count  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* opt_tablesample_clause: tablesample_clause  */
#line 614 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* opt_tablesample_clause: %empty  */
#line 615 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_repeatable_clause: %empty  */
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* select_limit_value: a_expr  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* select_limit_value: ALL  */
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* select_limit_value: a_expr '%'  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* select_limit_value: FCONST PERCENT  */
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* select_limit_value: ICONST PERCENT  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* select_offset_value: a_expr  */
#line 640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* select_fetch_first_value: c_expr  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* select_fetch_first_value: '+' I_or_F_const  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* select_fetch_first_value: '-' I_or_F_const  */
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* I_or_F_const: Iconst  */
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* I_or_F_const: FCONST  */
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* row_or_rows: ROW  */
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* row_or_rows: ROWS  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* first_or_next: FIRST_P  */
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* first_or_next: NEXT  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* group_clause: GROUP_P BY ALL  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* group_clause: GROUP_P BY '*'  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* group_clause: %empty  */
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* group_by_list: group_by_item  */
#line 718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* group_by_list: group_by_list ',' group_by_item  */
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 24470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* group_by_list_opt_comma: group_by_list  */
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* group_by_list_opt_comma: group_by_list ','  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* group_by_item: a_expr  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* group_by_item: empty_grouping_set  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* group_by_item: cube_clause  */
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* group_by_item: rollup_clause  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* group_by_item: grouping_sets_clause  */
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* empty_grouping_set: '(' ')'  */
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 24520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* grouping_or_grouping_id: GROUPING  */
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* grouping_or_grouping_id: GROUPING_ID  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 24556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* having_clause: HAVING a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* having_clause: %empty  */
#line 776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* qualify_clause: QUALIFY a_expr  */
#line 780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* qualify_clause: %empty  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* for_locking_clause: for_locking_items  */
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* for_locking_clause: FOR READ_P ONLY  */
#line 786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_for_locking_clause: for_locking_clause  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* opt_for_locking_clause: %empty  */
#line 791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* for_locking_items: for_locking_item  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* for_locking_items: for_locking_items for_locking_item  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 24628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* for_locking_strength: FOR UPDATE  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 24634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 24640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* for_locking_strength: FOR SHARE  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 24646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* for_locking_strength: FOR KEY SHARE  */
#line 814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* locked_rels_list: OF qualified_name_list  */
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* locked_rels_list: %empty  */
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* opt_nowait_or_skip: NOWAIT  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* opt_nowait_or_skip: %empty  */
#line 826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* values_clause_opt_comma: values_clause  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* values_clause_opt_comma: values_clause ','  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* from_clause: FROM from_list_opt_comma  */
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* from_clause: %empty  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* from_list: table_ref  */
#line 869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* from_list: from_list ',' table_ref  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* from_list_opt_comma: from_list  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* from_list_opt_comma: from_list ','  */
#line 875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* table_ref: joined_table  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* table_ref: '(' joined_table ')' alias_clause  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                                {
                                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                                }
#line 24848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* joined_table: '(' joined_table ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* alias_clause: AS ColIdOrString  */
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* alias_clause: ColId  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* opt_alias_clause: alias_clause  */
#line 1076 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 25004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* opt_alias_clause: %empty  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 25010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* func_alias_clause: alias_clause  */
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 25018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 25026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* func_alias_clause: %empty  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* join_type: FULL join_outer  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* join_type: LEFT join_outer  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* join_type: RIGHT join_outer  */
#line 1113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* join_type: INNER_P  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* join_outer: OUTER_P  */
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* join_outer: %empty  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* join_qual: ON a_expr  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* relation_expr: qualified_name  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* relation_expr: qualified_name '*'  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* relation_expr: ONLY qualified_name  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* func_table: func_expr_windowless opt_ordinality  */
#line 1191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 25182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* rowsfrom_list: rowsfrom_item  */
#line 1219 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_col_def_list: %empty  */
#line 1224 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 25212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_ordinality: %empty  */
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* where_clause: WHERE a_expr  */
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* where_clause: %empty  */
#line 1234 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* TableFuncElementList: TableFuncElement  */
#line 1240 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* opt_collate_clause: COLLATE any_name  */
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* opt_collate_clause: %empty  */
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* colid_type_list: ColId Typename  */
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_Typename: Typename  */
#line 1301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* opt_Typename: %empty  */
#line 1302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 25314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* Typename: SimpleTypename opt_array_bounds  */
#line 1305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 25323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 25333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 25342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 25352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* Typename: SimpleTypename ARRAY  */
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 25361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 25371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1338 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 25382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 25393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1350 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 25404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_array_bounds: %empty  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* SimpleTypename: GenericType  */
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* SimpleTypename: Numeric  */
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* SimpleTypename: Bit  */
#line 1370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* SimpleTypename: Character  */
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* SimpleTypename: ConstDatetime  */
#line 1372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* SimpleTypename: ConstInterval opt_interval  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* ConstTypename: Numeric  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* ConstTypename: ConstBit  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* ConstTypename: ConstCharacter  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* ConstTypename: ConstDatetime  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* GenericType: type_name_token opt_type_modifiers  */
#line 1413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* opt_type_modifiers: %empty  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* Numeric: INT_P  */
#line 1434 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* Numeric: INTEGER  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* Numeric: SMALLINT  */
#line 1444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* Numeric: BIGINT  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* Numeric: REAL  */
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* Numeric: FLOAT_P opt_float  */
#line 1459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* Numeric: DOUBLE_P PRECISION  */
#line 1464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* Numeric: DEC opt_type_modifiers  */
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* Numeric: BOOLEAN_P  */
#line 1487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* opt_float: '(' Iconst ')'  */
#line 1494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* opt_float: %empty  */
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* Bit: BitWithLength  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* Bit: BitWithoutLength  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* ConstBit: BitWithLength  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* ConstBit: BitWithoutLength  */
#line 1541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* BitWithoutLength: BIT opt_varying  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* Character: CharacterWithLength  */
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* Character: CharacterWithoutLength  */
#line 1586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* ConstCharacter: CharacterWithLength  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* ConstCharacter: CharacterWithoutLength  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* CharacterWithoutLength: character  */
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* character: CHARACTER opt_varying  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* character: CHAR_P opt_varying  */
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* character: VARCHAR  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* character: NATIONAL CHARACTER opt_varying  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* character: NATIONAL CHAR_P opt_varying  */
#line 1635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* character: NCHAR opt_varying  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* opt_varying: VARYING  */
#line 1641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* opt_varying: %empty  */
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* ConstDatetime: TIME opt_timezone  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* ConstInterval: INTERVAL  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* opt_timezone: %empty  */
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* opt_interval: year_keyword  */
#line 1725 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* opt_interval: month_keyword  */
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* opt_interval: day_keyword  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* opt_interval: hour_keyword  */
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* opt_interval: minute_keyword  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* opt_interval: second_keyword  */
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* opt_interval: millisecond_keyword  */
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* opt_interval: microsecond_keyword  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* opt_interval: year_keyword TO month_keyword  */
#line 1741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* opt_interval: day_keyword TO hour_keyword  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* opt_interval: day_keyword TO minute_keyword  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* opt_interval: day_keyword TO second_keyword  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_interval: hour_keyword TO minute_keyword  */
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_interval: hour_keyword TO second_keyword  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_interval: minute_keyword TO second_keyword  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_interval: %empty  */
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 26023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* a_expr: c_expr  */
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* a_expr: a_expr TYPECAST Typename  */
#line 1814 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* a_expr: a_expr COLLATE any_name  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 26057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* a_expr: '+' a_expr  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* a_expr: '-' a_expr  */
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* a_expr: a_expr '+' a_expr  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* a_expr: a_expr '-' a_expr  */
#line 1845 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* a_expr: a_expr '*' a_expr  */
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* a_expr: a_expr '/' a_expr  */
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* a_expr: a_expr '%' a_expr  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* a_expr: a_expr '^' a_expr  */
#line 1853 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* a_expr: a_expr POWER_OF a_expr  */
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* a_expr: a_expr '<' a_expr  */
#line 1857 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* a_expr: a_expr '>' a_expr  */
#line 1859 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* a_expr: a_expr '=' a_expr  */
#line 1861 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 1867 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* a_expr: a_expr qual_Op a_expr  */
#line 1870 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* a_expr: qual_Op a_expr  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* a_expr: a_expr qual_Op  */
#line 1874 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* a_expr: a_expr AND a_expr  */
#line 1877 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* a_expr: a_expr OR a_expr  */
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* a_expr: NOT a_expr  */
#line 1881 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* a_expr: NOT_LA a_expr  */
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* a_expr: a_expr GLOB a_expr  */
#line 1885 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* a_expr: a_expr LIKE a_expr  */
#line 1890 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 1895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 1902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* a_expr: a_expr ILIKE a_expr  */
#line 1914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 26290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 26302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 1955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 26314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 26326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* a_expr: a_expr IS NULL_P  */
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* a_expr: a_expr ISNULL  */
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* a_expr: a_expr IS NOT NULL_P  */
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* a_expr: a_expr NOT NULL_P  */
#line 2005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* a_expr: a_expr NOTNULL  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* a_expr: row OVERLAPS row  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* a_expr: a_expr IS TRUE_P  */
#line 2049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* a_expr: a_expr IS FALSE_P  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* a_expr: a_expr IS UNKNOWN  */
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2089 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr IN_P in_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: DEFAULT  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: COLUMNS '(' '*' opt_except_list opt_replace_list ')'  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 26685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: COLUMNS '(' Sconst ')'  */
#line 2228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->regex = (yyvsp[-1].str);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 26697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* b_expr: c_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* b_expr: b_expr TYPECAST Typename  */
#line 2249 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* b_expr: '+' b_expr  */
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* b_expr: '-' b_expr  */
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* b_expr: b_expr '+' b_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* b_expr: b_expr '-' b_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* b_expr: b_expr '*' b_expr  */
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* b_expr: b_expr '/' b_expr  */
#line 2261 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* b_expr: b_expr '%' b_expr  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* b_expr: b_expr '^' b_expr  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* b_expr: b_expr POWER_OF b_expr  */
#line 2267 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* b_expr: b_expr '<' b_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* b_expr: b_expr '>' b_expr  */
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* b_expr: b_expr '=' b_expr  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2275 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2277 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* b_expr: b_expr qual_Op b_expr  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* b_expr: qual_Op b_expr  */
#line 2283 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* b_expr: b_expr qual_Op  */
#line 2285 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* c_expr: columnref  */
#line 2312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* c_expr: AexprConst  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* c_expr: '#' ICONST  */
#line 2315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* c_expr: indirection_expr opt_indirection  */
#line 2322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* c_expr: '$' named_param  */
#line 2334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* c_expr: row  */
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* c_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* c_expr: list_comprehension  */
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* c_expr: ARRAY select_with_parens  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* c_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2359 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* c_expr: case_expr  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* c_expr: select_with_parens  */
#line 2367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* c_expr: select_with_parens indirection  */
#line 2378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* c_expr: EXISTS select_with_parens  */
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* c_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 27022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* indirection_expr: '?'  */
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 27030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* indirection_expr: PARAM  */
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 27041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* indirection_expr: '(' a_expr ')'  */
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* indirection_expr: func_expr  */
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* func_application: func_name '(' ')'  */
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 27074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 27124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* func_application: func_name '(' '*' ')'  */
#line 2495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 27196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* func_expr: func_expr_common_subexpr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* func_expr_windowless: func_application  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 27224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* func_expr_common_subexpr: CURRENT_DATE  */
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 27232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* func_expr_common_subexpr: CURRENT_TIME  */
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 27240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* func_expr_common_subexpr: CURRENT_TIME '(' Iconst ')'  */
#line 2592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* func_expr_common_subexpr: CURRENT_TIMESTAMP  */
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 27256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* func_expr_common_subexpr: CURRENT_TIMESTAMP '(' Iconst ')'  */
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* func_expr_common_subexpr: LOCALTIME  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 27272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* func_expr_common_subexpr: LOCALTIME '(' Iconst ')'  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* func_expr_common_subexpr: LOCALTIMESTAMP  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 27288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* func_expr_common_subexpr: LOCALTIMESTAMP '(' Iconst ')'  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* func_expr_common_subexpr: CURRENT_ROLE  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 27304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* func_expr_common_subexpr: CURRENT_USER  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* func_expr_common_subexpr: SESSION_USER  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 27320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* func_expr_common_subexpr: USER  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 27328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* func_expr_common_subexpr: CURRENT_CATALOG  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 27336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* func_expr_common_subexpr: CURRENT_SCHEMA  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 27344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 27350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 27356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 27416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 27459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 27470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 27483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* within_group_clause: %empty  */
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 2756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* filter_clause: FILTER '(' a_expr ')'  */
#line 2757 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* filter_clause: %empty  */
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* export_clause: EXPORT_STATE  */
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* export_clause: %empty  */
#line 2763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* window_clause: WINDOW window_definition_list  */
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* window_clause: %empty  */
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* window_definition_list: window_definition  */
#line 2775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* window_definition_list: window_definition_list ',' window_definition  */
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* window_definition: ColId AS window_specification  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* over_clause: OVER window_specification  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* over_clause: OVER ColId  */
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* over_clause: %empty  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 2810 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* opt_existing_window_name: ColId  */
#line 2835 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* opt_existing_window_name: %empty  */
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* opt_partition_clause: PARTITION BY expr_list  */
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* opt_partition_clause: %empty  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* opt_frame_clause: RANGE frame_extent  */
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 27659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* opt_frame_clause: ROWS frame_extent  */
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 27669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* opt_frame_clause: %empty  */
#line 2864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* frame_extent: frame_bound  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* frame_bound: UNBOUNDED PRECEDING  */
#line 2936 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* frame_bound: CURRENT_P ROW  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* frame_bound: a_expr PRECEDING  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* frame_bound: a_expr FOLLOWING  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* qualified_row: ROW '(' ')'  */
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* row: qualified_row  */
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* row: '(' expr_list ',' a_expr ')'  */
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* dict_arg: ColIdOrString ':' a_expr  */
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* dict_arguments: dict_arg  */
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* dict_arguments_opt_comma: dict_arguments  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* sub_type: ANY  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* sub_type: SOME  */
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* sub_type: ALL  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* all_Op: Op  */
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* all_Op: MathOp  */
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* MathOp: '+'  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* MathOp: '-'  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* MathOp: '*'  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* MathOp: '/'  */
#line 3029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* MathOp: '%'  */
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* MathOp: '^'  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* MathOp: POWER_OF  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* MathOp: '<'  */
#line 3033 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* MathOp: '>'  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* MathOp: '='  */
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* MathOp: LESS_EQUALS  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* MathOp: GREATER_EQUALS  */
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* MathOp: NOT_EQUALS  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* qual_Op: Op  */
#line 3042 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* qual_all_Op: all_Op  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* subquery_Op: all_Op  */
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3058 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* subquery_Op: LIKE  */
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 28014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* subquery_Op: NOT_LA LIKE  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* subquery_Op: GLOB  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 28026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* subquery_Op: NOT_LA GLOB  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* subquery_Op: ILIKE  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* subquery_Op: NOT_LA ILIKE  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* any_operator: all_Op  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* any_operator: ColId '.' any_operator  */
#line 3086 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 28056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* expr_list: a_expr  */
#line 3090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* expr_list: expr_list ',' a_expr  */
#line 3094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* expr_list_opt_comma: expr_list  */
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* expr_list_opt_comma: expr_list ','  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* opt_expr_list_opt_comma: %empty  */
#line 3117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 28104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* func_arg_list: func_arg_expr  */
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* func_arg_expr: a_expr  */
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* type_list: Typename  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* type_list: type_list ',' Typename  */
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* extract_list: extract_arg FROM a_expr  */
#line 3165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 28174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* extract_list: %empty  */
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* extract_arg: IDENT  */
#line 3175 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* extract_arg: year_keyword  */
#line 3176 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 28192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* extract_arg: month_keyword  */
#line 3177 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 28198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* extract_arg: day_keyword  */
#line 3178 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 28204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* extract_arg: hour_keyword  */
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 28210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* extract_arg: minute_keyword  */
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 28216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* extract_arg: second_keyword  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 28222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* extract_arg: millisecond_keyword  */
#line 3182 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 28228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* extract_arg: microsecond_keyword  */
#line 3183 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 28234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* extract_arg: Sconst  */
#line 3184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* overlay_placing: PLACING a_expr  */
#line 3206 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* position_list: b_expr IN_P b_expr  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 28268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* position_list: %empty  */
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* substr_list: a_expr substr_from substr_for  */
#line 3230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* substr_list: a_expr substr_for substr_from  */
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 28291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* substr_list: a_expr substr_from  */
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* substr_list: a_expr substr_for  */
#line 3243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 28318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* substr_list: expr_list  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* substr_list: %empty  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* substr_from: FROM a_expr  */
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* substr_for: FOR a_expr  */
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3272 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* trim_list: FROM expr_list_opt_comma  */
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* trim_list: expr_list_opt_comma  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* in_expr: select_with_parens  */
#line 3278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3284 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* when_clause_list: when_clause  */
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* when_clause_list: when_clause_list when_clause  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3314 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* case_default: ELSE a_expr  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* case_default: %empty  */
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* case_arg: a_expr  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* case_arg: %empty  */
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* columnref: ColId  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* columnref: ColId indirection  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* indirection_el: '.' attr_name  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 28465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* indirection_el: '[' a_expr ']'  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* opt_slice_bound: a_expr  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* opt_slice_bound: %empty  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* indirection: indirection_el  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* indirection: indirection indirection_el  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* opt_indirection: %empty  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* opt_indirection: opt_indirection indirection_el  */
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_target_list_opt_comma: %empty  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* target_list: target_el  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* target_list: target_list ',' target_el  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* target_list_opt_comma: target_list  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* target_list_opt_comma: target_list ','  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* target_el: a_expr AS ColLabelOrString  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* target_el: a_expr IDENT  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* target_el: a_expr  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* target_el: '*' opt_except_list opt_replace_list  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* target_el: ColId '.' '*' opt_except_list opt_replace_list  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 28636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* except_list: EXCLUDE ColId  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* opt_except_list: except_list  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* opt_except_list: %empty  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* replace_list_el: a_expr AS ColId  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* replace_list: replace_list_el  */
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* replace_list: replace_list ',' replace_list_el  */
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* replace_list_opt_comma: replace_list  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* replace_list_opt_comma: replace_list ','  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_replace_list: REPLACE replace_list_el  */
#line 3492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_replace_list: %empty  */
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* qualified_name_list: qualified_name  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* qualified_name: ColIdOrString  */
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 28728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* qualified_name: ColId indirection  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 28758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* name_list: name  */
#line 3548 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* name_list: name_list ',' name  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* name_list_opt_comma: name_list  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* name_list_opt_comma: name_list ','  */
#line 3556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* name: ColIdOrString  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* attr_name: ColLabel  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* func_name: function_name_token  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* func_name: ColId indirection  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* AexprConst: Iconst  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* AexprConst: FCONST  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* AexprConst: Sconst opt_indirection  */
#line 3594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* AexprConst: BCONST  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* AexprConst: XCONST  */
#line 3610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* AexprConst: func_name Sconst  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3626 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* AexprConst: ConstTypename Sconst  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* AexprConst: TRUE_P  */
#line 3680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* AexprConst: FALSE_P  */
#line 3684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* AexprConst: NULL_P  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* Iconst: ICONST  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* Sconst: SCONST  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* ColId: IDENT  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* ColId: pgq_unreserved_keyword  */
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* ColId: unreserved_keyword  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* ColId: col_name_keyword  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* ColIdOrString: ColId  */
#line 3716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* ColIdOrString: SCONST  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* type_function_name: IDENT  */
#line 3723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* type_function_name: unreserved_keyword  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* type_function_name: type_func_name_keyword  */
#line 3725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* function_name_token: IDENT  */
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* function_name_token: unreserved_keyword  */
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* function_name_token: func_name_keyword  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* type_name_token: IDENT  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* type_name_token: unreserved_keyword  */
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* type_name_token: type_name_keyword  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* any_name: ColId  */
#line 3738 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* any_name: ColId attrs  */
#line 3739 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 29085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* attrs: '.' attr_name  */
#line 3743 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* attrs: attrs '.' attr_name  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 3749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* opt_name_list: %empty  */
#line 3750 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* ColLabel: IDENT  */
#line 3761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* ColLabel: other_keyword  */
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* ColLabel: unreserved_keyword  */
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* ColLabel: reserved_keyword  */
#line 3764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* ColLabelOrString: ColLabel  */
#line 3767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* ColLabelOrString: SCONST  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* named_param: IDENT  */
#line 3771 "third_party/libpg_query/grammar/statements/select.y"
                   { (yyval.str) = (yyvsp[0].str); }
#line 29151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 29175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 55 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* OptSchemaEltList: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 29314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 29320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 29338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 29350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 29356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 30008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 30034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 30122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 30136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 30144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 30155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 30166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 30178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 30190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 30258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 30264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 30276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 30282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 30305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* VariableShowStmt: show_or_describe ALL  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* var_name: ColId  */
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* var_name: var_name '.' ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* table_id: ColId  */
#line 68 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* table_id: table_id '.' ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30658 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 84 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
