/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 113,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 114,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 115,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 116,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 117,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 118,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 119,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 120,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 121,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 122,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 123,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 124,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 125,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 126,              /* DESTINATION  */
  YYSYMBOL_DETACH = 127,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 128,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 129,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 130,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 131,                 /* DISTINCT  */
  YYSYMBOL_DO = 132,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 133,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 134,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 135,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 136,                     /* DROP  */
  YYSYMBOL_EACH = 137,                     /* EACH  */
  YYSYMBOL_EDGE = 138,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 139,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 146,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 147,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 148,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 149,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 150,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 151,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 152,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 153,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 154,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 155,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 156,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 157,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 181,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 182,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 183,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 184,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 185,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 186,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 187,                  /* HANDLER  */
  YYSYMBOL_HAVING = 188,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 189,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 190,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 191,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 192,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 193,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 194,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 195,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 196,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 197,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 198,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 199,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 200,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 201,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 202,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 203,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 204,                /* INCREMENT  */
  YYSYMBOL_INDEX = 205,                    /* INDEX  */
  YYSYMBOL_INDEXES = 206,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 207,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 208,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 209,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 210,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 211,                  /* INNER_P  */
  YYSYMBOL_INOUT = 212,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 213,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 214,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 215,                   /* INSERT  */
  YYSYMBOL_INSTALL = 216,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 217,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 218,                    /* INT_P  */
  YYSYMBOL_INTEGER = 219,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 220,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 221,                 /* INTERVAL  */
  YYSYMBOL_INTO = 222,                     /* INTO  */
  YYSYMBOL_INVOKER = 223,                  /* INVOKER  */
  YYSYMBOL_IS = 224,                       /* IS  */
  YYSYMBOL_ISNULL = 225,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 226,                /* ISOLATION  */
  YYSYMBOL_JOIN = 227,                     /* JOIN  */
  YYSYMBOL_JSON = 228,                     /* JSON  */
  YYSYMBOL_KEEP = 229,                     /* KEEP  */
  YYSYMBOL_KEY = 230,                      /* KEY  */
  YYSYMBOL_LABEL = 231,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LOAD = 243,                     /* LOAD  */
  YYSYMBOL_LOCAL = 244,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 245,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 246,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 247,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 248,                   /* LOGGED  */
  YYSYMBOL_MACRO = 249,                    /* MACRO  */
  YYSYMBOL_MAP = 250,                      /* MAP  */
  YYSYMBOL_MAPPING = 251,                  /* MAPPING  */
  YYSYMBOL_MATCH = 252,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 253,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 254,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 255,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 256,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 257,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 258,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 259,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 260,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 261,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 262,                 /* MINVALUE  */
  YYSYMBOL_MODE = 263,                     /* MODE  */
  YYSYMBOL_MONTH_P = 264,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 265,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 266,                     /* MOVE  */
  YYSYMBOL_NAME_P = 267,                   /* NAME_P  */
  YYSYMBOL_NAMES = 268,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 269,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 270,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 271,                    /* NCHAR  */
  YYSYMBOL_NEW = 272,                      /* NEW  */
  YYSYMBOL_NEXT = 273,                     /* NEXT  */
  YYSYMBOL_NO = 274,                       /* NO  */
  YYSYMBOL_NODE = 275,                     /* NODE  */
  YYSYMBOL_NONE = 276,                     /* NONE  */
  YYSYMBOL_NOT = 277,                      /* NOT  */
  YYSYMBOL_NOTHING = 278,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 279,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 280,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 281,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 282,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 283,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 284,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 285,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 286,                 /* OBJECT_P  */
  YYSYMBOL_OF = 287,                       /* OF  */
  YYSYMBOL_OFF = 288,                      /* OFF  */
  YYSYMBOL_OFFSET = 289,                   /* OFFSET  */
  YYSYMBOL_OIDS = 290,                     /* OIDS  */
  YYSYMBOL_OLD = 291,                      /* OLD  */
  YYSYMBOL_ON = 292,                       /* ON  */
  YYSYMBOL_ONLY = 293,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 294,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 295,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 296,                  /* OPTIONS  */
  YYSYMBOL_OR = 297,                       /* OR  */
  YYSYMBOL_ORDER = 298,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 299,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 300,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 301,                  /* OUTER_P  */
  YYSYMBOL_OVER = 302,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 303,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 304,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 305,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 306,                    /* OWNED  */
  YYSYMBOL_OWNER = 307,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 308,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 309,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 310,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 311,                /* PARTITION  */
  YYSYMBOL_PASSING = 312,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 313,                 /* PASSWORD  */
  YYSYMBOL_PATH = 314,                     /* PATH  */
  YYSYMBOL_PATHS = 315,                    /* PATHS  */
  YYSYMBOL_PERCENT = 316,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 317,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 318,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 319,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 320,                  /* PLACING  */
  YYSYMBOL_PLANS = 321,                    /* PLANS  */
  YYSYMBOL_POLICY = 322,                   /* POLICY  */
  YYSYMBOL_POSITION = 323,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 324,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 325,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 326,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 327,                /* PRECISION  */
  YYSYMBOL_PREPARE = 328,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 329,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 330,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 331,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 332,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 333,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 334,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 335,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 336,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 337,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 338,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 339,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 340,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 341,                    /* QUOTE  */
  YYSYMBOL_RANGE = 342,                    /* RANGE  */
  YYSYMBOL_READ_P = 343,                   /* READ_P  */
  YYSYMBOL_REAL = 344,                     /* REAL  */
  YYSYMBOL_REASSIGN = 345,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 346,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 347,                /* RECURSIVE  */
  YYSYMBOL_REF = 348,                      /* REF  */
  YYSYMBOL_REFERENCES = 349,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 350,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 351,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 352,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 353,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 354,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 355,                  /* RELEASE  */
  YYSYMBOL_RENAME = 356,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 357,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 358,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 359,                  /* REPLICA  */
  YYSYMBOL_RESET = 360,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 361,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 362,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 363,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 364,                /* RETURNING  */
  YYSYMBOL_RETURNS = 365,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 366,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 367,                    /* RIGHT  */
  YYSYMBOL_ROLE = 368,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 369,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 370,                   /* ROLLUP  */
  YYSYMBOL_ROW = 371,                      /* ROW  */
  YYSYMBOL_ROWS = 372,                     /* ROWS  */
  YYSYMBOL_RULE = 373,                     /* RULE  */
  YYSYMBOL_SAMPLE = 374,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 375,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 376,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 377,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 378,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 379,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 380,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 381,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 382,                 /* SECURITY  */
  YYSYMBOL_SELECT = 383,                   /* SELECT  */
  YYSYMBOL_SEMI = 384,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 385,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 386,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 387,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 388,                   /* SERVER  */
  YYSYMBOL_SESSION = 389,                  /* SESSION  */
  YYSYMBOL_SET = 390,                      /* SET  */
  YYSYMBOL_SETOF = 391,                    /* SETOF  */
  YYSYMBOL_SETS = 392,                     /* SETS  */
  YYSYMBOL_SHARE = 393,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 394,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 395,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 396,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 397,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 398,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 399,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 400,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 401,                     /* SOME  */
  YYSYMBOL_SOURCE = 402,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 403,                    /* SQL_P  */
  YYSYMBOL_STABLE = 404,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 405,             /* STANDALONE_P  */
  YYSYMBOL_START = 406,                    /* START  */
  YYSYMBOL_STATEMENT = 407,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 408,               /* STATISTICS  */
  YYSYMBOL_STDIN = 409,                    /* STDIN  */
  YYSYMBOL_STDOUT = 410,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 411,                  /* STORAGE  */
  YYSYMBOL_STORED = 412,                   /* STORED  */
  YYSYMBOL_STRICT_P = 413,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 414,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 415,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 416,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 417,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 418,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 419,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 420,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 421,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 422,                    /* TABLE  */
  YYSYMBOL_TABLES = 423,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 424,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 425,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 426,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 427,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 428,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 429,                   /* TEXT_P  */
  YYSYMBOL_THEN = 430,                     /* THEN  */
  YYSYMBOL_TIME = 431,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 432,                /* TIMESTAMP  */
  YYSYMBOL_TO = 433,                       /* TO  */
  YYSYMBOL_TRAIL = 434,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 435,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 436,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 437,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 438,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 439,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 440,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 441,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 442,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 443,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 444,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 445,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 446,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 447,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 448,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 449,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 450,                    /* UNION  */
  YYSYMBOL_UNIQUE = 451,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 452,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 453,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 454,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 455,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 456,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 457,                   /* UPDATE  */
  YYSYMBOL_USE_P = 458,                    /* USE_P  */
  YYSYMBOL_USER = 459,                     /* USER  */
  YYSYMBOL_USING = 460,                    /* USING  */
  YYSYMBOL_VACUUM = 461,                   /* VACUUM  */
  YYSYMBOL_VALID = 462,                    /* VALID  */
  YYSYMBOL_VALIDATE = 463,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 464,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 465,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 466,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 467,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 468,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 469,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 470,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 471,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 472,                   /* VERTEX  */
  YYSYMBOL_VIEW = 473,                     /* VIEW  */
  YYSYMBOL_VIEWS = 474,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 475,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 476,                 /* VOLATILE  */
  YYSYMBOL_WALK = 477,                     /* WALK  */
  YYSYMBOL_WHEN = 478,                     /* WHEN  */
  YYSYMBOL_WHERE = 479,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 480,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 481,                   /* WINDOW  */
  YYSYMBOL_WITH = 482,                     /* WITH  */
  YYSYMBOL_WITHIN = 483,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 484,                  /* WITHOUT  */
  YYSYMBOL_WORK = 485,                     /* WORK  */
  YYSYMBOL_WRAPPER = 486,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 487,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 488,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 489,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 490,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 491,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 492,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 493,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 494,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 495,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 496,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 497,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 498,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 499,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 500,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 501,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 502,                    /* YES_P  */
  YYSYMBOL_ZONE = 503,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 504,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 505,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 506,                  /* WITH_LA  */
  YYSYMBOL_507_ = 507,                     /* '<'  */
  YYSYMBOL_508_ = 508,                     /* '>'  */
  YYSYMBOL_509_ = 509,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 510,                /* POSTFIXOP  */
  YYSYMBOL_511_ = 511,                     /* '+'  */
  YYSYMBOL_512_ = 512,                     /* '-'  */
  YYSYMBOL_513_ = 513,                     /* '*'  */
  YYSYMBOL_514_ = 514,                     /* '/'  */
  YYSYMBOL_515_ = 515,                     /* '%'  */
  YYSYMBOL_516_ = 516,                     /* '^'  */
  YYSYMBOL_UMINUS = 517,                   /* UMINUS  */
  YYSYMBOL_518_ = 518,                     /* '['  */
  YYSYMBOL_519_ = 519,                     /* ']'  */
  YYSYMBOL_520_ = 520,                     /* '('  */
  YYSYMBOL_521_ = 521,                     /* ')'  */
  YYSYMBOL_522_ = 522,                     /* '.'  */
  YYSYMBOL_523_ = 523,                     /* ';'  */
  YYSYMBOL_524_ = 524,                     /* ','  */
  YYSYMBOL_525_ = 525,                     /* '|'  */
  YYSYMBOL_526_ = 526,                     /* '?'  */
  YYSYMBOL_527_ = 527,                     /* '{'  */
  YYSYMBOL_528_ = 528,                     /* '}'  */
  YYSYMBOL_529_ = 529,                     /* '&'  */
  YYSYMBOL_530_ = 530,                     /* '!'  */
  YYSYMBOL_531_ = 531,                     /* ':'  */
  YYSYMBOL_532_ = 532,                     /* '#'  */
  YYSYMBOL_533_ = 533,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 534,                 /* $accept  */
  YYSYMBOL_stmtblock = 535,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 536,                /* stmtmulti  */
  YYSYMBOL_stmt = 537,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 538,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 539,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 540,               /* SeqOptList  */
  YYSYMBOL_opt_with = 541,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 542,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 543,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 544,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 545,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 546,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 547, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 548,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 549, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 550, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 551,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 552,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 553, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 554,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 555,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 556,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 557,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 558,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 559,               /* DetachStmt  */
  YYSYMBOL_opt_database = 560,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 561,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 562,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 563,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 564,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 565,           /* qualified_name  */
  YYSYMBOL_ColId = 566,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 567,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 568,                   /* Sconst  */
  YYSYMBOL_indirection = 569,              /* indirection  */
  YYSYMBOL_indirection_el = 570,           /* indirection_el  */
  YYSYMBOL_attr_name = 571,                /* attr_name  */
  YYSYMBOL_ColLabel = 572,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 573,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 574,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 575,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 576, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 577,                /* opt_using  */
  YYSYMBOL_opt_as = 578,                   /* opt_as  */
  YYSYMBOL_opt_program = 579,              /* opt_program  */
  YYSYMBOL_copy_options = 580,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 581,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 582,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 583,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 584,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 585,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 586,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 587, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 588,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 589,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 590,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 591,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 592,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 593, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 594,       /* generic_option_arg  */
  YYSYMBOL_key_action = 595,               /* key_action  */
  YYSYMBOL_ColConstraint = 596,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 597,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 598,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 599,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 600,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 601,      /* generic_option_elem  */
  YYSYMBOL_key_update = 602,               /* key_update  */
  YYSYMBOL_key_actions = 603,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 604,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 605,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 606,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 607,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 608,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 609,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 610,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 611,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 612,                  /* OptWith  */
  YYSYMBOL_definition = 613,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 614,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 615,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 616,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 617,                /* columnDef  */
  YYSYMBOL_def_list = 618,                 /* def_list  */
  YYSYMBOL_index_name = 619,               /* index_name  */
  YYSYMBOL_TableElement = 620,             /* TableElement  */
  YYSYMBOL_def_elem = 621,                 /* def_elem  */
  YYSYMBOL_opt_definition = 622,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 623,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 624,               /* columnElem  */
  YYSYMBOL_opt_column_list = 625,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 626,              /* ColQualList  */
  YYSYMBOL_key_delete = 627,               /* key_delete  */
  YYSYMBOL_reloption_elem = 628,           /* reloption_elem  */
  YYSYMBOL_columnList = 629,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 630,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 631,                /* func_type  */
  YYSYMBOL_ConstraintElem = 632,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 633,         /* TableElementList  */
  YYSYMBOL_key_match = 634,                /* key_match  */
  YYSYMBOL_TableLikeClause = 635,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 636,                  /* OptTemp  */
  YYSYMBOL_generated_when = 637,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 638,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 639,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 640,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 641,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 642,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 643,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 644,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 645,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 646,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 647,         /* reserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 648,   /* pgq_unreserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 649,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateFunctionStmt = 650,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 651,              /* macro_alias  */
  YYSYMBOL_param_list = 652,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 653,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 654,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 655,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 656,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 657,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 658,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 659,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 660,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 661,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 662,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 663,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 664,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 665,             /* using_clause  */
  YYSYMBOL_DropStmt = 666,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 667,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 668,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 669,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 670,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 671, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 672,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 673,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 674,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 675,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 676,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 677,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 678,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 679,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 680, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 681,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 682,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 683,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 684,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 685,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 686,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 687,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 688,                /* IndexStmt  */
  YYSYMBOL_access_method = 689,            /* access_method  */
  YYSYMBOL_access_method_clause = 690,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 691,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 692,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 693,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 694,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 695,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 696,              /* insert_rest  */
  YYSYMBOL_insert_target = 697,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 698,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 699,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 700,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 701,       /* insert_column_item  */
  YYSYMBOL_set_clause = 702,               /* set_clause  */
  YYSYMBOL_opt_or_action = 703,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 704,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 705,               /* index_elem  */
  YYSYMBOL_returning_clause = 706,         /* returning_clause  */
  YYSYMBOL_override_kind = 707,            /* override_kind  */
  YYSYMBOL_set_target_list = 708,          /* set_target_list  */
  YYSYMBOL_opt_collate = 709,              /* opt_collate  */
  YYSYMBOL_opt_class = 710,                /* opt_class  */
  YYSYMBOL_insert_column_list = 711,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 712,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 713, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 714,             /* index_params  */
  YYSYMBOL_set_target = 715,               /* set_target  */
  YYSYMBOL_LoadStmt = 716,                 /* LoadStmt  */
  YYSYMBOL_file_name = 717,                /* file_name  */
  YYSYMBOL_PGQ_IDENT = 718,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 719,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 720,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 721,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 722,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 723, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 724,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 725,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 726,             /* KeyReference  */
  YYSYMBOL_LabelList = 727,                /* LabelList  */
  YYSYMBOL_Discriminator = 728,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 729,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 730,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 731,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 732,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 733,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 734,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 735,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 736,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 737,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 738,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 739,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableStmt = 740,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 741,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 742,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 743,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 744,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 745,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 746,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 747,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 748,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 749,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 750,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 751,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 752,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 753, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 754,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 755,                  /* CostNum  */
  YYSYMBOL_CostDefault = 756,              /* CostDefault  */
  YYSYMBOL_CostOptional = 757,             /* CostOptional  */
  YYSYMBOL_SubPath = 758,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 759,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 760,              /* PathElement  */
  YYSYMBOL_PathSequence = 761,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 762,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 763,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 764,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 765,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 766,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 767,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 768,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 769,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 770,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 771,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 772,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 773,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 774,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 775,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 776,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 777,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 778,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 779,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 780,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 781,               /* RenameStmt  */
  YYSYMBOL_opt_column = 782,               /* opt_column  */
  YYSYMBOL_SelectStmt = 783,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 784,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 785,         /* select_no_parens  */
  YYSYMBOL_select_clause = 786,            /* select_clause  */
  YYSYMBOL_opt_select = 787,               /* opt_select  */
  YYSYMBOL_simple_select = 788,            /* simple_select  */
  YYSYMBOL_value_or_values = 789,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 790,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 791,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 792,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 793, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 794,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 795,              /* with_clause  */
  YYSYMBOL_cte_list = 796,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 797,        /* common_table_expr  */
  YYSYMBOL_into_clause = 798,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 799,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 800,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 801,          /* all_or_distinct  */
  YYSYMBOL_by_name = 802,                  /* by_name  */
  YYSYMBOL_distinct_clause = 803,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 804,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 805,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 806,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 807,              /* sort_clause  */
  YYSYMBOL_sortby_list = 808,              /* sortby_list  */
  YYSYMBOL_sortby = 809,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 810,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 811,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 812,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 813,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 814,             /* limit_clause  */
  YYSYMBOL_offset_clause = 815,            /* offset_clause  */
  YYSYMBOL_sample_count = 816,             /* sample_count  */
  YYSYMBOL_sample_clause = 817,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 818,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 819,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 820,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 821,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 822,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 823,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 824,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 825, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 826,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 827,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 828,            /* first_or_next  */
  YYSYMBOL_group_clause = 829,             /* group_clause  */
  YYSYMBOL_group_by_list = 830,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 831,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 832,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 833,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 834,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 835,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 836,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 837,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 838,            /* having_clause  */
  YYSYMBOL_qualify_clause = 839,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 840,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 841,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 842,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 843,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 844,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 845,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 846,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 847,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 848,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 849,              /* from_clause  */
  YYSYMBOL_from_list = 850,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 851,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 852,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 853,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 854,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 855,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 856,             /* pivot_header  */
  YYSYMBOL_pivot_value = 857,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 858,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 859,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 860,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 861,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 862,             /* joined_table  */
  YYSYMBOL_alias_clause = 863,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 864,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 865,        /* func_alias_clause  */
  YYSYMBOL_join_type = 866,                /* join_type  */
  YYSYMBOL_join_outer = 867,               /* join_outer  */
  YYSYMBOL_join_qual = 868,                /* join_qual  */
  YYSYMBOL_relation_expr = 869,            /* relation_expr  */
  YYSYMBOL_func_table = 870,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 871,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 872,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 873,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 874,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 875,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 876,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 877,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 878,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 879,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 880,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 881,             /* opt_Typename  */
  YYSYMBOL_Typename = 882,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 883,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 884,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 885,            /* ConstTypename  */
  YYSYMBOL_GenericType = 886,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 887,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 888,                  /* Numeric  */
  YYSYMBOL_opt_float = 889,                /* opt_float  */
  YYSYMBOL_Bit = 890,                      /* Bit  */
  YYSYMBOL_ConstBit = 891,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 892,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 893,         /* BitWithoutLength  */
  YYSYMBOL_Character = 894,                /* Character  */
  YYSYMBOL_ConstCharacter = 895,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 896,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 897,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 898,                /* character  */
  YYSYMBOL_opt_varying = 899,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 900,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 901,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 902,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 903,             /* year_keyword  */
  YYSYMBOL_month_keyword = 904,            /* month_keyword  */
  YYSYMBOL_day_keyword = 905,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 906,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 907,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 908,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 909,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 910,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 911,             /* opt_interval  */
  YYSYMBOL_a_expr = 912,                   /* a_expr  */
  YYSYMBOL_b_expr = 913,                   /* b_expr  */
  YYSYMBOL_c_expr = 914,                   /* c_expr  */
  YYSYMBOL_d_expr = 915,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 916,         /* indirection_expr  */
  YYSYMBOL_func_application = 917,         /* func_application  */
  YYSYMBOL_func_expr = 918,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 919,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 920, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 921,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 922,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 923,            /* filter_clause  */
  YYSYMBOL_export_clause = 924,            /* export_clause  */
  YYSYMBOL_window_clause = 925,            /* window_clause  */
  YYSYMBOL_window_definition_list = 926,   /* window_definition_list  */
  YYSYMBOL_window_definition = 927,        /* window_definition  */
  YYSYMBOL_over_clause = 928,              /* over_clause  */
  YYSYMBOL_window_specification = 929,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 930, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 931,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 932,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 933,             /* frame_extent  */
  YYSYMBOL_frame_bound = 934,              /* frame_bound  */
  YYSYMBOL_qualified_row = 935,            /* qualified_row  */
  YYSYMBOL_row = 936,                      /* row  */
  YYSYMBOL_dict_arg = 937,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 938,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 939, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 940,                  /* map_arg  */
  YYSYMBOL_map_arguments = 941,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 942,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 943, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 944,                 /* sub_type  */
  YYSYMBOL_all_Op = 945,                   /* all_Op  */
  YYSYMBOL_MathOp = 946,                   /* MathOp  */
  YYSYMBOL_qual_Op = 947,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 948,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 949,              /* subquery_Op  */
  YYSYMBOL_any_operator = 950,             /* any_operator  */
  YYSYMBOL_c_expr_list = 951,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 952,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 953,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 954,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 955,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 956,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 957,            /* func_arg_expr  */
  YYSYMBOL_type_list = 958,                /* type_list  */
  YYSYMBOL_extract_list = 959,             /* extract_list  */
  YYSYMBOL_extract_arg = 960,              /* extract_arg  */
  YYSYMBOL_overlay_list = 961,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 962,          /* overlay_placing  */
  YYSYMBOL_position_list = 963,            /* position_list  */
  YYSYMBOL_substr_list = 964,              /* substr_list  */
  YYSYMBOL_substr_from = 965,              /* substr_from  */
  YYSYMBOL_substr_for = 966,               /* substr_for  */
  YYSYMBOL_trim_list = 967,                /* trim_list  */
  YYSYMBOL_in_expr = 968,                  /* in_expr  */
  YYSYMBOL_case_expr = 969,                /* case_expr  */
  YYSYMBOL_when_clause_list = 970,         /* when_clause_list  */
  YYSYMBOL_when_clause = 971,              /* when_clause  */
  YYSYMBOL_case_default = 972,             /* case_default  */
  YYSYMBOL_case_arg = 973,                 /* case_arg  */
  YYSYMBOL_columnref = 974,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 975,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 976,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 977,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 978,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 979, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 980,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 981, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 982,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 983,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 984,                /* target_el  */
  YYSYMBOL_except_list = 985,              /* except_list  */
  YYSYMBOL_opt_except_list = 986,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 987,          /* replace_list_el  */
  YYSYMBOL_replace_list = 988,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 989,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 990,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 991,      /* qualified_name_list  */
  YYSYMBOL_name_list = 992,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 993,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 994, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 995,                     /* name  */
  YYSYMBOL_func_name = 996,                /* func_name  */
  YYSYMBOL_AexprConst = 997,               /* AexprConst  */
  YYSYMBOL_Iconst = 998,                   /* Iconst  */
  YYSYMBOL_type_function_name = 999,       /* type_function_name  */
  YYSYMBOL_function_name_token = 1000,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1001,         /* type_name_token  */
  YYSYMBOL_any_name = 1002,                /* any_name  */
  YYSYMBOL_attrs = 1003,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1004,           /* opt_name_list  */
  YYSYMBOL_param_name = 1005,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1006,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1007,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1008,         /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 1009,              /* UpdateStmt  */
  YYSYMBOL_UseStmt = 1010,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1011,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1012,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1013,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1014,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1015,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1016,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1017,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1018,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1019,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1020,                /* set_rest  */
  YYSYMBOL_generic_set = 1021,             /* generic_set  */
  YYSYMBOL_var_value = 1022,               /* var_value  */
  YYSYMBOL_zone_value = 1023,              /* zone_value  */
  YYSYMBOL_var_list = 1024,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1025,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1026,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1027,              /* opt_tables  */
  YYSYMBOL_var_name = 1028,                /* var_name  */
  YYSYMBOL_table_id = 1029,                /* table_id  */
  YYSYMBOL_ViewStmt = 1030,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1031         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  764
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   74318

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  534
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  498
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2283
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3806

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   763


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   530,     2,   532,   533,   515,   529,     2,
     520,   521,   513,   511,   524,   512,   522,   514,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   531,   523,
     507,   509,   508,   526,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   518,     2,   519,   516,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   527,   525,   528,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   510,   517
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   547,   547,   563,   575,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   625,     9,    18,    27,    36,
      45,    54,    63,    72,    85,    87,    93,    94,    99,   103,
     107,   118,   126,   130,   139,   148,   157,   166,   175,   184,
     192,   200,   209,   218,   227,   236,   253,   262,   271,   280,
     290,   303,   318,   327,   335,   350,   358,   368,   378,   385,
     392,   400,   407,   418,   419,   424,   428,   433,   438,   446,
     447,   452,   456,   457,   458,     7,    13,    19,    25,     9,
      13,    44,    45,    46,    47,    51,    52,    56,    60,    61,
      65,    71,    76,    77,    78,    79,    80,     6,    15,    25,
      35,    45,    55,    65,    75,    85,    95,   106,   117,   127,
     140,   141,     9,    23,    29,    36,    42,    49,    59,    63,
      71,    72,    73,    77,    86,    95,   102,   103,   108,   120,
     125,   150,   155,   160,   166,   176,   186,   192,   203,   214,
     229,   230,   236,   237,   242,   243,   249,   250,   254,   255,
     260,   262,   268,   269,   273,   274,   277,   278,   283,     7,
      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,
      19,    29,    42,    43,     7,    14,    31,    51,    52,     9,
      17,    29,    30,    34,    35,    36,    41,    42,    43,    48,
      52,    56,    60,    64,    68,    72,    76,    80,    84,    88,
      92,    97,   101,   105,   112,   113,   117,   118,   119,     2,
       9,    15,    21,    28,    35,    45,    46,    47,     2,    40,
      41,    42,    50,    64,    66,    70,    72,    76,    89,    92,
      96,   100,   104,   108,   109,   113,   122,   132,   146,   149,
     153,   176,   177,   182,   184,   188,   190,   194,   196,   201,
     204,   208,   214,   218,   220,   223,   232,   234,   238,   264,
     268,   270,   274,   276,   280,   280,   280,   284,   286,   288,
     292,   294,   298,   300,   302,   304,   306,   310,   312,   316,
     328,   340,   352,   364,   377,   391,   393,   398,   423,   425,
     429,   431,   436,   445,   454,   463,   473,   483,   485,   489,
     491,   495,   506,   515,   527,   536,   538,   542,   565,   567,
     571,   573,   584,   586,   597,   599,   610,   612,   621,   632,
     640,   649,   653,   655,   659,   661,   667,   669,   671,   675,
     677,   681,   687,   695,   697,   701,   712,   728,   755,   788,
     789,   791,   799,   814,   816,   818,   820,   822,   824,   826,
     828,   830,   832,   834,   836,   838,   840,   842,   845,   847,
     849,   851,   853,   855,   860,   865,   872,   877,   884,   889,
     896,   901,   909,   917,   925,   933,   951,   959,   967,   975,
     983,   991,   999,  1003,  1019,  1027,  1035,  1043,  1051,  1059,
    1067,  1071,  1075,  1079,  1083,  1091,  1099,  1107,  1115,  1135,
       7,    21,    36,    56,    57,    84,    85,    86,    87,    88,
      89,    93,    94,    99,   104,   105,   106,   107,   108,   113,
     120,   121,   122,   139,   146,   153,   163,   173,   185,   193,
     202,   220,   221,   225,   226,   230,   239,   262,   276,   283,
     288,   290,   292,   294,   297,   300,   301,   302,   303,   308,
     312,   313,   318,   325,   330,   331,   332,   333,   334,   335,
     336,   337,   343,   344,   348,   353,   360,   367,   374,   386,
     387,   388,   389,   393,   398,   399,   400,   405,   410,   411,
     412,   413,   414,   415,   420,   440,   469,   470,   474,   478,
     479,   480,   484,   488,   496,   497,   502,   503,   504,   508,
     516,   517,   522,   523,   527,   532,   536,   540,   545,   553,
     554,   558,   559,   563,   564,   570,   581,   594,   608,   622,
     636,   650,   673,   677,   684,   688,   696,   701,   708,   718,
     719,   720,   721,   722,   729,   736,   737,   742,   743,     9,
      19,    29,    39,    49,    59,    69,    79,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   114,   115,   116,   117,   118,   119,
     124,   125,   130,   131,   132,   137,   138,   139,   142,   143,
       8,    20,    33,    46,    58,    70,    86,    87,    91,    95,
       7,     1,    30,    53,    54,    59,    63,    68,    72,    80,
      81,    85,    86,    91,    92,    96,    97,   102,   103,   104,
     105,   106,   111,   119,   123,   128,   129,   134,   138,   143,
     147,   151,   155,   159,   163,   167,   171,   175,   179,   183,
     187,   191,   195,   199,   203,   211,   217,   218,   219,   224,
     228,    47,    48,    52,    53,    68,    69,    76,    84,    92,
     100,   108,   116,   127,   128,   155,   160,   168,   184,   201,
     218,   235,   236,   255,   259,   263,   267,   271,   280,   290,
     299,   308,   318,   328,   339,   353,   370,   370,   374,   374,
     378,   378,   382,   388,   395,   399,   400,   404,   405,   419,
     426,   433,   443,   444,   447,   459,   470,   478,   483,   488,
     493,   498,   506,   514,   519,   524,   531,   532,   536,   537,
     538,   542,   549,   550,   554,   555,   559,   560,   561,   565,
     566,   570,   571,   587,   588,   591,   600,   611,   612,   613,
     616,   617,   618,   622,   623,   624,   625,   629,   630,   634,
     636,   652,   654,   659,   662,   670,   674,   678,   682,   686,
     690,   697,   702,   709,   710,   714,   719,   723,   727,   735,
     742,   743,   748,   749,   753,   754,   759,   761,   763,   768,
     788,   789,   791,   796,   797,   801,   802,   805,   806,   831,
     832,   837,   841,   842,   846,   847,   851,   852,   853,   854,
     855,   859,   872,   879,   886,   893,   894,   898,   899,   903,
     904,   908,   909,   913,   914,   918,   919,   923,   934,   935,
     936,   937,   941,   942,   947,   948,   949,   958,   964,   973,
     974,   987,   988,   992,   993,   997,   998,  1004,  1010,  1018,
    1027,  1035,  1044,  1053,  1057,  1062,  1066,  1076,  1089,  1090,
    1093,  1094,  1095,  1098,  1106,  1116,  1117,  1120,  1128,  1137,
    1141,  1148,  1149,  1153,  1162,  1166,  1191,  1195,  1208,  1222,
    1237,  1249,  1262,  1276,  1290,  1303,  1318,  1337,  1343,  1348,
    1354,  1361,  1362,  1370,  1374,  1378,  1384,  1391,  1396,  1397,
    1398,  1399,  1400,  1401,  1405,  1406,  1418,  1419,  1424,  1431,
    1438,  1445,  1477,  1488,  1501,  1506,  1507,  1510,  1511,  1514,
    1515,  1520,  1521,  1526,  1530,  1536,  1557,  1565,  1578,  1581,
    1585,  1585,  1588,  1589,  1591,  1596,  1603,  1608,  1614,  1619,
    1625,  1631,  1637,  1646,  1648,  1651,  1655,  1656,  1657,  1658,
    1659,  1660,  1665,  1685,  1686,  1687,  1688,  1699,  1713,  1714,
    1720,  1725,  1730,  1735,  1740,  1745,  1750,  1755,  1761,  1767,
    1773,  1780,  1802,  1811,  1815,  1823,  1827,  1835,  1847,  1868,
    1872,  1878,  1882,  1895,  1903,  1913,  1915,  1917,  1919,  1921,
    1923,  1928,  1929,  1936,  1945,  1953,  1962,  1973,  1981,  1982,
    1983,  1987,  1987,  1990,  1990,  1993,  1993,  1996,  1996,  1999,
    1999,  2002,  2002,  2005,  2005,  2008,  2008,  2011,  2013,  2015,
    2017,  2019,  2021,  2023,  2025,  2027,  2032,  2037,  2043,  2050,
    2055,  2061,  2067,  2098,  2100,  2102,  2110,  2125,  2127,  2129,
    2131,  2133,  2135,  2137,  2139,  2141,  2143,  2145,  2147,  2149,
    2151,  2153,  2155,  2158,  2160,  2162,  2165,  2167,  2169,  2171,
    2173,  2178,  2183,  2190,  2195,  2202,  2207,  2214,  2219,  2227,
    2235,  2243,  2251,  2269,  2277,  2285,  2293,  2301,  2309,  2317,
    2321,  2337,  2345,  2353,  2361,  2369,  2377,  2385,  2389,  2393,
    2397,  2401,  2409,  2417,  2425,  2433,  2453,  2475,  2486,  2493,
    2507,  2515,  2523,  2543,  2545,  2547,  2549,  2551,  2553,  2555,
    2557,  2559,  2561,  2563,  2565,  2567,  2569,  2571,  2573,  2575,
    2577,  2579,  2581,  2583,  2585,  2589,  2593,  2597,  2611,  2612,
    2616,  2630,  2631,  2632,  2639,  2643,  2647,  2650,  2661,  2666,
    2668,  2679,  2703,  2714,  2725,  2729,  2736,  2740,  2745,  2762,
    2768,  2772,  2779,  2787,  2795,  2806,  2826,  2862,  2873,  2874,
    2881,  2887,  2889,  2891,  2895,  2904,  2909,  2916,  2931,  2938,
    2942,  2946,  2950,  2954,  2964,  2973,  2995,  2996,  3000,  3001,
    3002,  3006,  3007,  3014,  3015,  3019,  3020,  3025,  3033,  3035,
    3049,  3052,  3079,  3080,  3083,  3084,  3095,  3101,  3108,  3117,
    3134,  3179,  3187,  3195,  3203,  3211,  3232,  3233,  3236,  3237,
    3241,  3251,  3252,  3256,  3257,  3261,  3268,  3269,  3274,  3275,
    3280,  3281,  3284,  3285,  3286,  3289,  3290,  3293,  3294,  3295,
    3296,  3297,  3298,  3299,  3300,  3301,  3302,  3303,  3304,  3305,
    3306,  3309,  3311,  3316,  3318,  3323,  3325,  3327,  3329,  3331,
    3333,  3335,  3337,  3351,  3353,  3358,  3362,  3369,  3374,  3380,
    3384,  3391,  3396,  3403,  3408,  3416,  3420,  3426,  3430,  3439,
    3450,  3451,  3455,  3459,  3466,  3467,  3468,  3469,  3470,  3471,
    3472,  3473,  3474,  3475,  3485,  3489,  3496,  3503,  3504,  3520,
    3524,  3529,  3533,  3548,  3553,  3557,  3560,  3563,  3564,  3565,
    3568,  3575,  3585,  3599,  3600,  3604,  3615,  3616,  3619,  3620,
    3623,  3627,  3634,  3642,  3653,  3654,  3659,  3660,  3664,  3665,
    3666,  3670,  3679,  3687,  3703,  3704,  3709,  3710,  3720,  3721,
    3725,  3726,  3730,  3731,  3734,  3750,  3758,  3768,  3769,  3772,
    3773,  3776,  3780,  3781,  3785,  3786,  3789,  3790,  3791,  3801,
    3802,  3806,  3808,  3814,  3815,  3819,  3820,  3823,  3834,  3837,
    3848,  3852,  3856,  3868,  3872,  3881,  3888,  3926,  3930,  3934,
    3938,  3942,  3946,  3950,  3956,  3973,  3974,  3975,  3976,  3980,
    3981,  3982,  3983,  3987,  3988,  3989,  3990,  3994,  3995,  3998,
    4000,  4005,  4006,  4009,  4013,  4014,     7,    18,    19,    23,
      24,    25,    26,    27,     7,    26,    50,    73,    80,    85,
      86,    87,    88,     8,    33,    62,    66,    67,    72,    73,
      78,    79,    83,    84,    89,    90,     7,    16,    25,    34,
      43,    52,     5,    12,    22,    23,     7,    19,    33,     9,
      16,    26,    33,    44,    45,    50,    51,    52,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    90,    91,
      92,    93,    98,    99,   104,   108,   116,   117,   122,   123,
     124,   130,   135,   143,   144,    10,    16,    22,    28,    38,
      39,    47,    58,    70,    78,    86,    93,   103,   105,   111,
     115,   119,   134,   141,   142,   143,   147,   148,     7,    14,
      20,    28,    29,     8,    22,    36,    48,    56,    70,    71,
      72,    73,    74,    87,    88,    93,    94,    98,    99,     7,
      18,    31,    35,    42,    53,    54,    60,    61,     9,    19,
       7,    18,    25,    34,    35,    39,    40,     2,     7,    15,
      26,    27,    34,     3,    10,    17,    24,    31,    38,    45,
      52,    61,    61,    63,    63,    65,    66,    70,    71,     6,
       8,    21,    34,    47,    65,    87,    88,    89,    90,    11,
      24,    37,    54,    55,    56,    61,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DESTINATION", "DETACH",
  "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P",
  "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID",
  "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE",
  "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
  "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
  "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "JSON", "KEEP", "KEY",
  "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
  "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE",
  "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
  "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
  "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
  "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PATH", "PATHS", "PERCENT", "PIVOT",
  "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION",
  "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY", "PUBLICATION",
  "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK",
  "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX",
  "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
  "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SET", "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "qualified_name", "ColId", "ColIdOrString", "Sconst",
  "indirection", "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_unreserved_keyword", "pgq_col_name_keyword", "CreateFunctionStmt",
  "macro_alias", "param_list", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "ExecuteStmt", "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_by_name_or_position", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_or_action",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "set_clause_list_opt_comma", "index_params",
  "set_target", "LoadStmt", "file_name", "PGQ_IDENT",
  "DropPropertyGraphStmt", "VertexOrNode", "EdgeOrRelationship",
  "CreatePropertyGraphStmt", "VertexTableDefinitionList",
  "KeySpecification", "KeyDefinition", "KeyReference", "LabelList",
  "Discriminator", "VertexTableDefinition", "EdgeTableDefinitionList",
  "EdgeTableDefinition", "AreOptional", "IdentOptionalAs",
  "QualifiednameOptionalAs", "PropertiesList", "ExceptOptional",
  "PropertiesSpec", "PropertiesClause", "GraphTableWhereOptional",
  "GraphTableStmt", "ColumnSpec", "ColumnList", "KeepOptional",
  "PathOrPathsOptional", "GroupOrGroupsOptional", "PathVariableOptional",
  "PathModeOptional", "TopKOptional", "PathPrefix", "PathPatternList",
  "PathPattern", "PatternUnion", "KleeneQuantifierOptional",
  "KleeneOptional", "CostNum", "CostDefault", "CostOptional", "SubPath",
  "EnclosedSubPath", "PathElement", "PathSequence", "PathConcatenation",
  "OrLabelExpression", "AndLabelExpression", "ComposedLabelExpression",
  "LabelExpression", "LabelExpressionOptional", "IsOrColon", "ArrowRight",
  "ArrowLeftBracket", "AbbreviatedEdge", "VariableOptional",
  "FullElementSpec", "EdgePattern", "VertexPattern", "pgq_expr",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3241)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2137)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7831,   480,   616, -3241, -3241,   299,   480, 51846, 66360,   480,
     163,  2665, 53850, -3241,   308,  2933,   480, 56856, 73781,   366,
     285, 34594,   405, 57357, 57357, -3241, -3241, -3241, 66360, 56856,
   57858,   480,   369, 66861, -3241,   480, 36598, 54351,   238, -3241,
   56856,    68,   103, 58359, 56856, 41609,   592,   357, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,   381,
   -3241, -3241, -3241, -3241,   378, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241,   168, -3241,   110,   181, 34594, 34594,   926,
     420, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, 36097,
   -3241, -3241, -3241, -3241, 58860, 56856, 59361, 54852, 59862, -3241,
     962, -3241,   221, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241,   222, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,   223,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241,   225, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
     -60,   226, -3241, -3241,   227, -3241,   505, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,  2963, 56856,
     580,   954,   673,   859, 60363, -3241, -3241, 56856, -3241, -3241,
     700,   847, -3241, -3241, 55353, -3241, -3241, -3241,   878,  1090,
     862, -3241, -3241,   703, -3241,   190, -3241, -3241,   728,   710,
   -3241,  1067, -3241, -3241, -3241, -3241, -3241, -3241, -3241,   891,
   -3241, 70368, -3241, 67362, 60864, 61365, -3241,   738,  2923,  4674,
   73798, 33589, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,   381,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, 57357, 66360, 57357,   767,   792,  1152,
     808,   826, 35095,   851, 37100,   864,   868,  1184,   874,   887,
     904,   927,   103, 33088,   941,   -60, -3241, 61866, 61866,   437,
    2895, -3241, 61866, 62367, -3241,   956, -3241,   962, -3241, -3241,
   -3241, -3241, -3241,   514,   947, -3241,   979,  1251, -3241, -3241,
   -3241,   970, -3241, -3241,  1204, 23113, 23113, 67863, 67863,   962,
   67863,  1035, -3241, -3241,    81, -3241,  2963, -3241, -3241,   926,
    1023,   -60, -3241, -3241, 54351, -3241, -3241,   319,  1380, 23113,
   56856,  1032, -3241,  1038,  1032, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241,   103, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241,  1316,  1043,  1053, -3241,  7831, -3241, 56856,  1412,  1285,
   54351,   817,   817,  1527,   817,   714,   789,  3898,  2166, -3241,
    1664, -3241,  1070,  1169,  1101,  1370, -3241,  1023,  1455,  1008,
    1272,  1490,  4818,  1494,  1009,  1506,  1076,  1636, 23113, 49341,
     -60, -3241, 14086,  1187,  1170, -3241, -3241, -3241, -3241,  1139,
   56856,  1437, -3241,  1677, -3241, -3241,  1248, 62868, 63369, 63870,
   64371,  1638, -3241, -3241,  1604, -3241, -3241, -3241,  1277, -3241,
   -3241, -3241, 56856,   152, -3241, -3241, -3241, -3241, -3241, -3241,
    1300, -3241,  1300,  1300, -3241, -3241, -3241, -3241,  1260,  1260,
    1469,  1288, -3241, -3241, -3241,  1660, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241,  1303,  1095, -3241,  1300,
   -3241,  1260, -3241, -3241, -3241, -3241, -3241, -3241, -3241, 72813,
   -3241, -3241, -3241, -3241,   657,   772, -3241,  1320, -3241, -3241,
   -3241, -3241, -3241,   108,  1338, -3241,  1811, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241,  1345, -3241,  2912,  1260,  1715,
    1356,   200, -3241,  1750,   243, -3241,  1770,  1634, 23113, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,   103,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241,   756, -3241, -3241,
   46253, 73798,  1495,  1417, -3241, -3241, 23113, 23113,  1425,  1410,
   73299, -3241, 61866, 62367, 23113, 56856, -3241, 23113, 27361,  1431,
   23113, 23113, 14617, 23113, 32086, 61866,  2895,  1433, -3241,   809,
   56856,  1432, -3241,  1531,  1531,   369, 34594,  1734, -3241,   967,
    1730,  1658, -3241, 34594,  1658,   991,  1438,  1733,  1658, -3241,
     281,  1738,  1531, 37601,  1447, -3241,  1531,  1669, -3241, -3241,
   46253, 17272, 70854,  1927, -3241,  1732, 66360,  1452, -3241, -3241,
   -3241, -3241, -3241, -3241,   777,  1968,   252,  1969, 23113,   252,
     252,  1457,   231,   231, -3241,  1458, -3241,   232,  1460,  1461,
    1970,  1977,   210,   170,  1095,   252, 23113, -3241,   231,  1464,
    1981,  1468,  1984,   228,   233, -3241,   241, 23113, 23113, 23113,
    1842, 23113, 13555, -3241, 56856,  1983, 49341,   682, -3241,   -60,
    1470,   962, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
     220,  6204, -3241, -3241, -3241,  1510, -3241, -3241, -3241, -3241,
    1691, 23113, -3241, -3241,  1471,  1734, -3241,   244, -3241, -3241,
    1734, -3241, -3241, -3241, -3241, -3241,   286,  1892, 45251, 45752,
   66360,   -60, -3241, 68364, -3241, -3241, -3241, -3241, -3241, -3241,
     888, -3241,   381, 47866,  1474,  1478,  1032, 56856, 56856,  1958,
   73299, -3241, -3241, -3241,  1038, 54351,   131,  1780,  1614, -3241,
   -3241,   926,   926, 18334,   867,   215,   694, 18865, 23644,  1836,
    1716,   277,   634,  1840, -3241,  1722,  1949, 27361, 23113, 23113,
     714,   789, 23113, -3241, -3241, -3241,  1772, 56856, 52347,  1178,
    1200,  1493,  1581,  1496,    45,  1922, -3241,  1497, -3241,  1591,
   56856, 72813,   266, -3241,  1965,   266,   266,   255,  1967,  1597,
     294,  1764,   721,   -55,  2466, -3241,  1497, 54351,   161,   752,
    1497, 56856,  1599,   812,  1497, 66360,  1417, 43126,  1502, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241,   164, 17272, -3241,  1211,  1499,  1693,   404,   203,  1699,
    1712, 17272,  1754,  1789,   194,  1814,  1825,  1833,  1841,  1847,
    1860,  1863,  1872,   174,  1875,  1878,  1880,  1883,  1885,  1887,
   -3241,  1893,   196,  1895,   248, 17272,  1899, -3241,   198, -3241,
     208, 47866,    40, -3241, -3241,  1903,  1601, 66360,  1555, 56856,
    1114,    56,  1886,  1946, 71340, 56856,  1777,  2466,  1778,  1538,
    2021,  1787,  1170,  1788,  1546, -3241, 68865,  2065, -3241,   206,
   -3241, -3241, -3241, -3241, -3241,  1550, -3241, -3241, 23113, -3241,
   -3241, -3241,  2063, -3241, 70854, 70854,  1300,  1300, -3241, -3241,
    2037,  1651,  1652,  2063, -3241,  2063, -3241, 66360, -3241, -3241,
   70854, -3241, 66360,  1566,  1567,  2063, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241,  2063,  1655, -3241,  1656,  1661,  1663, -3241, -3241,
   -3241, -3241, -3241, 66360, 49341,  1569, 66360, -3241, 56856, 56856,
   -3241, 56856, 66360,  1577, 73798, 50844, -3241, -3241, -3241, -3241,
    1096,  1331, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241,   962, 49341, -3241,  2134, 46874,  1579, 23113, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,  1580,  1918,
   -3241, -3241, -3241,  5513,  1584, 46924,  1586, 27361, 27361,   -60,
    2032, -3241, -3241, 27361,  1587, 51345, 46792,  1585,  1589, 47273,
   19396, 23113, 19396, 19396, 47314, -3241,  1592, 47404, 61866,  1596,
   56856, 55854, -3241, -3241, -3241, 23113, 23113,  2895, 56355,  1633,
   -3241, 34594, -3241,  1890, 34594, -3241, -3241,  4619, -3241, 34594,
    1894, 23113, 34594, -3241,  1848,  1849,  1605, 34594, -3241, 56856,
    1611, 56856, -3241, -3241, -3241, -3241, -3241,  1600,   914, -3241,
     965,  1947, -3241, -3241, 23113, 23113, -3241, 47866,  1662, 23113,
   -3241, 23113, 48050, 42617, 19927, 48050,  2123,  2123, 40106, -3241,
    1783, 47446, -3241,  1619,  1956,  7164,  1620,  1612, -3241,  1624,
    1621, -3241, -3241, 43748,   191,   -60,   -60, 23113, -3241, 23113,
    3660,  3660, -3241,   304, 70854, 23113, 23113, 23113, 23113, 23113,
   23113, 23113, 23113, 48840,  1720,   201, 66360, 23113, 23113,  1635,
     844, -3241, 23113,  1871, -3241,  1637, 23113,  1725,  1014, 23113,
   23113, 23113, 23113, 23113, 23113, 23113, 23113, 23113, -3241, -3241,
   30534,   328,   761,  1976,  1998,   -24,   329, 23113,  1994, 14086,
   -3241,  1994, -3241, -3241, -3241, -3241, -3241,   245, -3241, -3241,
   -3241,  1600, -3241,  1600, -3241, 66360, -3241, 56856,   319, 53349,
   23113, -3241, -3241,  1643,  1650,  1653,  1665,   332,    65, -3241,
   -3241,  1718, -3241, -3241, 56856, 40607,  1952, -3241,   321,  1666,
   -3241, 46751,  1919,  1952,   926, -3241, -3241, 28423,  1792,  1962,
    1900, -3241, -3241,  1879,  1884, -3241,  1672, 47958, 24175, 24175,
   -3241,  1381, 47866,  1548, -3241, -3241, -3241, -3241, -3241, -3241,
     869, -3241, 56856,    46, 38102, -3241,  1675,   126, -3241,  2288,
    2005,  1979,  1836,   634,  1685, -3241,  1739,  1688, 69366, 56856,
    1988,  1936,  1990,   -68, 70854, -3241, -3241, -3241, -3241, 56856,
   66360, 64872, 69867, 49842, 56856, 49341, -3241, -3241, -3241, -3241,
   56856,  1059, 56856,  9656, -3241, -3241, -3241,   266, -3241, -3241,
   -3241, -3241, -3241, 66360, 56856, -3241, -3241,   266, 66360, 56856,
     266, -3241,  1746, 56856, 56856, 56856, 56856,  1766, 56856, 56856,
   -3241, -3241, -3241, 23113,    77,    77,  1916, 15148,   211, -3241,
   23113, 23113,  1889, -3241, -3241,   981,  1938,    83, -3241,  1753,
   56856, 56856, 56856, 56856, -3241, -3241,  1807, 56856,  2645, -3241,
   -3241, -3241, -3241, -3241,  1711, -3241,  1719,  2079,  2466, -3241,
    2085, 52848,   936,  1375,  2087,  1759,  2090, 15679,  2202,  1973,
   -3241, -3241,  1959, -3241, -3241, 23113,  1731,  1736,   108,   986,
   -3241, -3241,  1735,  1567,  1757,  1758,  1742,  1747, 70854,   997,
   -3241,  1013,  2063,   162,  1749,  1751,  1657,  1379,  1271,  1549,
     200, -3241, 49341, -3241,   243, -3241,  1985,   206, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241,  1417, 34093, -3241,  1025, -3241,
   -3241,  2229,   962,  2229,   870, -3241, -3241,  2229, -3241,  2212,
    2229, -3241, 70854, -3241,  7507, -3241, 23113, 23113, -3241, 23113,
    2103, -3241,  2267,  2267, 70854, 27361, 27361, 27361, 27361, 27361,
   27361,   819,  1464, 27361, 27361, 27361, 27361, 27361, 27361, 27361,
   27361, 27361, 28954,   317, -3241, -3241,  1054,  2240, 23113, 23113,
    2116,  2103, 23113, -3241, 70854,  1763, -3241,  1767,  1773, 23113,
   -3241, 70854, -3241, 56856,  1774,    -4,    87, -3241,  1765,  1781,
   -3241,  1734, -3241,  1015,  1024, 56856,   214,  3975,  4928, -3241,
   -3241, 23113,  2104,  4619, 34594, -3241, 23113,  1790, -3241, -3241,
   34594,  2126, -3241, -3241, -3241, 38603,  4619, 70854,  1055, -3241,
   56856, 70854,  1065, 46253, -3241, 17272, -3241, 70854, -3241, -3241,
   -3241, -3241, -3241, -3241,  1776,  1779, 23113,   104, -3241,  8161,
    3658, -3241,  1791, -3241,  1785, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
    1794, -3241,  1793, -3241,  1796, 56856, -3241, 24706, -3241, 66360,
   -3241, -3241, 23113, 23113, 56856, -3241,  1842, -3241,  1803,  8747,
   -3241, -3241, -3241,   288,   968,  9469,   329,  5637,  5637,  5637,
   48050, -3241, -3241, -3241,  1808, -3241, 27361, 27361, -3241,  5591,
    4228, 13555, -3241, -3241,  2153, -3241,  1103, -3241,  1809, -3241,
   -3241,  4890, -3241, 42617, 11397, 23113,   216, -3241, 23113,  1635,
   23113,  1902,  5637,  5637,  5637,   272,   272,   288,   288,   288,
     968,   329, -3241, -3241, -3241,  1813, 23113, 49341, -3241,  1816,
    1821,  2171,  1468, 23113, -3241, -3241, 34594,  1633,    40,  1633,
    2063,  3660, -3241,  1038, -3241, -3241,  1038, 47866, 56856, -3241,
    1947, -3241,   627,   193,  2319,   262,   332, 73299,  1865, 34594,
    1866,  2306,  2289, 66360, -3241, -3241,  1828,  1994,  1844, -3241,
   -3241,  1868, 23113,  2411,  1868, -3241,  1952,     3,  2075,  1353,
    1353,  1381,  2077, -3241, -3241,  1914, -3241, -3241, -3241, 23113,
   16210,  1560, -3241,  1568, -3241, -3241, -3241, -3241, -3241,  1832,
   -3241,  2128, -3241, 56856, -3241, -3241, 27361,  2317, 23113, 39104,
    2318,  2113, -3241, -3241, -3241,  1950,  1497, 23113,  2105, -3241,
     160,  1864,  2232,   401,  2181, 66360, -3241,   273,   309, -3241,
     836,  2238,   206,  2239,   206, 49341, 49341, 49341,  1092, -3241,
   -3241, -3241,   962, -3241,   524,  1093, -3241, -3241, -3241, -3241,
    1961,   974,  2466,  1497, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241,   292,   994,  1497,  1964, -3241,  1966, -3241,  1974,  1003,
    1497, -3241, -3241, 47866,  1876,   211,   211,   211, 17272, -3241,
    2114,  2117,  1891, 47866, 47866, -3241,   247, -3241, 66360, -3241,
   -3241, -3241,  1889,  1946, 56856,  2466,  1888,  2358,  1170,  1546,
    1897, -3241,  2052,   606,   818, -3241, 66360, 56856, 56856, 56856,
   65373, -3241, -3241, -3241,  1901,  1896, -3241,    -5,  2121,  2122,
   56856,  1933, 56856,  1496,  2376, 56856, -3241,  1098, 20458,  2270,
   56856,  1907, -3241, -3241, -3241, -3241,  2063, -3241, -3241,   623,
     623, -3241, -3241, 66360, -3241,  1915, -3241,  1921, -3241, -3241,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   66360, -3241, -3241, -3241, 50343, -3241, -3241, -3241, -3241, 49341,
   -3241,   962, -3241,   962,  2151, 66360, 44249,   962, 44750,   962,
    1917, -3241, 47866,  8894, 47866,  2116, -3241,   169,  2267,  1851,
    1851,  1851,  3477,  2263,   242,  1924,  1851,  1851,  1851,   354,
     354,   169,   169,   169,  2267,   317,   956, 51345,  1926, -3241,
   47866, 47866, -3241, -3241,  1920, -3241, -3241, -3241, -3241,  1929,
    1930, -3241, -3241, -3241, -3241, -3241, -3241, 66360,  1369,  1633,
     238,   238,   238,   238, -3241, 56856, 56856, 56856, 47866,  2381,
    2249, -3241,  4619, 47866, 56856, -3241, 31065, 56856, -3241,  2285,
   -3241,  2375, -3241, 56856,  1099, -3241, -3241, -3241, -3241, -3241,
   47569, 23113, -3241,  2313, -3241, 23113, 23113, -3241, 42617, -3241,
   -3241,  1939, 13555, 47795, -3241,  2260,  9216, 47866, -3241,  1783,
   -3241,  3660, 23113,  3997,  4964, 23113,  1941, 23113,  2291, -3241,
   -3241,  1951, -3241, -3241, 70854, 23113,  1945,  6546, 27361, 27361,
    6721, -3241,  7144, 23113, 13555, -3241, 43167,  1942,  1971,  1916,
   20989, -3241,  2167,  1948, -3241,  2104,   211,  2104,  1955, -3241,
   -3241, -3241,  1960,  1628, -3241, -3241,   165,  1628,  1628,  1628,
   -3241, -3241, -3241,   165,   165,   165, -3241,   159,   615, 73299,
   73299,   262,   262,  1954, -3241, -3241, 73299,   788, -3241, -3241,
   -3241, -3241, 26830,  2387, -3241, 23113,  2120, 66360,   523,  1042,
    1100, -3241,   -60, 40607,  1866, 23113,   202, -3241, -3241,  1975,
   -3241,  1868, -3241, -3241, -3241,  2192, -3241, -3241, -3241, 56856,
   -3241,  1972, -3241, 38102,  2304, 13555, -3241, 38102, 56856, 56856,
    9290,  2343, -3241, 66360, 66360, 66360, -3241, 66360,  1978,  1980,
     699,  1987,   932, -3241,  2072,   699,  2321,   732,  1496,   294,
    3697,   394, -3241, -3241, -3241,  2055, 56856, -3241, 66360, -3241,
   -3241, -3241, -3241, -3241, 49842, -3241, -3241, 42115, 49341, -3241,
   49341, 56856, 56856, 56856, 56856, 56856, 56856, 56856, 56856, 56856,
   56856, -3241,  1982,  1989,  1993,  1916, -3241, -3241, -3241, -3241,
   -3241, -3241,   -55, -3241,   247,  1991, -3241, 52848,  2963,  1759,
    2462, 56856,  1946,   810, 65859, -3241,  1995,  1996,  1106,  2466,
    1997,  2463, -3241,   936, 52848, -3241, -3241, -3241,  2423, -3241,
     738,   350, -3241,  1170, -3241,  2963,  1546, -3241,  2963, 47866,
   66360,  2058, -3241,  1567,  2000, -3241, -3241,  1567, 70854,  1567,
   -3241, -3241,   206,  1111, -3241, -3241, -3241, -3241, -3241, 66360,
    2002, -3241,  2002, -3241, -3241,  2002, -3241, -3241, -3241, -3241,
   27361,  2349,  2007, 70854, -3241, -3241, 56856, -3241, -3241, -3241,
    1159,  2001,  2104, 56856, 56856, 56856, 56856, -3241, -3241, -3241,
   21520, 23113,  2034, -3241,  2008, 17803,  2329, -3241, 30016, -3241,
     246,  2013, 38603, 66360, -3241, -3241, -3241, 23113, 47866, -3241,
   47866, -3241, -3241, -3241,  6630, -3241,  2011,  2015, 66360, 23113,
   -3241, -3241, -3241,   770, 23113, 23113,  5591, -3241,  8638, 23113,
   70854,  1161,  5591,   374, 23113,  5532,  5860, 23113, 23113,  7412,
    9858, -3241, 23113, 16741, -3241,  2017, 23113, 10128, 41108, -3241,
   34594,  2249,  2028,  2249,   962, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241,  1217,   640, -3241, -3241, -3241,   165,  2035,
   -3241,    16,  2036, -3241, -3241,  2042,   262,  2040, -3241, -3241,
   -3241,  2546, -3241, 26830, 26830, 26830, 26830, 48092, -3241,  2253,
    2041, 47866, 23113, -3241, -3241, -3241, -3241,  2096,   515, 36598,
    2271, -3241,  2056, 66360, -3241,  2120, 47866, -3241, -3241, 42617,
   -3241, -3241, -3241, -3241, -3241,  2503,  1839,  2045,  2047, -3241,
    1482, -3241, -3241, 66360,  2049, -3241,  2050,   699, -3241, 66360,
    2091, -3241,   270,  2370,   175, -3241, 23113, -3241,  2464,  2536,
    2072,  2061, 66360, 56856, 27361, -3241,   280,   274, -3241,  2355,
   56856,  2091,  2498, -3241, -3241, -3241,   932, -3241,  2395,  2308,
   -3241,   266, -3241, 23113,   932,  2310,   296, 66360, -3241, -3241,
    1873, -3241, 70854,   206,   206, -3241,  2074,  2076,  2080,  2081,
    2082,  2086,  2088,  2089,  2092,  2093,  2094, -3241,  2095,  2100,
    2101,  2102,  2110,  2112,  2115,  2119,  1303,  2136, -3241,  2137,
    1975,  2139,  2140,  2142,  2143,  2144, 71826,  2145,  2149,  2150,
    2155,  1320,  2156,  1096,  1331, -3241, -3241, -3241, -3241,  2157,
   -3241,  2158, -3241, -3241,  1356,  2109, -3241, -3241, -3241,  2161,
   -3241,  2164, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
     211,  1417,   125, 66360,  2135,  1933,  2570, 22051,  2571,  2159,
     106,   852,  2348,  2162, -3241,   962,  1759, -3241, 52848,  2545,
     688,  2122, -3241,   929,  1933, -3241,  2568,  1759,  2199,  2642,
   -3241,  2396, 66360,  2169, -3241, -3241, -3241, -3241, 50343,  2002,
    6654, 27361, 70854,  1163,  1167, -3241,  2681,  2334,  2249, -3241,
   -3241, -3241, -3241, -3241,  2173,    28,  2174, 13024,  2172, -3241,
   -3241, -3241, -3241, -3241, -3241, 47866, 47866, 66360,  2359, -3241,
   -3241,  2180,  2177, 39605,  2646,  2185, -3241, 17272, -3241,  2507,
   -3241, 32587, -3241, 47866, 23113, -3241, -3241, 43208,  2517,  5591,
    5591,  8638,  1174, -3241,  5591, 23113, 23113,  5591,  5591, 23113,
   -3241,  2195, -3241,  1179, -3241, 10373, -3241, 72312, -3241, -3241,
    2034,   962,  2034, -3241, -3241, -3241, -3241, -3241,   262,   788,
   -3241, -3241,  1865, 31577, -3241,  2190, -3241,   176, -3241,  2194,
   48345, 48345,  2712,  2712, 70854, 26830, 26830, 26830, 26830, 26830,
   26830, 26830,  2293,   254, 66360, 26830, 26830,  1635,   999, -3241,
   26830,  2443, -3241, 26830,  2296,   879, 26830, 26830, 26830, 26830,
   26830, 26830, 26830, 26830, 26830, 26830,   -24, 23113,  2206, -3241,
   -3241, -3241,  2261, -3241, -3241,  1181,  2640,  2120, 23113, -3241,
   -3241,  2211, 38102, -3241, -3241, -3241, -3241, 38102,   699, -3241,
    2384,  2091,  2214, -3241, -3241, -3241, -3241, -3241, -3241, 11186,
   -3241,    71, 23113, -3241,   171,  3477, -3241, -3241, -3241, -3241,
    2091,  1170, -3241, 56856,  2694,  2586, -3241, -3241, 47866, -3241,
   -3241,  2063,  2063, -3241, -3241,  2375, -3241, -3241, -3241, -3241,
    1356,   -80, 42115, 56856, 56856,  2220, -3241, -3241,   -55,  2620,
    1199,   936, -3241,  2963,  2963, 47866, 73299, 56856,  2222,  2413,
     155,  2520, 56856,  2600, 52848, -3241,  2713,  2233, 56856,  1933,
     362,   362, -3241,  2385, -3241,  2386, -3241, -3241,  2714,   330,
   -3241, 22582, 56856, -3241, -3241, 35596, -3241,  6654,  1227, -3241,
   -3241,  2241,  2250, -3241,  2034, 23113,  2251, 23113, -3241, 25237,
    2717,  2236, -3241, 23113,  2301, 29485, -3241, 23113, -3241, 56856,
   61866,    77,  2256, 61866, -3241, -3241, -3241, 23113, -3241,  5591,
    5591,  5591, -3241, -3241, -3241, -3241,  2458,  2359, -3241,  2359,
    1865, -3241,  2674, 31577, 31577, -3241, -3241, -3241,  2273,   788,
    2546, -3241,  1034, 11762,   342,  3516,  3516,  3516, 48345,  2275,
   27361, 27361, -3241,  8103,  3002, -3241,  2607, -3241,  1192, -3241,
    2262, -3241, -3241,  6895, -3241, 48159, 26830,   352, 26830,  1635,
   26830,  2352,  3516,  3516,  3516,   417,   417,   302,   302,   302,
    1034,   342, -3241, -3241,  1240, -3241, 23113,  2963,   -60,  2822,
   66360,    15, -3241, 47866, -3241, -3241, -3241, 56856, -3241, 49341,
   -3241,   699,   -34,  2266, 23113, 11740,  2505, -3241, -3241,  2537,
   -3241,  2595, -3241,  2330,   551,  2346, -3241, -3241, -3241, -3241,
    1417,   962,  1759,  2122,  2199, -3241, -3241,  2159,   187, -3241,
   -3241, 73299,  2762, -3241, 73299,  2274, 56856,  2963,   936,   738,
   -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241,  2963,  2724,  2511,  2733,  2963, 47866,  2058,
   23113,   143, -3241,  1253,  2728, -3241, -3241,  2802,  2359,  2292,
   25237,  2294, -3241,  2299, 66360, 47866,  2438, -3241, -3241,  2314,
   -3241, -3241,   211, 23113, -3241, 43250,  2759,  1916,  2301,  2301,
    2674, 27361, -3241,  2315,   769, -3241, -3241,  2297, 26830,  6252,
    6982, 26830, 26830,  2650, -3241, -3241,  2307, -3241, -3241, 70854,
   26830,  7567, 27361, 27361,  8022, -3241,  9592, 26830,  2320, 23113,
   -3241,   515, -3241, -3241,  2736, 35596,  2702,  1170,   699,  2331,
    1254, -3241, -3241, -3241, -3241, -3241,  2466, -3241, 12339,  2573,
     549,  2556,  2266, 23113, -3241,  2410, -3241, -3241, -3241,  2814,
   -3241, -3241, -3241, -3241, -3241,  2434,  2816, -3241,  1274,  2776,
    2659, 52848,  2347,  2199,  2122,  1933,  2199,  2574, -3241,  2578,
   -3241,  2354, 12424, 66360, 66360,  1759, 35596, 66360,  2356,  2301,
   -3241,  2357, -3241, -3241, -3241, 55854, -3241,  2360,  2361, -3241,
   23113,    82, -3241, -3241, -3241,  6520, -3241, 31577, 31577, -3241,
     907, 26830, 26830,  8103, 10423, 26830, 70854,  1283,  8103, 26830,
    8227, 10211, 26830, 26830, 10044, 56856, -3241,  2403, 56856,  1298,
      64,  2537, 42115, -3241, 49341,  1403,   -34,  2669, -3241, -3241,
   -3241, -3241,   156,  2587, -3241,  2588, -3241, 47866, -3241,  2963,
    2364, 73299, -3241, 73299,  2738, 56856, -3241, 52848, -3241, -3241,
   -3241, -3241, -3241, -3241, 35596,  2728, -3241,   321, -3241,  1633,
   -3241,   321, -3241, -3241, -3241, -3241,   962, -3241,  1585, 25768,
   25768,  2367,  1397, -3241, -3241,  2365, -3241,  2363,  8103,  8103,
   10423,  1311, -3241,  8103, 26830, 26830,  8103,  8103, 26830, -3241,
    2963, -3241,  1633, -3241,  2504,  2556, -3241, -3241, -3241, -3241,
   -3241,   207,   207,  2773, -3241,  2441, -3241,  2199, 56856, -3241,
   -3241,  2379, -3241,  2380,  1312, 66360,  1868, -3241,  1868, 27892,
    2524,   303, 46833, -3241, -3241, -3241, -3241, -3241, -3241, -3241,
   31577, 31577, -3241,  8103,  8103,  8103, -3241, -3241, 40607, -3241,
   -3241,  2876, -3241,   322, -3241, -3241, -3241,  2378,  2501, 73299,
   73299,  1759,   321, -3241, -3241,  2869, -3241, -3241, -3241, -3241,
   -3241, -3241, -3241,  1633,   699, -3241, -3241, -3241, 56856,  2390,
    2677,  1313, -3241,  1327,  1633,  1868, 26299, -3241,  2378, -3241,
    2401,  2581, 56856, -3241, -3241, 73299, -3241, -3241, -3241, -3241,
   56856, -3241, -3241,  2401, -3241,  1332,  2805, -3241,  2677, 56856,
    2401,   106,  2701, 73299,  2659, -3241
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     157,   247,     0,  1497,  1496,  1564,   247,     0,  1445,   247,
     648,   566,     0,  1582,  1564,     0,   247,     0,   157,     0,
       0,     0,     0,     0,     0,   708,   711,   709,     0,     0,
       0,   247,   745,     0,  1581,   247,     0,     0,   737,   710,
       0,  1544,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    16,    17,    19,    20,    21,    24,    25,    26,  1454,
      27,    29,    30,    31,     0,    32,    23,    15,    28,    33,
      34,    35,    36,   684,   671,   750,   683,     0,     0,   156,
     849,   691,    37,    38,    39,    40,    41,    42,    43,  1580,
      44,   246,   245,   239,     0,     0,     0,     0,     0,  1563,
       0,   240,   111,  1606,  1607,  1608,  1609,  2210,  1610,  1611,
    1612,  1613,  1614,  1615,  1616,  2211,  1967,  1617,  1618,  1619,
    1620,  1621,  1968,  1622,  1623,  1624,  1913,  1914,  1969,  1915,
    1916,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1917,
    1918,  1633,  1634,  1635,  1636,  1637,  1919,  1970,  1920,  1638,
    1639,  1640,  1641,  1642,  1971,  1643,  1644,  1645,  1646,  1647,
    1648,  1649,  1650,  2212,  1972,  1651,  1652,  1653,  1654,  1655,
    1656,  1657,  1658,  1659,  1660,  1921,  1922,  1661,  1662,  1663,
    1664,  1665,  1666,  1667,  1668,  1669,  2213,  1670,  1671,  1672,
    1673,  1674,  1675,  1676,  1677,  1678,  2214,  2215,  1679,  1680,
    1681,  1682,  1683,  1684,  1685,  1686,  1687,  1688,  1923,  1689,
    1690,  1691,  1692,  1693,  1924,  1694,  1695,  1696,  1925,  1697,
    1698,  1699,  1973,  1974,  1700,  1701,  1926,  1976,  1702,  1703,
    2216,  1927,  1928,  2217,  1704,  1705,  1706,  1707,  1708,  1709,
    1710,  1711,  1977,  1712,  1713,  1714,  1715,  1716,  1717,  1718,
    1719,  1720,  1721,  1722,  1723,  1978,  1929,  1724,  1725,  1726,
    1727,  1728,  1930,  1931,  1932,  1729,  1979,  1980,  1730,  1981,
    1731,  2218,  1732,  1733,  1734,  1735,  1736,  1737,  1982,  1738,
    1983,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1933,
    1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,
    1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,  1934,  1985,
    1935,  1765,  1766,  1767,  2219,  1936,  1768,  1769,  1986,  1770,
    1937,  1771,  1938,  1772,  1773,  1774,  1775,  1776,  1777,  1778,
    1779,  1780,  1939,  1987,  1781,  1988,  1940,  1782,  1783,  1784,
    1785,  1786,  1787,  1788,  1789,  1790,  2220,  2221,  1791,  1792,
    1793,  1941,  1989,  1794,  1795,  1942,  1796,  1797,  1798,  1799,
    1800,  1801,  1802,  1803,  2222,  2223,  1804,  1805,  1806,  1807,
    1943,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  2224,  1815,
    1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,
    1826,  1990,  1827,  1828,  1829,  1944,  1830,  1831,  1832,  1833,
    1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
    1844,  1845,  1846,  1945,  1847,  1848,  2225,  1849,  1991,  2226,
    1850,  1946,  1851,  2227,  1852,  1853,  1854,  1855,  1856,  1857,
    1858,  1859,  1860,  1861,  1862,  1863,  1947,  1864,  1948,  1865,
    1866,  1867,  1868,  1993,  1869,  1870,  1871,  1872,  1873,  1949,
    1950,  2228,  1874,  1875,  1951,  1876,  1952,  1877,  1878,  1953,
    1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,
    1889,  1890,  1891,  1892,  1893,  1894,  1895,  1954,  1955,  1896,
    1994,  1897,  2229,  1898,  1899,  1900,  1901,  2230,  1902,  1903,
    1904,  1905,  1906,  1907,  1908,  1956,  1957,  1958,  1959,  1960,
    1961,  1962,  1963,  1964,  1965,  1966,  1909,  1910,  1911,  1912,
       0,   112,   113,  1391,   114,  1589,     0,  1368,   111,  1926,
    1933,  1947,  1443,  1444,   112,   114,   242,   647,     0,     0,
       0,     0,     0,     0,     0,   560,   559,     0,  1434,   565,
       0,     0,   116,   107,  1796,   115,  1367,   105,  1563,     0,
       0,   586,   587,     0,   596,     0,   579,   584,   580,     0,
     605,     0,   598,   606,   588,   578,   599,   589,   577,     0,
     607,     0,   582,     0,     0,     0,   243,   208,   566,     0,
     157,     0,  1458,  1459,  1460,  1461,  1462,  1463,  1468,  1464,
    1465,  1466,  1467,  1469,  1470,  1471,  1472,  1473,  1449,  1454,
    1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,
    1484,  1485,  1486,  1487,     0,  1445,     0,     0,  1919,  1970,
    1924,     0,     0,  1937,     0,  1940,  1941,  1830,  1948,  1951,
    1952,  1953,  1954,     0,   918,   115,   109,   902,     0,   686,
     853,   863,   902,   907,  1168,   930,  1169,     0,   117,  1532,
    1531,  1529,  1528,   196,  1408,  1569,  1949,  1874,  1585,  1570,
    1567,  1568,   244,   744,   742,     0,  1339,  1702,  1741,  1834,
    1845,  1949,  1505,  1509,     0,   241,     0,  1587,  1574,     0,
    1575,   115,   692,   736,     0,   248,  1543,     0,  1548,     0,
    1810,   719,   722,  1402,   720,   249,  2231,  2232,  2233,  2234,
    2235,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2243,  2244,
    2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,  2254,
    2255,  2256,  2257,  2258,  2259,  2260,  2261,  2262,  2263,  2264,
    2265,  2266,  2267,  2268,  2269,  2270,  2271,  2272,  2273,  2274,
    2275,  2276,  2277,  2278,  2279,  2280,  2281,  2282,  2283,   250,
     251,     0,   684,     0,     1,   157,  1453,  1558,     0,   163,
       0,   740,   740,     0,   740,     0,   676,     0,     0,   684,
     679,   683,   850,  1584,  1949,  1874,  1573,  1576,  1710,     0,
       0,  1710,     0,  1710,     0,  1710,     0,  1566,  1325,     0,
    1369,   118,     0,     0,   531,   564,   563,   562,   561,   566,
       0,  1710,  1418,     0,   616,   617,     0,     0,     0,     0,
       0,  1429,   108,   106,     0,  1561,   594,   595,     0,   585,
     581,   583,     0,     0,  1393,  1995,  1996,  1997,   973,  1998,
    1002,   980,  1002,  1002,  1999,  2000,  2001,  2002,   969,   969,
    1676,   982,  2003,  2004,  2005,  1710,  2006,  2007,   970,   971,
    1007,  2008,  2009,  2010,  2011,  2012,     0,     0,  2013,  1002,
    2014,   969,  2015,  2016,  2017,   974,  2018,   940,  2019,     0,
    2020,   972,   941,  2021,  1010,  1010,  2022,     0,   997,  2023,
    1394,  1395,  1396,   604,     0,   608,   955,   956,   957,   958,
     983,   984,   959,   989,   990,   994,   960,  1042,   969,  1710,
    1397,   604,   600,  1710,   604,  1361,  1710,     0,     0,   204,
    1451,  1488,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,
    2033,  2032,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,
    2042,  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,
    2052,  2055,  2053,  2054,  2056,  2057,  2058,  2059,  2060,  2061,
    2062,  2063,  2064,  2065,  2066,  2067,  2068,  2070,  2069,  2071,
    2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,
    2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2090,  2091,
    2092,  2093,  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,
    2102,  2103,  2104,  1489,  1490,  1491,  1503,     0,  1504,  1494,
    1457,   157,     0,   646,  1442,  1530,     0,     0,     0,  1283,
       0,   865,   902,   907,     0,     0,   920,     0,  1298,     0,
    1304,     0,     0,     0,   902,   691,     0,   863,   919,   110,
       0,   900,   901,   791,   791,   745,     0,   726,   912,     0,
       0,   915,   913,     0,   915,     0,     0,     0,   915,   911,
     872,     0,   791,     0,   900,   903,   791,     0,   922,  1448,
       0,     0,     0,     0,  1571,     0,     0,     0,  1371,  1373,
    1374,  1251,  1384,  1155,     0,  1914,  1915,  1916,  1319,  1917,
    1918,  1920,  1921,  1922,  1109,  1923,  1382,  1925,  1927,  1928,
    1930,  1931,  1932,  1933,  1934,  1935,     0,  1383,  1938,  1777,
    1943,  1944,  1946,  1949,  1950,  1381,  1955,     0,     0,     0,
    1350,  1274,     0,  1154,     0,     0,     0,  1320,  1326,  1150,
       0,     0,   963,   964,   985,   986,   965,   991,   992,   966,
       0,  1346,  1043,  1138,  1334,  1187,  1159,  1167,  1146,  1218,
    1139,     0,  1149,  1141,  1342,   726,  1340,     0,  1142,  1370,
     726,  1338,  1508,  1506,  1512,  1507,     0,     0,     0,     0,
       0,   110,  1550,  1551,  1542,  1540,  1541,  1539,  1538,  1545,
       0,  1547,  1454,  1269,  1271,     0,   721,     0,     0,     0,
     301,   674,   673,     3,  1402,     0,     0,     0,     0,   738,
     739,     0,     0,     0,     0,     0,     0,     0,     0,   834,
     765,   766,   768,   831,   835,   843,     0,     0,     0,     0,
       0,   680,     0,  1583,  1579,  1577,     0,     0,     0,   141,
     141,     0,     0,     0,     0,     0,    99,    48,    92,     0,
       0,     0,     0,   222,   235,     0,     0,     0,     0,     0,
     232,     0,     0,   215,   209,   211,    50,     0,   141,     0,
      46,     0,     0,     0,    52,     0,   646,  1324,     0,   122,
    2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2146,
    2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2156,
    2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2165,  2166,
    2167,  2168,  2169,  2170,  2171,  2172,  2173,  2174,  2175,  2176,
    2177,  2178,  2179,  2180,  2181,  2182,  2183,  2184,  2185,  2186,
    2187,  2188,  2189,  2190,  2191,  2192,  2193,  2194,  2195,  2196,
    2197,  2198,  2199,  2200,  2201,  2202,  2203,  2204,  2091,  2205,
    2206,  2207,  2208,  2209,   120,   121,   124,   123,   125,   126,
     119,   111,     0,  2105,  1967,  1968,  1969,  1970,  1920,  1971,
    1972,     0,  1973,  1974,  1926,  1976,  1977,  1978,  1979,  1980,
    1981,  1982,  1983,  1933,  1985,  1986,  1987,  1988,  1989,  1990,
    2131,  1991,  1947,  1993,  1953,     0,  1994,  1160,   112,  1387,
     114,  1277,   750,  1275,  1403,     0,     0,     0,   644,     0,
       0,     0,     0,  1414,     0,     0,  1710,   203,  1710,   531,
       0,  1710,   531,  1710,     0,  1428,  1431,     0,   597,   604,
     593,   591,   590,   592,  1001,   988,   996,   995,  1274,   978,
     977,   976,     0,   975,     0,     0,  1002,  1002,  1000,   979,
     955,     0,     0,     0,  1006,     0,  1004,     0,   602,   603,
       0,   575,     0,   948,   944,     0,  1015,  1016,  1017,  1018,
    1025,  1026,  1023,  1024,  1019,  1020,  1013,  1014,  1021,  1022,
    1011,  1012,     0,  1027,  1028,  1029,  1030,  1031,  1032,  1033,
    1034,   961,   967,     0,     0,  1398,     0,   570,     0,     0,
     572,     0,     0,     0,   157,     0,   216,  1499,  1500,  1498,
       0,     0,  1456,   219,  1493,  1502,  1492,  1501,  1455,   236,
    1450,     0,     0,  1446,   635,     0,     0,     0,  1284,  1293,
    1285,  1286,  1287,  1288,  1289,  1290,  1291,  1292,     0,     0,
    2271,   862,   860,     0,     0,     0,     0,     0,     0,  1320,
       0,  1113,  1139,     0,     0,     0,  1269,  1303,     0,     0,
       0,     0,     0,     0,  1269,  1309,     0,     0,   886,   898,
       0,   784,   790,   861,   859,     0,  1339,   854,     0,   932,
     912,     0,   911,     0,     0,   914,   908,     0,   909,     0,
       0,     0,     0,   910,     0,     0,     0,     0,   857,     0,
     898,     0,   858,   929,  1518,  1517,  1526,   197,     0,  1280,
       0,   157,  1572,  1586,     0,  1274,  1147,  1318,     0,     0,
    1152,  1231,  1068,     0,     0,  1069,  1047,  1048,     0,  1349,
    1358,  1269,  1273,     0,  1150,  1269,     0,     0,  1221,  1223,
       0,  1143,  1144,     0,  1321,  1372,  1151,     0,  1377,     0,
    1042,  1042,  1345,  1251,     0,  1241,  1244,     0,     0,  1248,
    1249,  1250,     0,     0,     0,  1337,     0,  1259,  1261,     0,
       0,  1084,  1257,     0,  1087,     0,     0,     0,     0,  1245,
    1246,  1247,  1237,  1238,  1239,  1240,  1242,  1243,  1255,  1236,
    1065,     0,  1140,     0,  1190,     0,  1064,  1343,   852,     0,
    1375,   852,  1520,  1524,  1525,  1523,  1519,     0,  1511,  1510,
    1515,  1513,  1516,  1514,  1588,     0,  1552,  1536,     0,  1533,
    1272,   847,   723,  1363,     0,     0,     0,   314,   293,   315,
    1559,  1557,   162,   161,     0,     0,   696,   695,   759,   751,
     753,   759,     0,   694,     0,   807,   808,     0,     0,     0,
       0,   840,   838,  1371,  1384,   795,   769,   794,     0,     0,
     773,     0,   799,  1043,   833,   678,   763,   764,   767,   677,
       0,   836,     0,   846,     0,   715,   717,   700,   714,   712,
     697,   705,   834,   768,     0,  1578,     0,     0,     0,     0,
       0,  1710,     0,     0,   943,    83,    64,   483,   140,     0,
       0,     0,     0,     0,     0,     0,    91,    88,    89,    90,
       0,     0,     0,     0,   220,   221,   234,     0,   225,   226,
     223,   227,   228,     0,     0,   213,   214,     0,     0,     0,
       0,   212,     0,     0,     0,     0,     0,     0,     0,     0,
    1565,  1560,  1322,  1325,   750,   750,   750,     0,   748,   749,
       0,     0,   634,   529,   539,     0,     0,     0,  1418,     0,
       0,     0,     0,     0,   254,   253,     0,     0,   566,  1419,
    1417,  1421,  1420,  1422,  1682,   191,     0,     0,   202,   199,
       0,   528,   502,     0,     0,  1433,     0,     0,     0,  1710,
     518,  1430,     0,  1562,   252,     0,     0,     0,   604,     0,
     999,   998,   949,   945,     0,     0,     0,     0,     0,     0,
     609,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     604,  1399,     0,   601,   604,  1362,     0,   604,   207,  1452,
    1495,   217,   237,   218,   238,   646,   641,   669,     0,   649,
     654,   632,     0,   632,     0,   651,   655,   632,   650,     0,
     632,   645,     0,  1183,     0,  1173,     0,     0,   921,     0,
       0,  1174,  1115,  1116,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1133,  1132,  1175,   925,     0,   928,     0,     0,
    1301,  1302,     0,  1176,     0,     0,  1308,     0,     0,     0,
    1181,     0,   864,     0,     0,     0,   779,   783,   786,     0,
     789,   726,   685,  1702,  1741,     0,   737,   737,   737,   735,
     725,     0,   811,     0,     0,   887,     0,     0,   889,   891,
       0,     0,   894,   871,   870,     0,     0,     0,     0,   933,
       0,  1367,     0,     0,   198,     0,  1407,     0,  1412,  1413,
    1410,  1406,  1409,  1411,     0,     0,     0,  1317,  1313,     0,
       0,  1226,  1228,  1230,     0,  1235,  1241,  1244,  1248,  1249,
    1250,  1245,  1246,  1247,  1237,  1238,  1239,  1240,  1242,  1243,
       0,  1263,     0,  1217,     0,     0,  1348,     0,  1111,     0,
    1145,  1156,     0,     0,  1224,  1157,  1350,  1327,     0,     0,
    1380,  1379,  1044,  1053,  1056,  1088,  1089,  1060,  1061,  1062,
    1066,  1405,  1404,  1344,     0,  1336,     0,     0,  1045,  1070,
    1075,     0,  1310,  1105,     0,  1093,     0,  1083,     0,  1091,
    1095,  1071,  1086,     0,  1067,     0,  1337,  1260,  1262,     0,
    1258,     0,  1057,  1058,  1059,  1049,  1050,  1051,  1052,  1054,
    1055,  1063,  1234,  1232,  1233,     0,  1325,     0,  1335,     0,
       0,  1192,     0,     0,  1090,  1341,     0,   932,   750,   932,
       0,  1042,  1553,  1402,  1546,  1535,  1402,  1270,  1364,  1401,
     157,   300,   296,   308,     0,   339,   314,   301,   287,     0,
    1555,   148,   152,     0,  1326,   182,   184,   852,     0,   757,
     758,   762,     0,     0,   762,   741,   693,  1944,  1830,     0,
       0,     0,     0,   800,   841,     0,   832,   797,   798,     0,
     796,  1371,   801,  1370,   802,   805,   806,   774,  1359,   842,
     844,     0,   837,     0,  1365,   699,   718,     0,     0,     0,
       0,     0,   682,   681,   848,     0,    49,     0,  1710,    66,
       0,     0,     0,     0,     0,     0,   433,     0,   533,   433,
     104,  1710,   604,  1710,   604,  1610,  1677,  1846,     0,    62,
     507,    95,     0,   134,   536,     0,   492,    85,   100,   127,
       0,     0,   210,    51,   224,   229,   130,   233,   230,  1438,
     231,   141,     0,    47,     0,   128,     0,  1436,     0,     0,
      53,   132,  1440,  1324,     0,   748,   748,   748,     0,  1276,
       0,     0,     0,  1278,  1279,   633,     0,   530,     0,   643,
     623,   624,   634,  1416,     0,   203,   531,     0,   531,     0,
       0,  1418,     0,     0,   193,   189,     0,     0,     0,     0,
     529,   521,   519,   552,     0,   526,   520,     0,     0,   478,
       0,  1604,     0,     0,     0,     0,   618,     0,     0,     0,
       0,     0,   968,   981,   576,   955,     0,  1009,  1008,  1010,
    1010,   938,   955,     0,   955,     0,   953,     0,   993,   962,
    1035,  1036,  1037,  1038,  1039,  1040,  1041,   569,  1400,   571,
       0,   573,  1447,   639,     0,   638,   642,   637,   636,     0,
     631,     0,   664,     0,     0,     0,     0,     0,     0,     0,
       0,  1170,  1282,     0,  1296,  1295,  1114,  1121,  1124,  1128,
    1129,  1130,  1297,     0,     0,     0,  1125,  1126,  1127,  1117,
    1118,  1119,  1120,  1122,  1123,  1131,   930,     0,     0,   924,
    1306,  1305,  1299,  1300,     0,  1178,  1179,  1180,  1307,     0,
       0,   899,   777,   775,   778,   780,   776,     0,     0,   932,
     737,   737,   737,   737,   734,     0,     0,     0,   931,     0,
     828,   893,     0,   917,     0,   890,     0,     0,   881,     0,
     888,   937,   904,     0,     0,   906,  1527,  1281,   743,  1148,
       0,     0,  1314,     0,  1110,     0,  1229,  1158,     0,  1252,
    1216,     0,     0,     0,  1357,     0,  1270,  1220,  1222,  1358,
    1153,  1042,     0,     0,     0,     0,     0,     0,     0,  1094,
    1085,     0,  1092,  1096,     0,     0,     0,  1079,     0,     0,
    1077,  1106,  1073,     0,     0,  1107,  1324,     0,  1328,     0,
       0,  1191,  1200,   855,   851,   811,   748,   811,     0,  1521,
    1537,  1534,     0,   296,   294,   295,   296,   296,   296,   296,
     306,   312,   307,   296,   296,   296,   358,     0,   356,   301,
     364,   339,   339,   340,   317,   362,   364,   326,   336,   335,
     292,   316,     0,     0,  1556,     0,   171,     0,     0,     0,
       0,   174,   188,   185,  1555,     0,     0,   752,   754,     0,
    1253,   762,   756,   804,   803,     0,   772,   839,   770,     0,
     845,     0,   716,     0,   702,     0,   874,     0,     0,     0,
       0,     0,   482,     0,     0,     0,   433,     0,   541,     0,
     548,     0,     0,   533,   514,    84,     0,     0,     0,    58,
     103,    76,    68,    54,    82,     0,     0,    87,     0,    80,
      97,    98,    96,   101,     0,   443,   468,     0,     0,   479,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1323,     0,     0,     0,   750,   746,   747,  1161,   667,
     668,   666,   215,   540,     0,     0,   201,   528,     0,  1433,
       0,     0,  1415,   566,     0,   194,     0,   192,     0,   203,
     531,     0,   506,   502,   527,   500,   499,   501,     0,  1605,
     208,     0,  1599,   531,  1432,     0,     0,   619,     0,   613,
       0,  1427,   987,   951,     0,  1005,  1003,   952,     0,   950,
     946,   954,   604,     0,   627,   665,   670,   652,   657,     0,
     663,   659,   658,   653,   661,   660,   656,  1171,  1182,  1294,
       0,     0,     0,     0,   923,   926,     0,  1177,  1172,   897,
       0,     0,   811,     0,     0,     0,     0,   728,   727,   733,
       0,     0,  1194,   892,     0,     0,     0,   879,   869,   875,
       0,     0,     0,     0,   935,   934,   905,     0,  1316,  1312,
    1225,  1227,  1264,  1347,  1269,  1352,  1354,     0,     0,     0,
    1219,  1112,  1378,  1046,     0,     0,  1076,  1311,  1097,     0,
       0,     0,  1072,  1252,     0,     0,     0,     0,     0,  1081,
       0,  1332,  1325,     0,  1331,     0,     0,     0,     0,  1166,
     856,   828,     0,   828,     0,   724,   305,   311,   304,   303,
     302,   309,   313,   299,   356,   361,   357,   359,   296,     0,
     363,   353,     0,   337,   338,   318,   339,     0,   323,   322,
     324,   321,   366,     0,     0,     0,     0,   286,   369,  1139,
       0,  1554,     0,  1549,   149,   150,   151,     0,     0,     0,
     166,   143,     0,     0,   183,   171,   159,   760,   761,     0,
     755,   771,  1360,  1366,   701,     0,  1150,     0,     0,   698,
       0,   135,   433,     0,     0,    65,     0,   550,   494,   542,
     525,   509,     0,     0,     0,   434,     0,   567,     0,     0,
     515,     0,     0,     0,     0,   495,     0,     0,   454,     0,
       0,   525,     0,   532,   450,   451,     0,    57,    77,     0,
      73,     0,   102,     0,     0,     0,     0,     0,    60,    72,
       0,    55,     0,   604,   604,    63,  1393,  1995,  1996,  1997,
    1998,  1999,  2000,  2001,  2002,  2003,  2004,  2115,  2005,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  2124,  2013,   440,  2014,
    1777,  2015,  2016,  2017,  2018,  2019,     0,  2020,   941,  2021,
    2022,  2201,  2023,  1237,  1238,   438,   439,   535,   435,  1394,
     436,  1396,   543,   437,     0,   538,   493,   131,  1439,     0,
     129,     0,  1437,   138,   136,   133,  1441,  1164,  1165,  1162,
     748,   646,   626,     0,     0,  1604,     0,     0,   275,   259,
     285,     0,  1710,     0,   190,     0,  1433,   200,   528,     0,
     558,   478,   553,     0,  1604,  1602,     0,  1433,  1598,     0,
     610,     0,     0,     0,   947,   939,   574,   640,     0,   662,
    1134,     0,     0,     0,     0,   787,     0,   793,   828,   732,
     731,   730,   729,   810,  1652,  1927,  1829,     0,   814,   809,
     812,   817,   819,   818,   820,   816,   827,     0,   830,   916,
    1265,  1267,     0,     0,     0,     0,   880,     0,   882,     0,
     884,     0,   936,  1315,  1355,  1356,  1351,     0,  1043,  1103,
    1101,  1098,     0,  1099,  1080,     0,     0,  1078,  1074,     0,
    1108,     0,  1329,     0,  1186,     0,  1189,  1203,  1199,  1198,
    1194,  1161,  1194,  1522,   297,   298,   310,   360,   339,   326,
     354,   355,   287,     0,   368,     0,   341,     0,   320,     0,
     391,   392,   373,   374,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1337,     0,     0,     0,     0,     0,   407,
       0,     0,   410,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   170,   147,
     173,   172,     0,  1326,   180,     0,     0,   171,     0,   175,
     620,     0,     0,   713,   873,   706,   707,     0,   546,    67,
       0,   525,     0,   433,   511,   510,   513,   508,   512,     0,
     568,     0,     0,   452,     0,   459,   497,   498,   496,   453,
     525,   531,   455,     0,     0,     0,    69,    59,    56,    61,
      70,     0,     0,    71,    74,   937,    86,    79,  2124,  2133,
       0,     0,     0,     0,     0,     0,   622,   629,   215,     0,
       0,   502,  1601,     0,     0,   615,     0,     0,     0,     0,
     272,     0,     0,     0,   528,   195,     0,     0,     0,  1604,
       0,     0,   430,     0,   475,     0,   205,  1603,     0,     0,
    1590,     0,     0,  1425,  1426,     0,   628,  1135,     0,  1136,
     927,     0,     0,   785,  1194,     0,     0,     0,   821,   815,
       0,  1193,  1195,     0,   782,  1268,   876,     0,   878,     0,
     902,   750,     0,   902,   885,  1353,  1184,     0,  1100,  1104,
    1102,  1082,  1333,  1330,  1188,  1202,  1205,   830,  1376,   830,
     287,   334,   332,     0,     0,   349,   352,   319,   356,   326,
     321,   370,   381,   411,   412,   385,   386,   387,   389,     0,
       0,     0,   371,   393,   398,   428,     0,   416,     0,   406,
       0,   414,   418,   394,   409,   390,     0,  1337,     0,     0,
       0,     0,   382,   383,   384,   375,   376,   377,   378,   379,
     380,   388,   413,   290,     0,   289,     0,     0,   158,     0,
       0,   155,   142,   160,  1254,   703,   704,     0,   433,     0,
     524,   547,   464,   442,     0,     0,     0,   449,   456,   557,
     458,     0,    78,    94,     0,     0,   537,   139,   137,  1163,
     646,     0,  1433,   478,  1598,   612,   276,   259,     0,   283,
     271,     0,     0,   284,     0,     0,     0,     0,   502,   208,
    1600,   491,   484,   485,   486,   487,   488,   489,   490,   505,
     504,   476,   477,     0,     0,     0,     0,     0,   614,  1427,
       0,   177,   186,     0,   177,  1137,   788,     0,   830,     0,
       0,     0,   813,     0,     0,   829,     0,   689,  1266,     0,
     868,   866,   748,     0,   867,     0,     0,   750,   782,   782,
     332,     0,   365,     0,   346,   350,   367,     0,     0,     0,
       0,     0,     0,     0,   417,   408,     0,   415,   419,     0,
       0,   402,     0,     0,   400,   429,   396,     0,     0,     0,
     144,     0,   145,   181,     0,     0,     0,   531,   549,   523,
       0,   516,   462,   461,   463,   467,     0,   465,     0,   481,
       0,   474,   442,     0,    81,     0,   544,   621,   625,     0,
     432,  1592,   258,   255,   256,     0,   273,   277,     0,     0,
     266,   528,     0,  1598,   478,  1604,  1598,     0,  1595,     0,
     611,     0,     0,     0,   179,  1433,     0,   179,     0,   782,
     823,     0,   822,  1197,  1196,   784,   877,     0,     0,  1185,
       0,  1208,   688,   687,   333,   330,   351,     0,     0,   325,
     372,     0,     0,   399,   420,     0,     0,     0,   395,     0,
       0,     0,     0,     0,   404,     0,   291,     0,     0,     0,
       0,   557,     0,   503,     0,     0,   464,     0,   457,   554,
     555,   556,     0,   470,   460,   471,    75,    93,   545,     0,
       0,     0,   282,     0,   280,     0,   267,   528,  1593,   431,
     206,  1591,  1596,  1597,     0,   177,   176,   759,   178,   932,
     187,   759,   792,   690,   824,   781,     0,   883,  1204,     0,
       0,     0,     0,   331,   347,   342,   348,   344,   426,   424,
     421,     0,   422,   403,     0,     0,   401,   397,     0,   288,
       0,   154,   932,   165,     0,   474,   522,   517,   441,   466,
     480,     0,     0,     0,   472,     0,   473,  1598,     0,   274,
     278,     0,   281,     0,     0,   179,   762,  1423,   762,  1913,
    1653,  1881,     0,  1206,  1209,  1207,  1201,   328,   327,   329,
       0,     0,   423,   427,   425,   405,   146,   153,     0,   433,
     446,     0,   445,     0,   534,   469,  1594,   269,     0,     0,
       0,  1433,   759,   167,   168,     0,  1213,  1212,  1211,  1215,
    1214,   343,   345,   932,   551,   444,   448,   447,     0,     0,
       0,     0,   263,     0,   932,   762,     0,   164,   269,   257,
       0,     0,     0,   279,   265,     0,  1424,   169,  1210,   268,
       0,   261,   262,     0,   264,     0,     0,   260,     0,     0,
       0,   285,     0,     0,   266,   270
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3241, -3241, -3241,  2170,   118,   120,  -784, -1212,  -968, -1216,
   -3241,     0,   121, -3241, -3241,   306, -3241,  1137, -3241,   297,
    -688,   690, -3241,  1236, -3241, -3241,  2932, -3241,   122,   123,
    2322,  6246,  2809,  3529,   236,  -517,  -757, -1332, -1087,    49,
   -3241, -3241, -3241, -3241,  -710,   636, -1222, -3241,   560, -3241,
   -3241, -3241, -3241,   -98,   278, -3241,    18, -2185, -3038,  -591,
   -3241,  -748, -3241,  -258, -3241,  -667, -3241,  -826,  -675,  -734,
   -2864, -1140, -3241,  1737,  -308, -3241,   726, -3241, -2531, -3241,
   -3241,   715, -3241, -1159, -3241, -2223,   276,  -652, -2605, -2590,
   -2149,  -778,   351,  -660,   325, -2129, -1080, -3241,   736, -3241,
    -642, -3241,  -756, -2007,   124, -2850, -1679,    -8, -3241, -3241,
   -3241,  -560, -3241, -2563,  5812, -3241,   127,  1582, -2125,   130,
   -1666, -3241,    27, -2091,   132, -3241, -3241,   133,    52,  -581,
     396, -3241,   134, -3241, -3241,  1498,  -761, -3241,  1551,   135,
   -2549, -3241,  -449, -3241,  -487,  -482, -3241, -3241,    47,  -962,
    1489, -3241, -3241, -3241,    30, -3241,  -473, -3241, -3241, -2597,
   -3241,    54, -3241, -3241, -3241, -3241, -3241,  -399,   412, -3241,
   -3241,  -579, -2636,  -523, -3241, -3147, -3240, -3241, -3241,  -739,
   -3184, -2046,   136,   137,   -35, -3241, -3241, -3241, -3241,  -426,
   -2841, -3241,  -796, -3241,  -800,  -248,  -766,  -753, -3241,  -627,
   -2814,  -730, -3241, -3241,  -777, -2826,  2392,  -494, -3241, -3241,
   -1206, -3241,   467, -2012, -3241,   855, -3241,   856, -3241,  -312,
   -2795, -3241, -3241,  -458, -3241, -3241, -3241, -2251,   -93,  -694,
    -692, -3241, -2977, -3241, -3241, -2399, -3241, -3241, -3241,   471,
   -3241, -3241,  1393,   138,   139, -3241,   875,   141, -1157,    14,
    1573,   -38,   -30, -3241,   -12, -3241, -3241, -3241,   820, -3241,
   -3241,    72,   113,  1862, -1041, -3241, -1513,   684, -3241,  2010,
    2014, -2217,  -724,   -61, -3241,   860, -1691, -2119,  -569,  1280,
    1845,  1852,   610, -2526, -3241,  -524, -3241,   173, -3241, -3241,
     857,  1335, -1557, -1568, -3241, -2214, -3241,  -406,  -229, -3241,
   -3241, -3241, -3241, -3241, -2521, -2861,  -540,  1302, -3241,  1874,
   -3241, -3241, -3241, -3241,    24, -1505,  3055,   898,   -76, -3241,
   -3241, -3241, -3241,   310, -3241,  1056,    -7, -3241,  2442,  -559,
    -650,  2066,   212,   291, -1808,    33,  2454,   661, -3241, -3241,
     666, -2028, -1525,   621,  -140,  1645, -3241, -3241,  -568, -1366,
    -846, -3241, -3241,   360,    66, -3241, -3241, -3241,  1613,  2457,
   -3241, -3241,  2652,  3356, -3241,  -679,  3752,  1333,  -830,  2107,
    -909,  2111,  -912,  -924,  -927,  2118,  2124, -1515,  7987,  -227,
    9001, -2210, -3241,    55, -3241, -1484,    67, -3241, -3241, -3241,
   -3241, -2733, -3241,  -376, -3241,  -373, -3241, -3241, -3241,  -565,
   -2847, -3241,  9378,  1027, -3241, -3241,   622, -3241, -3241, -3241,
   -3241, -1566, -3241,  8729,   919, -3241, -2006, -3241, -3241, -1007,
    -594, -1079, -1013, -1304, -1389, -3241, -3241, -3241, -3241, -3241,
   -3241, -1535, -1780,  -232, -2066, -3241, -3241,  1066, -3241, -3241,
   -3241, -1762, -2116, -3241, -3241, -3241, -2059,  1554,   253,  -669,
   -1636, -3241,  1028, -2345, -3241, -3241,   630, -3241,  -583, -1128,
   -2437,  1164,    -2, -3241,  5070, -2564, -3241, -3241,  -566, -2721,
   -1092, -3241, -3241,   144,  1680,    57, -3241,   145,  1413, -3241,
   -3241, -3241,   146, -3241, -3241,   148,   848, -3241,  1109, -3241,
     781,   149, -3241, -3241,  3101,  3033,    34, -3041
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   592,   593,  1868,  1817,  1594,  1255,
    1807,  1503,   594,  2631,  2632,  2633,  2258,  1236,  3544,  2259,
    1237,  1238,  2635,    52,    53,    54,   110,  1266,   595,   596,
     532,   644,  1127,   646,  1128,  1636,   801,  1344,  1345,   597,
    2312,  3248,  2723,  3249,  2391,  2306,  1513,  2386,  1927,  1847,
    1514,   539,  1941,  2724,  2672,  1928,   598,  2620,  2987,  3537,
    2646,  3744,  2923,  2924,  3534,  3535,  2623,  2261,  3633,  3634,
    2699,  1799,  3628,  2331,  3449,  2265,  2246,  2925,  2339,  3400,
    3030,  2262,  2905,  2332,  3530,  1881,  2333,  3531,  3203,  2334,
    1844,  1872,  2624,  3635,  2266,  1845,  2619,  2988,  1787,  2335,
    3541,  2336,   550,  2909,   599,  2702,  1410,   521,   522,   523,
     891,  1347,  1389,  1348,   524,   760,   600,   820,  1878,   601,
    1403,  1860,   602,  1869,   603,  2686,  2687,   604,   605,  1172,
    2576,  2180,   606,   583,   584,   911,  1451,   585,   893,   607,
     919,    68,   767,  1505,   608,  1506,  1507,  1007,    69,  1595,
    1009,  1010,    70,    71,   610,  3284,  3043,  1416,  1882,  2344,
     551,   611,  2870,  2182,  2579,  3526,    74,  3184,  2185,  1197,
    3187,  3462,  2863,  3182,  2580,  3574,  3657,  3185,  2186,  2187,
    3463,  2188,   612,   661,  3335,    76,  1856,  3555,    77,  3258,
    3791,  3781,  3782,  3773,  3646,  3019,  3769,  3747,  3432,  3557,
    3020,  3558,  3712,  3433,  3261,  2573,    78,  3383,  3384,  2178,
    2550,  3126,  1717,  2551,  2554,  2175,  1718,  1719,  2846,  3139,
    2852,  3729,  3673,  3492,  2839,  2561,  2562,  2563,  2564,  3674,
    3676,  3493,  3675,  3132,  3133,  2565,  2566,  2567,  2841,  2842,
    2568,  2569,  2857,   613,   614,  1073,  2041,   615,  1790,   616,
    1129,    84,    85,  1047,    86,  3197,    87,    88,  1765,  1766,
    1767,   689,   701,   702,  1569,  2010,   694,  1201,  1734,   675,
     676,  2302,   775,  1839,  1729,  1730,  2191,  2587,  1758,  1759,
    1210,  1211,  1998,  3477,  1999,  2000,  1562,  1563,  3293,  1746,
    1750,  1751,  2212,  2202,  1737,  2460,  3068,  3069,  3070,  3071,
    3072,  3073,  3074,  1130,  2762,  3304,  1754,  1755,  1213,  1214,
    1215,  1763,  2222,    90,    91,  2157,  2533,  2534,   650,  3085,
    1586,  1768,  2766,  2767,  2768,  3089,  3090,  3091,   651,  1042,
    1043,  1066,  1061,  1576,  2018,   652,   653,  1975,  1976,  2429,
    1068,  2012,  2028,  2029,  2774,  1899,   894,  2247,  1599,  1454,
     896,  1131,   897,  1429,  1132,  1433,   899,  1133,  1134,  1135,
     902,  1136,  1137,  1138,   905,  1425,  1139,  1140,  1444,  1473,
    1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1183,  1769,
    1142,  1143,  1144,  1145,  1146,   655,  1147,  1148,  1684,  2151,
    2532,  3078,  3301,  3302,  2819,  3119,  3326,  3487,  3671,  3723,
    3724,  1149,  1150,  1628,  1629,  1630,  2051,  2052,  2053,  2054,
    2145,  1678,  1679,  1151,  2993,  1681,  2072,  3081,  3082,  1184,
    1555,  1623,  1392,  1393,  1600,  1528,  1529,  1536,  1950,  1544,
    1548,  1980,  1981,  1556,  2113,  1152,  2047,  2048,  2483,  1608,
    1153,  1268,  1635,  2814,  2148,  1682,  2107,  1160,  1154,  1161,
    1156,  1619,  1620,  2494,  2786,  2787,  2078,  2219,  1713,  2224,
    2225,   915,  1157,  1158,  1159,  1394,   527,   908,  3658,  1485,
    1189,  1395,  2103,   617,   103,   618,    94,   619,  1179,   698,
    1180,  1182,   620,   669,   670,   621,   682,   683,  1596,  1698,
    1597,   622,    99,  1224,   684,   690,   623,  3280
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     534,   914,  1062,   800,   534,   526,  1155,   763,  1254,   534,
     761,   777,   778,   895,    82,   534,   534,   912,    58,   526,
     534,   534,   534,  1547,   776,   534,  1398,    62,   534,   534,
      72,  1004,   534,  1440,   100,   534,   534,   759,  1821,  1632,
    2194,  1820,  1502,  1350,  1831,   648,  1889,  2071,  1508,    57,
     688,  2155,    65,  1400,    73,  1446,  1220,    93,  1598,   780,
    1714,  1977,   525,  2521,  2625,   609,  2032,  2519,  2582,  1786,
     692,  2294,    89,  1792,  1893,  2592,   654,   781,  2662,  2663,
    2664,  1836,  3016,  2994,  2990,   526,   526,  3014,   656,  1044,
      89,   534,  1525,  1796,  1065,  1524,   534,   534,   534,   534,
     534,  1825,  1720,   920,  1256,  1185,  1260,  1523,  1264,  1006,
    1521,   648,   648,   786,  1688,  1626,  2618,  2516,    49,  1691,
      50,    51,    55,    56,    59,  2090,  2091,    60,  1039,  2535,
      61,  2537,    63,    64,    66,    67,    75,  2581,    79,    80,
     794,    81,   654,   654,    92,    95,    96,  2785,    97,    98,
    1487,  3034,  1911,  1490,   656,   656,  3336,   704,  2835,  2673,
    1011,   662,  3031,  1426,  1427,  3252,  2884,  3272,  -672, -1389,
    2889,  1082,  2317,  1448,  1171, -1984,  2556, -1385, -1385, -1984,
    1954,  -675,  2313,  2217,  3276,  1956,  2159, -2124, -2124,  1198,
    1438,  2543,  2214,  2556,  2680,  3430, -1369,  2688,  1695, -1975,
    2432, -1992,  2552, -1390,  3416,  2461,  1209, -2115, -2115, -2133,
   -2133, -1386, -1386, -1392, -1870, -1007, -2110, -2110,  2470, -1007,
     537, -1388, -1388,  3573,  2676,   658, -1389, -1975, -1984,  1082,
   -1992, -1390, -1392, -1010,  1777,  1212,  -969,  -982, -1010,  3190,
    3130,   696,  1420,  1788,  2481,  2911,  -997,  -630,  2105,   658,
     658,   658,   658,  1167,  1823,  2310,  2769, -1002,   771,   660,
     660, -2135, -2135,  2105,  3403,  1448,  2730,  2732,  -672,  2735,
    1496,  1448,  3740,  3241,  1805,  1082,  3701,  1808,  1809,  2556,
    1421,  -675,  1350,  1644,  1446,  2695,  2914,  1645,  1646,  1692,
    1496,   658,  3207,  1797,  2176,  1082,  -805,   828,  -215,  1644,
    3120,  2105,  3122,  -215,  1646,  1082,  3332,  3524,  1448,  2227,
    2843,  2844,  2442,  3144, -1870,  2621,  3222,  3577,  3145,  2822,
    1654,  2821,  1174,  2823,  1493,  3553,  1722,  2220,  1954,  1780,
     772,  1854,  1955,  1956,  3331, -1235,  1654,  3661,   773,  1834,
    1644,  3619,  3693, -1235,  1645,  1646,   797,  2152,  1835,  1886,
    3152,  -942,  1656,  3144,     3,     4,  3494,  3495,  3145,  2142,
     625,  1810, -1870,  2172,  2189,  1954,  2877,  2143,  1656,  1955,
    1956,  2173,  1531,  2741,  1788,   773, -1870,  1654,  3532,  1735,
    3259, -1870,  3154,  3551,  2527,  2653, -1870,  3327,  3204,  3329,
    3152,  3218,  2244,  3441,  2898,  1804,  3454, -1870,  3216,  2105,
     673,  1693, -1870,  2444,  3455, -1256,  2300,   109,   773,  1656,
    1426,  1427,  3240, -1256,  1350,  2405,   558, -2109, -2109,  3440,
    3296,  2752,  3154,  1516,  3669,  1926,  1438,  1815,  3144,  3266,
    1584,  2897,  1994,  3145, -1870,  3415,  2878,  3766,  3267,  1205,
    3278,  3533,  1912,  3260,  2221,  2190,  2433,  3442,  3406,  2622,
    1004,  1816,  2245,  2918,  3670, -1870,  3443,  3035,   798,  2445,
    -672,  1422,   799,  1994,  1065,  3152,  3488,  3205,  3489,  3757,
    3714,  1449,  2880,  -675,   624,  3752,  1044,  3217,  3444,  2544,
    2545,  3741,  2782,  1585,  2618,  -942,  2618,  3041,  1736,  1723,
    1175,  1782,  1176,  2455,  2456,  2457,  2153,  3154,   768,  1798,
     674,   626,  2919, -1870,  3490,  2474, -1870,   860,  3715,  1811,
    1004,  2443, -1870,   657,  1168,  1795,  2311,  1812,  1207,  3414,
    2920,  3694,  3648,  1614,  1510,  3651,  2045,  1622,  1855,  2742,
    1694,   534,  -672,  2299,  2827,  3525,   534,  3294,  3058,   534,
    3554,  2831,  2832,  2833,  3496,  -675,   534,  3131,  -825,  1770,
    1771,  3392,   803,   763, -1870,  3445,  3219,  2071,  2769,  3550,
     774,  3468,  2547,  1449,  1837,  1795,  2102,  1036,  3446,  1449,
    3742,  1018,  2301,   890,  3456,   534,   534,   534, -1870,  1423,
    2378,  3039,  2046,  1003,  3696,  3247,  2228,  2553,   697,  2177,
    1169,  3404,   764,   769,  1824,  3136,  3398,  3743,  3027,  2548,
    3049,  2035,  2446,  1076,  3767,   763,  1449,  3579,  1004,  1004,
    1634,  1783,   829,  3702,  1721,  3408,   534,   534,   534,  2239,
    2106,  3677,  2921,   699,  3036,  2739,   534,  2590,  1774,  3758,
     526,  2922,  1450,  2595,  1875,  2518,   693,  3208,  1008,   534,
     534,   526,  2549,  2214,   534,   534,  2539,   898,   763,  2691,
    -672,  1772,  1821,  2543,  2763,  2682,  2669,  2670,  1884,   780,
     693,   798,    89,  -675, -1870,   799,  3746,  1035,  1838,   534,
     534,  2834,   534,  3350, -1870,  3431,  2158,   781,  2994,  2990,
    1773,  2366,  2584,   538, -1389,  1971,   534,   654,  3338,  -672,
   -1984,  -672,   534, -1870, -1984, -1870, -1870,  1611,   654,   656,
    3649,  1611,  -675,  2382,  -675, -1235,  2260,  3198,  2264,   798,
     656, -1369,  1441,   799, -1975,  3650, -1992,  1441, -1390,  1221,
    3423,  1424,  3629,  1609,  1486,  2654,  2174,  1173, -1392,  2144,
   -1007,  2299, -1870,  1709,  1442, -1870, -1870, -1870,  3339,  1442,
    1639, -1389, -1975, -1984,  1178, -1992, -1390, -1392,  1443,  3315,
    2673,  1428,  1432,  1445,  3677,  3395,  2629,  1890,  1891,   534,
    3396,  -997,   534,  1015,  1689,  2160,  3087,  1489,  1033,  2557,
    3447,  3512, -1002,  3448,  2558, -1256,  1815,  1500,  1501,    82,
    2559,  1644,  2560,    58,  2940,  1674,  1675,  1676,  1677,  1177,
    2865,  1346,    62,  3245,  1388,    72,  1205,  1500,  1501,   100,
    1816,  1540,   534,  1173,  1677,  -215,  -215,  3231,  3232,   534,
     534,   534,   534,  1186,    57,  2528,  2901,    65,  3174,    73,
    1045,   104,    93,   658,   534,  3549,  3128,  3189,  1966,  1967,
    1968,  1969,  1970,  1971,  1622,   770,  1865,    89,  3270,  2274,
    1672,  1673,  1674,  1675,  1676,  1677,  2866,  2927,  1199,  2277,
    1656,   766,  2280,  3169,  3170,  3171,  3172,  3173,  3174,  3630,
    1013,  2244,   660,  2626,  2347,  2440,   895,  1968,  1969,  1970,
    1971,   890,  3755,  3191,   814,  1207,  1205,  1350,  2087,  1350,
     765,  1206,  1900,    49,  3250,    50,    51,    55,    56,    59,
    3565,  3271,    60,  1069,  3748,    61,  2001,    63,    64,    66,
      67,    75,  2440,    79,    80,  1914,    81,  3564,  2902,    92,
      95,    96,  2021,    97,    98,  1164,   101,   912,  3144,  3224,
    1913,  2615,  2071,  1208,  1738,  2928,  1917,  3229,  1732,  3788,
    3171,  3172,  3173,  3174,  3367,  1004,  3180,  2753,  2754,  2755,
    2756,  2544,  2545,  1977,   782,   898,  3631,  2491,  1200,   815,
    2413,  -749,  3796,   816,  3748,  1207,  -749,  1986,  2385,  3801,
    2449,  1046,  3592,  3593,  2387,   102,  2907,   658,  1739,  1797,
    1567,  3014,  2627,  2903,  3181,  2114,  2904,  1577,  3659,  1644,
    2373,  2375,  2376,  2372,  2374,   761,  2792,  3154,   540,  2713,
      21,   817,   105,  2908,  2665,  2371,  2717,  2370,  2719,  1992,
    1797,   106,  1003,  1208,  2115,  1570,   805,  1919,   806,  2929,
    2044,  1622,   759,  1006,   534,   534,  1654,   534,  3401,  2272,
    2074,  2546,  1634,  1070,  2547,   802,   534,   534,  2684,  1570,
    -749,   809,   534,  2647,  1071,  1228,  1228,  1740,   107,    21,
     810,  1229,  1229,  2088,   526,  3144,  2648,   816,  1656,  3273,
    3111,   526,   821,  3663,   541,   534,  1821,  3267,  2994,  2990,
    1797,  2548,  1003,  1388,   890,  3274,  3545,  3388,   534,  2126,
     648,  2540,   824,  1912,  2541,  3368,  2092,   648,  -749,   819,
    3369,  2590,  3152,    89,   763,   817,  1228,  1741,  2236,   108,
    2108,  3355,  1229,   825,  3351,  2601,  2414,  1819,    21,  1738,
    1921,   654,  2323,  1228,  2549,  1082,  2415,  1441,   654,  1229,
    2295,  2296,  2297,   656,  3154,  2273,   534,   826,  1346,  3370,
     656,  2116,   818,  2836,  2655,  2801,  2117,  2354,  1826,  1442,
    3356,  2118,  1231,  2837,  2283,    25,    26,    27,   898,  2290,
    1051,  1441,   827,  1739,  1230,  1230,  1626,  2394,  2836,  2377,
     830,  1742,  2395,  2379,  3774,  1716,  2381,  2867,  3127,  3357,
    1003,  1003,   534,  1442,  1051,   534,  1436,  1437,  2260,  2260,
    2260,  1726,  1727,   819,  1733,  1798,   557,  1443,  1052,   534,
     534,   587,   759,   831,    25,    26,    27,   534,  1829,   781,
     781,  2127,   781,   664,  1571,  1230,  2628,  2696,  2629,  1849,
     798,    32,  1052,  2704,  1633,  1054,  1798,   703,   703,  1430,
    2128,  2396,  1230,  3528,    21,  2129,  2248,  1564,  1579,   534,
     534,  3054,  1797,  2393, -2106, -2106,  2630,  2397,  1173,  1054,
    2399,  1439,   534,   890,  2508,  1588,   545,  1850,   546,  1592,
      37,  1795,  1797,    25,    26,    27,  1504,  2275,   832,   534,
      32,  1797,  2278,   534,  2130,  1519,  1441,   534,   918,  3275,
    1788,  1573,  1741,  2509,   549,  3587,  1798,  1580,  1482,   790,
     833,  1789,  1795,    39,  3262,  3371,  3358,  1494,  1442,  2146,
    1495,  3359,  1788,  2147,    42,  2119,  3360,  1016,   814,    37,
    1822,  2351,  1445,  1791,  3597,  1605,  2120,   686,  3598,  2848,
      43,  2849,  1926,  3515,  1231,  1231,  1504,   898,  3513,    32,
    1952,  1953,  1017,  2071,  2850,  2851,  1973,   540,  1985,  1018,
    1987,  1988,    39,  3503,    44,  1852,  1742,   798,  1019, -1369,
    2361,   799,  1795,    42,  1058,  1923,  2764,  2826,   686,  2771,
    1082,  2828,  2829,  2830,  1388,  1578,  1020,  2868,    37,  1583,
    2652,  1572,  3504,  1388,  3053,  1231,  1029,  2593,  1058,    25,
      26,    27,  1082,   815,  1232,  1258,  1004,  1638,  1233,  1233,
    2656,  1024,  1231,  1995,  2400,  1572,  1640,  1388,  1996,  2660,
     807,    39,   808,   541,  1027,  2510,  2406,   686,  1028,   534,
    2511,   534,    42,  1690,  1030,  2438,   890,   534,  1234,  1259,
    3124,  3727,  1696,  3125,  1504,  1504,  3728,  1031,   534,  1707,
    2131,  3102,  1708,  1518,  2938,   658,  2434,  2931,  2337,  1233,
    2338,  1859,  2725,  2439,  1032,    32,   890,   890,  1798,  2640,
    1861,  2642,  1262,  1862,  2536,  2034,  1233,  1863,  2035,   534,
    3361,  2450,   890,  2451,   534,  1241,   686,  1033,  1798,  1234,
    2452,  3362,  2453,  1430,  1038,  2895,  1202,  1798,  1204,  2471,
    3011,  1849,  1067,  2471,    37,  1242,  1263,  1072,  1439,  2477,
     898,  1235,  1235,  1004,  3505,   534,  1346,  1075,   534,  3506,
     534,   534,  1074,   534,   534,  1626,  2036,  1003,  2930,  2037,
    2939,  2637,  1076,  2639,  1795,  2013,  1077,    39,  2015,  1850,
     898,   898,  2307,  2019,  1346,  2308,  2022,  2355,    42,  1243,
    2037,  2026, -2107, -2107,  1795,  1399,   898,  2506,  2362,  1456,
    1457,  2363,  1235,  1795,    43,  1162,  1163,  2340,  1165,  2715,
    2716,  1464,  1465,  2894,  2364,  2896,  1851,  2363,  1166,  1235,
    2679,  3385,  1008,   526,  2512,  1170,  2388,    21,    44,  2389,
     534,  1181,   534,   534,  3764,  2513,  1187,  2260,  1188,  2604,
     534,  2995,  2869,  2264,  1191,   545,    89,   546,  1190,   526,
    1458,  1459,   526,    83,  1192,  2426,  2472,   526,  2427,  2473,
     526,   534,  1196,   534,  1195,   526,  2475,  1852,  1203,  2473,
    1222,    83,  1223,   549,   647,   648,  1226,  3753,   648,  3754,
     654,  1458,  1459,   648,  1225,   534,   648,  1244,  1227,    83,
     534,   648,   656,  2643,  2649,  2042,  2644,  2650,   762,  2707,
    2776,  2872,  2035,  2473,  2873,  1346,   654,  3026,  1239,   654,
    2308,  3717,  3047,  3507,   654,  3048,   890,   654,   656,  1464,
    1465,   656,   654,  1240,  3508,  1346,   656,  1257,   534,   656,
    2038,  1468,  1469,  2039,   656,  2040,  3787,  1245,  2043,  1261,
     647,   647,   779,  3288,  3737,  1246,  1460,  1461,  1462,  1463,
    1464,  1465,    83,    89,  1466,  1467,  2590,  1247,  1265,  2985,
    3055,  1388,  3103,  3056,  3289,  2037,   111,  2037,  3290,   536,
    1397,  2473,    25,    26,    27,  3318,   586,   534,  2037,   534,
    3323,   534,  3389,  2035,  2196,  3390, -2108, -2108,  1396,  1248,
     898,   672, -2111, -2111,  1402,   685,   534,   534,   823,  1404,
    3422,  1405,   781,  2308,  2938, -2112, -2112,  1415,  2407,  2408,
    2409,  2410,  2411,  2412,  3199,  3777,  2416,  2417,  2418,  2419,
    2420,  2421,  2422,  2423,  2424,  2425,  3786,  1925,  3465,   917,
    2155,  2037,  2215,  2216,   534,  1178,   534,  1417,    32,  1468,
    1469,  3518,  2248,  1418,  3519,  1250,  1228, -2113, -2113,  1424,
     534,   534,  1229,  1228,  3575,  3623,   890,  3576,  3624,  1229,
    1428,   534,   534,   534,   534,  1346,   534,  1346,  1251,  3246,
    1468,  1469,   534,  1228,   534,  3642,  1431,    37,  3643,  1229,
    3113,  3464, -2114, -2114,  3682,   534,   534,  2037,  1432,  1253,
     534,   534,   771,  1434,  2722,   534,   534,   534,   534,  3692,
     534,   534,  3576,  1435,  1004,  2087,  -750, -2116, -2116,  1388,
      39,  -750,  3732,  3751,  3783,  2037,  3576,  3643, -2117, -2117,
    1447,    42,   534,   534,   534,   534, -2118, -2118,  3784,   534,
     898,  3785,  1453,  3797, -2119, -2119,  1489,    43,  1452,  1081,
   -2120, -2120,  1954,   534,   703,  1455,  1955,  1956,  1483,  1388,
   -2137, -2137, -2137, -2121, -2121,  1230, -2122, -2122,  1484,  2503,
    2504,    44,  1230,  3385,   772, -2123, -2123,  2341, -2125, -2125,
     890, -2126, -2126, -2127, -2127,   686, -2128, -2128, -2129, -2129,
   -2130, -2130,  1230,  1488,  1346,  -750, -2132, -2132, -2134, -2134,
    1470,  1471, -2136, -2136,   907,  1241,  1840,  1841,  1003,  -800,
    -800,  1466,  1467,  1491,  3698,  3037,  1492,  3021,  1511,  1468,
    1469,  -804,  -804,  2161,   890,  1242,  2888,  1512,  2462,  -803,
    -803,  3010,  2544,  2545,  2465,  1517,   890,  3195,  3196,  1701,
    1703,  1545,  1560,  -750,  1558,  1561,  1568,  1574,  1581,  1575,
    1582,  3046,   773,  3227,   898,  1587,  3716,  1591,  1593,  1601,
    3718,  1602,  1604,  -973,  -980,  -970,   890,  1609,   686,  1243,
    -825,  -826,  -971,   890,  1613,   534,  -974,  -684,  1614,  -972,
    1637,  1618,  1631,  1683,  1685,  1687,  1699,   534,  1710,  1711,
    1715,  -684,  1724,  1206,  1725,  1208,  -684,  1760,   898,  1762,
    1764,  1775,   526,  1793,  1794,  1800,  1795,   534,   526,   890,
     898,  1801,   534,   890,  1802,  1003,  1806,  1388,  1813,   890,
    1814,  1818,  1828,  1833,  1842,  1231,  3420,  1846,   648,  1857,
    1081,  3464,  1231,  1954,   648,    10,  1858,  1955,  1956,  2934,
     898,  1957,  1958,  1959,  1867,  1870,  2590,   898,  1871,  -684,
    1626,  3775,  1231,  1873,  1874,  1876,  1877,   534,  1883,   654,
    1885,   534,  1082,   763,  3311,   654,   534,  1244,  1892,  2992,
    -684,   656,  1894,  1895,  1902,  1903,  2725,   656,  1906,  1907,
    1946,  1912,  3464,   898,  1908,  2235,  1909,   898,  1918,  1233,
    1943,  1945,  2281,   898,  -684,  1948,  1233,  1951,  1974,  1982,
    1983,    83,  2011,  1990,   774,   534,  1993,  2014,  -684,    21,
    3607,  2020,  2288,  -684,  2033,  2025,  1233,  1245,  -684,  1234,
    1440,  2030,  2023,  2024,  1644,  1246,  2282,  -684,  2080,  1346,
    2046,  2077,  1716,  2083,  2082,  1962,  2911,  1247,  2084,  2085,
    3045,  2104,  2912,  2122,   526,  2111,  2289,  2123,  2125,  2149,
     534,  2150,  1504,    83,   762,  2913,  2156,  2168,  2392,   759,
    3464,  2169,   772,  2170,  2171,   534,  -684,   526,  2179,  1248,
     648,  3480,  3236,  3237,  2042,  2204,  2195,  2914,  2230,  2915,
    2192,  1929,  2205,  2206,   900,  2207,  2209,  -684,  3547,  2226,
    2208,  2231,  1235,   648,  1048,  1022,  2234,  3092,  2237,  1235,
    1049,   654,   907,  2242,   773,   534,  1034,  3681,  2241,  2038,
    2243,   534,  2039,   656,  2040,  2305,  2314,  2043,  2309,  1235,
    2320,  2324,  2327,  1960,   654,  1250,  1930,   534,  2328,  2326,
    2342,  2343,    89,  2345,  2348,  -684,   656,  1346,  1346,  1346,
    2349,  2350,  2352,  2356,  -684,  1931,  1961,  2353,  1251,   762,
    2357,  2358,   779,  2359,    25,    26,    27,  1050,  2360,  1504,
    2368,  2390,  2369,  2398,  2985,  1979,  1932,  2380,  1954,  1253,
    1933,  2916,  2428,  1978,  2435,  2447,   763,  2459,  2436,  -684,
    1388,  2805,  2806,  2466,  2437,  2441,  1081,  2478,  2479,  1954,
     534,  2448,  1934,  1955,  1956,  1935,   534,  1957,  1958,  1959,
    2464,  2502,  3529,  2487,  2489,  2486,  2488,  2490,   534,   534,
     534,   534,   890,  1936,  2500,  2507,  1962,  2531,  2555,  2514,
      32,  1859,   534,  2524,   534,  2523,  2529,   534,    83,  1051,
    1861,  2530,   534,  1862,  2572,  2575,  3213,  1863,  2577,  2917,
    2578,   703,  2583,  2585,  2918,   534,  2599,   798, -2137, -2137,
   -2137,   799,  1966,  1967,  1968,  1969,  1970,  1971,  -806,    37,
    2596,  2597,   534,  2586,  3235,  2600,  1003,  1052,  2603,  2607,
    2608,  1346,  2611,  2609,  2613,  2614,  2617,   534,   534,    38,
     534,  2636,  2638,  1053,  2651,  2661,   898,  2657,  2666,  2658,
    2678,  2667,    39,  2919,  1054,   907,  -684,  2659,  2677,  1821,
    2683,  2697,  2668,    42,  2698,  2701,  1937,  2681,  2705,  2055,
    2694,  2920,  2693,  2710,  1938,   526,  2056,  2057,  2712,    43,
    2058,  2059,  2060,  2729,  2720,  2740,  1055,  2761,  2737,   534,
    2721,  2747,  2760,  3409,  2743,  1939,  2746,   534,   534,   534,
    2748,  2749,  2772,    44,   763,  2773,   534,  2779,  1219,   534,
    2783,  2789,  2797,  2799,  2770,   534,  2803,   686,  2815,  2818,
    2860,  2800,  2820,  2812,   798,  1940,  2824,  1191,   799,  2845,
     534,  2825,   654,  1056,  2862,  2881,   763,  2885,  1004,  2229,
    1057,  2813,   900,  2883,   656,  2879,  2893,  2926,  2645,  1697,
    2942,  2900,  2899,  3007,  3017,  3029,   890,  2906,  1241,  3033,
    3008,  3013,  1961,  3050,  3009,  3077,  3024,  3028,  3042,  3044,
    3025,  3051,  3057,  2921,  1716,  2840,  2308,  3052,  1242,  3079,
    3083,  2840,  2922,  1058,  3088,  3094,  3095,  3529,  3114,  1963,
    1964,  1965,  2671,  1966,  1967,  1968,  1969,  1970,  1971,  3121,
    1059,   759,   759,  3135,  3129,  3138,  3176,  3134,   759,  3137,
    2685,  3177,  3179,  3186,  3192,  3188,  3193,  2887,  3194,   534,
    3200,  3201,  1243,  3202,   907,   534,  3341,  3206,  3211,  3210,
     898,  3212,  1962,  3668,    83,  3220,  3223,  3482,  3352,  3225,
    3226,   534,  3230,  2871,  3243,   534, -1385,  3244, -2105,   534,
     534,   534, -2106, -2107, -2108,   534,   534,   534, -2109,   534,
   -2110, -2111,  3253,  3256, -2112, -2113, -2114, -2116,  3242,   647,
    1504,  1060, -2117, -2118, -2119,  3263,   647,  2727,   534,  2728,
     534,  2087, -2120,  2733, -2121,  2736,  1346, -2122,  3479,  2989,
    1346, -2123,  1346,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,  1915,  2985,  1916,  3251,  1606, -2125, -2126,
    3481, -2127, -2128,  3484, -2129, -2130, -2131, -2132,  1610,   534,
    1244, -2133, -2134,   534,  2992,  3277,   534, -2135, -2136, -1386,
   -1388,  3279,  3264,  3257,  3281,   900,   534,  3215,  3282,  3285,
    3291,  3292,  3015,  3295,  3297,  1624,  3299,  3268,  3306,  3303,
    1859,  3469,   534,  3471,  3305,  2589,  3310,  3309,  3312,  1861,
     890,  3317,  1862,   898,  3322,  3337,  1863,    21,  3340,  3038,
    1245,   534,  3040,  3144,  3349,  3364,  3387,   763,  1246,  3366,
    3386,  3391,  3394,  3397,  3399,   890,  3411,   907,   534,  3412,
    1247,  3419,  3421,  3428,  1567,   534,   534,   534,   534,  3621,
    3429,  3434,  3625,  3436,  3438,  3437,  3453,  3451,  3452,  3473,
    3474,  3476,  3466,  3591,   534,   534,  2770,   907,   907,  3486,
    3467,  3470,  1248,  3491,   779,   779,  3483,   779,  3498,  3502,
     534,  2836,  3509,   907,   898,  3517,  3536,  3219,  3542,  3540,
    3543,  3546,   890,  3559,  3561,  1963,  1964,  1965,  3567,  1966,
    1967,  1968,  1969,  1970,  1971,  1388,  3568,  3569,  3573,   898,
     534,  3578,  3585,  3580,  3588,  3582,   520,   533,   526,  3117,
    3590,   555,  3605,   540,  3287,  3599,   555,  3606,  1250,  3618,
     645,   763,   659,   659,  3620,  3586,  3596,   663,   555,   668,
    3622,  3615,   668,   540,   648,   687,   691,  3627,  3632,   691,
   -1435,  1251,   555,   555,   900,  3638,  3639,  3640,  3641,  3644,
    3645,   534,    25,    26,    27,   534,   898,  3647,  3690,  3652,
   -1435,   534,  1253,  3653,  3654,   654,  3700,  3662,  3664,  3703,
    3705,  3666,  3667,  2986,  3708,   534,  3711,   656,  3726,   541,
    3730,   534,  3731,  3701,  3738,  3756,   645,   645,  3702,  3749,
    3750,  3765,  3768,  3770,   534,   534,  3776,  3780,   687,   541,
    2671,  3779,   534,   691,   555,   691,   691,   691,  2061,  2062,
    2063,  3790,  2064,  2065,  2066,  2067,  2068,  2069,    32,   534,
    3792,  3798,  3803,  1048,   890,  1193,  3233,  2941,  2268,  1049,
    2634,  2945,  2322,  2240,   800,  2165,   559,  1014,  2674,  2726,
    3286,  3636,  3012,  2249,  3745,  2252,  3407,   560,  2263,  3699,
    3706,  3739,   542,  3450,  2267,  1785,  2269,    37,  2989,  2616,
    3032,  2641,  3697,  3704,  2910,  2996,  2612,   907,  2276,  3695,
    2875,  1910,  1853,  2279,  1920,  1888,  3571,  2284,  2285,  2286,
    2287,  3523,  2291,  2292,    21,  2874,  1050,  3660,  3617,  3763,
      39,  3552,  3799,   543,  3805,   534,  1690,  3656,   898,  3427,
    1081,    42,  3789,  3144,   561,  3778,  3710,   900,  3145,  3771,
     534,  1456,  1457,  1021,  3802,  3616,  2838,    43,  3497,   763,
     562,  2570,  3594,  2571,   534,  3330,  3761,  2847,   901,  3762,
    1003,   544,   898,  3269,   890,  2542,  2602,   900,   900,  1712,
    3152,    44,  2588,  2233,  2992,  1565,  1757, -2137,  2751,  1566,
    3123,  3665,  1756,   900,  3581,   686,  2598,    83,  1051,   534,
    3472,   545,  2201,   546,  2232,   534,   649,  2574,  3086,  1388,
     563,  2469,  3154,   534,  3314,  1037,  1023,  1761,  2745,  1532,
     564,   545,  2744,   546,  2775,  3413,   548,  1901,  3584,   549,
    3583,   540,   565,  1458,  1459,  3725,  1052,   566,  2781,   534,
     547,  2498,  2591,  2482,  2499,  3178,   548,   907,   898,   549,
    2002,  2164,  1053,  3499,  3500,   759,  1520,  3521, -1435,  2791,
    1522,   671,   787,  1054,     0,    21,   890,  1526,   567,    25,
      26,    27,  2476,  1527,   647,     0,   534,   647,  3501,     0,
       0,     0,   647,     0,     0,   647,     0,     0,     0,     0,
     647,     0,     0,     0,     0,  1055,     0,   541,  1460,  1461,
    1462,  1463,  1464,  1465,    83,     0,  1466,  1467,     0, -2137,
       0,     0,   568,     0,   534,     0,   569,     0,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0, -2137,     0,
       0,     0,     0, -2137,     0,    32,     0,  3795,     0,     0,
     898,     0,  1056,     0,     0,   534,     0,     0,     0,  1057,
     542,  3426,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   907,  2112,   903,  2989,   534,   534,     0,     0,     0,
       0,     0, -2137,     0,    37,     0,     0,     0,   759,   534,
       0,     0,     0,     0,   534,   570,   534,   900,     0,     0,
     534,  3265,  1058,     0,  3595,     0,     0,  3424,  3425,     0,
       0,   571,   572,     0,   534,   907,     0,    39,     0,  1059,
      25,    26,    27,   526,  1504,  3610,  3611,   907,    42,     0,
       0,     0,  1468,  1469,     0,     0,  1962,     0,     0,   544,
       0,   534,   534,     0,    43,   534,   573,   779,   898,   574,
       0,     0,     0,     0,     0,     0,     0,   907,   575,     0,
       0,   576,     0,     0,   907,   759,   759,     0,    44,     0,
       0,     0,  1915,     0,     0,     0,   901,     0,     0,     0,
     654,   577,   686,     0,     0,     0,    32,     0,   691,   545,
    1060,   546,   656,   691,     0,   578,   691,  3328,     0,     0,
     907,     0,   579,   555,   907,     0,     0,     0,   547,     0,
     907,     0,   580,     0,   548,     0,     0,   549,   581,     0,
       0,     0,   534,     0,     0,    37,     0,     0,     0,   534,
       0,  1346,   910,   555,   555,     0,  3556,   900, -2137,  3560,
       0,  3520,     0,  3522,     0,     0,   582,     0,     0,     0,
       0,     0,  1470,  1471,     0,     0,     0,     0,    39,     0,
       0,     0,     0,   759,     0,     0,   759,     0,   534,    42,
       0,     0,  1472,  1012,   533,   659,     0,  2325,     0,     0,
       0,   520,     0,   691,     0,    43,    83,     0,     0,     0,
       0,  3563,   645,     0,     0,     0,  1041,  1041,     0,     0,
       0,  1041,  1064,     0,     0,     0,   534,  3566,     0,    44,
       0,  3570,     0,     0,     0,     0,     0,     0,  2986,     0,
       0,     0,     0,   686,     0,  1081,   668,   668,  1954,   668,
       0,     0,  1955,  1956,     0,     0,  1957,  1958,  1959,     0,
       0,   890,     0,   691,  2700,     0, -2137,     0,     0,   555,
       0,   900,     0,  3169,  3170,  3171,  3172,  3173,  3174,     0,
       0,     0,     0,   526,  1081,     0,     0,  3144,     0,   901,
       0,   903,  3145,     0,     0, -2137, -2137, -2137,     0,     0,
       0,   556,     0,     0,     0,     0,   556,     0,     0,     0,
       0,     0,     0,   534,     0,   900,     0,     0,   556,     0,
       0,     0,     0,     0,  3152,   534,   534,   900,     0,   534,
       0,  3153,   556,   556,   526,   898,   691,   534,     0,   691,
     654,     0,     0,     0,     0,     0,     0,   647,     0,   759,
     759,     0,   656,   647,     0,     0,  3154,   900,   890,     0,
       0,     0,     0,     0,   900,     0,  3709,   534,  3556,     0,
     534,     0,     0,     0,  2989,     0,  1346,     0,     0,   691,
       0,     0,     0,     0,     0,     0,   691,   691,   691,   691,
       0,   654,     0,   759,   556,   759,     0,   534,     0,   534,
     900,   691,     0,   656,   900,     0,     0,     0,     0,     0,
     900,     0,   526,  3707,     0,     0,     0,  3548,     0,     0,
       0,     0,     0,   907,     0,     0,  1643,     0,     0,  1644,
       0,     0,   898,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
       0,     0,     0,     0,  1624,     0,     0,     0,   898,     0,
       0,     0,     0,  3155,     0,  1652,     0,     0,   901,     0,
     534,  1961,  2112,     0,  3736,     0,  1654,   534,     0,   654,
       0,     0,  3156,  1655,  3556,  3772,     0,  3157,  2525,     0,
       0,   656,   759,   759,   903,     0,     0,     0,     0,   647,
     534,     0,     0,     0,     0,     0,     0,     0,  1656,  1241,
       0,   759,   759,    83,     0,     0,     0,     0,     0,     0,
    3794,     0,   647,     0,     0,     0,  3160,     0,     0,  1242,
     534,     0,     0,     0,     0,     0,     0,     0,  3804,  1456,
    1457,  1962,  2890,  2891,   534,     0,     0,   759,     0,     0,
       0,     0,   534,     0,     0,     0,     0,     0,     0,     0,
       0,   534,     0,     0,     0,   759,     0,     0,     0,     0,
    2943,     0,     0,  1243,  2932,     0,     0,     0,     0,     0,
    1962,     0,  2933,     0,     0,  2997,  2998,  2999,  3000,  3001,
    3002,  3003,  3004,  3005,  3006,     0,     0,     0,     0,     0,
       0,  1041,  1064,     0,   691,  1657,     0,  1539,     0,     0,
       0,     0,     0,  1041,  1041,     0,     0,   907,     0,   555,
       0,  1458,  1459,     0,  1658,   645,     0,     0,  2986,  1659,
       0,   901,   645,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   555,  2934,     0,     0,     0,     0,     0,     0,
       0,     0,  1660,  1661,     0,  1603,     0,     0,     0,     0,
       0,   901,   901,   903,     0,     0,     0,   762,  1662,     0,
       0,  1244,  3328,     0,     0,     0,     0,   901,     0,     0,
       0,     0,  3164,     0,     0,     0,  1460,  1461,  1462,  1463,
    1464,  1465,     0,     0,  1466,  1467,     0,     0,     0,     0,
       0,     0,     0,   555,     0,  1663,  1048,   904,  1664,     0,
       0,     0,  1049,   900,     0,     0,     0,     0,     0,     0,
       0,  1245,  1665,     0,     0,  1666,     0,     0,     0,  1246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1247,     0,     0,  2935, -1872,     0,     0,     0,  1704,
     907,     0,  1706,     0,  1963,  1964,  1965,     0,  1966,  1967,
    1968,  1969,  1970,  1971,     0,     0,   555,   555,     0,  1050,
       0,     0,     0,  1248,   691,  1081,     0,     0,  1954,     0,
       0,     0,  1955,  1956,     0,     0,  1957,  1958,  1959,     0,
    3165,     0,     0, -2137, -2137, -2137,  1539,  3169,  3170,  3171,
    3172,  3173,  3174,     0,  2794,     0,   691,  1784,     0,     0,
    1468,  1469,     0,     0,     0,     0,     0,     0,     0,   691,
       0,   907,     0,     0,  1667,     0,   903,     0,     0,  1250,
       0,     0,     0,     0,     0,  1624,   691,     0,     0,     0,
     691,  1051,     0,     0,  1830, -1872,   907,  3214,     0,     0,
       0,  1216,  1251,   556,     0,     0,   903,   903,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1624,     0,     0,
       0,   901,   903,  1253,     0,  2936,     0,     0,  2937,  1052,
       0,     0,     0,   556,   556,     0,     0,     0,     0,     0,
       0,     0,     0, -1872,     0,  1053,     0,   900,     0,     0,
       0,     0,     0,   907,     0,     0,  1054, -1872,     0,     0,
       0,     0, -1872,     0,     0,     0,     0, -1872,     0,     0,
       0,     0,    83,     0,     0,     0,     0,     0, -1872,     0,
    1470,  1471,  1668, -1872,     0,  1669,  1670,  1671,  1055,  1672,
    1673,  1674,  1675,  1676,  1677,     0,     0,     0,  2886,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2485,
    1217,     0,     0,     0,     0, -1872,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1843,     0,   691,     0,
       0,     0,     0,     0,   691,  1056, -1872,  1795,     0,     0,
       0,  1961,  1057,     0,     0,  1880,     0,     0,     0,   556,
       0,     0,     0,     0,     0,   904,  1643,     0,     0,  1644,
       0,   901,     0,  1645,  1646,     0,  3140,  3141,  3142,  3143,
       0,    83,     0,     0,     0,     0,  1898,     0,     0,     0,
     900,  1898,     0,     0, -1872,  1058,     0, -1872,     0,     0,
       0,     0,     0, -1872,     0,   907,  1654,     0,    83,     0,
       0,    83,  1059, -2137,     0,     0,     0,     0,     0,     0,
       0,  1962,   910,     0,     0,   910,   903,   555,   555,     0,
     555,   910,     0,     0,     0,     0,     0,     0,  1656,   907,
       0,     0,     0,     0,     0, -1872,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   900,     0,   906,     0,     0,     0,     0,  1624, -1872,
       0,     0,     0,     0,     0,     0,  1539,  1539,     0,     0,
       0,     0,  1539,  1060,   520,   901,   900,     0,  1218,     0,
       0,     0,     0,     0,     0,     0,     0,  1041,     0,   555,
    1997,     0,     0,     0,  2505,     0,     0,   691,     0,     0,
     645,     0,     0,   645,     0,   907,     0,  3410,   645,     0,
       0,   645,     0,   647,     0,     0,   645,   693,   555,   901,
     555,     0,     0,     0,     0, -2137,     0,  3417,  3418,     0,
       0,   901,     0,   900,     0,     0,     0,     0,     0,     0,
       0,     0,  2070,     0, -2137, -1872,     0,  2076,   904, -2137,
       0,     0,  3439,     0,     0, -1872,   903,     0,     0,     0,
       0,   901,   762,     0,     0,     0,     0,     0,   901,     0,
       0,     0,     0,     0, -1872,     0, -1872, -1872,     0,     0,
       0,     0,     0,     0,     0,   910,     0,     0, -2137,     0,
       0,     0,     0,     0,     0,     0,     0,   907,     0,     0,
       0,     0,     0,     0,   901,     0,     0,     0,   901,     0,
       0,     0,     0, -1872,   901,     0, -1872, -1872, -1872,     0,
       0,     0,     0,     0,  1963,  1964,  1965,     0,  1966,  1967,
    1968,  1969,  1970,  1971,  2162,     0,   691,     0,   691,     0,
       0,     0,  1665,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   691,  2184,     0,     0,     0,  3342,  3343,
    3344,  3345,  3346,  3347,  3348,     0,  1539,     0,  3353,  3354,
     903,     0,     0,  3363,     0,   900,  3365,     0,     0,  3372,
    3373,  3374,  3375,  3376,  3377,  3378,  3379,  3380,  3381,  1559,
       0,   691,     0,   555,     0,   907,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1784,   555,   900,
       0,     0,  1590,     0,   903,     0,     0,   904,   555,  2250,
     555,  2254,    83,   555,     0,     0,   903,     0,     0,   555,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   910,   555, -2137,     0,     0,   910,   555,     0,
       0,   906,   555,   555,   555,   555,   903,   555,   555,     0,
    1624,     0,     0,   903,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1627,     0,     0,     0,  1048,     0,   691,
     691,   691,   691,  1049,     0,   900,   691,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   903,
    2330,     0,     0,   903,     0,     0,     0,     0,     0,   903,
       0,     0,     0,     0,     0,     0,     0,     0,   560,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   556,   556,     0,     0,
    1050,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2112,     0, -2137,     0,     0,     0,     0,     0,     0,  1672,
    1673,  1674,  1675,  1676,  1677,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   561,     0,   900,     0,  3511,
     904,  3514,     0,  3516,  1539,  1539,  1539,  1539,  1539,  1539,
       0,   562,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  3691,     0,     0,     0,     0,   901,     0,     0,
     904,   904,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   555,     0,     0,     0,   904,     0,     0,     0,
       0,     0,     0,     0,   691,     0,     0,     0,     0,     0,
       0,   563,     0,   645,   906,     0,    83,    83,     0,   645,
    1052,   564,     0,     0,   555,     0,     0,     0,     0,   555,
       0,     0,   907,   565,     0,  1228,  1053,     0,   566,     0,
       0,  1229,     0,     0,     0,   900,     0,  1054,     0,     0,
    1241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   567,
    1242,     0,     0,     0,   555,     0,     0,     0,  2495,  1055,
       0,  3600,     0,   555,  3603,  3604,     0,     0,  1643,     0,
       0,  1644,     0,  3608,     0,  1645,  1646,     0,     0,     0,
    3614,  2016,     0,     0,     0,  1539,  1539,     0,     0,     0,
       0,     0,     0,   568,  1243,     0,     0,   569, -1886,     0,
       0,     0,  2070,     0,     0,     0,  1056,     0,  1654,   907,
       0,     0,  2112,  1057,     0, -2137,     0,     0,     0,     0,
       0,     0,     0,     0,  1230,   907,     0,     0,     0,     0,
      83,     0,    83,     0,     0,   645,     0,     0,     0,     0,
    1656,   901,  1081,     0,     0,  1954,     0,   555,     0,  1955,
    1956,     0,   903,  1957,  1958,  1959,  1058,     0,   645,     0,
       0,     0,  2184,   906,  3678,  3679,   570,     0,  3680,     0,
     904,  2795,  3683,  1059,     0,  3686,  3687,     0,     0,     0,
      83,     0,     0,   572,     0,     0,     0,   556,   556,     0,
     556,     0,  1244,     0,     0,     0,    83,     0, -1886,     0,
      83,     0,   555,     0,     0,  1539,  2515,     0,   555,     0,
       0,     0,     0,     0,     0,     0,     0,   573,     0,     0,
     574,     0,     0,     0,  1843,     0,     0,     0,     0,   575,
       0,     0,   576,     0,     0,     0,     0, -2137,     0,     0,
       0,     0,  1245,     0,  1060,     0, -1886,  3733,  3734,  2017,
    1246,  3735,   577,     0,     0,     0, -2137,     0,     0,   556,
   -1886, -2137,  1247,     0,     0, -1886,   578,     0,     0,     0,
   -1886,     0,     0,   579,   901,     0,     0,     0,     0,     0,
       0, -1886,     0,   580,  1231,     0, -1886,  1843,  2027,   581,
    2031,     0,   900,   691,  1248,     0,     0,     0,     0,     0,
   -2137,     0,     0,     0,     0,  1843,   691,   691,   691,     0,
     904,     0,     0,     0,     0,     0,     0,   582, -1886,   555,
       0,   691,     0,     0,   691,     0,   906,     0,     0,   691,
       0,     0,     0,     0,     0,     0,   903,     0,     0, -1886,
       0,     0,  2718,     0,  1249,   901,     0,     0,  1233,     0,
    1250,     0,     0,     0,  1665,     0,   906,   906,  1961,   910,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     901,     0,   906,  1251,  1843,  1843,     0,  1843,  1252,     0,
       0,     0,    83,     0,     0,     0,     0, -1886,     0,   900,
   -1886,     0,     0,     0,  1253,     0, -1886,     0,     0,     0,
       0,     0,     0,     0,     0,   900,   520,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   904,     0,  2750,   901,  1962,     0,
       0,     0,     0,    83,   691,   691,   691,     0, -1886,     0,
       0,     0,     0,   555,     0,  1539,   555,     0,     0,     0,
       0,  1235,   555,     0,     0,     0, -2137,     0,     0,     0,
       0,     0, -1886,   556,     0,     0,     0,  2070,   904,   903,
       0,     0,     0,     0,     0,     0,     0,     0,   556,     0,
     904,     0,     0,     0,     0,     0,     0,     0,   556,     0,
     556,     0,     0,   556,     0,     0,     0,  1539,  1539,   556,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
     904,     0,     0,   556,     0,     0,     0,   904,   556,     0,
     693,     0,   556,   556,   556,   556,     0,   556,   556,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     903,     0,     0,     0,     0,     0,     0,     0, -1886,     0,
       0,  1539,     0,   904,     0,     0,  2864,   904, -1886,     0,
       0,     0,  2184,   904, -2137,   903,   906,     0,     0,   901,
       0,  1672,  1673,  1674,  1675,  1676,  1677, -1886,   691, -1886,
   -1886,     0,   555,     0,     0,     0,   555,   555,   555,     0,
       0,     0,  1843,  1784,  1843,     0,  1880,     0,     0,     0,
       0,     0,     0,   901,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   555, -1886,  2944,     0, -1886,
   -1886, -1886,   903,     0,     0,     0,     0,     0,     0,     0,
     555,   555,   555,   555,   555,   555,   555,   555,   555,   555,
       0,  1963,  1964,  1965,     0,  1966,  1967,  1968,  1969,  1970,
    1971,     0,     0,     0,     0,     0,  2330,     0,     0,     0,
     691,     0,     0,   691,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1784,     0,     0,     0,     0,     0,   901,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1880,
       0,  1643,   556,     0,  1644,     0,     0,     0,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,     0,   906,     0,  1843,     0,
    1081,     0,     0,  1954,     0,     0,     0,  1955,  1956,  1539,
    1652,  1957,  1958,  1959,  2468,   555,     0,     0,     0,  2031,
       0,  1654,   691,   691,   691,   691,     0,     0,  1655,  3105,
       0,     0,     0,     0,  1539,     0,     0,  1539,     0,     0,
       0,   555,   910,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1656,   903,     0,     0,  3096,     0,  1643,
       0,   901,  1644,     0,   556,     0,  1645,  1646,     0,     0,
       0,     0,     0,  1627,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3118,   903,   645,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1654,
       0,     0,     0,     0,     0,  1643, -2137,     0,  1644,     0,
     906,     0,  1645,  1646,     0,     0, -2137, -2137, -2137,     0,
       0,     0,  1539,  1539,  1539,  1539,     0,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,     0,     0,  3183,     0,
       0,     0,  2184,     0,     0,  1654,   904,     0,  2070,     0,
    1657,     0,  1655,     0,   906,     0,     0,   556,     0,   901,
       0,     0,  1784,     0,   903,     0,   906,     0,  1843,  1658,
       0,     0,     0,     0,  1659,     0,     0,  1656,     0,     0,
       0,   910,   555,  1539,     0,     0,     0,     0,     0,   691,
       0,     0,     0,     0,     0,     0,   906,  1660,  1661,     0,
       0,     0,     0,   906,     0,     0,  3234,     0,     0,     0,
       0,     0,   556,  1662,     0,     0,  1961,     0,  2606,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2137,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   906,
       0,     0,     0,   906,     0,     0,     0, -2137,     0,   906,
    1663,     0, -2137,  1664,     0,     0,   903,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1665,     0,     0,
    1666,     0,     0,     0,  1657,     0,     0,     0,     0,     0,
     535,     0,  1843,     0,   535,     0,  1962,     0,     0,   535,
       0, -2137,     0,  1658,     0,   535,   535,  2330,  1659,     0,
     535,   535,   535,     0,     0,   535,     0,     0,   535,   535,
       0,  3283,   535,     0,     0,   535,   535,     0,     0,     0,
    1539,     0,     0,     0,     0,     0,     0,     0,  1081,   556,
     904,  1954,     0,     0,     0,  1955,  1956,  1662,     0,  1957,
    1958,  1959,     0,     0,     0,  1665,  3300,     0,     0,     0,
       0,     0,   555,     0,   903,     0,     0,  3106,     0,     0,
     555,     0,     0,     0,     0,     0,     0,     0,     0,  1667,
       0,   535,     0,     0,     0,     0,   535,   535,   535,   535,
     535,     0,     0,     0,     0,     0,  3325,     0,     0,     0,
       0,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,     0,     0,   910,  1539,  1539,   901,     0,     0,  1539,
       0,     0,  1539,     0,     0,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,     0,     0, -2137,     0,     0,
       0,     0,     0,   556,     0,     0,   556,     0,     0,     0,
       0,   555,  2027,   904,     0,     0,   555,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
    1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,  1677,
       0,     0,   555,  1667,     0,     0,     0,  1947,     0,  1963,
    1964,  1965,     0,  1966,  1967,  1968,  1969,  1970,  1971,     0,
       0,     0,   555,   555,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   901,     0,     0,   691,     0,     0,     0,
       0,   691,     0,  1784,   904,     0,     0,   555,     0,   901,
    1509,     0,   906,     0,  1961,     0,     0,     0,     0,     0,
       0,   691,     0,     0,  3461, -2137,     0,     0,     0,   904,
       0,     0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,
       0,     0,     0,     0,  1539,     0,     0,     0,   555,  1041,
       0,     0,  1041,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   556,     0,     0,     0,   556,   556,   556,     0,
    1509,  1668,     0,     0, -2137, -2137, -2137,     0,  1672,  1673,
    1674,  1675,  1676,  1677,  1962,     0,   904,     0,     0,  1539,
    1539,   903,     0,     0,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1539,     0,  1539,     0,  1539,
     556,   556,   556,   556,   556,   556,   556,   556,   556,   556,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3183,
       0,     0,     0,     0,     0,     0,   691,  1642,     0,     0,
    1641,     0,  1643,     0,     0,  1644,     0,     0,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1509,     0,  1509,  1509,
       0,  1652,     0,     0,     0,   691,  1653,     0,     0,     0,
       0,     0,  1654,     0,     0,     0,     0,     0,   903,  1655,
    1081,     0,     0,  1954,     0,     0,   906,  1955,  1956,     0,
       0,  1957,  1958,  1959,   903,  2027,     0,     0,     0,     0,
       0,     0,     0,  3300,  1656,     0,   695,     0,     0,  3601,
       0,     0,     0,     0,     0,     0,     0,     0,   904,     0,
    1539,  2468,     0,     0,     0,     0,     0,  1539,     0,     0,
    1539,  1539,  1509,     0,     0,  1509,  1509,     0,     0,  1539,
       0,  1539,  1539,     0,     0,     0,  1539,     0,     0,     0,
       0,     0,   904,     0,  3461,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     789,   535,   792,     0,   796,     0,   535,     0,     0,   535,
       0,     0,     0,     0,     0,     0,   535,  1963,  1964,  1965,
    1784,  1966,  1967,  1968,  1969,  1970,  1971,     0,     0,     0,
       0,  1657,   910,   910,     0,  3461,   910,     0,     0,     0,
       0,     0,     0,   892,  1997,   535,   535,   535,     0,   906,
    1658,     0,     0,  1005,     0,  1659,     0,     0,   904,     0,
    1539,  1539,     0,     0,  1539,     0,     0,     0,  1539,     0,
       0,  1539,  1539,     0,   691,     0,     0,   555,  1660,  1661,
       0,     0,     0,     0,     0,     0,   535,   535,   535,     0,
       0,     0,   556,     0,  1662,     0,   535,     0,     0,     0,
       0,     0,     0,     0,   691,     0,  1784,     0,     0,   535,
     535,     0,     0,  3461,   535,   535,     0,     0,     0,     0,
     906,     0,     0,     0,     0,     0,  1961,     0,     0,     0,
       0,  1663,     0,     0,  1664,     0,     0,     0,     0,   535,
     535,     0,   535,  1539,  1539,   906,     0,  1539,  1665,     0,
     904,  1666,  1887,     0,     0,     0,   535,     0,     0,     0,
       0,     0,   535,  1896,     0,  1897,     0,   691,     0,     0,
       0,     0,     0,     0,   910,  1904,     0,     0,  1081,     0,
       0,  1954,     0,     0,     0,  1955,  1956,     0,     0,  1957,
    1958,  1959,  1905,     0,     0,     0,  1962,  2184,     0,     0,
       0,     0,   906,     0,  1643,     0,     0,  1644,     0,     0,
       0,  1645,  1646,     0,     0,     0,     0,     0,     0,     0,
    1922,  1924,     0,     0,     0,     0,     0,   691,     0,   535,
       0,     0,   535,     0,     0,     0,     0,     0,     0,     0,
       0,   691,     0,     0,  1654,     0,     0,     0,   904,   555,
    1667, -2137,     0,     0,     0,     0,     0,     0,   691,     0,
       0,  1349,  3308,     0,  1390,     0,     0,     0,     0,     0,
    2468,     0,   535,     0,     0,     0,  1656,     0,     0,   535,
     535,   535,   535,     0,     0,  3672,     0,     0,  1643,     0,
       0,  1644,     0,     0,   535,  1645,  1646,  1647,  1648,  1649,
    1650,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1081,     0,     0,  1954,     0,  1652,     0,  1955,
    1956,     0,  2788,  1957,  1958,  1959,     0,     0,  1654,     0,
       0,     0,     0,     0,     0,  1655,     0,     0,     0,     0,
       0,   892,  2804,     0,   906,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1668,     0,
    1656,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,
    1677,   556,     0, -2137,     0,     0,   556,     0,   906,  1643,
       0,     0,  1644,     0,     0,     0,  1645,  1646,     0,     0,
       0,     0, -2137,     0,  1961,     0,     0, -2137,     0,     0,
       0,     0,   556,     0,     0,     0,     0,     0,     0,  1963,
    1964,  1965,     0,  1966,  1967,  1968,  1969,  1970,  1971,  1654,
       0,     0,   556,   556,     0,     0, -2137,     0,     0,     0,
       0,     0,     0,     0,     0,   804, -2137,     0,     0,     0,
     812,     0,     0,   813,     0,     0,     0,   556,     0,     0,
       0,  1656,     0,     0,   906,     0,     0,  1657,     0,     0,
       0,     0,     0,     0,  1962,     0,     0,     0,  2213,  2213,
       0,     0,  1005,     0,     0,     0,  1658,     0,     0,     0,
       0,  1659,     0,     0,   535,   535,     0,   535,   556,     0,
    1665,     0,     0,     0,     0,     0,   535,   535,     0,     0,
       0,     0,   535,     0,  1660,  1661,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   904,     0,  2807,     0,     0,
    1662,     0,     0,     0,     0,   535,     0,  1509, -2137,     0,
    1026,     0,  1005,  1390,   892,     0,     0,  1509,   535,     0,
    1509,     0,     0,     0,     0,     0,   906,     0, -2137,     0,
       0,     0,     0,  1081,     0,     0,  3144,  1663,     0,     0,
    1664,  3145,     0,     0,     0,     0,     0, -2137,     0,     0,
       0,     0, -2137,     0,  1665,     0,     0,  1666,     0,     0,
       0,     0,     0,     0,     0,     0,   535,     0,  1349,     0,
       0,     0, -2137,  3152,     0,     0,     0,     0,  1962,     0,
   -2137,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2137,   904,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2365,  2367,     0,  3154,     0,     0,   904,     0,
    1005,  1005,   535,     0,     0,   535,     0,     0,     0,     0,
    1081,     0,     0,  1954,   906,     0,  1509,  1955,  1956,   535,
     535,  1957,  1958,  1959,     0,     0,     0,   535,     0,     0,
       0,     0,     0,  1194,     0,  1665,     0,     0,     0,  3602,
       0,     0,     0,     0,     0,     0,  1667,  1963,  1964,  1965,
       0,  1966,  1967,  1968,  1969,  1970,  1971,     0,     0,   535,
     535,  3510,     0,     0,     0,     0,     0,     0,     0,     0,
   -2137,     0,   535,   892,     0,     0,  1401,  1672,  1673,  1674,
    1675,  1676,  1677,  1407,  1409,  1412,  1414,     0,     0,   535,
       0,     0, -2137,   535,     0,     0,     0,   535,  1419,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2137,     0,     0,     0,     0, -2137,     0,     0,     0,
       0,     0,     0,  1509,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1668, -2137,     0,  1669,  1670,  1671,
       0,  1672,  1673,  1674,  1675,  1676,  1677,   556,     0,     0,
       0,  2081,  1643,     0,     0,  1644,     0,     0,     0,  1645,
    1646,  1963,  1964,  1965,  1390,  1966,  1967,  1968,  1969,  1970,
    1971,     0,  1643,  1390,     0,  1644,     0,     0,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,     0,     0,  1962,
       0,     0,  1654,     0,     0,     0,     0,  1390,     0, -2137,
       0,  1652,     0,     0,     0,     0,  1961,     0,     0,   535,
       0,   535,  1654,     0,     0,     0,   892,   535,     0,  1655,
       0,     0,     0,     0,  1656, -2137,     0,     0,   535,     0,
    2538,     0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,
       0,     0,     0,     0,  1656,     0,   892,   892,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   535,
       0,   906,   892,     0,   535,     0,     0,     0,     0,  2594,
    2594,  1534,     0,     0,     0,     0,  1962,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2808, -2137,     0,     0,     0,   535,  1349,     0,   535,     0,
     535,   535,     0,   535,   535,     0,     0,  1005,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   556,
       0, -2137,     0,     0,  1349,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2137,  1657,     0,     0,     0, -2137,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   906,     0,
    1658,     0,     0,     0,     0,  1659,     0,     0,     0,     0,
     535,     0,   535,   535,   906,     0,     0,     0,     0,     0,
     535,     0,     0,     0, -2137,     0,     0,     0,  1660,  1661,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2137,
       0,   535,     0,   535,  1662,     0,  3169,  3170,  3171,  3172,
    3173,  3174,     0,     0,     0,     0,     0,     0,     0,     0,
    1643,     0,     0,  1644,     0,   535,  2714,  1645,  1646,     0,
     535,     0,     0,     0,     0,     0,     0,     0,  1665,     0,
       0,  1663,     0,     0,  1664,  1349,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   892,     0,  1665,     0,
    1654,  1666,     0,     0,     0,  1349,     0, -2137,   535,     0,
       0,     0,     0,  1776,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1803,     0,     0,  1963,
    1964,  1965,  1656,  1966,  1967,  1968,  1969,  1970,  1971,     0,
       0,  1390,     0,     0,     0,     0,     0,  1827,     0,     0,
       0,     0,     0,     0,     0,  1643,     0,   535,  1644,   535,
       0,   535,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,
       0,     0,     0,     0,     0,     0,   535,   535,     0,     0,
   -2137,     0,     0,     0,  1652,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1654,     0,     0,  3109,     0,
    1667,     0,  1655,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   535,  1081,   535,     0,  3144,     0,
       0,     0,     0,  3145,     0,     0,     0,  1656,     0, -2137,
     535,   535,     0,     0,     0,     0,   892,     0,     0,     0,
       0,   535,   535,   535,   535,  1349,   535,  1349, -2137,     0,
       0,     0,   535, -2137,   535,  3152,     0,     0,     0,     0,
       0,     0, -2137,     0,     0,   535,   535,     0,     0,     0,
     535,   535,     0,     0,     0,   535,   535,   535,   535,     0,
     535,   535,     0,     0,     0,  1848,     0,  3154, -2137,  1390,
       0,  1866, -2137,     0,     0,  1672,  1673,  1674,  1675,  1676,
    1677,     0,   535,   535,   535,   535,     0,     0,  1668,   535,
       0,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,
    1677,     0,     0,   535,  1657,  2081,     0,     0,     0,  1390,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1658,     0,     0,  1665,     0,  1659,     0,
     892,     0,     0,  3609,     0,     0,     0,  1509,     0,     0,
       0,     0,     0,     0,  1349,     0,     0,     0,     0,     0,
       0,  1660,  1661,     0,     0,     0,     0,     0,  1005,     0,
       0,     0,     0,     0, -2137,     0,     0,  1662,     0,     0,
       0,     0,     0,     0,   892,     0,     0,     0,     0,     0,
       0,     0,     0, -2137,     0,     0,   892,     0, -2137,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1663,     0,     0,  1664,     0,     0,
       0,     0,     0,     0,     0,     0,   892,     0,     0,     0,
       0,  1665,     0,   892,  1666,   535,     0, -2137, -2137,     0,
       0,     0,     0,     0,  2009,     0,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -45,     0,     0,     0,     0,     0,   535,     0,   892,
       0,     0,   535,   892,     0,  1005,     0,  1390,     0,   892,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,  1962,     0,     0,     2,     0,     3,     4,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       5,     0,     0,     0,     0,     6,     0,   535,     0,     0,
       0,   535,     0,     0,     7,     0,   535,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,     8,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2137,     9,     0,     0,
       0,     0,     0,  1672,  1673,  1674,  1675,  1676,  1677,    10,
       0,    11,     0,     0,     0,   535,     0,     0,     0,     0,
       0,     0,    12,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2163,     0,  2166,    13,     0,    14,  1349,
       0,     0,     0, -2137,     0,     0,     0,    15,     0,     0,
    2181,     0,     0,     0,     0,    16,     0,     0,     0,     0,
     535,     0,     0,    17,     0,    18,    19,     0,     0,     0,
       0,     0,     0,     0,     0,   535,     0,     0,     0,    20,
       0,  1509,     0,    21,     0,     0,  1509,     0,  2218,     0,
       0,  1668,     0,     0,  1669,  1670,  1671,     0,  1672,  1673,
    1674,  1675,  1676,  1677,     0,     0,     0,     0,  2401,     0,
    1081,    22,     0,  3144,     0,   535,     0,     0,  3145,     0,
       0,   535,     0,     0,     0,     0,     0,    23,     0,     0,
       0,     0,     0,  1922,  1924,     0,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1349,  1349,  1349,
    3152, -2137,     0,     0,    24,     0,     0, -2137,  3169,  3170,
    3171,  3172,  3173,  3174,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2315,  2316,  2318,  2319,
       0,     0,  3154,  2321,     0,     0,     0,     0,     0,     0,
    1390,  1081,     0,     0,  3144,     0,     0,     0,     0,  3145,
     535,     0,     0,     0,     0,     0,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   535,   535,
     535,   535,   892,     0,     0,     0,     0,     0,    25,    26,
      27,  3152,   535,     0,   535,     0,    28,   535, -2137,    29,
       0,     0,   535,     0,     0,     0,     0,     0,  3612,  1643,
       0,     0,  1644,     0,     0,   535,  1645,  1646,  1647,  1648,
    1649,  1650,  1651,  3154,     0,     0,     0,     0,     0,     0,
       0,    30,   535,     0,     0,     0,  1005,     0,  1652, -2137,
      31,  1349,     0,     0,     0,     0,     0,   535,   535,  1654,
     535,     0,     0,     0,    32,     0,  1655,     0, -2137,     0,
       0,    33,     0, -2137,     0,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,  1081,     0,    35,  1954,     0,
       0,  1656,  1955,  1956,     0,     0,  1957,  1958,  1959,    36,
       0,  2454,     0,    37,     0,     0,     0,     0,     0,   535,
       0,     0, -2137,     0,  3684,     0,     0,   535,   535,   535,
       0,     0,     0,    38,     0,     0,   535,     0,     0,   535,
   -2137,     0,     0,     0,     0,   535,    39,     0,     0,    40,
       0,     0,    41,     0,     0,     0,     0,    42,     0, -2137,
     535,  1922,  1924,     0, -2137,     0,     0,     0,     0,     0,
       0,     0,  1509,    43,     0,     0,  1962,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   892,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,  1657,     0,
       0,     0,     0, -2137,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,   -45,     0,     0,  1658,     0,     0,
       0,     0,  1659,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1660,  1661,     0,     0,   535,
       0,     0,     0,     0,     0,   535,     0,  1962,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   535,     0,     0,     0,   535,     0,     0, -2137,   535,
     535,   535,     0,     0,     0,   535,   535,   535,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,  1663,     0,
       0,  1664,     0,     0,     0,     0,     0,     0,   535,     0,
     535,  1961,     0,     0,     0,  1665,  1349,     0,  1666,  2991,
    1349,     0,  1349,   535,   535,   535,   535,   535,   535,   535,
     535,   535,   535,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   535,
       0,     0,     0,   535,     0,     0,   535,     0,     0, -2137,
       0,     0,     0,     0,     0,     0,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1962,   535,     0,     0,     0, -2137,     0,     0,     0,
     892,     0,     0,  3169,  3170,  3171,  3172,  3173,  3174,     0,
       0,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   892,     0,  1667,   535,     0,
    2675,     0,     0,     0,     0,   535,   535,   535,   535,     0,
       0,     0,     0,  2689,  2690,  2692,     0,     0,     0,     0,
       0,     0,     0,     0,   535,   535,     0,     0,  2703,     0,
       0,  2706,     0,     0,     0,     0,  2711,     0,     0,     0,
     535,     0,     0,     0,     0,     0,     0, -2137,     0,     0,
       0,     0,   892,     0,  3169,  3170,  3171,  3172,  3173,  3174,
       0,     0,     0,     0,     0,  1390,     0,     0,     0,     0,
     535,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1643,     0,     0,  1644,
       0,     0,     0,  1645,  1646,     0,     0,  1649,  1650,  1651,
       0,     0,  1141,  1141,     0,  1668,     0,     0,  1669,  1670,
    1671,     0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,
       0,   535,  2484,     0,     0,   535,  1654,     0,     0,     0,
       0,   535,  1509,  1655,     0,     0,     0,     0,     0,     0,
       0,  2757,  2758,  2759,     0,   535,     0,     0,     0,     0,
       0,   535,     0,     0,     0,     0,     0,     0,  1656,     0,
       0,     0,     0,     0,   535,   535,     0,     0,     0,     0,
       0,     0,   535,     0,  1963,  1964,  1965,     0,  1966,  1967,
    1968,  1969,  1970,  1971,     0,     0,     0,     0,     0,   535,
       0,     0,     0,     0,   892,  1643,     0,     0,  1644,     0,
       0,     0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1652,  1267,     0,     0,  2991,  1391,
       0,     0,     0,     0,     0,  1654,     0,     0,     0,     0,
       0,     0,  1655,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   535,     0,  1656,     0,     0,
       0,     0,     0,     0,  1658,     0,     0,     0,     0,  1659,
     535,     0,     0,     0,     0,  2882,     0,     0,     0,     0,
       0,     0,     0,     0,   535,     0,     0,     0,     0,     0,
    1005,     0, -2137, -2137,   892,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1662,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   535,
       0,     0,     0,     0,     0,   535,     0,     0,     0,  1390,
       0,     0,  1643,   535,     0,  1644,     0,     0,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,     0, -2137,     0,
       0,     0,     0,     0,  1657,     0,     0,  3018,     0,   535,
    3023,  1652,  1665,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1654,  1658,     0,     0,     0,     0,  1659,  1655,
       0,     0,     0,     0,     0,     0,   892,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   535,     0,     0,     0,
       0,  1660,  1661,     0,  1656,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1662,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3059,
    3060,  3061,  3062,  1515,   535,     0,     0,     0,     0,   535,
       0,  1533,     0,     0,  1535,     0,     0,  1546,  1549,  1554,
    1557,     0,     0,     0,  1663,     0,     0,  1664,     0,     0,
       0,     0,     0,     0,  1667,   535,     0,     0,     0,     0,
       0,  1665,     0,     0,  1666,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2991,   535,   535,     0,  1391,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   535,
       0,  1657,     0,     0,   535,  1607,   535,     0,     0,     0,
     535,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1658,     0,     0,  1612,   535,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,  1615,  1616,  1617,     0,  1621,  1625,
       0,     0,     0,     0,     0,     0,     0,     0,  1660,  1661,
       0,   535,   535,     0,     0,   535,     0,     0,     0,     0,
       0,     0,     0,     0,  1662,     0,     0,     0,  1686,     0,
       0,     0,  1668,  1667,     0,  1669,  1670,  1671,     0,  1672,
    1673,  1674,  1675,  1676,  1677,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3221,     0,     0,     0,
       0,  1663,     0,     0,  1664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1665,     0,
    1731,  1666,     0,     0,  1747,  1752,     0,     0,     0,     0,
       0,     0,   535,     0,     0,  1141,  1141,     0,     0,   535,
       0,  1349,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1643,     0,     0,  1644,     0,     0,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   535,     0,
       0,  1668,     0,  1652,  1669,  1670,  1671,     0,  1672,  1673,
    1674,  1675,  1676,  1677,  1654,     0,     0,     0,  2501,     0,
       0,  1655,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   535,     0,     0,     0,
    1667,     0,     0,     0,     0,     0,  1656,     0,  1643,     0,
       0,  1644,     0,     0,     0,  1645,  1646,  1647,  1648,  1649,
    1650,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   892,     0,     0,     0,     0,     0,  1652,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1654,  1391,
       0,     0,     0,     0,     0,  1655,     0,     0,  1391,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1656,     0,  1391,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   535,   535,     0,     0,   535,
       0,     0,     0,  1657,     0,     0,     0,   535,  1668,     0,
       0,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,
    1677,     0,  1658,     0,     0,  2738,     0,  1659,   892,     0,
       0,     0,     0,     0,     0,     0,     0,   535,     0,     0,
     535,     0,     0,     0,  2991,     0,  1349,     0,     0,     0,
    1660,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1662,   535,     0,   535,
       0,     0,     0,     0,     0,     0,     0,  1657,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1643,     0,     0,
    1644,     0,     0,     0,  1645,  1646,  1658,     0,  1649,  1650,
    1651,  1659,     0,  1663,     0,     0,  1664,     0,     0,     0,
       0,     0,     0,  3018,  1944,     0,  1652,     0,  3435,     0,
    1665,     0,     0,  1666,  1660,  1661,     0,  1654,     0,     0,
     535,     0,     0,     0,  1655,     0,     0,   535,  3459,     0,
    1662,     0,     0,     0,     0,     0,     0,  1554,     0,  1554,
    1554,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
     535,     0,  1141,  1141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1663,  1141,     0,
    1664,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     535,     0,     0,     0,  1665,     0,     0,  1666,     0,     0,
       0,     0,     0,     0,   535,     0,  2049,     0,  2050,     0,
    1081,     0,   535,  3144,     0,     0,     0,     0,  3145,     0,
       0,   535,  1667,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2089,     0,     0,     0,
       0,     0,  2093,  2094,  2095,  2096,  2097,  2098,  2099,  2100,
    3152,     0,     0,  3527,  2109,  2110,  1657, -2137,     0,  2121,
       0,     0,     0,  2124,     0,     0,  2132,  2133,  2134,  2135,
    2136,  2137,  2138,  2139,  2140,  1658,     0,  2141,     0,     0,
    1659,     0,  3154,     0,  1141,     0,  1391,     0,     0,     0,
       0,     0,  3562,  1228,     0,     0,  1667,     0,     0,  1229,
       0,     0,     0,  1660,  1661,     0,     0,  2167,  1241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,     0,     0,     0,     0,  1242,     0,
    1668,     0,     0,  1669,  1670,  1671,     0,  1672,  1673,  1674,
    1675,  1676,  1677,     0,     0,  1616,  1617,  2790,  3613,     0,
       0,     0,     0,     0,     0,     0,  1663,     0,     0,  1664,
       0,     0,     0,     0,     0,     0,     0,  1543,     0,     0,
       0,     0,  1243,  1665,     0,     0,  1666,     0,     0, -2137,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2137,     0,
       0,     0,  1230, -2137,  1668,     0,     0,  1669,  1670,  1671,
       0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,     0,
       0,  2892,     0,     0,     0,     0,     0,     0,     0,     0,
    2293,     0,     0,     0,  1391,     0,     0,  2303,  2304,     0,
       0,     0, -2137,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1244,  3689,     0,     0,  1391,  1667,  1643,     0,     0,  1644,
    1680,     0,     0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
       0,     0,     0,     0,     0,     0,  1962,     0,     0,     0,
       0,  3713,     0,     0,     0,  1652,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1654,     0,     0,     0,
    1245,     0,  1680,  1655,     0,     0,     0,     0,  1246,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1247,     0,     0,  2402,  2403,     0,  2404,     0,  1656,     0,
       0,     0,     0,     0,     0,     0,  1543,     0,     0,     0,
       0,     0,  1231,     0,  3018,     0,     0,     0,     0,     0,
       0,     0,  1248,     0,     0,  2430,  2431,     0,     0,  2167,
       0,     0,     0,  1668,     0,     0,  1669,  1670,  1671,     0,
    1672,  1673,  1674,  1675,  1676,  1677,     0,     0, -2137,     0,
       0,     0,     0,     0,     0,     0,  1680,     0,  2458,     0,
       0,     0,     0,  2463,     0,     0,     0,     0,     0,     0,
       0,     0,  2270,     0,  3018,     0,  1233,     0,  1250,     0,
       0,     0,  1391,     0,     0,     0,     0,     0,  3793,  1541,
       0,     0,     0,  2480,     0,  1657,     0,     0,     0,     0,
       0,  1251,     0,     0,     0,  3800,  2271,     0,     0,     0,
       0,     0,  1081,     0,  1658,  3144,     0,     0,     0,  1659,
    3145,     0,  1253,     0,  2493,     0,     0,     0,     0,  2496,
    2497,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1660,  1661,     0,     0,     0,     0,     0,     0,
       0,     0,  3152,     0,     0,     0, -2137,     0,  1662, -2137,
       0,     0,     0,  3169,  3170,  3171,  3172,  3173,  3174,     0,
       0,     0,  2517,     0,     0,  2520,     0,  2522,     0,  1235,
    1680,     0,     0,     0,  3154,     0,     0,     0,     0,     0,
       0,     0,     0,  2526,     0,  1663,  1643,     0,  1664,  1644,
       0,     0,     0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
       0,     0,  1665,     0,     0,  1666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1652,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1654,     0,     0,  1731,
       0,     0,     0,  1655,     0,     0,     0,     0,     0,     0,
    3688,     0,     0,     0,     0,     0,  1752,  2139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,  1753,
       0,     0,     0,     0,     0,  1141,     0,     0,  1541,  1081,
       0, -2137,  1954,     0,  2610,     0,  1955,  1956,     0,     0,
    1957,  1958,  1959,     0,     0,     0,     0,     0,     0,     0,
   -2137,     0,     0,     0,  1680, -2137,     0,     0,  3685,     0,
       0,     0,     0,     0,  1667,     0,     0,     0,     0,     0,
       0,     0,  1680,     0,  1680,     0,  1543,  1543,     0,  1972,
       0,     0,  1543,     0,     0,  1680,     0,     0,  1680,     0,
       0,     0,     0,  1680, -2137,  1391,  1680,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1658,     0,     0,     0,     0,  1659,
       0,     0,     0,     0,     0,  2709,  1680,     0,  1962,     0,
       0,  1680,     0,     0,  1680,  1680,  1680,     0,     0,     0,
    1680,     0,  1660,  1661,  1680,     0,     0,     0,     0,     0,
       0,     0,  1668,     0,     0,  1669,  1670,  1671,  1662,  1672,
    1673,  1674,  1675,  1676,  1677,     0,     0,     0,     0,  3110,
       0,  1643,     0,     0,  1644,     0,     0,     0,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1663,  1542,     0,  1664,     0,
    1652,     0,     0,     0,     0,  1680,     0,     0,     0,     0,
       0,  1654,  1665,     0,     0,  1666,     0,     0,  1655,     0,
       0,  1081,     0,     0,  3144,  1961,     0,     0,     0,  3145,
   -2137,     0,  3148,  3149,  3150,     0,     0,     0,     0,     0,
       0,     0,     0,  1656,     0,     0,     0,     0,     0,     0,
    1680,     0,     0,     0,     0,     0,     0,     0,  2778,     0,
       0,  3152,  2780,  2050,     0,     0,  1680,     0,  3153,  2784,
       0,  1680,     0,     0,     0,     0,     0,     0,     0,  2793,
       0,     0,  2796,     0,  2798,     0,     0,     0,  1972,     0,
       0,     0,  2802,  3154,     0,  1962,     0,     0,     0,     0,
    2809,  2810,     0,     0,     0,     0,     0,  2817,     0,     0,
       0,     0,     0,     0,  1667,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1541,  1541,
       0,     0,     0,     0,  1541,     0,     0,     0, -2137,     0,
    1657,     0,     0,     0,     0,  3169,  3170,  3171,  3172,  3173,
    3174,     0,  2861,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,  2876,     0,  1659,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1141,     0,     0,  1542,     0,  1660,  1661,     0,
    3155,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1662,     0,     0,     0,     0,     0,  3156,
       0,     0,     0,     0,  3157,     0,     0,     0,     0,     0,
       0,     0,  1668,     0,     0,  1669,  1670,  1671,     0,  1672,
    1673,  1674,  1675,  1676,  1677,     0,     0, -2137, -2137,  3116,
    1663,     0,     0,  1664,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3160,     0,     0,     0,  1665,     0,     0,
    1666,     0,     0,  1680,     0,     0,     0,     0,     0,     0,
       0,  1972,  1972,     0,  1543,  1543,  1543,  1543,  1543,  1543,
       0,     0,  1543,  1543,  1543,  1543,  1543,  1543,  1543,  1543,
    1543,  1543,  1972, -2137,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1962,  1963,  1964,
    1965,     0,  1966,  1967,  1968,  1969,  1970,  1971,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2203,     0,
       0,     0,     0,     0,     0,     0,     0,  3075,  3076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3093,     0,     0,     0,     0,  1667,
       0,     0,     0,     0,     0,     0,  3097,     0,  1680,  1680,
       0,  3099,  3100,     0,     0,     0,  3101,     0,     0,     0,
       0,  3104,     0,     0,  3107,  3108,     0,     0,     0,  2293,
    1391,     0,     0,  3115,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1680,  3164,
       0,     0,  1680,  1680,  1680,  1680,  1680,  1680,  1680,  1680,
       0,     0,     0,     0,     0,  1543,  1543,     0,  1680,  1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1141,
    1680,     0,     0,  1680,     0,     0,     0,     0,     0,     0,
       0,  1680,  1680,  1680,  1680,  1680,  1680,  1680,  1680,  1680,
    1680,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
    1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,  1677,
       0,     0,     0,  3209,  3324,     0,  1680,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1542,  1542,     0,     0,     0,
    3228,  1542,     0,     0,     0,     0,     0,  3165,     0,     0,
    3166,  3167,  3168,     0,  3169,  3170,  3171,  3172,  3173,  3174,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1543,  1541,  1541,  1541,  1541,
    1541,  1541,     0,     0,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3255,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1680,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1680,  1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,     0,     0,     0,     0,
       0,     0,     0,  2154,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1391,     0,     0,     0,     0,     0,
       0,  2493,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3319,  3320,     0,     0,  3321,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1541,  1541,     0,
       0,     0,     0,     0,     0,  1542,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1680,  1680,  1680,     0,     0,  1972,  1972,  1972,  1972,
    1972,  1972,     0,     0,     0,  1972,  1972,  1972,  1972,  1972,
    1972,  1972,  1972,  1972,  1972,     0,     0,     0,     0,  1680,
    1680,     0,     0,     0,  1141,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3393,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1680,     0,     0,
       0,     0,  1680,     0,  1643,     0,     0,  1644,     0,  3405,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,  1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1680,  1652,     0,  1680,  1680,  1541,     0,     0,
       0,     0,  1972,  1972,  1654,     0,     0,     0,     0,     0,
       0,  1655,     0,     0,     0,     0,  1680,  1543,  1543,  1680,
       0,  1680,     0,     0,     0,  1680,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1656,     0,  3458,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3075,     0,     0,     0,
    3475,     0,     0,     0,  1141,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3485,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1542,  1542,  1542,  1542,  1542,  1542,  1680,
       0,  1542,  1542,  1542,  1542,  1542,  1542,  1542,  1542,  1542,
    1542,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1657,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1141,     0,     0,     0,     0,     0,     0,
       0,     0,  1658,     0,     0,     0,     0,  1659,     0,     0,
       0,  3538,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1643,     0,     0,  1644,     0,
    1660,  1661,  1645,  1646,     0,     0,  1649,  1650,  1651,     0,
       0,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,  1652,     0,     0,     0,  1680,     0,
       0,     0,     0,     0,     0,  1654,     0,  3572,     0,     0,
       0,     0,  1655,     0,     0,     0,     0,  3075,     0,     0,
       0,     0,     0,  1663,     0,     0,  1664,     0,     0,  1543,
    1141,     0,     0,     0,     0,     0,     0,  1656,     0,     0,
    1665,     0,     0,  1666,  1542,  1542,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1141,  1680,     0,  1680,
       0,     0,     0,  1680,     0,     0,     0,     0,     0,  1541,
    1541,     0,  1680,     0,     0,  1680,     0,  1680,     0,     0,
    3637,  1680,     0,     0,  1972,  1972,     0,     0,  1680,  1680,
       0,     0,     0,     0,     0,     0,  1680,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2858,  1657,     0,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,     0,  3175,     0,     0,     0,
    1680,     0,     0,  1658,     0,     0,     0,     0,  1659,     0,
       0,     0,     0,     0,  1542,  1680,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1660,  1661,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1662,     0,     0,
       0,     0,     0,  1543,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3722,  3722,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1663,     0,     0,  1664,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1668,  1665,     0,  1669,  1670,  1671,     0,  1672,  1673,  1674,
    1675,  1676,  1677,     0,     0,     0,  3722,  3402,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1541,     0,     0,     0,     0,     0,     0,  1643,     0,
       0,  1644,     0,     0,     0,  1645,  1646,  1647,  1648,  1649,
    1650,  1651,     0,  3722,     0,     0,  3080,     0,     0,     0,
    1081,     0,     0,  3144,     0,     0,     0,  1652,  3145,  1972,
    1543,  3148,  3149,  3150,     0,     0,     0,     0,  1654,     0,
    3098,     0,     0,  1667,     0,  1655,     0,     0,     0,  3151,
       0,     0,     0,     0,  1680,  1680,     0,     0,     0,     0,
    3152,     0,     0,     0,     0,     0,     0,  3153,     0,     0,
    1656,     0,  1680,     0,     0,     0,  1680,     0,  1680,  1680,
    1680,     0,     0,  1680,     0,     0,  1680,  1680,     0,     0,
       0,     0,  3154,     0,  1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2858,  2858,  2858,  2858,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3175,
    3175,  3175,  3175,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1542,  1542,     0,     0,
       0,  1668,     0,     0,  1669,  1670,  1671,     0,  1672,  1673,
    1674,  1675,  1676,  1677,     0,  1541,     0,  1657,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1658,     0,  1680,  3155,
       0,  1659,     0,     0,  1972,     0,     0,     0,     0,     0,
    2859,     0,     0,     0,     0,     0,     0,  1680,  3156,     0,
       0,     0,     0,  3157,  1660,  1661,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1662,     0,     0,     0,  1680,     0,  3158,  3159,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3160,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1972,  1663,     0,     0,
    1664,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1665,     0,     0,  1666,     0,  3161,
       0,     0,  3162,     0,     0,     0,     0,     0,  1680,  1680,
    1680,     0,  1541,     0,     0,     0,  1962,     0,     0,  3163,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3175,  3175,  3175,  3175,  3175,  3175,  3175,     0,  1543,
    1543,     0,  3175,  3175,     0,     0,     0,     0,     0,     0,
       0,     0,  3175,     0,  3175,     0,     0,     0,     0,     0,
       0,  3175,  3175,  3175,  3175,  3175,  3175,  3175,  3175,  3175,
    3175,     0,     0,     0,     0,     0,     0,     0,  1542,     0,
       0,     0,  1680,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1680,     0,  1667,     0,     0,     0,
       0,     0,     0,  1542,     0,     0,  2858,  2858,  2858,  2858,
    2858,  2858,  2858,     0,     0,     0,  2858,  2858,  3164,     0,
       0,  2858,     0,     0,  2858,     0,     0,  2858,  2858,  2858,
    2858,  2858,  2858,  2858,  2858,  2858,  2858,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1680,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1680,     0,     0,     0,     0,     0,
    1543,     0,     0,     0,     0,     0,     0,     0,  1972,  1972,
       0,  2859,  2859,  2859,  2859,     0,     0,     0,     0,     0,
    3175,  1543,  1543,  3175,  1668,  3175,     0,  1669,  1670,  1671,
       0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,     0,
       0,  3539,     0,     0,     0,     0,  3165,  1680,     0,  3166,
    3167,  3168,     0,  3169,  3170,  3171,  3172,  3173,  3174,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1542,     0,     0,     0,     0,     0,     0,     0,
       0,  1680,     0,     0,     0,     0,  3478,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1972,     0,     0,     0,     0,  3175,
       0,     0,  3175,  3175,     0,     0,     0,  3175,     0,  1972,
    1972,     0,     0,  3175,     0,     0,     0,  1643,     0,     0,
    1644,  1541,  1541,     0,  1645,  1646,  1647,  1648,  1649,  1650,
    1651,     0,     0,     0,     0,     0,  1680,  2858,     0,  2858,
       0,  2858,     0,     0,     0,     0,  1652,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1654,     0,     0,
       0,     0,     0,     0,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3175,  3175,  3175,
       0,     0,  3175,     0,     0,  3175,  3175,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1542,
       0,     0,  1643,     0,     0,  1644,     0,     0,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,     0,     0,     0,
       0,  1680,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1652,  3175,  3175,  3175,     0,     0,     0,     0,     0,
       0,     0,  1654,     0,     0,     0,     0,     0,     0,  1655,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1541,     0,     0,     0,     0,     0,     0,  2858,
       0,     0,  2858,  2858,  1656,     0,     0,     0,     0,     0,
       0,  2858,     0,  1541,  1541,     0,  1657,     0,  2858,     0,
       0,     0,     0,  2859,  2859,  2859,  2859,  2859,  2859,  2859,
       0,     0,     0,  2859,  2859,  1658,     0,     0,  2859,     0,
    1659,  2859,     0,     0,  2859,  2859,  2859,  2859,  2859,  2859,
    2859,  2859,  2859,  2859,  3382,     0,     0,     0,     0,     0,
       0,     0,     0,  1660,  1661,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1657,  2858,  2858,     0,     0,  2858,     0,     0,     0,
    2858,     0,     0,  2858,  2858,     0,  1663,     0,     0,  1664,
    1658,     0,     0,     0,     0,  1659,     0,     0,     0,     0,
       0,     0,     0,  1665,     0,     0,  1666,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1660,  1661,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1662,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1542,     0,  2858,  2858,     0,     0,  2858,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,     0,     0,  1664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1665,     0,
       0,  1666,     0,     0,     0,     0,     0,     0,  1542,  1542,
       0,     0,     0,     0,     0,  1667,     0,     0,     0,     0,
       0,     0,     0,     0,  2859,     0,  2859,     0,  2859,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1668,     0,     0,  1669,  1670,  1671,     0,
    1672,  1673,  1674,  1675,  1676,  1677,     0,     0,     0,     0,
    3626,     0,     0,     0,     0,     0,     0,     0,     0,  1542,
       0,     0,     0,     0,     0,     0,  2859,     0,     0,  2859,
    2859,     0,     0,     0,     0,     0,     0,     0,  2859,     0,
    1542,  1542,     0,     0,     0,  2859,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1668,     0,
       0,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,
    1677,     0,     0,     0,     0,  3655,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2859,
    2859,     0,     0,  2859,     0,     0,     0,  2859,     0,     0,
    2859,  2859,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,  1078,   658,
    1079,  1080,  1081,  1082,  1083,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,  2859,  2859,   125,  1084,  2859,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1085,   138,  1086,  1087,     0,   141,   142,   143,   144,   145,
     146,  1088,   627,   147,   148,  1089,  1090,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,  1091,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1092,  1093,   187,  1094,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   850,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1095,   219,   220,
     221,   222,   223,   630,  1096,   225,     0,   226,   227,  1097,
     229,     0,   230,     0,   231,   232,    21,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,     0,  1098,  1099,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1100,  1101,     0,  1102,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1103,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1104,   319,  1105,   321,   322,   323,   324,
     325,  1106,   326,   327,   328,   329,  1107,   633,   331,  1108,
     333,   334,   335,     0,   336,   337,     0,     0,  1109,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    25,    26,    27,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1110,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1111,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    32,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1112,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,    37,   452,   453,   454,
     455,   456,   457,   458,     0,  1113,  1114,     0,   461,     0,
     462,   463,   639,   465,   640,  1115,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,    39,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     642,  1116,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,    43,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1117,     0,
      44,     0,     0,     0,     0,  1118,  1119,  1120,     0,     0,
       0,     0,  1121,     0,  1122,  3298,     0,     0,     0,     0,
    1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,  1078,
     658,  1079,  1080,  1081,  1082,  1083,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,  1084,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,  1085,   138,  1086,  1087,     0,   141,   142,   143,   144,
     145,   146,  1088,   627,   147,   148,  1089,  1090,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,  1091,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,  1092,  1093,   187,
    1094,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     850,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1095,   219,
     220,   221,   222,   223,   630,  1096,   225,     0,   226,   227,
    1097,   229,     0,   230,     0,   231,   232,    21,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,  1098,
    1099,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,  1100,  1101,     0,  1102,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1103,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1104,   319,  1105,   321,   322,   323,
     324,   325,  1106,   326,   327,   328,   329,  1107,   633,   331,
    1108,   333,   334,   335,     0,   336,   337,     0,     0,  1109,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    25,    26,    27,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1110,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1111,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    32,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,  1112,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,    37,   452,   453,
     454,   455,   456,   457,   458,     0,  1113,  1114,     0,   461,
       0,   462,   463,   639,   465,   640,  1115,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
      39,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   642,  1116,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,    43,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,  1117,
       0,    44,     0,     0,     0,     0,  1118,  1119,  1120,     0,
       0,     0,     0,  1121,     0,  1122,     0,     0,     0,     0,
       0,  1123,  1124,     0,     0,     0,     0,  1125,  1126,  1351,
    1078,   658,  1079,  1080,  1081,  1082,  1083,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,  1352,   122,   123,
     124,     0,     0,     0,  1353,     0,   125,  1084,     0,     0,
    1354,   127,   128,     0,   129,   130,   131,  1355,   133,   134,
     135,   136,  1085,  1356,  1086,  1087,     0,   141,   142,   143,
     144,   145,   146,  1088,   627,   147,   148,  1089,  1090,   151,
       0,   152,   153,   154,   155,   628,     0,  1357,     0,  1358,
     159,   160,   161,   162,   163,  1359,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,  1360,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,  1092,  1093,
     187,  1094,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,  1361,     0,   201,
     202,   850,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,  1095,
     219,   220,   221,   222,   223,   630,  1096,   225,     0,   226,
     227,  1097,   229,     0,   230,     0,   231,  1362,     0,  1363,
     234,   235,  1364,  1365,   238,     0,   239,   240,     0,     0,
    1098,  1099,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,  1366,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,  1367,   266,   267,
     268,   269,   270,   271,  1100,  1101,     0,  1102,     0,   275,
    1368,  1369,   278,  1370,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,  1371,   289,  1372,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  1373,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,  1104,  1374,  1105,   321,   322,
     323,   324,   325,  1106,   326,   327,  1375,   329,  1107,   633,
     331,  1108,   333,   334,   335,     0,   336,   337,     0,     0,
    1109,   339,   340,     0,     0,   341,   342,  1376,   344,  1377,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
    1378,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
    1110,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,  1379,   402,   403,   404,  1111,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
    1380,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,  1381,   429,   430,  1112,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,  1382,   447,   638,   449,     0,   450,   451,     0,   452,
    1383,   454,   455,   456,   457,   458,     0,  1113,  1114,     0,
     461,     0,   462,   463,   639,   465,   640,  1115,   467,   468,
    1384,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1116,  1385,   489,  1386,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1117,     0,     0,     0,     0,     0,     0,  1118,  1119,  1120,
       0,     0,     0,     0,  1121,     0,  1122,  1387,     0,     0,
       0,     0,  1123,  1124,     0,     0,     0,     0,  1125,  1126,
     112,  1078,   658,  1079,  1080,  1081,  1082,  1083,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,  1084,     0,
       0,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,   135,   136,  1085,   138,  1086,  1087,  1550,   141,   142,
     143,   144,   145,   146,  1088,   627,   147,   148,  1089,  1090,
     151,     0,   152,   153,   154,   155,   628,     0,   629,     0,
    1091,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,  1092,
    1093,   187,  1094,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   850,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
    1095,   219,   220,   221,   222,   223,   630,  1096,   225,     0,
     226,   227,  1097,   229,     0,   230,     0,   231,   232,  1551,
     233,   234,   235,   236,   237,   238,     0,   239,   240,     0,
       0,  1098,  1099,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,   271,  1100,  1101,     0,  1102,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,  1552,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,  1103,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,  1104,   319,  1105,   321,
     322,   323,   324,   325,  1106,   326,   327,   328,   329,  1107,
     633,   331,  1108,   333,   334,   335,     0,   336,   337,     0,
       0,  1109,   339,   340,     0,     0,   341,   342,   343,   344,
     345,   635,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     636,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,  1110,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1111,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,  1112,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   638,   449,     0,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,     0,  1113,  1114,
       0,   461,  1553,   462,   463,   639,   465,   640,  1115,   467,
     468,   641,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,  1116,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,  1117,     0,     0,     0,     0,     0,     0,  1118,  1119,
    1120,     0,     0,     0,     0,  1121,     0,  1122,     0,     0,
       0,     0,     0,  1123,  1124,     0,     0,     0,     0,  1125,
    1126,  1351,  1078,   658,  1079,  1080,  1081,  1082,  1083,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,  1353,     0,   125,  1084,
       0,     0,  1354,   127,   128,     0,   129,   130,   131,  1355,
     133,   134,   135,   136,  1085,  1356,  1086,  1087,     0,   141,
     142,   143,   144,   145,   146,  1088,   627,   147,   148,  1089,
    1090,   151,     0,   152,   153,   154,   155,   628,     0,  1357,
       0,  1358,   159,   160,   161,   162,   163,  1359,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,  1360,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
    1092,  1093,   187,  1094,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   850,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,  1095,   219,   220,   221,   222,   223,   630,  1096,   225,
       0,   226,   227,  1097,   229,     0,   230,     0,   231,  1362,
       0,  1363,   234,   235,  1364,  1365,   238,     0,   239,   240,
       0,     0,  1098,  1099,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,  1366,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,  1367,
     266,   267,   268,   269,   270,   271,  1100,  1101,     0,  1102,
       0,   275,  1368,  1369,   278,  1370,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,  1371,   289,  1372,     0,
     291,   292,   293,   294,   295,   296,   297,   298,  1373,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,  1104,  1374,  1105,
     321,   322,   323,   324,   325,  1106,   326,   327,  1375,   329,
    1107,   633,   331,  1108,   333,   334,   335,     0,   336,   337,
       0,     0,  1109,   339,   340,     0,     0,   341,   342,  1376,
     344,  1377,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   636,  1378,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,  1110,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,  1379,   402,   403,   404,  1111,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,  1380,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,  1381,   429,   430,  1112,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,  1382,   447,   638,   449,     0,   450,   451,
       0,   452,  1383,   454,   455,   456,   457,   458,     0,  1113,
    1114,     0,   461,     0,   462,   463,   639,   465,   640,  1115,
     467,   468,  1384,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1116,  2298,   489,  1386,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1117,     0,     0,     0,     0,     0,     0,  1118,
    1119,  1120,     0,     0,     0,     0,  1121,     0,  1122,     0,
       0,     0,     0,     0,  1123,  1124,     0,     0,     0,     0,
    1125,  1126,  1351,  1078,   658,  1079,  1080,  1081,  1082,  1083,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,  1353,     0,   125,
    1084,     0,     0,  1354,   127,   128,     0,   129,   130,   131,
    1355,   133,   134,   135,   136,  1085,  1356,  1086,  1087,     0,
     141,   142,   143,   144,   145,   146,  1088,   627,   147,   148,
    1089,  1090,   151,     0,   152,   153,   154,   155,   628,     0,
    1357,     0,  1358,   159,   160,   161,   162,   163,  1359,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
    1360,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,  1092,  1093,   187,  1094,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   850,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,  1095,   219,   220,   221,   222,   223,   630,  1096,
     225,     0,   226,   227,  1097,   229,     0,   230,     0,   231,
    1362,     0,  1363,   234,   235,  1364,  1365,   238,     0,   239,
     240,     0,     0,  1098,  1099,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,  1366,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
    1367,   266,   267,   268,   269,   270,   271,  1100,  1101,     0,
    1102,     0,   275,  1368,  1369,   278,  1370,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,  1371,   289,  1372,
       0,   291,   292,   293,   294,   295,   296,   297,   298,  1373,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,  1104,  1374,
    1105,   321,   322,   323,   324,   325,  1106,   326,   327,  1375,
     329,  1107,   633,   331,  1108,   333,   334,   335,     0,   336,
     337,     0,     0,  1109,   339,   340,     0,     0,   341,   342,
    1376,   344,  1377,   635,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   636,  1378,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,  1110,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,  1379,   402,   403,   404,
    1111,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,  1380,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,  1381,   429,   430,  1112,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,  1382,   447,   638,   449,     0,   450,
     451,     0,   452,  1383,   454,   455,   456,   457,   458,     0,
    1113,  1114,     0,   461,     0,   462,   463,   639,   465,   640,
    1115,   467,   468,  1384,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,  1116,     0,   489,  1386,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1117,     0,     0,     0,     0,     0,     0,
    1118,  1119,  1120,     0,     0,     0,     0,  1121,     0,  1122,
    2346,     0,     0,     0,     0,  1123,  1124,     0,     0,     0,
       0,  1125,  1126,   112,  1078,   658,  1079,  1080,  1081,  1082,
    1083,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121, -1242,   122,   123,   124,     0,     0,     0,     0, -1242,
     125,  1084,     0,     0,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,  1085,   138,  1086,  1087,
       0,   141,   142,   143,   144,   145,   146,  1088,   627,   147,
     148,  1089,  1090,   151,     0,   152,   153,   154,   155,   628,
       0,   629,     0,  1091,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,  1092,  1093,   187,  1094,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   850,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,  1095,   219,   220,   221,   222,   223,   630,
    1096,   225,     0,   226,   227,  1097,   229,     0,   230,     0,
     231,   232,     0,   233,   234,   235,   236,   237,   238,     0,
     239,   240,     0,     0,  1098,  1099,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,   271,  1100,  1101,
       0,  1102,     0,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
     290,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1103,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,  1104,
     319,  1105,   321,   322,   323,   324,   325,  1106,   326,   327,
     328,   329,  1107,   633,   331,  1108,   333,   334,   335,     0,
     336,   337,     0,     0,  1109,   339,   340,     0,     0,   341,
     342,   343,   344,   345,   635,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   636,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,  1110,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1111,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,  1112,
     432, -1242,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   638,   449,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,  1113,  1114,     0,   461,     0,   462,   463,   639,   465,
     640,  1115,   467,   468,   641,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1116,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1117,     0,     0,     0,     0,     0,
       0,  1118,  1119,  1120,     0,     0,     0,     0,  1121,     0,
    1122,     0,     0,     0,     0,     0,  1123,  1124,     0,     0,
       0,     0,  1125,  1126,  1351,  1078,   658,  1079,  1080,  1081,
    1082,  1083,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,  1353,
       0,   125,  1084,     0,     0,  1354,   127,   128,     0,   129,
     130,   131,  1355,   133,   134,   135,   136,  1085,  1356,  1086,
    1087,     0,   141,   142,   143,   144,   145,   146,  1088,   627,
     147,   148,  1089,  1090,   151,     0,   152,   153,   154,   155,
     628,     0,  1357,     0,  1358,   159,   160,   161,   162,   163,
    1359,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,  1360,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,  1092,  1093,   187,  1094,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   850,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,  1095,   219,   220,   221,   222,   223,
     630,  1096,   225,     0,   226,   227,  1097,   229,     0,   230,
       0,   231,  1362,     0,  1363,   234,   235,  1364,  1365,   238,
       0,   239,   240,     0,     0,  1098,  1099,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,  1366,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,  1367,   266,   267,   268,   269,   270,   271,  1100,
    1101,     0,  1102,     0,   275,  1368,  1369,   278,  1370,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,  1371,
     289,  1372,     0,   291,   292,   293,   294,   295,   296,   297,
     298,  1373,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
    1104,  1374,  1105,   321,   322,   323,   324,   325,  1106,   326,
     327,  1375,   329,  1107,   633,   331,  1108,   333,   334,   335,
       0,   336,   337,     0,     0,  1109,   339,   340,     0,     0,
     341,   342,  1376,   344,  1377,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,  1378,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,  1110,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,  1379,   402,
     403,   404,  1111,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,  1380,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,  1381,   429,   430,
    1112,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,  1382,   447,   638,   449,
       0,   450,   451,     0,   452,  1383,   454,   455,   456,   457,
     458,     0,  1113,  1114,     0,   461,     0,   462,   463,   639,
     465,   640,  1115,   467,   468,  1384,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,  1116,     0,
     489,  1386,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,  1117,     0,     0,     0,     0,
       0,     0,  1118,  1119,  1120,     0,     0,     0,     0,  1121,
       0,  1122,  3112,     0,     0,     0,     0,  1123,  1124,     0,
       0,     0,     0,  1125,  1126,  1351,  1078,   658,  1079,  1080,
    1081,  1082,  1083,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
    1353,     0,   125,  1084,     0,     0,  1354,   127,   128,     0,
     129,   130,   131,  1355,   133,   134,   135,   136,  1085,  1356,
    1086,  1087,     0,   141,   142,   143,   144,   145,   146,  1088,
     627,   147,   148,  1089,  1090,   151,     0,   152,   153,   154,
     155,   628,     0,  1357,     0,  1358,   159,   160,   161,   162,
     163,  1359,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,  1360,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,  1092,  1093,   187,  1094,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   850,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,  1095,   219,   220,   221,   222,
     223,   630,  1096,   225,     0,   226,   227,  1097,   229,     0,
     230,     0,   231,  1362,     0,  1363,   234,   235,  1364,  1365,
     238,     0,   239,   240,     0,     0,  1098,  1099,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,  1366,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,  1367,   266,   267,   268,   269,   270,   271,
    1100,  1101,     0,  1102,     0,   275,  1368,  1369,   278,  1370,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
    1371,   289,  1372,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1373,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1104,  1374,  1105,   321,   322,   323,   324,   325,  1106,
     326,   327,  1375,   329,  1107,   633,   331,  1108,   333,   334,
     335,     0,   336,   337,     0,     0,  1109,   339,   340,     0,
       0,   341,   342,  1376,   344,  1377,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,  1378,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1110,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,  1379,
     402,   403,   404,  1111,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,  1380,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,  1381,   429,
     430,  1112,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,  1382,   447,   638,
     449,     0,   450,   451,     0,   452,  1383,   454,   455,   456,
     457,   458,     0,  1113,  1114,     0,   461,     0,   462,   463,
     639,   465,   640,  1115,   467,   468,  1384,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1116,
       0,   489,  1386,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1117,     0,     0,     0,
       0,     0,     0,  1118,  1119,  1120,     0,     0,     0,     0,
    1121,     0,  1122,     0,     0,     0,     0,     0,  1123,  1124,
       0,     0,     0,     0,  1125,  1126,   112,  1078,   658,  1079,
    1080,     0,  1082,  1083,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,  1084,     0,     0,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,   135,   136,  1085,
     138,  1086,  1087,     0,   141,   142,   143,   144,   145,   146,
    1088,   627,   147,   148,  1089,  1090,   151,     0,   152,   153,
     154,   155,   628,     0,   629,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1092,  1093,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   850,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1095,   219,   220,   221,
     222,   223,   630,  1096,   225,     0,   226,   227,  1097,   229,
       0,   230,     0,   231,   232,    21,   233,   234,   235,   236,
     237,   238,     0,   239,   240,     0,     0,  1098,  1099,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
     271,  1100,  1101,     0,  1102,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  1103,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1104,   319,  1105,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,  1107,   633,   331,  1108,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,   343,   344,   345,   635,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      25,    26,    27,     0,   359,   360,   636,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1110,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1111,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    32,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1112,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     638,   449,     0,   450,   451,    37,   452,   453,   454,   455,
     456,   457,   458,     0,  1113,  1114,     0,   461,     0,   462,
     463,   639,   465,   640,  1115,   467,   468,   641,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,    39,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   642,
    1116,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,    43,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1121,     0,  1122,     0,     0,     0,     0,     0,  1123,
    1124,     0,     0,     0,     0,  1125,  1126,   112,  1078,   658,
    1079,  1080,  1081,  1082,  1083,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,  1728,   122,   123,   124,     0,
       0,     0,     0,     0,   125,  1084,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1085,   138,  1086,  1087,     0,   141,   142,   143,   144,   145,
     146,  1088,   627,   147,   148,  1089,  1090,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,  1091,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1092,  1093,   187,  1094,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   850,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1095,   219,   220,
     221,   222,   223,   630,  1096,   225,     0,   226,   227,  1097,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,     0,  1098,  1099,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1100,  1101,     0,  1102,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1103,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1104,   319,  1105,   321,   322,   323,   324,
     325,  1106,   326,   327,   328,   329,  1107,   633,   331,  1108,
     333,   334,   335,     0,   336,   337,     0,     0,  1109,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1110,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1111,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1112,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1113,  1114,     0,   461,     0,
     462,   463,   639,   465,   640,  1115,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1116,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1117,     0,
       0,     0,     0,     0,     0,  1118,  1119,  1120,     0,     0,
       0,     0,  1121,     0,  1122,     0,     0,     0,     0,     0,
    1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,  1743,
     658,  1079,  1080,  1081,  1744,  1083,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,  1745,   122,   123,   124,
       0,     0,     0,     0,     0,   125,  1084,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,  1085,   138,  1086,  1087,     0,   141,   142,   143,   144,
     145,   146,  1088,   627,   147,   148,  1089,  1090,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,  1091,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,  1092,  1093,   187,
    1094,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     850,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1095,   219,
     220,   221,   222,   223,   630,  1096,   225,     0,   226,   227,
    1097,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,  1098,
    1099,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,  1100,  1101,     0,  1102,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1103,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1104,   319,  1105,   321,   322,   323,
     324,   325,  1106,   326,   327,   328,   329,  1107,   633,   331,
    1108,   333,   334,   335,     0,   336,   337,     0,     0,  1109,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1110,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1111,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,  1112,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,  1113,  1114,     0,   461,
       0,   462,   463,   639,   465,   640,  1115,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,  1116,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,  1117,
       0,     0,     0,     0,     0,     0,  1118,  1119,  1120,     0,
       0,     0,     0,  1121,     0,  1122,     0,     0,     0,     0,
       0,  1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,
    1078,   658,  1079,  1080,  1081,  1082,  1083,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,  1084,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,  1085,   138,  1086,  1087,     0,   141,   142,   143,
     144,   145,   146,  1088,   627,   147,   148,  1089,  1090,   151,
       0,   152,   153,   154,   155,   628,     0,   629,     0,  1091,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,  1092,  1093,
     187,  1094,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   850,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,  1095,
     219,   220,   221,   222,   223,   630,  1096,   225,     0,   226,
     227,  1097,   229,     0,   230,     0,   231,   232,  1551,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,     0,
    1098,  1099,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,  1100,  1101,     0,  1102,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  1103,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,  1104,   319,  1105,   321,   322,
     323,   324,   325,  1106,   326,   327,   328,   329,  1107,   633,
     331,  1108,   333,   334,   335,     0,   336,   337,     0,     0,
    1109,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
    1110,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1111,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,  1112,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   638,   449,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,  1113,  1114,     0,
     461,     0,   462,   463,   639,   465,   640,  1115,   467,   468,
     641,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1116,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1117,     0,     0,     0,     0,     0,     0,  1118,  1119,  1120,
       0,     0,     0,     0,  1121,     0,  1122,     0,     0,     0,
       0,     0,  1123,  1124,     0,     0,     0,     0,  1125,  1126,
     112,  1078,   658,  1079,  1080,  1081,  1082,  1083,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,  1084,     0,
       0,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,   135,   136,  1085,   138,  1086,  1087,     0,   141,   142,
     143,   144,   145,   146,  1088,   627,   147,   148,  1089,  1090,
     151,     0,   152,   153,   154,   155,   628,     0,   629,     0,
    1091,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,  1092,
    1093,   187,  1094,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   850,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
    1095,   219,   220,   221,   222,   223,   630,  1096,   225,     0,
     226,   227,  1097,   229,     0,   230,     0,   231,   232,     0,
     233,   234,   235,   236,   237,   238,     0,   239,   240,     0,
       0,  1098,  1099,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,   271,  1100,  1101,     0,  1102,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,  1103,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,  1104,   319,  1105,   321,
     322,   323,   324,   325,  1106,   326,   327,   328,   329,  1107,
     633,   331,  1108,   333,   334,   335,     0,   336,   337,     0,
       0,  1109,   339,   340,     0,     0,   341,   342,   343,   344,
     345,   635,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     636,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,  1110,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1111,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,  1112,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   638,   449,     0,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,     0,  1113,  1114,
       0,   461,     0,   462,   463,   639,   465,   640,  1115,   467,
     468,   641,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,  1116,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,  1117,     0,     0,     0,     0,     0,     0,  1118,  1119,
    1120,     0,     0,     0,     0,  1121,     0,  1122,  2073,     0,
       0,     0,     0,  1123,  1124,     0,     0,     0,     0,  1125,
    1126,   112,  1078,   658,  1079,  1080,  1081,  1082,  1083,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,  1084,
       0,     0,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,  1085,   138,  1086,  1087,     0,   141,
     142,   143,   144,   145,   146,  1088,   627,   147,   148,  1089,
    1090,   151,     0,   152,   153,   154,   155,   628,     0,   629,
       0,  1091,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
    1092,  1093,   187,  1094,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   850,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,  1095,   219,   220,   221,   222,   223,   630,  1096,   225,
       0,   226,   227,  1097,   229,     0,   230,     0,   231,   232,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
       0,     0,  1098,  1099,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,   271,  1100,  1101,     0,  1102,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,  1103,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,  1104,   319,  1105,
     321,   322,   323,   324,   325,  1106,   326,   327,   328,   329,
    1107,   633,   331,  1108,   333,   334,   335,     0,   336,   337,
       0,     0,  1109,   339,   340,     0,     0,   341,   342,   343,
     344,   345,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   636,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,  1110,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1111,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,  1112,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   638,   449,     0,   450,   451,
    2708,   452,   453,   454,   455,   456,   457,   458,     0,  1113,
    1114,     0,   461,     0,   462,   463,   639,   465,   640,  1115,
     467,   468,   641,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1116,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1117,     0,     0,     0,     0,     0,     0,  1118,
    1119,  1120,     0,     0,     0,     0,  1121,     0,  1122,     0,
       0,     0,     0,     0,  1123,  1124,     0,     0,     0,     0,
    1125,  1126,   112,  1078,   658,  1079,  1080,  1081,  1082,  1083,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
    1084,     0,     0,   126,   127,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,  1085,   138,  1086,  1087,     0,
     141,   142,   143,   144,   145,   146,  1088,   627,   147,   148,
    1089,  1090,   151,     0,   152,   153,   154,   155,   628,     0,
     629,     0,  1091,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,  1092,  1093,   187,  1094,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   850,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,  1095,   219,   220,   221,   222,   223,   630,  1096,
     225,     0,   226,   227,  1097,   229,     0,   230,     0,   231,
     232,     0,   233,   234,   235,   236,   237,   238,     0,   239,
     240,     0,     0,  1098,  1099,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,   271,  1100,  1101,     0,
    1102,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,   297,   298,  1103,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,  1104,   319,
    1105,   321,   322,   323,   324,   325,  1106,   326,   327,   328,
     329,  1107,   633,   331,  1108,   333,   334,   335,     0,   336,
     337,     0,     0,  1109,   339,   340,     0,     0,   341,   342,
     343,   344,   345,   635,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   636,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,  1110,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1111,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  1112,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   638,   449,     0,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,     0,
    1113,  1114,     0,   461,     0,   462,   463,   639,   465,   640,
    1115,   467,   468,   641,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,  1116,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,  2816,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1117,     0,     0,     0,     0,     0,     0,
    1118,  1119,  1120,     0,     0,     0,     0,  1121,     0,  1122,
       0,     0,     0,     0,     0,  1123,  1124,     0,     0,     0,
       0,  1125,  1126,   112,  1078,   658,  1079,  1080,  1081,  1082,
    1083,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,  3063,   122,   123,   124,     0,     0,     0,     0,     0,
     125,  1084,     0,     0,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,  1085,   138,  1086,  1087,
       0,   141,   142,   143,   144,   145,   146,  1088,   627,   147,
     148,  1089,  1090,   151,     0,   152,   153,   154,   155,   628,
       0,   629,     0,  1091,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,  3064,   177,   178,   179,   180,   181,   182,
     183,   184,  1092,  1093,   187,  1094,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   850,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,  1095,   219,   220,   221,   222,   223,   630,
    1096,   225,     0,   226,   227,  1097,   229,     0,   230,     0,
     231,   232,     0,   233,   234,   235,   236,   237,   238,     0,
     239,   240,     0,     0,  3065,  1099,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,   271,  1100,  1101,
       0,  1102,     0,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
     290,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1103,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,  1104,
     319,  1105,   321,   322,   323,   324,   325,  1106,   326,   327,
     328,   329,  1107,   633,   331,  1108,   333,   334,   335,     0,
     336,   337,     0,     0,  1109,   339,   340,     0,     0,   341,
     342,   343,   344,   345,   635,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   636,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,  1110,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
    3066,  1111,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,  1112,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   638,   449,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,  1113,  1114,     0,   461,     0,   462,   463,   639,   465,
     640,  1115,   467,   468,   641,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1116,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1117,     0,     0,     0,     0,     0,
       0,  1118,  1119,  1120,     0,     0,     0,     0,  1121,     0,
    3067,     0,     0,     0,     0,     0,  1123,  1124,     0,     0,
       0,     0,  1125,  1126,   112,  1078,   658,  1079,  1080,  1081,
    1082,  1083,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,  1084,     0,     0,   126,   127,   128,     0,   129,
     130,   131,   132,   133,   134,   135,   136,  1085,   138,  1086,
    1087,     0,   141,   142,   143,   144,   145,   146,  1088,   627,
     147,   148,  1089,  1090,   151,     0,   152,   153,   154,   155,
     628,     0,   629,     0,  1091,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,  1092,  1093,   187,  1094,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   850,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,  1095,   219,   220,   221,   222,   223,
     630,  1096,   225,     0,   226,   227,  1097,   229,     0,   230,
       0,   231,   232,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,     0,     0,  1098,  1099,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,   271,  1100,
    1101,     0,  1102,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,   297,
     298,  1103,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
    1104,   319,  1105,   321,   322,   323,   324,   325,  1106,   326,
     327,   328,   329,  1107,   633,   331,  1108,   333,   334,   335,
       0,   336,   337,     0,     0,  1109,   339,   340,     0,     0,
     341,   342,   343,   344,   345,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,  1110,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1111,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
    1112,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   638,   449,
       0,   450,   451,  3254,   452,   453,   454,   455,   456,   457,
     458,     0,  1113,  1114,     0,   461,     0,   462,   463,   639,
     465,   640,  1115,   467,   468,   641,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,  1116,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,  1117,     0,     0,     0,     0,
       0,     0,  1118,  1119,  1120,     0,     0,     0,     0,  1121,
       0,  1122,     0,     0,     0,     0,     0,  1123,  1124,     0,
       0,     0,     0,  1125,  1126,   112,  1078,   658,  1079,  1080,
    1081,  1082,  1083,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,  1084,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,  1085,   138,
    1086,  1087,     0,   141,   142,   143,   144,   145,   146,  1088,
     627,   147,   148,  1089,  1090,   151,     0,   152,   153,   154,
     155,   628,     0,   629,     0,  1091,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,  1092,  1093,   187,  1094,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   850,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,  1095,   219,   220,   221,   222,
     223,   630,  1096,   225,     0,   226,   227,  1097,   229,     0,
     230,     0,   231,   232,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,     0,     0,  1098,  1099,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
    1100,  1101,     0,  1102,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1103,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1104,   319,  1105,   321,   322,   323,   324,   325,  1106,
     326,   327,   328,   329,  1107,   633,   331,  1108,   333,   334,
     335,     0,   336,   337,     0,     0,  1109,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1110,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1111,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,  1112,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   638,
     449,     0,   450,   451,  3457,   452,   453,   454,   455,   456,
     457,   458,     0,  1113,  1114,     0,   461,     0,   462,   463,
     639,   465,   640,  1115,   467,   468,   641,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1116,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1117,     0,     0,     0,
       0,     0,     0,  1118,  1119,  1120,     0,     0,     0,     0,
    1121,     0,  1122,     0,     0,     0,     0,     0,  1123,  1124,
       0,     0,     0,     0,  1125,  1126,   112,  1078,   658,  1079,
    1080,  1081,  1082,  1083,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,  1084,     0,     0,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,   135,   136,  1085,
     138,  1086,  1087,     0,   141,   142,   143,   144,   145,   146,
    1088,   627,   147,   148,  1089,  1090,   151,     0,   152,   153,
     154,   155,   628,     0,   629,     0,  1091,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1092,  1093,   187,  1094,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   850,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1095,   219,   220,   221,
     222,   223,   630,  1096,   225,     0,   226,   227,  1097,   229,
       0,   230,     0,   231,   232,     0,   233,   234,   235,   236,
     237,   238,     0,   239,   240,     0,     0,  1098,  1099,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
     271,  1100,  1101,     0,  1102,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  1103,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1104,   319,  1105,   321,   322,   323,   324,   325,
    1106,   326,   327,   328,   329,  1107,   633,   331,  1108,   333,
     334,   335,     0,   336,   337,     0,     0,  1109,   339,   340,
       0,     0,   341,   342,   343,   344,   345,   635,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   636,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1110,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1111,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1112,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     638,   449,     0,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,     0,  1113,  1114,     0,   461,     0,   462,
     463,   639,   465,   640,  1115,   467,   468,   641,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
    1116,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,  1117,     0,     0,
       0,     0,     0,     0,  1118,  1119,  1120,     0,     0,     0,
       0,  1121,     0,  1122,     0,     0,     0,     0,     0,  1123,
    1124,     0,     0,     0,     0,  1125,  1126,   112,  1078,   658,
    1079,  1080,  1081,  1082,  1083,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,  1084,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1085,   138,  1086,  1087,     0,   141,   142,   143,   144,   145,
     146,  1088,   627,   147,   148,  1089,  1090,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,  1091,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1092,  1093,   187,  1094,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   850,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1095,   219,   220,
     221,   222,   223,   630,  1096,   225,     0,   226,   227,  1097,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,     0,  1098,  1099,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1100,  1101,     0,  1102,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1103,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1104,   319,  1105,   321,   322,   323,   324,
     325,  1106,   326,   327,   328,   329,  1107,   633,   331,  1108,
     333,   334,   335,     0,   336,   337,     0,     0,  1109,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1110,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1111,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1112,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1113,  1114,     0,   461,     0,
     462,   463,   639,   465,   640,  1115,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1116,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1117,     0,
       0,     0,     0,     0,     0,  1748,  1749,  1120,     0,     0,
       0,     0,  1121,     0,  1122,     0,     0,     0,     0,     0,
    1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,  2211,
     658,  1079,  1080,  1081,  1082,  1083,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,  1084,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,  1085,   138,  1086,  1087,     0,   141,   142,   143,   144,
     145,   146,  1088,   627,   147,   148,  1089,  1090,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,  1091,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,  1092,  1093,   187,
    1094,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     850,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1095,   219,
     220,   221,   222,   223,   630,  1096,   225,     0,   226,   227,
    1097,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,  1098,
    1099,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,  1100,  1101,     0,  1102,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1103,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1104,   319,  1105,   321,   322,   323,
     324,   325,  1106,   326,   327,   328,   329,  1107,   633,   331,
    1108,   333,   334,   335,     0,   336,   337,     0,     0,  1109,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1110,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1111,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,  1112,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,  1113,  1114,     0,   461,
       0,   462,   463,   639,   465,   640,  1115,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,  1116,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,  1117,
       0,     0,     0,     0,     0,     0,  1118,  1119,  1120,     0,
       0,     0,     0,  1121,     0,  1122,     0,     0,     0,     0,
       0,  1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,
    1078,   658,  1079,  1080,  1081,  1082,  1083,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,  1084,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,  1085,   138,  1086,  1087,     0,   141,   142,   143,
     144,   145,   146,  1088,   627,   147,   148,  1089,  1090,   151,
       0,   152,   153,   154,   155,   628,     0,   629,     0,  1091,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,  1092,  1093,
     187,  1094,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   850,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,  1095,
     219,   220,   221,   222,   223,   630,  1096,   225,     0,   226,
     227,  1097,   229,     0,   230,     0,   231,   232,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,     0,
    1098,  1099,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,  1100,  1101,     0,  1102,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  1103,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,  1104,   319,  1105,   321,   322,
     323,   324,   325,  1106,   326,   327,   328,   329,  1107,   633,
     331,  1108,   333,   334,   335,     0,   336,   337,     0,     0,
    1109,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
    1110,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1111,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,  1112,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   638,   449,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,  1113,  1114,     0,
     461,     0,   462,   463,   639,   465,   640,  1115,   467,   468,
     641,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1116,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1117,     0,     0,     0,     0,     0,     0,  1118,  1119,  1120,
       0,     0,     0,     0,  1121,     0,  2492,     0,     0,     0,
       0,     0,  1123,  1124,     0,     0,     0,     0,  1125,  1126,
     112,  1078,   658,  1079,  1080,  1081,  1082,  1083,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,  1084,     0,
       0,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,   135,   136,  1085,   138,  1086,  1087,     0,   141,   142,
     143,   144,   145,   146,  1088,   627,   147,   148,  1089,  1090,
     151,     0,   152,   153,   154,   155,   628,     0,   629,     0,
    1091,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
    3064,   177,   178,   179,   180,   181,   182,   183,   184,  1092,
    1093,   187,  1094,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   850,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
    1095,   219,   220,   221,   222,   223,   630,  1096,   225,     0,
     226,   227,  1097,   229,     0,   230,     0,   231,   232,     0,
     233,   234,   235,   236,   237,   238,     0,   239,   240,     0,
       0,  3065,  1099,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,   271,  1100,  1101,     0,  1102,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,  1103,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,  1104,   319,  1105,   321,
     322,   323,   324,   325,  1106,   326,   327,   328,   329,  1107,
     633,   331,  1108,   333,   334,   335,     0,   336,   337,     0,
       0,  1109,   339,   340,     0,     0,   341,   342,   343,   344,
     345,   635,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     636,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,  1110,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,  3066,  1111,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,  1112,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   638,   449,     0,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,     0,  1113,  1114,
       0,   461,     0,   462,   463,   639,   465,   640,  1115,   467,
     468,   641,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,  1116,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,  1117,     0,     0,     0,     0,     0,     0,  1118,  1119,
    1120,     0,     0,     0,     0,  1121,     0,  3067,     0,     0,
       0,     0,     0,  1123,  1124,     0,     0,     0,     0,  1125,
    1126,   112,  1078,   658,  1079,  1080,  1081,  1082,  1083,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,  1084,
       0,     0,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,   135,  3719,  1085,   138,  1086,  1087,     0,   141,
     142,   143,   144,   145,   146,  1088,   627,   147,   148,  1089,
    1090,   151,     0,   152,   153,   154,   155,   628,     0,   629,
       0,  1091,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,  3720,   178,   179,   180,   181,   182,   183,   184,
    1092,  1093,   187,  1094,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   850,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,  1095,   219,   220,   221,   222,   223,   630,  1096,   225,
       0,   226,   227,  1097,   229,     0,   230,     0,   231,   232,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
       0,     0,  1098,  1099,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,   271,  1100,  1101,     0,  1102,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,  1103,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,  1104,   319,  1105,
     321,   322,   323,   324,   325,  1106,   326,   327,   328,   329,
    1107,   633,   331,  1108,   333,   334,   335,     0,   336,   337,
       0,     0,  1109,   339,   340,     0,     0,   341,   342,   343,
     344,   345,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   636,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,  1110,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1111,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,  1112,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   638,   449,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,  1113,
    1114,     0,   461,     0,   462,   463,   639,   465,   640,  1115,
     467,   468,   641,   470,   471,  3721,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1116,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1117,     0,     0,     0,     0,     0,     0,  1118,
    1119,  1120,     0,     0,     0,     0,  1121,     0,  1122,     0,
       0,     0,     0,     0,  1123,  1124,     0,     0,     0,     0,
    1125,  1126,   112,  1078,   658,  1079,  1080,  1081,  1082,  1083,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
    1084,     0,     0,   126,   127,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,  1085,   138,  1086,  1087,     0,
     141,   142,   143,   144,   145,   146,  1088,   627,   147,   148,
    1089,  1090,   151,     0,   152,   153,   154,   155,   628,     0,
     629,     0,  1091,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,  3720,   178,   179,   180,   181,   182,   183,
     184,  1092,  1093,   187,  1094,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   850,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,  1095,   219,   220,   221,   222,   223,   630,  1096,
     225,     0,   226,   227,  1097,   229,     0,   230,     0,   231,
     232,     0,   233,   234,   235,   236,   237,   238,     0,   239,
     240,     0,     0,  1098,  1099,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,   271,  1100,  1101,     0,
    1102,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,   297,   298,  1103,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,  1104,   319,
    1105,   321,   322,   323,   324,   325,  1106,   326,   327,   328,
     329,  1107,   633,   331,  1108,   333,   334,   335,     0,   336,
     337,     0,     0,  1109,   339,   340,     0,     0,   341,   342,
     343,   344,   345,   635,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   636,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,  1110,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1111,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  1112,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   638,   449,     0,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,     0,
    1113,  1114,     0,   461,     0,   462,   463,   639,   465,   640,
    1115,   467,   468,   641,   470,   471,  3721,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,  1116,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1117,     0,     0,     0,     0,     0,     0,
    1118,  1119,  1120,     0,     0,     0,     0,  1121,     0,  1122,
       0,     0,     0,     0,     0,  1123,  1124,     0,     0,     0,
       0,  1125,  1126,   112,  1078,   658,  1079,  1080,     0,  1082,
    1083,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,  1084,     0,     0,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,  1085,   138,  1086,  1087,
       0,   141,   142,   143,   144,   145,   146,  1088,   627,   147,
     148,  1089,  1090,   151,     0,   152,   153,   154,   155,   628,
       0,   629,     0,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,  1092,  1093,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   850,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,  1095,   219,   220,   221,   222,   223,   630,
    1096,   225,     0,   226,   227,  1097,   229,     0,   230,     0,
     231,   232,     0,   233,   234,   235,   236,   237,   238,     0,
     239,   240,     0,     0,  1098,  1099,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,   271,  1100,  1101,
       0,  1102,     0,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
     290,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1103,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,  1104,
     319,  1105,   321,   322,   323,   324,   325,  2853,   326,   327,
     328,   329,  1107,   633,   331,  1108,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,   343,   344,   345,   635,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   636,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,  1110,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1111,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,  1112,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   638,   449,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,  1113,  1114,     0,   461,     0,   462,   463,   639,   465,
     640,  1115,   467,   468,   641,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1116,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  2854,     0,     0,     0,     0,     0,
       0,  2855,  2856,     0,     0,     0,     0,     0,  1121,     0,
    1122,     0,     0,     0,     0,     0,  1123,  1124,     0,     0,
       0,     0,  1125,  1126,   112,  1078,   658,  1079,  1080,  1081,
    1082,  1083,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,  1084,     0,     0,   126,   127,   128,     0,   129,
     130,   131,   132,   133,   134,   135,   136,  1085,   138,  1086,
    1087,     0,   141,   142,   143,   144,   145,   146,  1088,   627,
     147,   148,  1089,  1090,   151,     0,   152,   153,   154,   155,
     628,     0,   629,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,  1092,  1093,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   850,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,  1095,   219,   220,   221,   222,   223,
     630,  1096,   225,     0,   226,   227,  1097,   229,     0,   230,
       0,   231,   232,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,     0,     0,  1098,  1099,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,   271,  1100,
    1101,     0,  1102,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,   297,
     298,  1103,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
    1104,   319,  1105,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,  1107,   633,   331,  1108,   333,   334,   335,
       0,   336,   337,     0,     0,  1109,   339,   340,     0,     0,
     341,   342,   343,   344,   345,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,  1110,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1111,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
    1112,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   638,   449,
       0,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,     0,  1113,  1114,     0,   461,     0,   462,   463,   639,
     465,   640,  1115,   467,   468,   641,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,  1116,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,     0,     0,     0,
       0,     0,  1537,  1538,     0,     0,     0,     0,     0,  1121,
       0,  1122,     0,     0,     0,     0,     0,  1123,  1124,     0,
       0,     0,     0,  1125,  1126,   112,  1078,   658,  1079,  1080,
    1081,  1082,  1083,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,  1084,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135, -2137,  1085,   138,
    1086,  1087,     0,   141,   142,   143,   144,   145,   146,  1088,
     627,   147,   148,  1089,  1090,   151,     0,   152,   153,   154,
     155,   628,     0,   629,     0,  1091,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,  3720,   178,   179,   180,
     181,   182,   183,   184,  1092,  1093,   187,  1094,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   850,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,  1095,   219,   220,   221,   222,
     223,   630,  1096,   225,     0,   226,   227,  1097,   229,     0,
     230,     0,   231,   232,     0,   233,   234,   235,   236, -2137,
     238,     0,   239,   240,     0,     0,  1098,  1099,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251, -2137,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
    1100,  1101,     0,  1102,     0,   275,     0,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289, -2137,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1103,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1104,   319,  1105,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,  1107,   633,   331,  1108,   333,   334,
     335,     0,   336,   337,     0,     0,  1109,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1110,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1111,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427, -2137,   429,
     430,  1112,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   638,
     449,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,  1113,  1114,     0,   461,     0,   462,   463,
     639,   465,   640,  1115,   467,   468,   641,   470,   471,  3721,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1116,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519, -2137,     0,     0,     0,
       0,     0,     0,  1118,  1119,  1120,     0,     0,     0,     0,
    1121,     0,  1122,     0,     0,     0,     0,     0,  1123,  1124,
       0,     0,     0,     0,  1125,  1126,   112,  1078,   658,  1079,
    1080,     0,  1082,  1083,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,  1084,     0,     0,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,   135,   136,  1085,
     138,  1086,  1087,     0,   141,   142,   143,   144,   145,   146,
    1088,   627,   147,   148,  1089,  1090,   151,     0,   152,   153,
     154,   155,   628,     0,   629,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1092,  1093,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   850,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1095,   219,   220,   221,
     222,   223,   630,  1096,   225,     0,   226,   227,  1097,   229,
       0,   230,     0,   231,   232,     0,   233,   234,   235,   236,
     237,   238,     0,   239,   240,     0,     0,  1098,  1099,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
     271,  1100,  1101,     0,  1102,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  1103,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1104,   319,  1105,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,  1107,   633,   331,  1108,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,   343,   344,   345,   635,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   636,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1110,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  2197,  2198,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1112,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     638,   449,     0,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,     0,  1113,  1114,     0,   461,     0,   462,
     463,   639,   465,   640,  1115,   467,   468,   641,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
    1116,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,     0,
       0,     0,     0,     0,  2199,  2200,     0,     0,     0,     0,
       0,  1121,     0,  1122,     0,     0,     0,     0,     0,  1123,
    1124,     0,     0,     0,     0,  1125,  1126,   112,  1078,   658,
    1079,  1080,  1081,  1082,  1083,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,  1084,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1085,   138,  1086,  1087,     0,   141,   142,   143,   144,   145,
     146,  1088,   627,   147,   148,  1089,  1090,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1092,  1093,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   850,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1095,   219,   220,
     221,   222,   223,   630,  1096,   225,     0,   226,   227,  1097,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,     0,  1098,  1099,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1100,  1101,     0,  1102,     0,   275,     0,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1103,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1104,   319,  1105,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,  1107,   633,   331,  1108,
     333,   334,   335,     0,   336,   337,     0,     0,  1109,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1110,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1111,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1112,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1113,  1114,     0,   461,     0,
     462,   463,   639,   465,   640,  1115,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1116,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
       0,     0,     0,     0,     0,  1537,  1538,     0,     0,     0,
       0,     0,  1121,     0,  1122,     0,     0,     0,     0,     0,
    1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,  1078,
     658,  1079,  1080,     0,  1082,  1083,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,  1084,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,  1085,   138,  1086,  1087,     0,   141,   142,   143,   144,
     145,   146,  1088,   627,   147,   148,  1089,  1090,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,  1092,  1093,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     850,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1095,   219,
     220,   221,   222,   223,   630,  1096,   225,     0,   226,   227,
    1097,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,  1098,
    1099,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,  1100,  1101,     0,  1102,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1103,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1104,   319,  1105,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,  1107,   633,   331,
    1108,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1110,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1111,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,  1112,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,  1113,  1114,     0,   461,
       0,   462,   463,   639,   465,   640,  1115,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,  1116,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1121,     0,  1122,     0,     0,     0,     0,
       0,  1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,
    1078,   658,  1079,  1080,     0,  1082,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,  1084,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,  1085,   138,  1086,  1087,     0,   141,   142,   143,
     144,   145,   146,  1088,     0,   147,   148,  1089,  1090,   151,
       0,   152,   153,   154,   155,   156,     0,   157,     0,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,  1092,  1093,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   850,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,  1095,
     219,   220,   221,   222,   223,   224,  1096,   225,     0,   226,
     227,  1097,   229,     0,   230,     0,   231,   232,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,  3084,
    1098,  1099,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,  1100,  1101,     0,  1102,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,  1104,   319,  1105,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,  1107,   330,
     331,  1108,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
    1110,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,  1112,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,  1113,  1114,     0,
     461,     0,   462,   463,   464,   465,   466,  1115,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1116,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1121,     0,  2765,   112,  1078,   658,
    1079,  1080,  1081,  1082,  1083,     0,     0,     0,  1125,  1126,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,  1084,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,     0,
    1085,   138,  1086,  1087,     0,   141,   142,   143,   144,   145,
     146,  1088,   627,   147,   148,  1089,  1090,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,  1091,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1092,  1093,   187,  1094,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   850,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
       0,   213,     0,   214,   215,   216,   217,  1095,   219,   220,
     221,   222,   223,   630,  1096,   225,     0,   226,   227,  1097,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,     0,   238,     0,   239,   240,     0,     0,  1098,  1099,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1100,  1101,     0,  1102,     0,   275,     0,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1103,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1104,   319,  1105,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,  1107,   633,   331,  1108,
     333,   334,   335,     0,   336,   337,     0,     0,  1109,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1110,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1111,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,  1112,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1113,  1114,     0,   461,     0,
     462,   463,   639,   465,   640,  1115,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1116,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
       0,     0,     0,     0,     0,  1118,  1119,  1120,     0,     0,
       0,     0,  1121,     0,  1122,     0,     0,     0,     0,     0,
    1123,  1124,     0,     0,     0,     0,  1125,  1126,   112,  1078,
     658,  1079,  1080,     0,  1082,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,  1084,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,  1085,   138,  1086,  1087,     0,   141,   142,   143,   144,
     145,   146,  1088,     0,   147,   148,  1089,  1090,   151,     0,
     152,   153,   154,   155,   156,     0,   157,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,  1092,  1093,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     850,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1095,   219,
     220,   221,   222,   223,   224,  1096,   225,     0,   226,   227,
    1097,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,  1098,
    1099,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,  1100,  1101,     0,  1102,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1104,   319,  1105,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,  1107,   330,   331,
    1108,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1110,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,  1112,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,  1113,  1114,     0,   461,
       0,   462,   463,   464,   465,   466,  1115,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,  1116,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     705,     0,     0,  1121,     0,  2765,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1125,  1126,   113,
     114,   115,   116,     0,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   706,   707,     0,   708,   709,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   710,   711,
     151,     0,   152,   153,   154,   155,   712,     0,     0,     0,
       0,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,     0,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   713,
     714,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,     0,     0,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     715,   219,   220,   221,   222,   223,   716,     0,   225,     0,
     226,   227,   717,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   718,     0,   238,     0,   239,     0,     0,
       0,   719,   720,     0,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   721,
     267,   268,   269,   270,   271,   722,   723,     0,   724,     0,
     275,     0,     0,   278,     0,   280,     0,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   725,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   726,     0,   727,   321,
     322,   323,     0,   728,     0,   326,   327,     0,   329,     0,
     729,   331,   730,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   731,     0,   344,
       0,   732,   347,   348,   349,   350,   351,   352,   353,   354,
     355,     0,     0,   358,     0,     0,     0,     0,   359,   360,
     733,     0,   363,   364,   734,   366,   367,   368,     0,   369,
     370,   371,   372,   373,     0,     0,   376,     0,   377,   378,
     379,   735,   381,   382,   383,   384,     0,   385,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   736,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   737,   424,
     425,     0,   427,     0,     0,   430,   738,   432,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   739,   447,   740,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   741,   742,
       0,     0,     0,   462,   463,   743,   465,   744,     0,   467,
     468,   745,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,  1530,   747,     0,   489,     0,   491,     0,
     493,   494,   495,   496,     0,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   748,   749,   750,   751,
     752,   753,   754,   755,   756,   757,   758,   516,   517,   518,
     519,     0,     0,     0,     0,     0,     0,     0,     0,   528,
       0,     0,     0,     0,     0,     0,     0,  3333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3334,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,  1040,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,  -684,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,  -684,   226,
     227,   228,   229,  -684,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,  -684,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,  -684,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,  -684,   336,   337,     0,     0,
     338,   339,   340,     0,  -684,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,  -684,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,   552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1191,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   112,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2467,  3313,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,   627,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   628,     0,   629,
       0,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   630,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,   232,
      21,   233,   234,   235,   236,   237,   238,     0,   239,   240,
     631,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   632,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
       0,   633,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   634,   338,   339,   340,     0,     0,   341,   342,   343,
     344,   345,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    25,    26,    27,     0,   359,
     360,   636,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     637,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    32,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   638,   449,     0,   450,   451,
      37,   452,   453,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   639,   465,   640,     0,
     467,   468,   641,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,    39,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   642,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
      43,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   921,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   643,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     3,     4,     0,   922,     0,   125,
       0,     0,     0,   923,   127,   128,     0,   129,   130,   131,
     924,   133,   134,   135,   925,   926,   927,   928,   929,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     930,   931,   151,     0,   152,   153,   154,   155,   932,     0,
     933,     0,   934,   159,   160,   161,   162,   163,   935,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     936,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   937,   938,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   939,   219,   220,   221,   222,   223,   940,     0,
     225,     0,   226,   227,   941,   229,     0,   230,     0,   231,
     942,    21,   943,   234,   235,   944,   945,   238,     0,   239,
     240,     0,     0,   946,   947,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   948,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     949,   950,   267,   268,   269,   270,   271,   951,   952,     0,
     953,     0,   275,   954,   955,   278,   956,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   957,   289,   958,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   959,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   960,   961,
     962,   321,   322,   323,   324,   963,     0,   326,   327,   964,
     329,     0,   965,   331,   966,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   967,
     968,   344,   969,   970,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    25,    26,    27,     0,
     359,   360,   971,   972,   363,   364,   973,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   974,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   975,   402,   403,   404,
     976,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    32,   977,   417,   418,   419,   420,   421,   422,
     978,   424,   425,   426,   427,   979,   429,   430,   980,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   981,   447,   982,   449,     0,   450,
     451,    37,   452,   983,   454,   455,   456,   457,   458,     0,
     984,   985,     0,   461,     0,   462,   463,   986,   465,   987,
       0,   467,   468,   988,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,    39,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   989,   990,     0,   489,   991,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,    43,   499,   500,   501,   502,   503,   504,   992,   993,
     994,   995,   996,   997,   998,   999,  1000,  1001,  1002,   516,
     517,   518,   519,     0,     0,    44,   921,  1496,   658,     0,
       0,     0,  1082,     0,     0,     0,     0,     0,     0,   686,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,   922,     0,   125,     0,     0,     0,   923,   127,   128,
       0,   129,   130,   131,   924,   133,   134,   135,   925,   926,
     927,   928,   929,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   930,   931,   151,     0,   152,   153,
     154,   155,   932,     0,   933,     0,   934,   159,   160,   161,
     162,   163,   935,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   936,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   937,   938,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   939,   219,   220,   221,
     222,   223,   940,  1497,   225,     0,   226,   227,   941,   229,
       0,   230,     0,   231,   942,     0,   943,   234,   235,   944,
     945,   238,     0,   239,   240,     0,     0,   946,   947,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   948,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   949,   950,   267,   268,   269,   270,
     271,   951,   952,     0,   953,     0,   275,   954,   955,   278,
     956,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   957,   289,   958,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   959,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   960,   961,   962,   321,   322,   323,   324,   963,
       0,   326,   327,   964,   329,     0,   965,   331,   966,   333,
     334,   335,     0,   336,   337,  1498,     0,   338,   339,   340,
       0,     0,   341,   967,   968,   344,   969,   970,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   971,   972,   363,   364,
     973,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   974,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     975,   402,   403,   404,   976,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   977,   417,   418,
     419,   420,   421,   422,   978,   424,   425,   426,   427,   979,
     429,   430,   980,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   981,   447,
     982,   449,     0,   450,   451,     0,   452,   983,   454,   455,
     456,   457,   458,     0,   984,   985,     0,   461,     0,   462,
     463,   986,   465,   987,  1499,   467,   468,   988,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,  1338,
     990,     0,   489,   991,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   992,   993,   994,   995,   996,   997,   998,   999,
    1000,  1001,  1002,   516,   517,   518,   519,   112,     0,   552,
       0,     0,     0,     0,  1500,  1501,  2383,     0,     0,     0,
       0,     0,     0,  2384,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,   627,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   630,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,   631,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   632,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,     0,   633,   331,   332,
     333,   334,   335,     0,   336,   337,     0,   634,   338,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   637,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   639,   465,   640,     0,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     642,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   112,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   643,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,   627,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   630,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,     0,   633,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   637,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   639,   465,   640,     0,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   112,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   686,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,   627,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   628,     0,   629,     0,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   630,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,   232,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,     0,   633,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   638,   449,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   639,   465,   640,     0,   467,   468,
     641,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3460,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   783,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,    21,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    25,    26,    27,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      32,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,    37,
     452,     0,   454,   455,   456,   457,   458,     0,   784,   460,
       0,   461,     0,   785,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,    39,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   642,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,    43,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   686,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
      21,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    25,    26,    27,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    32,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
      37,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,    39,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   642,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
      43,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,   528,    44,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   686,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1025,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1589,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2223,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2467,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2605,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3307,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2075,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2183,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   705,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3117,     0,
       0,   113,   114,   115,   116,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   706,   707,     0,   708,   709,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     710,   711,   151,     0,   152,   153,   154,   155,   712,     0,
       0,     0,     0,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,     0,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   713,   714,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,     0,     0,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   715,   219,   220,   221,   222,   223,   716,     0,
     225,     0,   226,   227,   717,   229,     0,   230,     0,   231,
       0,    21,     0,   234,   235,   718,     0,   238,     0,   239,
       0,     0,     0,   719,   720,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   721,   267,   268,   269,   270,   271,   722,   723,     0,
     724,     0,   275,     0,     0,   278,     0,   280,     0,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   725,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   726,     0,
     727,   321,   322,   323,     0,   728,     0,   326,   327,     0,
     329,     0,   729,   331,   730,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   731,
       0,   344,     0,   732,   347,   348,   349,   350,   351,   352,
     353,   354,   355,     0,     0,   358,    25,    26,    27,     0,
     359,   360,   733,     0,   363,   364,   734,   366,   367,   368,
       0,   369,   370,   371,   372,   373,     0,     0,   376,     0,
     377,   378,   379,   735,   381,   382,   383,   384,     0,   385,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     736,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    32,     0,   417,   418,   419,   420,   421,   422,
     737,   424,   425,     0,   427,     0,     0,   430,   738,   432,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   739,   447,   740,   449,     0,   450,
     451,    37,   452,     0,   454,   455,   456,   457,   458,     0,
     741,   742,     0,     0,     0,   462,   463,   743,   465,   744,
       0,   467,   468,   745,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,    39,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   746,   747,     0,   489,     0,
     491,     0,   493,   494,   495,   496,     0,     0,     0,   498,
       0,    43,   499,   500,   501,   502,   503,   504,   748,   749,
     750,   751,   752,   753,   754,   755,   756,   757,   758,   516,
     517,   518,   519,     0,     0,    44,     0,     0,  2946,  1496,
     658,     0,     0,  2055,  1082,     0,     0,     0,     0,   686,
    2056,  2057,     0,     0,  2058,  2059,  2060,   113,   114,   115,
     116,   117,   118,   119,   120,   121,  1270,   122,   123,   124,
    1271,  1272,  1273,  2947,  1274,   125,  1275,  1276,  1277,  2948,
     127,   128,  1278,   129,   130,   131,  2949,   133,   134,   135,
       0,   838,  2950,   840,   841,  1279,   141,   142,   143,   144,
     145,   146,  1280,  1281,   147,   148,   842,   843,   151,  1282,
     152,   153,   154,   155,     0,  1283,  2951,  1284,  2952,   159,
     160,   161,   162,   163,  2953,   165,   166,   167,  1285,   168,
     169,   170,   171,   172,   173,  1286,  2954,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   848,   849,   187,
    1287,   188,  1288,   189,   190,   191,   192,   193,   194,  1289,
     195,   196,   197,   198,   199,   200,  1290,  1291,   201,   202,
     850,   204,   205,   206,   207,  1292,   208,   209,   210,  1293,
     211,   212,   213,  1294,   214,   215,   216,   217,     0,   219,
     220,   221,   222,   223,     0,  1295,   225,  1296,   226,   227,
     851,   229,  1297,   230,  1298,   231,  2955,  1299,  2956,   234,
     235,  2957,  2958,   238,  1300,   239,   240,  1301,  1302,     0,
       0,   243,   244,  1303,   245,   246,   247,   248,   249,   250,
     251,  2959,   253,   254,   255,   256,  1304,   257,   258,   259,
     260,   261,   262,   263,  1305,   264,  2960,     0,   267,   268,
     269,   270,   271,   858,   859,  1306,   860,  1307,   275,  2961,
    2962,   278,  2963,   280,   281,   282,   283,   284,   285,   286,
    1308,  1309,   287,  2964,   289,  2965,  1310,   291,   292,   293,
     294,   295,   296,   297,   298,  2966,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   867,  2967,   869,   321,   322,   323,
     324,  2968,  1311,   326,   327,  2969,   329,  1312,     0,   331,
     871,   333,   334,   335,  1313,   336,   337,  1314,  1315,  2970,
     339,   340,  1316,  1317,   341,     0,  2971,   344,  2972,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,  1318,  1319,  1320,  1321,   359,   360,     0,  2973,
     363,   364,     0,   366,   367,   368,  1322,   369,   370,   371,
     372,   373,   374,   375,   376,  1323,   377,   378,   379,   875,
     381,   382,   383,   384,  1324,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,  1325,
     399,   400,  2974,   402,   403,   404,   877,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1326,  2975,
     417,   418,   419,   420,   421,   422,  2976,   424,   425,   426,
     427,  2977,   429,   430,   881,   432,  1327,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
    2978,   447,     0,   449,  1328,   450,   451,  1329,   452,  2979,
     454,   455,   456,   457,   458,  1330,   884,   885,  1331,   461,
    1332,   462,   463,     0,   465,     0,  1333,   467,   468,  2980,
     470,   471,   472,   473,   474,  2981,  1335,   475,   476,   477,
    1336,   478,   479,   480,   481,  1337,   482,   483,   484,   485,
     486,     0,   888,  1339,   489,  2982,   491,   492,   493,   494,
     495,   496,   497,  1340,  1341,   498,  1342,  1343,   499,   500,
     501,   502,   503,   504,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   516,   517,   518,   519,     0,
     528,     0,  2061,  2062,  2063,  2055,  2983,  2984,  2066,  2067,
    2068,  2069,  2056,  2057,     0,     0,  2058,  2059,  2060,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,     0,  2061,  2062,  2063,     0,  2064,  2065,
    2066,  2067,  2068,  2069,  1643,     0,     0,  1644,     0,     0,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1654,  1643,     0,     0,  1644,     0,
       0,  1655,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1652,     0,  1656,     0,     0,     0,
       0,     0,     0,     0,     0,  1654,  1643,     0,     0,  1644,
       0,     0,  1655,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1652,     0,  1656,     0,     0,
       0,     0,     0,     0,     0,     0,  1654,     0,  1643,     0,
       0,  1644,     0,  1655,     0,  1645,  1646,  1647,  1648,  1649,
    1650,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1652,  1656,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1654,     0,
       0,     0,     0,  1657,     0,  1655,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1658,     0,     0,     0,     0,  1659,     0,     0,
    1656,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1657,     0,     0,     0,     0,     0,
    1660,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1658,     0,     0,  1662,     0,  1659,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
       0,  1660,  1661,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1663,  1658,     0,  1664,  1662,     0,  1659,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1665,     0,     0,  1666,     0,     0,     0,  1657,     0,     0,
       0,     0,  1660,  1661,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1663,     0,  1658,  1664,  1662,     0,
       0,  1659,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1665,     0,     0,  1666,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1660,  1661,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1663,     0,     0,  1664,     0,
    1662,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1665,     0,     0,  1666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,     0,     0,  1663,     0,     0,
    1664,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1665,     0,     0,  1666,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1667,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1668,     0,     0,  1669,  1670,  1671,     0,  1672,  1673,  1674,
    1675,  1676,  1677,     0,     0,  1832,  1667,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1668,     0,     0,  1669,  1670,  1671,     0,  1672,  1673,
    1674,  1675,  1676,  1677,     0,     0,  2811,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1668,     0,     0,  1669,  1670,  1671,     0,  1672,
    1673,  1674,  1675,  1676,  1677,     0,     0,  3316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1269,     0,     0,  1668,     0,     0,  1669,  1670,  1671,
       0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,  3589,
     113,   114,   115,   116,   117,   118,   119,   120,   121,  1270,
     122,   123,   124,  1271,  1272,  1273,   922,  1274,   125,  1275,
    1276,  1277,   923,   127,   128,  1278,   129,   130,   131,   924,
     133,   134,   135,   925,   926,   927,   928,   929,  1279,   141,
     142,   143,   144,   145,   146,  1280,  1281,   147,   148,   930,
     931,   151,  1282,   152,   153,   154,   155,   932,  1283,   933,
    1284,   934,   159,   160,   161,   162,   163,   935,   165,   166,
     167,  1285,   168,   169,   170,   171,   172,   173,  1286,   936,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     937,   938,   187,  1287,   188,  1288,   189,   190,   191,   192,
     193,   194,  1289,   195,   196,   197,   198,   199,   200,  1290,
    1291,   201,   202,   203,   204,   205,   206,   207,  1292,   208,
     209,   210,  1293,   211,   212,   213,  1294,   214,   215,   216,
     217,   939,   219,   220,   221,   222,   223,   940,  1295,   225,
    1296,   226,   227,   941,   229,  1297,   230,  1298,   231,   942,
    1299,   943,   234,   235,   944,   945,   238,  1300,   239,   240,
    1301,  1302,   946,   947,   243,   244,  1303,   245,   246,   247,
     248,   249,   250,   251,   948,   253,   254,   255,   256,  1304,
     257,   258,   259,   260,   261,   262,   263,  1305,   264,   949,
     950,   267,   268,   269,   270,   271,   951,   952,  1306,   953,
    1307,   275,   954,   955,   278,   956,   280,   281,   282,   283,
     284,   285,   286,  1308,  1309,   287,   957,   289,   958,  1310,
     291,   292,   293,   294,   295,   296,   297,   298,   959,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   960,   961,   962,
     321,   322,   323,   324,   963,  1311,   326,   327,   964,   329,
    1312,   965,   331,   966,   333,   334,   335,  1313,   336,   337,
    1314,  1315,   338,   339,   340,  1316,  1317,   341,   967,   968,
     344,   969,   970,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,  1318,  1319,  1320,  1321,   359,
     360,   971,   972,   363,   364,   973,   366,   367,   368,  1322,
     369,   370,   371,   372,   373,   374,   375,   376,  1323,   377,
     378,   379,   974,   381,   382,   383,   384,  1324,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,  1325,   399,   400,   975,   402,   403,   404,   976,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,  1326,   977,   417,   418,   419,   420,   421,   422,   978,
     424,   425,   426,   427,   979,   429,   430,   980,   432,  1327,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   981,   447,   982,   449,  1328,   450,   451,
    1329,   452,   983,   454,   455,   456,   457,   458,  1330,   984,
     985,  1331,   461,  1332,   462,   463,   986,   465,   987,  1333,
     467,   468,   988,   470,   471,   472,   473,   474,  1334,  1335,
     475,   476,   477,  1336,   478,   479,   480,   481,  1337,   482,
     483,   484,   485,   486,  1338,   990,  1339,   489,   991,   491,
     492,   493,   494,   495,   496,   497,  1340,  1341,   498,  1342,
    1343,   499,   500,   501,   502,   503,   504,   992,   993,   994,
     995,   996,   997,   998,   999,  1000,  1001,  1002,   516,   517,
     518,   519,   528,     0,     0,     0,     0,     0,     0,     0,
       0,  2086,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,     0,     0,     0,     0,     0,     0,
       0,     0,  2731,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   921,  1496,   658,     0,     0,     0,
    1082,     0,     0,  2734,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,   922,
       0,   125,     0,     0,     0,   923,   127,   128,     0,   129,
     130,   131,   924,   133,   134,   135,   925,   926,   927,   928,
     929,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   930,   931,   151,     0,   152,   153,   154,   155,
     932,     0,   933,     0,   934,   159,   160,   161,   162,   163,
     935,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   936,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   937,   938,   187,  1700,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   939,   219,   220,   221,   222,   223,
     940,  1497,   225,     0,   226,   227,   941,   229,     0,   230,
       0,   231,   942,     0,   943,   234,   235,   944,   945,   238,
       0,   239,   240,     0,     0,   946,   947,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   948,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   949,   950,   267,   268,   269,   270,   271,   951,
     952,     0,   953,     0,   275,   954,   955,   278,   956,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   957,
     289,   958,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   959,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     960,   961,   962,   321,   322,   323,   324,   963,     0,   326,
     327,   964,   329,     0,   965,   331,   966,   333,   334,   335,
       0,   336,   337,  1498,     0,   338,   339,   340,     0,     0,
     341,   967,   968,   344,   969,   970,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   971,   972,   363,   364,   973,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   974,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   975,   402,
     403,   404,   976,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   977,   417,   418,   419,   420,
     421,   422,   978,   424,   425,   426,   427,   979,   429,   430,
     980,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   981,   447,   982,   449,
       0,   450,   451,     0,   452,   983,   454,   455,   456,   457,
     458,     0,   984,   985,     0,   461,     0,   462,   463,   986,
     465,   987,  1499,   467,   468,   988,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,  1338,   990,     0,
     489,   991,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     992,   993,   994,   995,   996,   997,   998,   999,  1000,  1001,
    1002,   516,   517,   518,   519,   921,  1496,   658,     0,     0,
       0,  1082,  1500,  1501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
     922,     0,   125,     0,     0,     0,   923,   127,   128,     0,
     129,   130,   131,   924,   133,   134,   135,   925,   926,   927,
     928,   929,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   930,   931,   151,     0,   152,   153,   154,
     155,   932,     0,   933,     0,   934,   159,   160,   161,   162,
     163,   935,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   936,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   937,   938,   187,  1702,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   939,   219,   220,   221,   222,
     223,   940,  1497,   225,     0,   226,   227,   941,   229,     0,
     230,     0,   231,   942,     0,   943,   234,   235,   944,   945,
     238,     0,   239,   240,     0,     0,   946,   947,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   948,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   949,   950,   267,   268,   269,   270,   271,
     951,   952,     0,   953,     0,   275,   954,   955,   278,   956,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     957,   289,   958,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   959,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   960,   961,   962,   321,   322,   323,   324,   963,     0,
     326,   327,   964,   329,     0,   965,   331,   966,   333,   334,
     335,     0,   336,   337,  1498,     0,   338,   339,   340,     0,
       0,   341,   967,   968,   344,   969,   970,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   971,   972,   363,   364,   973,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   974,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   975,
     402,   403,   404,   976,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   977,   417,   418,   419,
     420,   421,   422,   978,   424,   425,   426,   427,   979,   429,
     430,   980,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   981,   447,   982,
     449,     0,   450,   451,     0,   452,   983,   454,   455,   456,
     457,   458,     0,   984,   985,     0,   461,     0,   462,   463,
     986,   465,   987,  1499,   467,   468,   988,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,  1338,   990,
       0,   489,   991,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   992,   993,   994,   995,   996,   997,   998,   999,  1000,
    1001,  1002,   516,   517,   518,   519,   921,  1496,   658,     0,
       0,     0,  1082,  1500,  1501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,   922,     0,   125,     0,     0,     0,   923,   127,   128,
       0,   129,   130,   131,   924,   133,   134,   135,   925,   926,
     927,   928,   929,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   930,   931,   151,     0,   152,   153,
     154,   155,   932,     0,   933,     0,   934,   159,   160,   161,
     162,   163,   935,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   936,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   937,   938,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   939,   219,   220,   221,
     222,   223,   940,  1497,   225,     0,   226,   227,   941,   229,
       0,   230,     0,   231,   942,     0,   943,   234,   235,   944,
     945,   238,     0,   239,   240,     0,     0,   946,   947,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   948,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   949,   950,   267,   268,   269,   270,
     271,   951,   952,     0,   953,     0,   275,   954,   955,   278,
     956,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   957,   289,   958,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   959,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   960,   961,   962,   321,   322,   323,   324,   963,
       0,   326,   327,   964,   329,     0,   965,   331,   966,   333,
     334,   335,     0,   336,   337,  1498,     0,   338,   339,   340,
       0,     0,   341,   967,   968,   344,   969,   970,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   971,   972,   363,   364,
     973,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   974,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     975,   402,   403,   404,   976,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   977,   417,   418,
     419,   420,   421,   422,   978,   424,   425,   426,   427,   979,
     429,   430,   980,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   981,   447,
     982,   449,     0,   450,   451,     0,   452,   983,   454,   455,
     456,   457,   458,     0,   984,   985,     0,   461,     0,   462,
     463,   986,   465,   987,  1499,   467,   468,   988,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,  1338,
     990,     0,   489,   991,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   992,   993,   994,   995,   996,   997,   998,   999,
    1000,  1001,  1002,   516,   517,   518,   519,     0,     0,  1643,
       0,     0,  1644,     0,  1500,  1501,  1645,  1646,  1647,  1648,
    1649,  1650,  1651,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
       0,     0,     0,     0,  2189,     0,     0,     0,     0,  1654,
    1643,     0,     0,  1644,     0,     0,  1655,  1645,  1646,  1647,
    1648,  1649,  1650,  1651,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1652,
       0,  1656,     0,     0,     0,     0,     0,     0,     0,     0,
    1654,  1643,     0,     0,  1644,     0,     0,  1655,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1652,     0,  1656,     0,     0,  2190,     0,     0,     0,     0,
       0,  1654,  1643,     0,     0,  1644,     0,     0,  1655,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1652,     0,  1656,     0,     0,  1942,     0,     0,     0,
       0,     0,  1654,     0,     0,     0,     0,     0,  1657,  1655,
       0,     0,  1643,     0,     0,  1644,     0,     0,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,  1658,     0,     0,
       0,     0,  1659,     0,  1656,     0,     0,     0,     0,  1978,
       0,  1652,     0,     0,  1979,     0,     0,     0,     0,  1657,
       0,     0,  1654,     0,     0,  1660,  1661,     0,     0,  1655,
       0,     0,     0,     0,     0,     0,     0,     0,  1658,     0,
       0,  1662,     0,  1659,     0,     0,     0,     0,     0,  3759,
       0,     0,     0,     0,  1656,     0,     0,     0,     0,     0,
    1657,     0,     0,     0,     0,     0,  1660,  1661,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1663,  1658,
       0,  1664,  1662,     0,  1659,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1665,     0,     0,  1666,     0,
       0,  1657,     0,     0,     0,     0,     0,  1660,  1661,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1663,
    1658,     0,  1664,  1662,     0,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1665,     0,     0,  1666,
       0,     0,     0,     0,     0,     0,     0,     0,  1660,  1661,
       0,  1657,     0,     0,     0,     0,     0,     0,     0,     0,
    1663,     0,     0,  1664,  1662,     0,     0,     0,     0,     0,
    1658,     0,     0,     0,     0,  1659,     0,  1665,     0,     0,
    1666,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,  1660,  1661,
       0,  1663,     0,     0,  1664,     0,     0,     0,     0,  3760,
       0,     0,     0,     0,  1662,     0,     0,     0,  1665,     0,
       0,  1666,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1667,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,     0,     0,  1664,     0,     0,     0,     0,     0,
       0,  2193,     0,     0,     0,     0,     0,     0,  1665,     0,
       0,  1666,     0,     0,     0,     0,     0,     0,     0,  1667,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1949,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1668,     0,     0,  1669,  1670,
    1671,     0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,
    1667,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1643,     0,     0,  1644,     0,     0,     0,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,     0,  1668,     0,     0,  1669,
    1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,  1677,     0,
    1652,     0,     0,     0,     0,  1984,     0,     0,     0,     0,
    1667,  1654,  1643,     0,     0,  1644,     0,     0,  1655,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,  1668,     0,     0,
    1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,  1677,
       0,  1652,     0,  1656,     0,     0,     0,     0,     0,     0,
       0,     0,  1654,     0,     0,     0,     0,     0,     0,  1655,
       0,     0,     0,     0,     0,     0,     0,     0,  1668,     0,
       0,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,
    1677,     0,     0,     0,  1656,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1643,     0,     0,  1644,     0,     0,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,     0,     0,  1668,     0,
       0,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,
    1677,  1652,     0,     0,     0,     0,  1991,     0,     0,     0,
    1657,     0,  1654,     0,  1643,     0,     0,  1644,     0,  1655,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,  1658,
       0,     0,     0,     0,  1659,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,  1656,     0,  1989,     0,     0,     0,
       0,  1657,     0,     0,  1654,     0,     0,  1660,  1661,     0,
       0,  1655,     0,     0,     0,     0,     0,     0,     0,     0,
    1658,     0,     0,  1662,     0,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1656,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1660,  1661,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1663,     0,     0,  1664,  1662,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1665,     0,     0,
    1666,     0,     0,     0,     0,     0,     0,  1643,     0,     0,
    1644,  1657,     0,     0,  1645,  1646,  1647,  1648,  1649,  1650,
    1651,  1663,     0,     0,  1664,     0,     0,     0,     0,     0,
    1658,     0,     0,     0,     0,  1659,  1652,     0,  1665,     0,
       0,  1666,     0,  2079,     0,     0,     0,  1654,     0,     0,
       0,     0,     0,  1657,  1655,     0,     0,     0,  1660,  1661,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1658,     0,  1662,     0,     0,  1659,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1667,
    1660,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,     0,     0,  1664,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1665,     0,
       0,  1666,     0,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1663,     0,     0,  1664,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1665,     0,     0,  1666,     0,     0,  1657,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1658,     0,     0,     0,     0,
    1659,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
    1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,  1677,
       0,     0,     0,  1660,  1661,     0,     0,     0,     0,     0,
    1667,     0,     0,  1643,     0,     0,  1644,     0,     0,  1662,
    1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,  1668,     0,
       0,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,  1676,
    1677,     0,  1652,     0,     0,     0,     0,  2788,     0,     0,
       0,     0,  1667,  1654,     0,     0,  1663,     0,     0,  1664,
    1655,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1665,     0,     0,  1666,     0,     0,     0,
       0,     0,     0,     0,  1643,  1656,     0,  1644,     0,     0,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1651,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,     0,     0,     0,     0,  1668,     0,
       0,  1669,  1670,  1671,  1654,  1672,  1673,  1674,  1675,  1676,
    1677,  1655,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1656,     0,     0,     0,
    1668,     0,     0,  1669,  1670,  1671,     0,  1672,  1673,  1674,
    1675,  1676,  1677,     0,     0,  1667,  1643,     0,     0,  1644,
       0,     0,  1657,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1658,     0,     0,     0,  1652,  1659,     0,     0,  2777,
       0,     0,     0,     0,     0,     0,  1654,     0,     0,     0,
       0,     0,     0,  1655,     0,     0,     0,     0,     0,  1660,
    1661,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1662,     0,     0,  1656,     0,
       0,     0,     0,  1657,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1643,     0,
       0,  1644,  1658,     0,     0,  1645,  1646,  1659,     0,  1649,
    1650,  1651,  1663,  1668,     0,  1664,  1669,  1670,  1671,     0,
    1672,  1673,  1674,  1675,  1676,  1677,     0,     0,     0,  1665,
    1660,  1661,  1666,     0,     0,     0,     0,     0,  1654,     0,
    1081,     0,     0,  3144,     0,  1655,  1662,     0,  3145,  3146,
    3147,  3148,  3149,  3150,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3151,
    1656,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
    3152,     0,     0,  1663,     0,     0,  1664,  3153,     0,     0,
       0,     0,     0,     0,  1658,     0,     0,     0,     0,  1659,
    1665,     0,     0,  1666,     0,     0,     0,  1081,     0,     0,
    3144,     0,  3154,     0,     0,  3145,     0,     0,  3148,  3149,
    3150,     0,  1660,  1661,     0,     0,     0,     0,     0,     0,
       0,  1667,     0,     0,     0,     0,  3151,     0,  1662,     0,
       0,     0,     0,     0,     0,     0,     0,  3152,     0,     0,
       0,     0,     0,     0,  3153,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1657,     0,     0,
       0,     0,     0,     0,     0,  1663,     0,     0,  1664,  3154,
       0,     0,     0,     0,     0,     0,  1658,     0,     0,     0,
       0,  1659,  1665,     0,     0,  1666,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,     0,     0,     0,     0,  3155,
       0,     0,     0,     0,  1660,  1661,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3156,     0,
    1662,     0,     0,  3157,     0,     0,     0,     0,     0,  1668,
       0,     0,  1669,  1670,  1671,     0,  1672,  1673,  1674,  1675,
    1676,  1677,     0,     0,     0,     0,  3158,  3159,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1663,     0,     0,
    1664,     0,  3160,     0,     0,     0,  3155,     0,     0,     0,
       0,     0,     0,     0,  1665,     0,     0,     0,     0,     0,
       0,     0,     0,  1081,  1667,  3156,  3144,     0,     0,     0,
    3157,  3145,     0,     0,  3148,  3149,  3150,     0,     0,  3161,
    1668,     0,  3162,  1669,  1670,  1671,     0,  1672,  1673,  1674,
    1675,  1676,  1677,  3158,  3159,     0,  1962,     0,     0,  3163,
       0,     0,     0,  3152,     0,     0,     0,     0,     0,  3160,
    3153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3154,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3161,     0,     0,  3162,
       0,     0,     0,     0,     0,     0,  1667,     0,     0,     0,
       0,     0,     0,  1962,     0,     0,     0,     0,     0,     0,
       0,     0,  1668,     0,     0,  1669,  1670,  1671,     0,  1672,
    1673,  1674,  1675,  2210,  1677,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3164,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3155,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3156,     0,     0,     0,     0,  3157,     0,     0,     0,
       0,     0,     0,     0,  1668,  3164,     0,  1669,  1670,  1671,
       0,  1672,  1673,  1674,  1675,  1676,  1677,     0,     0,  3158,
    3159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3160,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3165,     0,     0,  3166,
    3167,  3168,     0,  3169,  3170,  3171,  3172,  3173,  3174,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3161,     0,     0,  3162,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1962,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3165,     0,     0,  3166,  3167,  3168,     0,
    3169,  3170,  3171,  3172,  3173,  3174,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3164,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1269,     0,  2101,     0,     0,     0,  3165,
       0,     0,  3166,  3167,  3168,     0,  3169,  3170,  3171,  3172,
    3173,  3174,   113,   114,   115,   116,   117,   118,   119,   120,
     121,  1270,   122,   123,   124,  1271,  1272,  1273,   922,  1274,
     125,  1275,  1276,  1277,   923,   127,   128,  1278,   129,   130,
     131,   924,   133,   134,   135,   925,   926,   927,   928,   929,
    1279,   141,   142,   143,   144,   145,   146,  1280,  1281,   147,
     148,   930,   931,   151,  1282,   152,   153,   154,   155,   932,
    1283,   933,  1284,   934,   159,   160,   161,   162,   163,   935,
     165,   166,   167,  1285,   168,   169,   170,   171,   172,   173,
    1286,   936,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   937,   938,   187,  1287,   188,  1288,   189,   190,
     191,   192,   193,   194,  1289,   195,   196,   197,   198,   199,
     200,  1290,  1291,   201,   202,   203,   204,   205,   206,   207,
    1292,   208,   209,   210,  1293,   211,   212,   213,  1294,   214,
     215,   216,   217,   939,   219,   220,   221,   222,   223,   940,
    1295,   225,  1296,   226,   227,   941,   229,  1297,   230,  1298,
     231,   942,  1299,   943,   234,   235,   944,   945,   238,  1300,
     239,   240,  1301,  1302,   946,   947,   243,   244,  1303,   245,
     246,   247,   248,   249,   250,   251,   948,   253,   254,   255,
     256,  1304,   257,   258,   259,   260,   261,   262,   263,  1305,
     264,   949,   950,   267,   268,   269,   270,   271,   951,   952,
    1306,   953,  1307,   275,   954,   955,   278,   956,   280,   281,
     282,   283,   284,   285,   286,  1308,  1309,   287,   957,   289,
     958,  1310,   291,   292,   293,   294,   295,   296,   297,   298,
     959,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   960,
     961,   962,   321,   322,   323,   324,   963,  1311,   326,   327,
     964,   329,  1312,   965,   331,   966,   333,   334,   335,  1313,
     336,   337,  1314,  1315,   338,   339,   340,  1316,  1317,   341,
     967,   968,   344,   969,   970,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,  1318,  1319,  1320,
    1321,   359,   360,   971,   972,   363,   364,   973,   366,   367,
     368,  1322,   369,   370,   371,   372,   373,   374,   375,   376,
    1323,   377,   378,   379,   974,   381,   382,   383,   384,  1324,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,  1325,   399,   400,   975,   402,   403,
     404,   976,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,  1326,   977,   417,   418,   419,   420,   421,
     422,   978,   424,   425,   426,   427,   979,   429,   430,   980,
     432,  1327,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   981,   447,   982,   449,  1328,
     450,   451,  1329,   452,   983,   454,   455,   456,   457,   458,
    1330,   984,   985,  1331,   461,  1332,   462,   463,   986,   465,
     987,  1333,   467,   468,   988,   470,   471,   472,   473,   474,
    1334,  1335,   475,   476,   477,  1336,   478,   479,   480,   481,
    1337,   482,   483,   484,   485,   486,  1338,   990,  1339,   489,
     991,   491,   492,   493,   494,   495,   496,   497,  1340,  1341,
     498,  1342,  1343,   499,   500,   501,   502,   503,   504,   992,
     993,   994,   995,   996,   997,   998,   999,  1000,  1001,  1002,
     516,   517,   518,   519,  1269,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,  1270,   122,   123,   124,  1271,  1272,  1273,   922,
    1274,   125,  1275,  1276,  1277,   923,   127,   128,  1278,   129,
     130,   131,   924,   133,   134,   135,   925,   926,   927,   928,
     929,  1279,   141,   142,   143,   144,   145,   146,  1280,  1281,
     147,   148,   930,   931,   151,  1282,   152,   153,   154,   155,
     932,  1283,   933,  1284,   934,   159,   160,   161,   162,   163,
     935,   165,   166,   167,  1285,   168,   169,   170,   171,   172,
     173,  1286,   936,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   937,   938,   187,  1287,   188,  1288,   189,
     190,   191,   192,   193,   194,  1289,   195,   196,   197,   198,
     199,   200,  1290,  1291,   201,   202,   203,   204,   205,   206,
     207,  1292,   208,   209,   210,  1293,   211,   212,   213,  1294,
     214,   215,   216,   217,   939,   219,   220,   221,   222,   223,
     940,  1295,   225,  1296,   226,   227,   941,   229,  1297,   230,
    1298,   231,   942,  1299,   943,   234,   235,   944,   945,   238,
    1300,   239,   240,  1301,  1302,   946,   947,   243,   244,  1303,
     245,   246,   247,   248,   249,   250,   251,   948,   253,   254,
     255,   256,  1304,   257,   258,   259,   260,   261,   262,   263,
    1305,   264,   949,   950,   267,   268,   269,   270,   271,   951,
     952,  1306,   953,  1307,   275,   954,   955,   278,   956,   280,
     281,   282,   283,   284,   285,   286,  1308,  1309,   287,   957,
     289,   958,  1310,   291,   292,   293,   294,   295,   296,   297,
     298,   959,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     960,   961,   962,   321,   322,   323,   324,   963,  1311,   326,
     327,   964,   329,  1312,   965,   331,   966,   333,   334,   335,
    1313,   336,   337,  1314,  1315,   338,   339,   340,  1316,  1317,
     341,   967,   968,   344,   969,   970,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,  1318,  1319,
    1320,  1321,   359,   360,   971,   972,   363,   364,   973,   366,
     367,   368,  1322,   369,   370,   371,   372,   373,   374,   375,
     376,  1323,   377,   378,   379,   974,   381,   382,   383,   384,
    1324,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,  1325,   399,   400,   975,   402,
     403,   404,   976,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,  1326,   977,   417,   418,   419,   420,
     421,   422,   978,   424,   425,   426,   427,   979,   429,   430,
     980,   432,  1327,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   981,   447,   982,   449,
    1328,   450,   451,  1329,   452,   983,   454,   455,   456,   457,
     458,  1330,   984,   985,  1331,   461,  1332,   462,   463,   986,
     465,   987,  1333,   467,   468,   988,   470,   471,   472,   473,
     474,  1334,  1335,   475,   476,   477,  1336,   478,   479,   480,
     481,  1337,   482,   483,   484,   485,   486,  1338,   990,  1339,
     489,   991,   491,   492,   493,   494,   495,   496,   497,  1340,
    1341,   498,  1342,  1343,   499,   500,   501,   502,   503,   504,
     992,   993,   994,   995,   996,   997,   998,   999,  1000,  1001,
    1002,   516,   517,   518,   519,  1269,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,  2255,
     119,   120,   121,  1270,   122,   123,   124,  1271,  1272,  1273,
     922,  1274,   125,  1275,  1276,  1277,   923,   127,   128,  1278,
     129,   130,   131,   924,   133,   134,   135,   925,   926,   927,
     928,   929,  1279,   141,   142,   143,   144,   145,   146,  1280,
    1281,   147,   148,   930,   931,   151,  1282,   152,   153,   154,
     155,   932,  1283,   933,  1284,   934,   159,   160,   161,   162,
     163,   935,   165,   166,   167,  1285,   168,   169,   170,   171,
     172,   173,  1286,   936,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   937,   938,   187,  1287,   188,  1288,
     189,   190,   191,   192,   193,   194,  1289,   195,   196,   197,
     198,   199,   200,  1290,  1291,   201,   202,   203,  2256,   205,
     206,   207,  1292,   208,   209,   210,  1293,   211,   212,   213,
    1294,   214,   215,   216,   217,   939,   219,   220,   221,   222,
     223,   940,  1295,   225,  1296,   226,   227,   941,   229,  1297,
     230,  1298,   231,   942,  1299,   943,   234,   235,   944,   945,
     238,  1300,   239,   240,  1301,  1302,   946,   947,   243,   244,
    1303,   245,   246,   247,   248,   249,   250,   251,   948,   253,
     254,   255,   256,  1304,   257,   258,   259,   260,   261,   262,
     263,  1305,   264,   949,   950,   267,   268,   269,   270,   271,
     951,   952,  1306,   953,  1307,   275,   954,   955,   278,   956,
     280,   281,   282,   283,   284,   285,   286,  1308,  1309,   287,
     957,   289,   958,  1310,   291,   292,   293,   294,   295,   296,
     297,   298,   959,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   960,   961,   962,   321,   322,   323,   324,   963,  1311,
     326,   327,   964,   329,  1312,   965,   331,   966,   333,   334,
     335,  1313,   336,   337,  1314,  1315,   338,   339,   340,  1316,
    1317,   341,   967,   968,   344,   969,   970,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,  1318,
    1319,  1320,  1321,   359,   360,   971,   972,   363,   364,   973,
     366,   367,   368,  1322,   369,   370,   371,   372,   373,   374,
     375,   376,  1323,   377,   378,   379,   974,   381,   382,   383,
     384,  1324,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,  1325,   399,   400,   975,
     402,   403,   404,   976,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,  1326,   977,   417,   418,   419,
     420,   421,  2257,   978,   424,   425,   426,   427,   979,   429,
     430,   980,   432,  1327,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   981,   447,   982,
     449,  1328,   450,   451,  1329,   452,   983,   454,   455,   456,
     457,   458,  1330,   984,   985,  1331,   461,  1332,   462,   463,
     986,   465,   987,  1333,   467,   468,   988,   470,   471,   472,
     473,   474,  1334,  1335,   475,   476,   477,  1336,   478,   479,
     480,   481,  1337,   482,   483,   484,   485,   486,  1338,   990,
    1339,   489,   991,   491,   492,   493,   494,   495,   496,   497,
    1340,  1341,   498,  1342,  1343,   499,   500,   501,   502,   503,
     504,   992,   993,   994,   995,   996,   997,   998,   999,  1000,
    1001,  1002,   516,   517,   518,   519,   921,     0,   658,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,   922,     0,   125,     0,     0,     0,   923,   127,   128,
       0,   129,   130,   131,   924,   133,   134,   135,   925,   926,
     927,   928,   929,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   930,   931,   151,     0,   152,   153,
     154,   155,   932,     0,   933,     0,   934,   159,   160,   161,
     162,   163,   935,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   936,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   937,   938,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   939,   219,   220,   221,
     222,   223,   940,  1497,   225,     0,   226,   227,   941,   229,
       0,   230,     0,   231,   942,     0,   943,   234,   235,   944,
     945,   238,     0,   239,   240,     0,     0,   946,   947,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   948,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   949,   950,   267,   268,   269,   270,
     271,   951,   952,     0,   953,     0,   275,   954,   955,   278,
     956,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   957,   289,   958,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   959,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   960,   961,   962,   321,   322,   323,   324,   963,
       0,   326,   327,   964,   329,     0,   965,   331,   966,   333,
     334,   335,     0,   336,   337,  1498,     0,   338,   339,   340,
       0,     0,   341,   967,   968,   344,   969,   970,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   971,   972,   363,   364,
     973,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   974,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     975,   402,   403,   404,   976,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   977,   417,   418,
     419,   420,   421,   422,   978,   424,   425,   426,   427,   979,
     429,   430,   980,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   981,   447,
     982,   449,     0,   450,   451,     0,   452,   983,   454,   455,
     456,   457,   458,     0,   984,   985,     0,   461,     0,   462,
     463,   986,   465,   987,  1499,   467,   468,   988,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,  1338,
     990,     0,   489,   991,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   992,   993,   994,   995,   996,   997,   998,   999,
    1000,  1001,  1002,   516,   517,   518,   519,   921,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     3,
       4,     0,   922,     0,   125,     0,     0,     0,   923,   127,
     128,     0,   129,   130,   131,   924,   133,   134,   135,   925,
     926,   927,   928,   929,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   930,   931,   151,     0,   152,
     153,   154,   155,   932,     0,   933,     0,   934,   159,   160,
     161,   162,   163,   935,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   936,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   937,   938,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   939,   219,   220,
     221,   222,   223,   940,     0,   225,     0,   226,   227,   941,
     229,     0,   230,     0,   231,   942,     0,   943,   234,   235,
     944,   945,   238,     0,   239,   240,     0,     0,   946,   947,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     948,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   949,   950,   267,   268,   269,
     270,   271,   951,   952,     0,   953,     0,   275,   954,   955,
     278,   956,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   957,   289,   958,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   959,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   960,   961,   962,   321,   322,   323,   324,
     963,     0,   326,   327,   964,   329,     0,   965,   331,   966,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   967,   968,   344,   969,   970,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   971,   972,   363,
     364,   973,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   974,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   975,   402,   403,   404,   976,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   977,   417,
     418,   419,   420,   421,   422,   978,   424,   425,   426,   427,
     979,   429,   430,   980,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   981,
     447,   982,   449,     0,   450,   451,     0,   452,   983,   454,
     455,   456,   457,   458,     0,   984,   985,     0,   461,     0,
     462,   463,   986,   465,   987,     0,   467,   468,   988,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
    1338,   990,     0,   489,   991,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   992,   993,   994,   995,   996,   997,   998,
     999,  1000,  1001,  1002,   516,   517,   518,   519,   112,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,   627,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   630,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,     0,   633,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   639,   465,   640,     0,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   112,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,   157,     0,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,   232,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,  1777,   152,   153,   154,   155,   156,     0,     0,  1778,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
    1779,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,  1780,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,  1781,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,  1782,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,  1783,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,  1777,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,  1779,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,  1780,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,  2329,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,  1782,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,  1783,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     3,     4,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,     0,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   553,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   554,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   634,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   793,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   634,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   822,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,  1995,     0,
       0,     0,     0,  1996,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,  2003,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,  2004,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,  2005,   452,     0,
     454,  2006,   456,  2007,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,  2008,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,   658,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   665,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   666,
     460,     0,   461,     0,   667,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   700,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,     0,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   788,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   791,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   795,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   811,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   913,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   916,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,  1040,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,  1063,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,  1406,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,  1408,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,     0,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,  1411,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,  1413,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,  2251,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   834,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,   835,     0,   125,     0,  -943,     0,   836,   127,   128,
       0,   129,   130,   131,   837,   133,   134,   135,     0,   838,
     839,   840,   841,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   842,   843,   151,     0,   152,   153,
     154,   155,     0,     0,   844,     0,   845,   159,   160,   161,
     162,   163,   846,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   847,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   848,   849,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   850,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,     0,   219,   220,   221,
     222,   223,     0,     0,   225,     0,   226,   227,   851,   229,
       0,   230,     0,   231,   852,     0,   853,   234,   235,  -943,
     854,   238,     0,   239,   240,     0,     0,     0,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   856,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   857,     0,   267,   268,   269,   270,
     271,   858,   859,     0,   860,     0,   275,   861,   862,   278,
     863,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   864,   289,   865,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   866,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   867,   868,   869,   321,   322,   323,   324,     0,
       0,   326,   327,   870,   329,     0,     0,   331,   871,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,     0,   872,   344,   873,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,     0,   874,   363,   364,
       0,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   875,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     876,   402,   403,   404,   877,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   878,   417,   418,
     419,   420,   421,   422,   879,   424,   425,   426,   427,   880,
     429,   430,   881,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   882,   447,
       0,   449,     0,   450,   451,     0,   452,   883,   454,   455,
     456,   457,   458,     0,   884,   885,     0,   461,     0,   462,
     463,     0,   465,     0,     0,   467,   468,   886,   470,   471,
     472,   473,   474,   887,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,     0,
     888,     0,   489,   889,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   528,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,   516,   517,   518,   519,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,  3022,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   677,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   678,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   679,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     680,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   681,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   909,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   679,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   681,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,  1705,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,     0,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,  1879,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
    2238,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,  2253,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   834,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,   835,     0,   125,     0,
       0,     0,   836,   127,   128,     0,   129,   130,   131,   837,
     133,   134,   135,     0,   838,   839,   840,   841,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   842,
     843,   151,     0,   152,   153,   154,   155,     0,     0,   844,
       0,   845,   159,   160,   161,   162,   163,   846,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   847,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     848,   849,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   850,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,     0,   219,   220,   221,   222,   223,     0,     0,   225,
       0,   226,   227,   851,   229,     0,   230,     0,   231,   852,
       0,   853,   234,   235,     0,   854,   238,     0,   239,   240,
       0,     0,     0,     0,   243,   244,     0,   245,   246,   247,
     248,   249,   855,   251,   856,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   857,
       0,   267,   268,   269,   270,   271,   858,   859,     0,   860,
       0,   275,   861,   862,   278,   863,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   864,   289,   865,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   866,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   867,   868,   869,
     321,   322,   323,   324,     0,     0,   326,   327,   870,   329,
       0,     0,   331,   871,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,     0,   872,
     344,   873,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,     0,   874,   363,   364,     0,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   875,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   876,   402,   403,   404,   877,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   878,   417,   418,   419,   420,   421,   422,   879,
     424,   425,   426,   427,   880,   429,   430,   881,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   882,   447,     0,   449,     0,   450,   451,
       0,   452,   883,   454,   455,   456,   457,   458,     0,   884,
     885,     0,   461,     0,   462,   463,     0,   465,     0,     0,
     467,   468,   886,   470,   471,   472,   473,   474,   887,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,     0,   888,     0,   489,   889,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   834,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   516,   517,
     518,   519,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,   835,     0,   125,     0,     0,     0,   836,   127,
     128,     0,   129,   130,   131,   837,   133,   134,   135,     0,
     838,   839,   840,   841,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   842,   843,   151,     0,   152,
     153,   154,   155,     0,     0,   844,     0,   845,   159,   160,
     161,   162,   163,   846,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   847,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   848,   849,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   850,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,     0,   219,   220,
     221,   222,   223,     0,     0,   225,     0,   226,   227,   851,
     229,     0,   230,     0,   231,   852,     0,   853,   234,   235,
       0,   854,   238,     0,   239,   240,     0,     0,     0,     0,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     856,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   857,     0,   267,   268,   269,
     270,   271,   858,   859,     0,   860,     0,   275,   861,   862,
     278,   863,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   864,   289,   865,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   866,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   867,   868,   869,   321,   322,   323,   324,
       0,     0,   326,   327,   870,   329,     0,     0,   331,   871,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,     0,   872,   344,   873,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,     0,   874,   363,
     364,     0,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   875,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   876,   402,   403,   404,   877,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   878,   417,
     418,   419,   420,   421,   422,   879,   424,   425,   426,   427,
     880,   429,   430,   881,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   882,
     447,     0,   449,     0,   450,   451,     0,   452,   883,   454,
     455,   456,   457,   458,     0,   884,   885,     0,   461,     0,
     462,   463,     0,   465,     0,     0,   467,   468,   886,   470,
     471,   472,   473,   474,   887,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
       0,   888,     0,   489,   889,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   834,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   516,   517,   518,   519,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,   835,     0,
     125,     0,     0,     0,   836,   127,   128,     0,   129,   130,
     131,   837,   133,   134,   135,     0,   838,   839,   840,   841,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   842,   843,   151,     0,   152,   153,   154,   155,     0,
       0,   844,     0,   845,   159,   160,   161,   162,   163,   846,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   847,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   848,   849,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   850,   204,   205,   206,   207,
       0,   208,   209,   210,     0,  1864,   212,   213,     0,   214,
     215,   216,   217,     0,   219,   220,   221,   222,   223,     0,
       0,   225,     0,   226,   227,   851,   229,     0,   230,     0,
     231,   852,     0,   853,   234,   235,     0,   854,   238,     0,
     239,   240,     0,     0,     0,     0,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   856,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   857,     0,   267,   268,   269,   270,   271,   858,   859,
       0,   860,     0,   275,   861,   862,   278,   863,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   864,   289,
     865,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     866,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   867,
     868,   869,   321,   322,   323,   324,     0,     0,   326,   327,
     870,   329,     0,     0,   331,   871,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
       0,   872,   344,   873,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,     0,   874,   363,   364,     0,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   875,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   876,   402,   403,
     404,   877,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   878,   417,   418,   419,   420,   421,
     422,   879,   424,   425,   426,   427,   880,   429,   430,   881,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   882,   447,     0,   449,     0,
     450,   451,     0,   452,   883,   454,   455,   456,   457,   458,
       0,   884,   885,     0,   461,     0,   462,   463,     0,   465,
       0,     0,   467,   468,   886,   470,   471,   472,   473,   474,
     887,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,     0,   888,     0,   489,
     889,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,  2946,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     516,   517,   518,   519,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,  2947,     0,   125,     0,     0,     0,
    2948,   127,   128,     0,   129,   130,   131,  2949,   133,   134,
     135,     0,   838,  2950,   840,   841,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   842,   843,   151,
       0,   152,   153,   154,   155,     0,     0,  2951,     0,  2952,
     159,   160,   161,   162,   163,  2953,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,  2954,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   848,   849,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   850,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,     0,
     219,   220,   221,   222,   223,     0,     0,   225,     0,   226,
     227,   851,   229,     0,   230,     0,   231,  2955,     0,  2956,
     234,   235,  2957,  2958,   238,     0,   239,   240,     0,     0,
       0,     0,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,  2959,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,  2960,     0,   267,
     268,   269,   270,   271,   858,   859,     0,   860,     0,   275,
    2961,  2962,   278,  2963,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,  2964,   289,  2965,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  3238,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   867,  2967,   869,   321,   322,
     323,   324,     0,     0,   326,   327,  2969,   329,     0,     0,
     331,   871,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,     0,  2971,   344,  2972,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,     0,
    2973,   363,   364,     0,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     875,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,  2974,   402,   403,   404,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
    2975,   417,   418,   419,   420,   421,   422,     0,   424,   425,
     426,   427,  2977,   429,   430,   881,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,  3239,   447,     0,   449,     0,   450,   451,     0,   452,
    2979,   454,   455,   456,   457,   458,     0,   884,   885,     0,
     461,     0,   462,   463,     0,   465,     0,     0,   467,   468,
    2980,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,     0,   888,     0,   489,  2982,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   528,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   516,   517,   518,   519,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,     0,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,     0,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   834,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,   835,     0,   125,     0,     0,     0,   836,   127,   128,
       0,   129,   130,   131,   837,   133,   134,   135,     0,   838,
     839,   840,   841,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   842,   843,   151,     0,   152,   153,
     154,   155,     0,     0,   844,     0,   845,   159,   160,   161,
     162,   163,   846,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   847,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   848,   849,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   850,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,     0,   219,   220,   221,
     222,   223,     0,     0,   225,     0,   226,   227,   851,   229,
       0,   230,     0,   231,   852,     0,   853,   234,   235,     0,
     854,   238,     0,   239,   240,     0,     0,     0,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   856,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   857,     0,   267,   268,   269,   270,
     271,   858,   859,     0,   860,     0,   275,   861,   862,   278,
     863,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   864,   289,   865,     0,   291,   292,   293,   294,   295,
     296,   297,   298,     0,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   867,   868,   869,   321,   322,   323,   324,     0,
       0,   326,   327,   870,   329,     0,     0,   331,   871,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,     0,   872,   344,   873,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,     0,   874,   363,   364,
       0,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   875,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     876,   402,   403,   404,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   878,   417,   418,
     419,   420,   421,   422,     0,   424,   425,   426,   427,   880,
     429,   430,   881,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   447,
       0,   449,     0,   450,   451,     0,   452,   883,   454,   455,
     456,   457,   458,     0,   884,   885,     0,   461,     0,   462,
     463,     0,   465,     0,     0,   467,   468,   886,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,     0,
     888,     0,   489,   889,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   705,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   516,   517,   518,   519,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   706,   707,     0,   708,   709,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     710,   711,   151,     0,   152,   153,   154,   155,   712,     0,
       0,     0,     0,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,     0,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   713,   714,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,     0,     0,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   715,   219,   220,   221,   222,   223,   716,     0,
     225,     0,   226,   227,   717,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   718,     0,   238,     0,   239,
       0,     0,     0,   719,   720,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   721,   267,   268,   269,   270,   271,   722,   723,     0,
     724,     0,   275,     0,     0,   278,     0,   280,     0,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   725,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   726,     0,
     727,   321,   322,   323,     0,   728,     0,   326,   327,     0,
     329,     0,   729,   331,   730,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   731,
       0,   344,     0,   732,   347,   348,   349,   350,   351,   352,
     353,   354,   355,     0,     0,   358,     0,     0,     0,     0,
     359,   360,   733,     0,   363,   364,   734,   366,   367,   368,
       0,   369,   370,   371,   372,   373,     0,     0,   376,     0,
     377,   378,   379,   735,   381,   382,   383,   384,     0,   385,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     736,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     737,   424,   425,     0,   427,     0,     0,   430,   738,   432,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   739,   447,   740,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     741,   742,     0,     0,     0,   462,   463,   743,   465,   744,
       0,   467,   468,   745,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,  1530,   747,     0,   489,     0,
     491,     0,   493,   494,   495,   496,     0,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   748,   749,
     750,   751,   752,   753,   754,   755,   756,   757,   758,   516,
     517,   518,   519,     1,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     3,     4,     0,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     6,     0,     0,     0,     8,     0,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     9,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     0,    10,
       0,   588,     0,     0,     9,     0,     0,     0,     0,     0,
       0,     0,    12,     0,     0,     0,    10,     0,   588,     0,
       0,     0,     0,     0,     0,     0,    13,     0,     0,    12,
       0,     0,     0,     0,     0,     0,     0,   589,     0,     0,
       0,     0,     0,    13,     0,    16,     0,     0,     0,     0,
       0,     0,     0,    17,   589,     0,     0,     0,     0,     0,
       0,     0,    16,     0,     0,     0,     0,     0,     0,    20,
      17,     0,     0,    21,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     0,     0,     0,     0,     0,    28,     0,     0,    29,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,    28,     0,     0,    29,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,    32,     0,     0,    31,     0,     0,
       0,    33,     0,     0,     0,     0,    34,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,    35,    33,     0,
       0,     0,     0,    34,     0,     0,     0,     0,     0,    36,
       0,     0,     0,    37,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
      37,     0,     0,    38,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    39,     0,     0,     0,
      38,     0,    41,     0,     0,     0,     0,    42,     0,     0,
       0,   590,     0,    39,     0,     0,     0,     0,     0,    41,
       0,     0,     0,    43,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   591,     0,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   686
};

static const yytype_int16 yycheck[] =
{
       8,   584,   652,   520,    12,     7,   675,    45,   792,    17,
      45,    87,    88,   581,     0,    23,    24,   583,     0,    21,
      28,    29,    30,  1030,    85,    33,   804,     0,    36,    37,
       0,   591,    40,   879,     0,    43,    44,    45,  1254,  1126,
    1731,  1253,  1010,   800,  1266,    21,  1435,  1613,  1010,     0,
      36,  1687,     0,   809,     0,   885,   780,     0,  1071,    89,
    1188,  1545,     7,  2129,  2249,    18,  1591,  2126,  2184,  1228,
      37,  1833,     0,  1230,  1440,  2194,    21,    89,  2295,  2296,
    2297,  1385,  2679,  2647,  2647,    87,    88,  2677,    21,   648,
      18,    99,  1019,  1233,   653,  1019,   104,   105,   106,   107,
     108,  1258,  1194,   590,   792,   699,   794,  1019,   796,   591,
    1019,    87,    88,    99,  1155,  1122,  2245,  2123,     0,  1160,
       0,     0,     0,     0,     0,  1640,  1641,     0,   645,  2157,
       0,  2159,     0,     0,     0,     0,     0,  2183,     0,     0,
     107,     0,    87,    88,     0,     0,     0,  2492,     0,     0,
     911,  2700,  1484,   914,    87,    88,  3133,    44,  2557,  2308,
     609,    24,  2693,   842,   843,  3015,  2603,  3031,     0,     5,
    2607,     9,  1851,    65,   691,     5,    17,    13,    14,     5,
      11,     0,  1848,  1751,  3034,    16,  1691,    13,    14,   770,
     869,    26,  1749,    17,  2319,    40,     5,  2326,  1166,     5,
    1980,     5,     9,     5,  3242,  2013,   775,    13,    14,    13,
      14,    13,    14,     5,     0,     5,    13,    14,  2026,     9,
      57,    13,    14,    80,  2315,     5,     5,     5,     5,     9,
       5,     5,     5,     5,    74,   775,     5,     5,     5,  2875,
     224,   173,    90,    82,   140,    74,     5,   122,    47,     5,
       5,     5,     5,   172,    93,   172,  2466,     5,   148,    23,
      24,    13,    14,    47,   193,    65,  2395,  2396,   100,  2398,
       4,    65,    65,  2994,  1242,     9,   120,  1245,  1246,    17,
     128,   100,  1039,    11,  1114,   290,   115,    15,    16,     3,
       4,     5,   117,   248,   229,     9,   293,   107,     4,    11,
    2821,    47,  2823,     9,    16,     9,  3132,   292,    65,   183,
    2561,  2562,   316,    11,   100,    42,  2921,  3464,    16,  2536,
      48,  2535,     3,  2537,   918,   138,   195,   281,    11,   169,
     220,   275,    15,    16,  3129,    31,    48,  3577,   298,  1352,
      11,  3525,   278,    39,    15,    16,   110,   371,  1361,  1428,
      48,    42,    80,    11,    35,    36,  3333,  3334,    16,    31,
      75,   106,   148,    31,    43,    11,   164,    39,    80,    15,
      16,    39,  1022,   131,    82,   298,   162,    48,   412,   164,
     274,   167,    80,  3424,  2146,    93,   172,  3120,   118,  3122,
      48,   117,   460,    31,  2617,  1241,    66,   183,   118,    47,
      31,   115,   188,   316,    74,    31,   195,   108,   298,    80,
    1089,  1090,  2976,    39,  1171,  1950,   108,    13,    14,  3269,
     392,  2449,    80,  1017,   342,  1512,  1105,   482,    11,  3026,
     149,  2616,  1560,    16,   220,   515,   234,   115,  3028,   162,
    3037,   475,   522,   337,   398,   124,  1981,    85,   277,   176,
    1010,   506,   520,   282,   372,   241,    94,   107,   518,   372,
     292,   309,   522,  1591,  1023,    48,  3327,   197,  3329,   166,
    3654,   363,  2591,   292,   108,  3715,  1035,   197,   116,   314,
     315,   274,  2488,   202,  2613,   176,  2615,  2710,   273,   358,
     171,   331,   173,  2006,  2007,  2008,   520,    80,   120,   454,
     131,   216,   331,   289,  3330,  2030,   292,   221,  3655,   254,
    1070,   515,   298,   108,   433,   520,   433,   262,   241,  3240,
     349,   457,  3563,   520,  1011,  3566,  1605,  1121,   472,   287,
     244,   539,   364,  1837,  2546,   520,   544,  3058,  2752,   547,
     353,  2553,  2554,  2555,  3339,   364,   554,   531,   520,  1218,
    1219,  3187,   538,   591,   340,   193,   282,  2123,  2768,  3423,
     450,  3294,   397,   363,   524,   520,  1653,   643,   206,   363,
     363,   167,   361,   581,   244,   583,   584,   585,   364,   427,
    1912,  2706,   478,   591,  3622,   460,   460,   394,   520,   524,
     509,   520,     0,   215,   433,  2846,  3201,   390,  2689,   434,
    2729,   524,   515,   522,   282,   643,   363,  3468,  1168,  1169,
    1127,   451,   422,   457,  1195,  3220,   624,   625,   626,  1778,
     419,  3598,   451,   520,   274,  2405,   634,  2193,  1222,   326,
     632,   460,   524,  2201,  1412,   419,   422,   462,   591,   647,
     648,   643,   477,  2200,   652,   653,  2161,   581,   686,  2328,
     482,  1220,  1868,    26,  2462,  2321,   409,   410,  1419,   689,
     422,   518,   590,   482,   450,   522,  3707,   643,  1392,   677,
     678,   512,   680,   419,   460,   520,  1689,   689,  3242,  3242,
    1220,   519,  2187,   520,   520,   516,   694,   632,   512,   521,
     520,   523,   700,   479,   520,   481,   482,   527,   643,   632,
    3564,   527,   521,  1925,   523,   401,  1793,  2892,  1795,   518,
     643,   520,   484,   522,   520,  3565,   520,   484,   520,   780,
    3251,   469,   173,   520,   524,   433,   394,   694,   520,   401,
     520,  2035,   518,  1182,   506,   521,   522,   523,  3137,   506,
     520,   520,   520,   520,   697,   520,   520,   520,   520,  3094,
    2899,   520,   520,   520,  3731,  3192,   362,  1436,  1437,   767,
    3197,   520,   770,   626,   520,   520,   520,   524,   520,   507,
     408,   419,   520,   411,   512,   401,   482,   511,   512,   765,
     518,    11,   520,   765,   390,   513,   514,   515,   516,   470,
     267,   799,   765,  3010,   802,   765,   162,   511,   512,   765,
     506,  1028,   810,   770,   516,   511,   512,   511,   512,   817,
     818,   819,   820,   700,   765,  2147,   117,   765,   516,   765,
     383,   205,   765,     5,   832,  3422,  2838,  2873,   511,   512,
     513,   514,   515,   516,  1428,   457,  1404,   765,   150,  1807,
     511,   512,   513,   514,   515,   516,   323,   115,    31,  1817,
      80,   470,  1820,   511,   512,   513,   514,   515,   516,   310,
     624,   460,   626,    27,  1877,  1993,  1434,   513,   514,   515,
     516,   879,  3719,  2879,   174,   241,   162,  1634,  1635,  1636,
     523,   167,  1450,   765,  3013,   765,   765,   765,   765,   765,
    3439,   203,   765,   657,  3708,   765,  1565,   765,   765,   765,
     765,   765,  2030,   765,   765,  1488,   765,  3438,   209,   765,
     765,   765,  1581,   765,   765,   679,   436,  1483,    11,  2926,
    1486,   520,  2488,   289,   230,   193,  1492,  2934,    61,  3776,
     513,   514,   515,   516,    55,  1495,   421,  2450,  2451,  2452,
    2453,   314,   315,  2427,   524,   879,   397,  2075,   131,   249,
     131,   162,  3793,   347,  3768,   241,   167,  1551,  1926,  3800,
    2001,   524,  3488,  3489,  1926,   485,    34,     5,   274,   248,
    1046,  3561,   136,   274,   459,   131,   277,  1053,  3575,    11,
    1907,  1908,  1909,  1907,  1908,  1020,  2501,    80,   178,  2355,
     172,   385,   376,    61,  2298,  1907,  2362,  1906,  2364,  1558,
     248,   385,  1010,   289,   160,    38,   426,  1494,   428,   277,
    1604,  1605,  1020,  1495,  1022,  1023,    48,  1025,  3203,  1803,
    1614,   394,  1539,   509,   397,   520,  1034,  1035,   422,    38,
     241,   358,  1040,   509,   520,    27,    27,   343,   422,   172,
     181,    33,    33,  1637,  1046,    11,   522,   347,    80,   120,
    2812,  1053,   205,  3579,   244,  1063,  2272,  3647,  3622,  3622,
     248,   434,  1070,  1071,  1072,   136,   515,  3183,  1076,    55,
    1046,  2163,   194,   522,  2166,   196,  1644,  1053,   289,   473,
     201,  2647,    48,  1011,  1122,   385,    27,   393,  1776,   473,
    1656,  3157,    33,     3,  3153,  2223,   277,   376,   172,   230,
       4,  1046,  1858,    27,   477,     9,   287,   484,  1053,    33,
    1834,  1835,  1836,  1046,    80,  1803,  1124,   255,  1126,   240,
    1053,   277,   422,   508,  2281,  2514,   282,  1888,   376,   506,
     131,   287,   296,   518,  1822,   317,   318,   319,  1072,  1827,
     173,   484,   439,   274,   136,   136,  2153,   277,   508,  1910,
     422,   457,   282,  1914,  3751,  1190,  1917,   115,   518,   160,
    1168,  1169,  1170,   506,   173,  1173,    71,    72,  2255,  2256,
    2257,  1201,  1202,   473,  1204,   454,    12,   520,   211,  1187,
    1188,    17,  1190,   473,   317,   318,   319,  1195,   376,  1201,
    1202,   177,  1204,    29,   227,   136,   360,  2337,   362,   347,
     518,   383,   211,  2343,   522,   238,   454,    43,    44,   849,
     196,   341,   136,  3398,   172,   201,  1784,  1044,   227,  1227,
    1228,  2746,   248,  1933,    13,    14,   390,  1937,  1195,   238,
    1940,   871,  1240,  1241,   131,  1062,   426,   385,   428,  1066,
     422,   520,   248,   317,   318,   319,  1010,  1813,   181,  1257,
     383,   248,  1818,  1261,   240,  1019,   484,  1265,   520,   330,
      82,  1049,   393,   160,   454,  3482,   454,  1055,   908,   105,
     379,    93,   520,   455,   422,   396,   277,   521,   506,   518,
     524,   282,    82,   522,   466,   441,   287,   520,   174,   422,
    1257,  1885,   520,    93,   525,   518,   452,   520,   529,   511,
     482,   513,  2389,  3369,   296,   296,  1070,  1241,  3367,   383,
    1537,  1538,   520,  2879,   526,   527,  1543,   178,  1550,   167,
    1552,  1553,   455,   131,   506,   473,   457,   518,   520,   520,
    1898,   522,   520,   466,   367,     4,  2464,  2543,   520,  2467,
       9,  2547,  2548,  2549,  1352,  1054,   520,   305,   422,  1058,
     376,   384,   160,  1361,  2743,   296,   172,     4,   367,   317,
     318,   319,     9,   249,   356,   356,  1926,  1131,   360,   360,
     376,   520,   296,     4,  1942,   384,  1140,  1385,     9,   376,
     426,   455,   428,   244,   520,   282,  1954,   520,   520,  1397,
     287,  1399,   466,  1157,   520,  1989,  1404,  1405,   390,   390,
     183,     4,  1166,   186,  1168,  1169,     9,   520,  1416,   521,
     396,  2800,   524,     3,  2630,     5,  1984,  2629,   482,   360,
     484,  1403,  2384,  1991,   520,   383,  1434,  1435,   454,  2255,
    1403,  2257,   356,  1403,  2158,   521,   360,  1403,   524,  1447,
     441,   426,  1450,   428,  1452,    42,   520,   520,   454,   390,
     426,   452,   428,  1093,   513,  2614,   772,   454,   774,  2027,
    2672,   347,   506,  2031,   422,    62,   390,   520,  1108,  2037,
    1404,   463,   463,  2033,   282,  1483,  1484,   226,  1486,   287,
    1488,  1489,   503,  1491,  1492,  2492,   521,  1495,  2628,   524,
    2630,  2252,   522,  2254,   520,  1571,   292,   455,  1574,   385,
    1434,  1435,   521,  1579,  1512,   524,  1582,   521,   466,   106,
     524,  1587,    13,    14,   520,   376,  1450,  2111,   521,   109,
     110,   524,   463,   520,   482,   677,   678,   152,   680,  2359,
    2360,   260,   261,  2613,   521,  2615,   422,   524,   503,   463,
    2318,  3177,  1495,  1545,   441,   522,   521,   172,   506,   524,
    1558,   171,  1560,  1561,  3739,   452,   524,  2644,   520,  2228,
    1568,  2648,   520,  2650,   521,   426,  1494,   428,   252,  1571,
     191,   192,  1574,     0,   521,   521,   521,  1579,   524,   524,
    1582,  1589,   297,  1591,   172,  1587,   521,   473,    61,   524,
     520,    18,   423,   454,    21,  1571,   226,  3716,  1574,  3718,
    1545,   191,   192,  1579,   503,  1613,  1582,   204,   153,    36,
    1618,  1587,  1545,   521,   521,  1601,   524,   524,    45,   521,
     521,   521,   524,   524,   524,  1633,  1571,   521,   356,  1574,
     524,  3659,   521,   441,  1579,   524,  1644,  1582,  1571,   260,
     261,  1574,  1587,   153,   452,  1653,  1579,   153,  1656,  1582,
    1601,   380,   381,  1601,  1587,  1601,  3775,   254,  1601,   153,
      87,    88,    89,  3052,  3692,   262,   256,   257,   258,   259,
     260,   261,    99,  1601,   264,   265,  3242,   274,    42,  2647,
     521,  1689,   521,   524,   521,   524,     6,   524,   521,     9,
     520,   524,   317,   318,   319,   521,    16,  1705,   524,  1707,
     521,  1709,   521,   524,  1734,   524,    13,    14,   521,   306,
    1644,    31,    13,    14,   277,    35,  1724,  1725,   554,    42,
     521,   473,  1734,   524,  2940,    13,    14,    89,  1955,  1956,
    1957,  1958,  1959,  1960,  2893,  3763,  1963,  1964,  1965,  1966,
    1967,  1968,  1969,  1970,  1971,  1972,  3774,  1511,   521,   585,
    3386,   524,   371,   372,  1762,  1708,  1764,   153,   383,   380,
     381,   521,  2330,   486,   524,   362,    27,    13,    14,   469,
    1778,  1779,    33,    27,   521,   521,  1784,   524,   524,    33,
     520,  1789,  1790,  1791,  1792,  1793,  1794,  1795,   385,  3011,
     380,   381,  1800,    27,  1802,   521,   327,   422,   524,    33,
    2813,  3285,    13,    14,   521,  1813,  1814,   524,   520,   406,
    1818,  1819,   148,   153,  2380,  1823,  1824,  1825,  1826,   521,
    1828,  1829,   524,   520,  2384,  2582,   162,    13,    14,  1837,
     455,   167,   521,   521,   521,   524,   524,   524,    13,    14,
     520,   466,  1850,  1851,  1852,  1853,    13,    14,   521,  1857,
    1784,   524,    41,   521,    13,    14,   524,   482,   520,     8,
      13,    14,    11,  1871,   700,   520,    15,    16,   153,  1877,
      19,    20,    21,    13,    14,   136,    13,    14,   522,  2106,
    2107,   506,   136,  3519,   220,    13,    14,  1873,    13,    14,
    1898,    13,    14,    13,    14,   520,    13,    14,    13,    14,
      13,    14,   136,   153,  1912,   241,    13,    14,    13,    14,
     500,   501,    13,    14,   581,    42,    13,    14,  1926,   371,
     372,   264,   265,   153,   521,  2703,   292,  2683,   433,   380,
     381,   371,   372,  1697,  1942,    62,  2605,   520,  2014,   371,
     372,  2665,   314,   315,  2020,   520,  1954,   465,   466,  1168,
    1169,   520,   520,   289,   521,   424,   222,   227,   520,   301,
     227,  2722,   298,  2931,  1898,   227,  3657,   520,   299,    42,
    3661,   239,   520,     5,     5,     5,  1984,   520,   520,   106,
     520,   520,     5,  1991,   520,  1993,     5,   148,   520,     5,
     520,   149,     9,   483,   303,   524,   104,  2005,   524,   521,
      42,   162,   222,   167,   390,   289,   167,   167,  1942,   287,
      61,   239,  2014,   520,   433,    93,   520,  2025,  2020,  2027,
    1954,   524,  2030,  2031,   433,  2033,    61,  2035,    61,  2037,
     433,   267,   433,   531,   433,   296,  3248,   482,  2014,   153,
       8,  3525,   296,    11,  2020,    98,   100,    15,    16,   176,
    1984,    19,    20,    21,   277,   277,  3622,  1991,   520,   220,
    3067,  3752,   296,    42,   277,   277,   520,  2075,     3,  2014,
     520,  2079,     9,  2111,  3087,  2020,  2084,   204,    41,  2647,
     241,  2014,   431,   431,   518,   518,  3048,  2020,   433,   433,
     172,   522,  3576,  2027,   433,   356,   433,  2031,   521,   360,
     521,   521,   356,  2037,   148,   521,   360,   521,   521,   524,
     521,   538,   479,   521,   450,  2123,   520,   227,   162,   172,
    3509,   227,   356,   167,   524,   520,   360,   254,   289,   390,
    2976,   520,   284,   284,    11,   262,   390,   298,   519,  2147,
     478,   358,  2177,   531,   524,   294,    74,   274,   524,   528,
    2718,   431,    80,   282,  2156,   520,   390,   520,   433,   183,
    2168,   163,  1926,   590,   591,    93,   172,   524,  1932,  2177,
    3654,   521,   220,   520,   509,  2183,   220,  2179,   460,   306,
    2156,  3309,  2943,  2944,  2170,   393,   267,   115,   183,   117,
     524,    57,   230,   293,   581,   316,   524,   241,  3420,   524,
     316,   222,   463,  2179,    38,   632,   521,  2773,   520,   463,
      44,  2156,   879,   277,   298,  2223,   643,  3606,   230,  2170,
     230,  2229,  2170,  2156,  2170,   336,   473,  2170,   290,   463,
     423,   520,   153,   201,  2179,   362,   102,  2245,   153,   520,
     153,   482,  2170,   153,    42,   289,  2179,  2255,  2256,  2257,
     277,   292,   521,   518,   298,   121,   224,   521,   385,   686,
     503,   503,   689,   521,   317,   318,   319,   101,   521,  2033,
     521,    42,   521,    61,  3242,   172,   142,   292,    11,   406,
     146,   209,    42,   167,   521,   520,  2324,   183,   521,   450,
    2298,  2518,  2519,   167,   521,   521,     8,   521,   519,    11,
    2308,   520,   168,    15,    16,   171,  2314,    19,    20,    21,
     520,   503,  3399,   528,   521,   524,   522,   521,  2326,  2327,
    2328,  2329,  2330,   189,   521,   172,   294,   156,     9,   520,
     383,  2313,  2340,   520,  2342,   433,   520,  2345,   765,   173,
    2313,   520,  2350,  2313,   479,   479,  2912,  2313,    42,   277,
      61,  1187,   524,   509,   282,  2363,   524,   518,   507,   508,
     509,   522,   511,   512,   513,   514,   515,   516,   293,   422,
     293,   457,  2380,   505,  2942,   247,  2384,   211,    61,    61,
     267,  2389,   277,   433,   520,   153,   205,  2395,  2396,   442,
    2398,   153,   153,   227,   433,   519,  2330,   433,   284,   433,
      42,   284,   455,   331,   238,  1072,   450,   433,   520,  3625,
     358,   290,   521,   466,   292,   482,   282,   520,    42,     8,
     524,   349,   521,   153,   290,  2427,    15,    16,   521,   482,
      19,    20,    21,   282,   519,   172,   270,   188,   521,  2447,
     519,   521,    61,  3221,   520,   311,   520,  2455,  2456,  2457,
     521,   521,   167,   506,  2492,    80,  2464,   144,   292,  2467,
     521,   201,   521,   172,  2466,  2473,   521,   520,  2529,   302,
      83,   520,   524,   531,   518,   341,   521,   521,   522,   525,
    2488,   521,  2427,   317,   364,   293,  2524,   183,  3048,   201,
     324,   520,   879,   521,  2427,   520,   153,   176,  2262,  1166,
     445,   521,   524,   521,    42,    42,  2514,   520,    42,    86,
     521,   520,   224,  2740,   521,   481,   521,   520,   460,   519,
     524,   172,   521,   451,  2559,  2560,   524,   520,    62,   521,
     201,  2566,   460,   367,   521,   524,   521,  3624,   521,   507,
     508,   509,  2306,   511,   512,   513,   514,   515,   516,   521,
     384,  2559,  2560,   511,   519,     9,   303,   521,  2566,   519,
    2324,   520,   466,   292,    61,   509,   521,  2605,   521,  2577,
     521,   521,   106,   482,  1241,  2583,  3144,   207,    42,   115,
    2514,   520,   294,  3590,  1011,   230,    88,  3311,  3154,   194,
     282,  2599,   282,  2579,   433,  2603,   522,   433,   522,  2607,
    2608,  2609,   522,   522,   522,  2613,  2614,  2615,   522,  2617,
     522,   522,    42,    42,   522,   522,   522,   522,   509,  1046,
    2384,   455,   522,   522,   522,   277,  1053,  2391,  2636,  2393,
    2638,  3388,   522,  2397,   522,  2399,  2644,   522,  3307,  2647,
    2648,   522,  2650,  2651,  2652,  2653,  2654,  2655,  2656,  2657,
    2658,  2659,  2660,  1489,  3622,  1491,   521,  1084,   522,   522,
    3310,   522,   522,  3313,   522,   522,   522,   522,  1095,  2677,
     204,   522,   522,  2681,  3242,   107,  2684,   522,   522,   522,
     522,   482,   520,   524,    42,  1072,  2694,  2914,   292,   520,
       9,   357,  2678,   520,   520,  1122,   524,   152,   521,   340,
    2682,  3295,  2710,  3297,   524,   294,   521,    61,   201,  2682,
    2718,   194,  2682,  2647,   519,   525,  2682,   172,   524,  2705,
     254,  2729,  2708,    11,   431,   282,   465,  2765,   262,   433,
     524,    91,   521,   349,   520,  2743,    42,  1404,  2746,   153,
     274,   521,   122,   521,  2820,  2753,  2754,  2755,  2756,  3527,
     337,   231,  3536,   153,   521,    42,    42,   372,   372,    42,
     524,   460,   521,  3487,  2772,  2773,  2768,  1434,  1435,   311,
     520,   520,   306,    99,  1201,  1202,   520,  1204,   503,   172,
    2788,   508,   520,  1450,  2718,   433,   520,   282,   193,   252,
     460,   445,  2800,    31,   520,   507,   508,   509,    74,   511,
     512,   513,   514,   515,   516,  2813,   295,    74,    80,  2743,
    2818,     9,   374,   521,  3483,   521,     7,     8,  2820,   520,
      61,    12,   172,   178,  3051,   528,    17,   520,   362,    93,
      21,  2869,    23,    24,   132,   521,   521,    28,    29,    30,
     509,   521,    33,   178,  2820,    36,    37,   274,   292,    40,
     205,   385,    43,    44,  1241,   445,    42,   423,    42,    83,
     201,  2869,   317,   318,   319,  2873,  2800,   520,   465,   295,
     205,  2879,   406,   295,   520,  2820,   207,   521,   521,   292,
     292,   521,   521,  2647,   520,  2893,   148,  2820,   521,   244,
     525,  2899,   529,   120,   390,   371,    87,    88,   457,   520,
     520,    25,   524,   402,  2912,  2913,    37,   230,    99,   244,
    2674,   521,  2920,   104,   105,   106,   107,   108,   507,   508,
     509,   520,   511,   512,   513,   514,   515,   516,   383,  2937,
     349,   126,   231,    38,  2942,   765,  2936,  2631,  1801,    44,
    2250,  2644,   297,  1779,  3461,  1709,    14,   625,  2312,  2389,
    3048,  3542,  2674,  1789,  3702,  1791,  3214,    24,  1794,  3626,
    3635,  3695,   297,  3271,  1800,  1228,  1802,   422,  2976,  2243,
    2694,  2256,  3624,  3633,  2623,  2650,  2240,  1644,  1814,  3621,
    2584,  1483,  1400,  1819,  1495,  1434,  3459,  1823,  1824,  1825,
    1826,  3390,  1828,  1829,   172,  2583,   101,  3576,  3521,  3738,
     455,  3427,  3798,   338,  3804,  3013,  2770,  3573,  2942,  3257,
       8,   466,  3778,    11,    81,  3768,  3643,  1404,    16,  3749,
    3028,   109,   110,   631,  3801,  3519,  2559,   482,  3340,  3067,
      97,  2176,  3490,  2177,  3042,  3128,  3730,  2566,   581,  3731,
    3048,   376,  2976,  3029,  3052,  2170,  2226,  1434,  1435,  1187,
      48,   506,  2192,  1773,  3622,  1045,  1211,    55,  2448,  1045,
    2824,  3585,  1210,  1450,  3470,   520,  2209,  1494,   173,  3077,
    3299,   426,  1737,   428,  1772,  3083,    21,  2179,  2768,  3087,
     147,  2025,    80,  3091,  3091,   643,   632,  1213,  2427,  1023,
     157,   426,  2426,   428,  2473,  3235,   451,  1452,  3474,   454,
    3473,   178,   169,   191,   192,  3670,   211,   174,  2486,  3117,
     445,  2084,  2193,  2047,  2086,  2862,   451,  1784,  3052,   454,
    1566,  1708,   227,  3350,  3351,  3133,  1019,   305,   205,  2499,
    1019,    30,    99,   238,    -1,   172,  3144,  1019,   205,   317,
     318,   319,  2033,  1019,  1571,    -1,  3154,  1574,   146,    -1,
      -1,    -1,  1579,    -1,    -1,  1582,    -1,    -1,    -1,    -1,
    1587,    -1,    -1,    -1,    -1,   270,    -1,   244,   256,   257,
     258,   259,   260,   261,  1601,    -1,   264,   265,    -1,   177,
      -1,    -1,   249,    -1,  3192,    -1,   253,    -1,    -1,  3197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   201,    -1,   383,    -1,  3790,    -1,    -1,
    3144,    -1,   317,    -1,    -1,  3223,    -1,    -1,    -1,   324,
     297,  3256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1898,  1659,   581,  3242,  3243,  3244,    -1,    -1,    -1,
      -1,    -1,   240,    -1,   422,    -1,    -1,    -1,  3256,  3257,
      -1,    -1,    -1,    -1,  3262,   322,  3264,  1644,    -1,    -1,
    3268,  3025,   367,    -1,  3491,    -1,    -1,  3253,  3254,    -1,
      -1,   338,   339,    -1,  3282,  1942,    -1,   455,    -1,   384,
     317,   318,   319,  3285,  3048,  3512,  3513,  1954,   466,    -1,
      -1,    -1,   380,   381,    -1,    -1,   294,    -1,    -1,   376,
      -1,  3309,  3310,    -1,   482,  3313,   373,  1734,  3242,   376,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1984,   385,    -1,
      -1,   388,    -1,    -1,  1991,  3333,  3334,    -1,   506,    -1,
      -1,    -1,  2168,    -1,    -1,    -1,   879,    -1,    -1,    -1,
    3285,   408,   520,    -1,    -1,    -1,   383,    -1,   539,   426,
     455,   428,  3285,   544,    -1,   422,   547,  3121,    -1,    -1,
    2027,    -1,   429,   554,  2031,    -1,    -1,    -1,   445,    -1,
    2037,    -1,   439,    -1,   451,    -1,    -1,   454,   445,    -1,
      -1,    -1,  3390,    -1,    -1,   422,    -1,    -1,    -1,  3397,
      -1,  3399,   583,   584,   585,    -1,  3431,  1784,   396,  3434,
      -1,  3387,    -1,  3389,    -1,    -1,   473,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,    -1,    -1,    -1,   455,    -1,
      -1,    -1,    -1,  3431,    -1,    -1,  3434,    -1,  3436,   466,
      -1,    -1,   520,   624,   625,   626,    -1,  1864,    -1,    -1,
      -1,   632,    -1,   634,    -1,   482,  1873,    -1,    -1,    -1,
      -1,  3437,   643,    -1,    -1,    -1,   647,   648,    -1,    -1,
      -1,   652,   653,    -1,    -1,    -1,  3474,  3453,    -1,   506,
      -1,  3457,    -1,    -1,    -1,    -1,    -1,    -1,  3242,    -1,
      -1,    -1,    -1,   520,    -1,     8,   677,   678,    11,   680,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,  3509,    -1,   694,  2340,    -1,   504,    -1,    -1,   700,
      -1,  1898,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,  3525,     8,    -1,    -1,    11,    -1,  1072,
      -1,   879,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    -1,    -1,  3561,    -1,  1942,    -1,    -1,    29,    -1,
      -1,    -1,    -1,    -1,    48,  3573,  3574,  1954,    -1,  3577,
      -1,    55,    43,    44,  3576,  3509,   767,  3585,    -1,   770,
    3525,    -1,    -1,    -1,    -1,    -1,    -1,  2014,    -1,  3597,
    3598,    -1,  3525,  2020,    -1,    -1,    80,  1984,  3606,    -1,
      -1,    -1,    -1,    -1,  1991,    -1,  3641,  3615,  3643,    -1,
    3618,    -1,    -1,    -1,  3622,    -1,  3624,    -1,    -1,   810,
      -1,    -1,    -1,    -1,    -1,    -1,   817,   818,   819,   820,
      -1,  3576,    -1,  3641,   105,  3643,    -1,  3645,    -1,  3647,
    2027,   832,    -1,  3576,  2031,    -1,    -1,    -1,    -1,    -1,
    2037,    -1,  3654,  3639,    -1,    -1,    -1,  3421,    -1,    -1,
      -1,    -1,    -1,  2330,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  3606,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,  2111,    -1,    -1,    -1,  3622,    -1,
      -1,    -1,    -1,   177,    -1,    37,    -1,    -1,  1241,    -1,
    3708,   224,  2129,    -1,  3690,    -1,    48,  3715,    -1,  3654,
      -1,    -1,   196,    55,  3749,  3750,    -1,   201,  2145,    -1,
      -1,  3654,  3730,  3731,  1072,    -1,    -1,    -1,    -1,  2156,
    3738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    42,
      -1,  3749,  3750,  2170,    -1,    -1,    -1,    -1,    -1,    -1,
    3785,    -1,  2179,    -1,    -1,    -1,   240,    -1,    -1,    62,
    3768,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3803,   109,
     110,   294,  2608,  2609,  3782,    -1,    -1,  3785,    -1,    -1,
      -1,    -1,  3790,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3799,    -1,    -1,    -1,  3803,    -1,    -1,    -1,    -1,
    2636,    -1,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,
     294,    -1,   115,    -1,    -1,  2651,  2652,  2653,  2654,  2655,
    2656,  2657,  2658,  2659,  2660,    -1,    -1,    -1,    -1,    -1,
      -1,  1022,  1023,    -1,  1025,   177,    -1,  1028,    -1,    -1,
      -1,    -1,    -1,  1034,  1035,    -1,    -1,  2514,    -1,  1040,
      -1,   191,   192,    -1,   196,  1046,    -1,    -1,  3622,   201,
      -1,  1404,  1053,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1063,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,   225,    -1,  1076,    -1,    -1,    -1,    -1,
      -1,  1434,  1435,  1241,    -1,    -1,    -1,  2324,   240,    -1,
      -1,   204,  3666,    -1,    -1,    -1,    -1,  1450,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,   256,   257,   258,   259,
     260,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1124,    -1,   277,    38,   581,   280,    -1,
      -1,    -1,    44,  2330,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,   294,    -1,    -1,   297,    -1,    -1,    -1,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,    -1,    -1,   277,     0,    -1,    -1,    -1,  1170,
    2647,    -1,  1173,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,  1187,  1188,    -1,   101,
      -1,    -1,    -1,   306,  1195,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
     504,    -1,    -1,   507,   508,   509,  1217,   511,   512,   513,
     514,   515,   516,    -1,    37,    -1,  1227,  1228,    -1,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1240,
      -1,  2718,    -1,    -1,   396,    -1,  1404,    -1,    -1,   362,
      -1,    -1,    -1,    -1,    -1,  2492,  1257,    -1,    -1,    -1,
    1261,   173,    -1,    -1,  1265,   100,  2743,  2913,    -1,    -1,
      -1,   183,   385,   554,    -1,    -1,  1434,  1435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2524,    -1,    -1,
      -1,  1644,  1450,   406,    -1,   408,    -1,    -1,   411,   211,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   148,    -1,   227,    -1,  2514,    -1,    -1,
      -1,    -1,    -1,  2800,    -1,    -1,   238,   162,    -1,    -1,
      -1,    -1,   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,  2579,    -1,    -1,    -1,    -1,    -1,   183,    -1,
     500,   501,   504,   188,    -1,   507,   508,   509,   270,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,  2605,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   531,
     292,    -1,    -1,    -1,    -1,   220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1397,    -1,  1399,    -1,
      -1,    -1,    -1,    -1,  1405,   317,   241,   520,    -1,    -1,
      -1,   224,   324,    -1,    -1,  1416,    -1,    -1,    -1,   700,
      -1,    -1,    -1,    -1,    -1,   879,     8,    -1,    -1,    11,
      -1,  1784,    -1,    15,    16,    -1,  2853,  2854,  2855,  2856,
      -1,  2678,    -1,    -1,    -1,    -1,  1447,    -1,    -1,    -1,
    2647,  1452,    -1,    -1,   289,   367,    -1,   292,    -1,    -1,
      -1,    -1,    -1,   298,    -1,  2942,    48,    -1,  2705,    -1,
      -1,  2708,   384,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,  1483,    -1,    -1,  1486,  1644,  1488,  1489,    -1,
    1491,  1492,    -1,    -1,    -1,    -1,    -1,    -1,    80,  2976,
      -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2718,    -1,   581,    -1,    -1,    -1,    -1,  2765,   364,
      -1,    -1,    -1,    -1,    -1,    -1,  1537,  1538,    -1,    -1,
      -1,    -1,  1543,   455,  1545,  1898,  2743,    -1,   460,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1558,    -1,  1560,
    1561,    -1,    -1,    -1,   146,    -1,    -1,  1568,    -1,    -1,
    1571,    -1,    -1,  1574,    -1,  3052,    -1,  3223,  1579,    -1,
      -1,  1582,    -1,  2820,    -1,    -1,  1587,   422,  1589,  1942,
    1591,    -1,    -1,    -1,    -1,   177,    -1,  3243,  3244,    -1,
      -1,  1954,    -1,  2800,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1613,    -1,   196,   450,    -1,  1618,  1072,   201,
      -1,    -1,  3268,    -1,    -1,   460,  1784,    -1,    -1,    -1,
      -1,  1984,  2869,    -1,    -1,    -1,    -1,    -1,  1991,    -1,
      -1,    -1,    -1,    -1,   479,    -1,   481,   482,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1656,    -1,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3144,    -1,    -1,
      -1,    -1,    -1,    -1,  2027,    -1,    -1,    -1,  2031,    -1,
      -1,    -1,    -1,   518,  2037,    -1,   521,   522,   523,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,  1705,    -1,  1707,    -1,  1709,    -1,
      -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1724,  1725,    -1,    -1,    -1,  3145,  3146,
    3147,  3148,  3149,  3150,  3151,    -1,  1737,    -1,  3155,  3156,
    1898,    -1,    -1,  3160,    -1,  2942,  3163,    -1,    -1,  3166,
    3167,  3168,  3169,  3170,  3171,  3172,  3173,  3174,  3175,  1040,
      -1,  1762,    -1,  1764,    -1,  3242,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1778,  1779,  2976,
      -1,    -1,  1063,    -1,  1942,    -1,    -1,  1241,  1789,  1790,
    1791,  1792,  3029,  1794,    -1,    -1,  1954,    -1,    -1,  1800,
      -1,  1802,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1813,  1814,   396,    -1,    -1,  1818,  1819,    -1,
      -1,   879,  1823,  1824,  1825,  1826,  1984,  1828,  1829,    -1,
    3067,    -1,    -1,  1991,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1124,    -1,    -1,    -1,    38,    -1,  1850,
    1851,  1852,  1853,    44,    -1,  3052,  1857,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2027,
    1871,    -1,    -1,  2031,    -1,    -1,    -1,    -1,    -1,  2037,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1187,  1188,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3157,    -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,  3144,    -1,  3366,
    1404,  3368,    -1,  3370,  1955,  1956,  1957,  1958,  1959,  1960,
      -1,    97,  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,
    1971,  1972,  3618,    -1,    -1,    -1,    -1,  2330,    -1,    -1,
    1434,  1435,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1993,    -1,    -1,    -1,  1450,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2005,    -1,    -1,    -1,    -1,    -1,
      -1,   147,    -1,  2014,  1072,    -1,  3253,  3254,    -1,  2020,
     211,   157,    -1,    -1,  2025,    -1,    -1,    -1,    -1,  2030,
      -1,    -1,  3509,   169,    -1,    27,   227,    -1,   174,    -1,
      -1,    33,    -1,    -1,    -1,  3242,    -1,   238,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   205,
      62,    -1,    -1,    -1,  2075,    -1,    -1,    -1,  2079,   270,
      -1,  3498,    -1,  2084,  3501,  3502,    -1,    -1,     8,    -1,
      -1,    11,    -1,  3510,    -1,    15,    16,    -1,    -1,    -1,
    3517,   292,    -1,    -1,    -1,  2106,  2107,    -1,    -1,    -1,
      -1,    -1,    -1,   249,   106,    -1,    -1,   253,     0,    -1,
      -1,    -1,  2123,    -1,    -1,    -1,   317,    -1,    48,  3606,
      -1,    -1,  3369,   324,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,  3622,    -1,    -1,    -1,    -1,
    3387,    -1,  3389,    -1,    -1,  2156,    -1,    -1,    -1,    -1,
      80,  2514,     8,    -1,    -1,    11,    -1,  2168,    -1,    15,
      16,    -1,  2330,    19,    20,    21,   367,    -1,  2179,    -1,
      -1,    -1,  2183,  1241,  3601,  3602,   322,    -1,  3605,    -1,
    1644,    37,  3609,   384,    -1,  3612,  3613,    -1,    -1,    -1,
    3437,    -1,    -1,   339,    -1,    -1,    -1,  1488,  1489,    -1,
    1491,    -1,   204,    -1,    -1,    -1,  3453,    -1,   100,    -1,
    3457,    -1,  2223,    -1,    -1,  2226,   146,    -1,  2229,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   373,    -1,    -1,
     376,    -1,    -1,    -1,  2245,    -1,    -1,    -1,    -1,   385,
      -1,    -1,   388,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,   254,    -1,   455,    -1,   148,  3684,  3685,   460,
     262,  3688,   408,    -1,    -1,    -1,   196,    -1,    -1,  1560,
     162,   201,   274,    -1,    -1,   167,   422,    -1,    -1,    -1,
     172,    -1,    -1,   429,  2647,    -1,    -1,    -1,    -1,    -1,
      -1,   183,    -1,   439,   296,    -1,   188,  2308,  1589,   445,
    1591,    -1,  3509,  2314,   306,    -1,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,  2326,  2327,  2328,  2329,    -1,
    1784,    -1,    -1,    -1,    -1,    -1,    -1,   473,   220,  2340,
      -1,  2342,    -1,    -1,  2345,    -1,  1404,    -1,    -1,  2350,
      -1,    -1,    -1,    -1,    -1,    -1,  2514,    -1,    -1,   241,
      -1,    -1,  2363,    -1,   356,  2718,    -1,    -1,   360,    -1,
     362,    -1,    -1,    -1,   294,    -1,  1434,  1435,   224,  2380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2743,    -1,  1450,   385,  2395,  2396,    -1,  2398,   390,    -1,
      -1,    -1,  3639,    -1,    -1,    -1,    -1,   289,    -1,  3606,
     292,    -1,    -1,    -1,   406,    -1,   298,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3622,  2427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1898,    -1,  2447,  2800,   294,    -1,
      -1,    -1,    -1,  3690,  2455,  2456,  2457,    -1,   340,    -1,
      -1,    -1,    -1,  2464,    -1,  2466,  2467,    -1,    -1,    -1,
      -1,   463,  2473,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,    -1,   364,  1764,    -1,    -1,    -1,  2488,  1942,  2647,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1779,    -1,
    1954,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1789,    -1,
    1791,    -1,    -1,  1794,    -1,    -1,    -1,  2518,  2519,  1800,
      -1,  1802,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1984,    -1,    -1,  1814,    -1,    -1,    -1,  1991,  1819,    -1,
     422,    -1,  1823,  1824,  1825,  1826,    -1,  1828,  1829,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2718,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   450,    -1,
      -1,  2572,    -1,  2027,    -1,    -1,  2577,  2031,   460,    -1,
      -1,    -1,  2583,  2037,   504,  2743,  1644,    -1,    -1,  2942,
      -1,   511,   512,   513,   514,   515,   516,   479,  2599,   481,
     482,    -1,  2603,    -1,    -1,    -1,  2607,  2608,  2609,    -1,
      -1,    -1,  2613,  2614,  2615,    -1,  2617,    -1,    -1,    -1,
      -1,    -1,    -1,  2976,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2636,   518,  2638,    -1,   521,
     522,   523,  2800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2651,  2652,  2653,  2654,  2655,  2656,  2657,  2658,  2659,  2660,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,  2677,    -1,    -1,    -1,
    2681,    -1,    -1,  2684,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2694,    -1,    -1,    -1,    -1,    -1,  3052,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2710,
      -1,     8,  1993,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,  1784,    -1,  2729,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,  2740,
      37,    19,    20,    21,  2025,  2746,    -1,    -1,    -1,  2030,
      -1,    48,  2753,  2754,  2755,  2756,    -1,    -1,    55,    37,
      -1,    -1,    -1,    -1,  2765,    -1,    -1,  2768,    -1,    -1,
      -1,  2772,  2773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,  2942,    -1,    -1,  2788,    -1,     8,
      -1,  3144,    11,    -1,  2075,    -1,    15,    16,    -1,    -1,
      -1,    -1,    -1,  2084,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2818,  2976,  2820,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,     8,    55,    -1,    11,    -1,
    1898,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,  2853,  2854,  2855,  2856,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,  2869,    -1,
      -1,    -1,  2873,    -1,    -1,    48,  2330,    -1,  2879,    -1,
     177,    -1,    55,    -1,  1942,    -1,    -1,  2168,    -1,  3242,
      -1,    -1,  2893,    -1,  3052,    -1,  1954,    -1,  2899,   196,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    80,    -1,    -1,
      -1,  2912,  2913,  2914,    -1,    -1,    -1,    -1,    -1,  2920,
      -1,    -1,    -1,    -1,    -1,    -1,  1984,   224,   225,    -1,
      -1,    -1,    -1,  1991,    -1,    -1,  2937,    -1,    -1,    -1,
      -1,    -1,  2223,   240,    -1,    -1,   224,    -1,  2229,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2027,
      -1,    -1,    -1,  2031,    -1,    -1,    -1,   196,    -1,  2037,
     277,    -1,   201,   280,    -1,    -1,  3144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
       8,    -1,  3013,    -1,    12,    -1,   294,    -1,    -1,    17,
      -1,   240,    -1,   196,    -1,    23,    24,  3028,   201,    -1,
      28,    29,    30,    -1,    -1,    33,    -1,    -1,    36,    37,
      -1,  3042,    40,    -1,    -1,    43,    44,    -1,    -1,    -1,
    3051,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,  2340,
    2514,    11,    -1,    -1,    -1,    15,    16,   240,    -1,    19,
      20,    21,    -1,    -1,    -1,   294,  3077,    -1,    -1,    -1,
      -1,    -1,  3083,    -1,  3242,    -1,    -1,    37,    -1,    -1,
    3091,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    99,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,    -1,    -1,    -1,    -1,    -1,  3117,    -1,    -1,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3145,  3146,  3147,  3148,  3149,  3150,
    3151,    -1,    -1,  3154,  3155,  3156,  3509,    -1,    -1,  3160,
      -1,    -1,  3163,    -1,    -1,  3166,  3167,  3168,  3169,  3170,
    3171,  3172,  3173,  3174,  3175,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,  2464,    -1,    -1,  2467,    -1,    -1,    -1,
      -1,  3192,  2473,  2647,    -1,    -1,  3197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,  3223,   396,    -1,    -1,    -1,   524,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,  3243,  3244,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3606,    -1,    -1,  3257,    -1,    -1,    -1,
      -1,  3262,    -1,  3264,  2718,    -1,    -1,  3268,    -1,  3622,
    1010,    -1,  2330,    -1,   224,    -1,    -1,    -1,    -1,    -1,
      -1,  3282,    -1,    -1,  3285,   504,    -1,    -1,    -1,  2743,
      -1,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,  3305,    -1,    -1,    -1,  3309,  3310,
      -1,    -1,  3313,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2603,    -1,    -1,    -1,  2607,  2608,  2609,    -1,
    1070,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,   294,    -1,  2800,    -1,    -1,  3350,
    3351,  3509,    -1,    -1,    -1,  2636,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3366,    -1,  3368,    -1,  3370,
    2651,  2652,  2653,  2654,  2655,  2656,  2657,  2658,  2659,  2660,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3390,
      -1,    -1,    -1,    -1,    -1,    -1,  3397,     3,    -1,    -1,
    1140,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1166,    -1,  1168,  1169,
      -1,    37,    -1,    -1,    -1,  3436,    42,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,  3606,    55,
       8,    -1,    -1,    11,    -1,    -1,  2514,    15,    16,    -1,
      -1,    19,    20,    21,  3622,  2746,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3474,    80,    -1,    40,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2942,    -1,
    3491,  2772,    -1,    -1,    -1,    -1,    -1,  3498,    -1,    -1,
    3501,  3502,  1242,    -1,    -1,  1245,  1246,    -1,    -1,  3510,
      -1,  3512,  3513,    -1,    -1,    -1,  3517,    -1,    -1,    -1,
      -1,    -1,  2976,    -1,  3525,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   539,   106,    -1,   108,    -1,   544,    -1,    -1,   547,
      -1,    -1,    -1,    -1,    -1,    -1,   554,   507,   508,   509,
    3561,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,   177,  3573,  3574,    -1,  3576,  3577,    -1,    -1,    -1,
      -1,    -1,    -1,   581,  3585,   583,   584,   585,    -1,  2647,
     196,    -1,    -1,   591,    -1,   201,    -1,    -1,  3052,    -1,
    3601,  3602,    -1,    -1,  3605,    -1,    -1,    -1,  3609,    -1,
      -1,  3612,  3613,    -1,  3615,    -1,    -1,  3618,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,   624,   625,   626,    -1,
      -1,    -1,  2913,    -1,   240,    -1,   634,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3645,    -1,  3647,    -1,    -1,   647,
     648,    -1,    -1,  3654,   652,   653,    -1,    -1,    -1,    -1,
    2718,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   677,
     678,    -1,   680,  3684,  3685,  2743,    -1,  3688,   294,    -1,
    3144,   297,  1432,    -1,    -1,    -1,   694,    -1,    -1,    -1,
      -1,    -1,   700,  1443,    -1,  1445,    -1,  3708,    -1,    -1,
      -1,    -1,    -1,    -1,  3715,  1455,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,  1472,    -1,    -1,    -1,   294,  3738,    -1,    -1,
      -1,    -1,  2800,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1500,  1501,    -1,    -1,    -1,    -1,    -1,  3768,    -1,   767,
      -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3782,    -1,    -1,    48,    -1,    -1,    -1,  3242,  3790,
     396,    55,    -1,    -1,    -1,    -1,    -1,    -1,  3799,    -1,
      -1,   799,  3083,    -1,   802,    -1,    -1,    -1,    -1,    -1,
    3091,    -1,   810,    -1,    -1,    -1,    80,    -1,    -1,   817,
     818,   819,   820,    -1,    -1,   115,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,   832,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    37,    -1,    15,
      16,    -1,    42,    19,    20,    21,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,   879,   146,    -1,  2942,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      80,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,  3192,    -1,   177,    -1,    -1,  3197,    -1,  2976,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,    -1,   196,    -1,   224,    -1,    -1,   201,    -1,    -1,
      -1,    -1,  3223,    -1,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    48,
      -1,    -1,  3243,  3244,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   539,   240,    -1,    -1,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,  3268,    -1,    -1,
      -1,    80,    -1,    -1,  3052,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,  1748,  1749,
      -1,    -1,  1010,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,    -1,  1022,  1023,    -1,  1025,  3309,    -1,
     294,    -1,    -1,    -1,    -1,    -1,  1034,  1035,    -1,    -1,
      -1,    -1,  1040,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3509,    -1,   146,    -1,    -1,
     240,    -1,    -1,    -1,    -1,  1063,    -1,  1807,   224,    -1,
     634,    -1,  1070,  1071,  1072,    -1,    -1,  1817,  1076,    -1,
    1820,    -1,    -1,    -1,    -1,    -1,  3144,    -1,   177,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,   277,    -1,    -1,
     280,    16,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,  1126,    -1,
      -1,    -1,   396,    48,    -1,    -1,    -1,    -1,   294,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,  3606,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1902,  1903,    -1,    80,    -1,    -1,  3622,    -1,
    1168,  1169,  1170,    -1,    -1,  1173,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,  3242,    -1,  1926,    15,    16,  1187,
    1188,    19,    20,    21,    -1,    -1,    -1,  1195,    -1,    -1,
      -1,    -1,    -1,   767,    -1,   294,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,   396,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,  1227,
    1228,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,  1240,  1241,    -1,    -1,   810,   511,   512,   513,
     514,   515,   516,   817,   818,   819,   820,    -1,    -1,  1257,
      -1,    -1,   177,  1261,    -1,    -1,    -1,  1265,   832,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,  2033,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,   240,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,  3618,    -1,    -1,
      -1,   521,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,   507,   508,   509,  1352,   511,   512,   513,   514,   515,
     516,    -1,     8,  1361,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,   294,
      -1,    -1,    48,    -1,    -1,    -1,    -1,  1385,    -1,    55,
      -1,    37,    -1,    -1,    -1,    -1,   224,    -1,    -1,  1397,
      -1,  1399,    48,    -1,    -1,    -1,  1404,  1405,    -1,    55,
      -1,    -1,    -1,    -1,    80,   504,    -1,    -1,  1416,    -1,
    2160,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,  1434,  1435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1447,
      -1,  3509,  1450,    -1,  1452,    -1,    -1,    -1,    -1,  2199,
    2200,  1025,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   396,    -1,    -1,    -1,  1483,  1484,    -1,  1486,    -1,
    1488,  1489,    -1,  1491,  1492,    -1,    -1,  1495,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3790,
      -1,   177,    -1,    -1,  1512,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,   177,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3606,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
    1558,    -1,  1560,  1561,  3622,    -1,    -1,    -1,    -1,    -1,
    1568,    -1,    -1,    -1,   240,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,  1589,    -1,  1591,   240,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,  1613,  2356,    15,    16,    -1,
    1618,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   277,    -1,    -1,   280,  1633,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1644,    -1,   294,    -1,
      48,   297,    -1,    -1,    -1,  1653,    -1,    55,  1656,    -1,
      -1,    -1,    -1,  1227,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1240,    -1,    -1,   507,
     508,   509,    80,   511,   512,   513,   514,   515,   516,    -1,
      -1,  1689,    -1,    -1,    -1,    -1,    -1,  1261,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,  1705,    11,  1707,
      -1,  1709,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1724,  1725,    -1,    -1,
     396,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,   146,    -1,
     396,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1762,     8,  1764,    -1,    11,    -1,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    80,    -1,   177,
    1778,  1779,    -1,    -1,    -1,    -1,  1784,    -1,    -1,    -1,
      -1,  1789,  1790,  1791,  1792,  1793,  1794,  1795,   196,    -1,
      -1,    -1,  1800,   201,  1802,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,  1813,  1814,    -1,    -1,    -1,
    1818,  1819,    -1,    -1,    -1,  1823,  1824,  1825,  1826,    -1,
    1828,  1829,    -1,    -1,    -1,  1399,    -1,    80,   504,  1837,
      -1,  1405,   240,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,  1850,  1851,  1852,  1853,    -1,    -1,   504,  1857,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,  1871,   177,   521,    -1,    -1,    -1,  1877,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,   294,    -1,   201,    -1,
    1898,    -1,    -1,   146,    -1,    -1,    -1,  2647,    -1,    -1,
      -1,    -1,    -1,    -1,  1912,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,  1926,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,  1942,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,  1954,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1984,    -1,    -1,    -1,
      -1,   294,    -1,  1991,   297,  1993,    -1,   240,   396,    -1,
      -1,    -1,    -1,    -1,  1568,    -1,    -1,  2005,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,  2025,    -1,  2027,
      -1,    -1,  2030,  2031,    -1,  2033,    -1,  2035,    -1,  2037,
      -1,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,    33,    -1,    35,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    54,    -1,  2075,    -1,    -1,
      -1,  2079,    -1,    -1,    63,    -1,  2084,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    86,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,   515,   516,    98,
      -1,   100,    -1,    -1,    -1,  2123,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1707,    -1,  1709,   125,    -1,   127,  2147,
      -1,    -1,    -1,   396,    -1,    -1,    -1,   136,    -1,    -1,
    1724,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,
    2168,    -1,    -1,   152,    -1,   154,   155,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2183,    -1,    -1,    -1,   168,
      -1,  2931,    -1,   172,    -1,    -1,  2936,    -1,  1762,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,   521,    -1,
       8,   200,    -1,    11,    -1,  2223,    -1,    -1,    16,    -1,
      -1,  2229,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,    -1,    -1,  2983,  2984,    -1,    -1,  2245,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2255,  2256,  2257,
      48,   504,    -1,    -1,   243,    -1,    -1,    55,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1850,  1851,  1852,  1853,
      -1,    -1,    80,  1857,    -1,    -1,    -1,    -1,    -1,    -1,
    2298,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
    2308,    -1,    -1,    -1,    -1,    -1,  2314,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2326,  2327,
    2328,  2329,  2330,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,    48,  2340,    -1,  2342,    -1,   325,  2345,    55,   328,
      -1,    -1,  2350,    -1,    -1,    -1,    -1,    -1,   146,     8,
      -1,    -1,    11,    -1,    -1,  2363,    15,    16,    17,    18,
      19,    20,    21,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,  2380,    -1,    -1,    -1,  2384,    -1,    37,   177,
     369,  2389,    -1,    -1,    -1,    -1,    -1,  2395,  2396,    48,
    2398,    -1,    -1,    -1,   383,    -1,    55,    -1,   196,    -1,
      -1,   390,    -1,   201,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,   406,    11,    -1,
      -1,    80,    15,    16,    -1,    -1,    19,    20,    21,   418,
      -1,  2005,    -1,   422,    -1,    -1,    -1,    -1,    -1,  2447,
      -1,    -1,   240,    -1,    37,    -1,    -1,  2455,  2456,  2457,
      -1,    -1,    -1,   442,    -1,    -1,  2464,    -1,    -1,  2467,
     177,    -1,    -1,    -1,    -1,  2473,   455,    -1,    -1,   458,
      -1,    -1,   461,    -1,    -1,    -1,    -1,   466,    -1,   196,
    2488,  3231,  3232,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3242,   482,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2514,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,   177,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,  2577,
      -1,    -1,    -1,    -1,    -1,  2583,    -1,   294,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2599,    -1,    -1,    -1,  2603,    -1,    -1,   396,  2607,
    2608,  2609,    -1,    -1,    -1,  2613,  2614,  2615,    -1,  2617,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,  2636,    -1,
    2638,   224,    -1,    -1,    -1,   294,  2644,    -1,   297,  2647,
    2648,    -1,  2650,  2651,  2652,  2653,  2654,  2655,  2656,  2657,
    2658,  2659,  2660,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2677,
      -1,    -1,    -1,  2681,    -1,    -1,  2684,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,  2694,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,  2710,    -1,    -1,    -1,   504,    -1,    -1,    -1,
    2718,    -1,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,  2729,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2743,    -1,   396,  2746,    -1,
    2314,    -1,    -1,    -1,    -1,  2753,  2754,  2755,  2756,    -1,
      -1,    -1,    -1,  2327,  2328,  2329,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2772,  2773,    -1,    -1,  2342,    -1,
      -1,  2345,    -1,    -1,    -1,    -1,  2350,    -1,    -1,    -1,
    2788,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
      -1,    -1,  2800,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,  2813,    -1,    -1,    -1,    -1,
    2818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,   675,   676,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,  2869,   521,    -1,    -1,  2873,    48,    -1,    -1,    -1,
      -1,  2879,  3622,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2455,  2456,  2457,    -1,  2893,    -1,    -1,    -1,    -1,
      -1,  2899,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,  2912,  2913,    -1,    -1,    -1,    -1,
      -1,    -1,  2920,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,  2937,
      -1,    -1,    -1,    -1,  2942,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,   798,    -1,    -1,  2976,   802,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3013,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
    3028,    -1,    -1,    -1,    -1,  2599,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3042,    -1,    -1,    -1,    -1,    -1,
    3048,    -1,   224,   225,  3052,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3077,
      -1,    -1,    -1,    -1,    -1,  3083,    -1,    -1,    -1,  3087,
      -1,    -1,     8,  3091,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,  2681,    -1,  3117,
    2684,    37,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,   196,    -1,    -1,    -1,    -1,   201,    55,
      -1,    -1,    -1,    -1,    -1,    -1,  3144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3154,    -1,    -1,    -1,
      -1,   224,   225,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2753,
    2754,  2755,  2756,  1016,  3192,    -1,    -1,    -1,    -1,  3197,
      -1,  1024,    -1,    -1,  1027,    -1,    -1,  1030,  1031,  1032,
    1033,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,   396,  3223,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3242,  3243,  3244,    -1,  1071,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3257,
      -1,   177,    -1,    -1,  3262,  1088,  3264,    -1,    -1,    -1,
    3268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,  1106,  3282,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1117,  1118,  1119,    -1,  1121,  1122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,
      -1,  3309,  3310,    -1,    -1,  3313,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,  1151,    -1,
      -1,    -1,   504,   396,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2920,    -1,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
    1203,   297,    -1,    -1,  1207,  1208,    -1,    -1,    -1,    -1,
      -1,    -1,  3390,    -1,    -1,  1218,  1219,    -1,    -1,  3397,
      -1,  3399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3436,    -1,
      -1,   504,    -1,    37,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    48,    -1,    -1,    -1,   521,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3474,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    80,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3509,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,  1352,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,  1361,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,  1385,  3561,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3573,  3574,    -1,    -1,  3577,
      -1,    -1,    -1,   177,    -1,    -1,    -1,  3585,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,   196,    -1,    -1,   521,    -1,   201,  3606,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3615,    -1,    -1,
    3618,    -1,    -1,    -1,  3622,    -1,  3624,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,  3645,    -1,  3647,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,   196,    -1,    19,    20,
      21,   201,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,  3257,  1517,    -1,    37,    -1,  3262,    -1,
     294,    -1,    -1,   297,   224,   225,    -1,    48,    -1,    -1,
    3708,    -1,    -1,    -1,    55,    -1,    -1,  3715,  3282,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,  1550,    -1,  1552,
    1553,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
    3738,    -1,  1565,  1566,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,  1581,    -1,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3768,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,  3782,    -1,  1609,    -1,  1611,    -1,
       8,    -1,  3790,    11,    -1,    -1,    -1,    -1,    16,    -1,
      -1,  3799,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1639,    -1,    -1,    -1,
      -1,    -1,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,
      48,    -1,    -1,  3397,  1657,  1658,   177,    55,    -1,  1662,
      -1,    -1,    -1,  1666,    -1,    -1,  1669,  1670,  1671,  1672,
    1673,  1674,  1675,  1676,  1677,   196,    -1,  1680,    -1,    -1,
     201,    -1,    80,    -1,  1687,    -1,  1689,    -1,    -1,    -1,
      -1,    -1,  3436,    27,    -1,    -1,   396,    -1,    -1,    33,
      -1,    -1,    -1,   224,   225,    -1,    -1,  1710,    42,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,  1748,  1749,   521,   146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1028,    -1,    -1,
      -1,    -1,   106,   294,    -1,    -1,   297,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,   136,   201,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1833,    -1,    -1,    -1,  1837,    -1,    -1,  1840,  1841,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     204,  3615,    -1,    -1,  1877,   396,     8,    -1,    -1,    11,
    1141,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,
      -1,  3645,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
     254,    -1,  1183,    55,    -1,    -1,    -1,    -1,   262,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,    -1,    -1,  1946,  1947,    -1,  1949,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1217,    -1,    -1,    -1,
      -1,    -1,   296,    -1,  3708,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   306,    -1,    -1,  1978,  1979,    -1,    -1,  1982,
      -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1267,    -1,  2011,    -1,
      -1,    -1,    -1,  2016,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,    -1,  3768,    -1,   360,    -1,   362,    -1,
      -1,    -1,  2035,    -1,    -1,    -1,    -1,    -1,  3782,  1028,
      -1,    -1,    -1,  2046,    -1,   177,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,    -1,  3799,   390,    -1,    -1,    -1,
      -1,    -1,     8,    -1,   196,    11,    -1,    -1,    -1,   201,
      16,    -1,   406,    -1,  2077,    -1,    -1,    -1,    -1,  2082,
    2083,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,   504,    -1,   240,    55,
      -1,    -1,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,  2125,    -1,    -1,  2128,    -1,  2130,    -1,   463,
    1391,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2146,    -1,   277,     8,    -1,   280,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,  2192,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
     146,    -1,    -1,    -1,    -1,    -1,  2209,  2210,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,  1208,
      -1,    -1,    -1,    -1,    -1,  2228,    -1,    -1,  1217,     8,
      -1,   177,    11,    -1,  2237,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,  1515,   201,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1533,    -1,  1535,    -1,  1537,  1538,    -1,  1540,
      -1,    -1,  1543,    -1,    -1,  1546,    -1,    -1,  1549,    -1,
      -1,    -1,    -1,  1554,   240,  2298,  1557,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,    -1,  2348,  1607,    -1,   294,    -1,
      -1,  1612,    -1,    -1,  1615,  1616,  1617,    -1,    -1,    -1,
    1621,    -1,   224,   225,  1625,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,   240,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,   521,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,  1028,    -1,   280,    -1,
      37,    -1,    -1,    -1,    -1,  1686,    -1,    -1,    -1,    -1,
      -1,    48,   294,    -1,    -1,   297,    -1,    -1,    55,    -1,
      -1,     8,    -1,    -1,    11,   224,    -1,    -1,    -1,    16,
     396,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
    1731,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2481,    -1,
      -1,    48,  2485,  2486,    -1,    -1,  1747,    -1,    55,  2492,
      -1,  1752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2502,
      -1,    -1,  2505,    -1,  2507,    -1,    -1,    -1,  1769,    -1,
      -1,    -1,  2515,    80,    -1,   294,    -1,    -1,    -1,    -1,
    2523,  2524,    -1,    -1,    -1,    -1,    -1,  2530,    -1,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1537,  1538,
      -1,    -1,    -1,    -1,  1543,    -1,    -1,    -1,   504,    -1,
     177,    -1,    -1,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,  2575,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,  2585,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2605,    -1,    -1,  1217,    -1,   224,   225,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,   224,   225,   521,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,  1944,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1952,  1953,    -1,  1955,  1956,  1957,  1958,  1959,  1960,
      -1,    -1,  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,
    1971,  1972,  1973,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1737,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2760,  2761,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2777,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,  2789,    -1,  2049,  2050,
      -1,  2794,  2795,    -1,    -1,    -1,  2799,    -1,    -1,    -1,
      -1,  2804,    -1,    -1,  2807,  2808,    -1,    -1,    -1,  2812,
    2813,    -1,    -1,  2816,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2089,   396,
      -1,    -1,  2093,  2094,  2095,  2096,  2097,  2098,  2099,  2100,
      -1,    -1,    -1,    -1,    -1,  2106,  2107,    -1,  2109,  2110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2862,
    2121,    -1,    -1,  2124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2132,  2133,  2134,  2135,  2136,  2137,  2138,  2139,  2140,
    2141,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,  2906,   521,    -1,  2167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1537,  1538,    -1,    -1,    -1,
    2933,  1543,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2226,  1955,  1956,  1957,  1958,
    1959,  1960,    -1,    -1,  1963,  1964,  1965,  1966,  1967,  1968,
    1969,  1970,  1971,  1972,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3017,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2303,  2304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3067,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1685,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3087,    -1,    -1,    -1,    -1,    -1,
      -1,  3094,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3105,  3106,    -1,    -1,  3109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2106,  2107,    -1,
      -1,    -1,    -1,    -1,    -1,  1737,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2402,  2403,  2404,    -1,    -1,  2407,  2408,  2409,  2410,
    2411,  2412,    -1,    -1,    -1,  2416,  2417,  2418,  2419,  2420,
    2421,  2422,  2423,  2424,  2425,    -1,    -1,    -1,    -1,  2430,
    2431,    -1,    -1,    -1,  3177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2458,    -1,    -1,
      -1,    -1,  2463,    -1,     8,    -1,    -1,    11,    -1,  3212,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,  2480,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2493,    37,    -1,  2496,  2497,  2226,    -1,    -1,
      -1,    -1,  2503,  2504,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,  2517,  2518,  2519,  2520,
      -1,  2522,    -1,    -1,    -1,  2526,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,  3281,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3299,    -1,    -1,    -1,
    3303,    -1,    -1,    -1,  3307,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3317,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1955,  1956,  1957,  1958,  1959,  1960,  2610,
      -1,  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,
    1972,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3386,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      -1,  3404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
     224,   225,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,  2709,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,  3460,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,  3470,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,  2740,
    3483,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
     294,    -1,    -1,   297,  2106,  2107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3519,  2778,    -1,  2780,
      -1,    -1,    -1,  2784,    -1,    -1,    -1,    -1,    -1,  2518,
    2519,    -1,  2793,    -1,    -1,  2796,    -1,  2798,    -1,    -1,
    3543,  2802,    -1,    -1,  2805,  2806,    -1,    -1,  2809,  2810,
      -1,    -1,    -1,    -1,    -1,    -1,  2817,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2572,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,  2857,    -1,    -1,    -1,
    2861,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,    -1,  2226,  2876,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,  2914,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3669,  3670,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,   294,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,  3719,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2740,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,  3776,    -1,    -1,  2765,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    37,    16,  3050,
    3051,    19,    20,    21,    -1,    -1,    -1,    -1,    48,    -1,
    2789,    -1,    -1,   396,    -1,    55,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,  3075,  3076,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      80,    -1,  3093,    -1,    -1,    -1,  3097,    -1,  3099,  3100,
    3101,    -1,    -1,  3104,    -1,    -1,  3107,  3108,    -1,    -1,
      -1,    -1,    80,    -1,  3115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2853,  2854,  2855,  2856,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3140,
    3141,  3142,  3143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2518,  2519,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,  2914,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,  3209,   177,
      -1,   201,    -1,    -1,  3215,    -1,    -1,    -1,    -1,    -1,
    2572,    -1,    -1,    -1,    -1,    -1,    -1,  3228,   196,    -1,
      -1,    -1,    -1,   201,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,  3255,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3287,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,  3319,  3320,
    3321,    -1,  3051,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3342,  3343,  3344,  3345,  3346,  3347,  3348,    -1,  3350,
    3351,    -1,  3353,  3354,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3363,    -1,  3365,    -1,    -1,    -1,    -1,    -1,
      -1,  3372,  3373,  3374,  3375,  3376,  3377,  3378,  3379,  3380,
    3381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2740,    -1,
      -1,    -1,  3393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3405,    -1,   396,    -1,    -1,    -1,
      -1,    -1,    -1,  2765,    -1,    -1,  3145,  3146,  3147,  3148,
    3149,  3150,  3151,    -1,    -1,    -1,  3155,  3156,   396,    -1,
      -1,  3160,    -1,    -1,  3163,    -1,    -1,  3166,  3167,  3168,
    3169,  3170,  3171,  3172,  3173,  3174,  3175,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3458,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3475,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3485,    -1,    -1,    -1,    -1,    -1,
    3491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3499,  3500,
      -1,  2853,  2854,  2855,  2856,    -1,    -1,    -1,    -1,    -1,
    3511,  3512,  3513,  3514,   504,  3516,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    -1,    -1,   504,  3538,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2914,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3572,    -1,    -1,    -1,    -1,  3305,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3595,    -1,    -1,    -1,    -1,  3600,
      -1,    -1,  3603,  3604,    -1,    -1,    -1,  3608,    -1,  3610,
    3611,    -1,    -1,  3614,    -1,    -1,    -1,     8,    -1,    -1,
      11,  3350,  3351,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,  3637,  3366,    -1,  3368,
      -1,  3370,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3678,  3679,  3680,
      -1,    -1,  3683,    -1,    -1,  3686,  3687,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3051,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,  3722,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,  3733,  3734,  3735,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3491,    -1,    -1,    -1,    -1,    -1,    -1,  3498,
      -1,    -1,  3501,  3502,    80,    -1,    -1,    -1,    -1,    -1,
      -1,  3510,    -1,  3512,  3513,    -1,   177,    -1,  3517,    -1,
      -1,    -1,    -1,  3145,  3146,  3147,  3148,  3149,  3150,  3151,
      -1,    -1,    -1,  3155,  3156,   196,    -1,    -1,  3160,    -1,
     201,  3163,    -1,    -1,  3166,  3167,  3168,  3169,  3170,  3171,
    3172,  3173,  3174,  3175,  3176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,  3601,  3602,    -1,    -1,  3605,    -1,    -1,    -1,
    3609,    -1,    -1,  3612,  3613,    -1,   277,    -1,    -1,   280,
     196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3305,    -1,  3684,  3685,    -1,    -1,  3688,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,  3350,  3351,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3366,    -1,  3368,    -1,  3370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
     521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3491,
      -1,    -1,    -1,    -1,    -1,    -1,  3498,    -1,    -1,  3501,
    3502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3510,    -1,
    3512,  3513,    -1,    -1,    -1,  3517,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3601,
    3602,    -1,    -1,  3605,    -1,    -1,    -1,  3609,    -1,    -1,
    3612,  3613,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,  3684,  3685,    40,    41,  3688,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
     506,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,   521,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,   521,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
     521,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    39,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,   521,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,   521,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   518,    -1,   520,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
      -1,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   532,   533,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,   289,   290,   291,    -1,    -1,
     294,   295,   296,    -1,   298,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,   293,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,   506,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    35,    36,    -1,    38,    -1,    40,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,    -1,   506,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,   292,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,   293,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,   172,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
     172,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,     3,   506,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,   172,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,   318,   319,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,    -1,   506,    -1,    -1,     3,     4,
       5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,   520,
      15,    16,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,   503,    -1,
       3,    -1,   507,   508,   509,     8,   511,   512,   513,   514,
     515,   516,    15,    16,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,
      -1,    55,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,
      -1,    -1,    55,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,     8,    -1,
      -1,    11,    -1,    55,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,   177,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,   240,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,   196,    -1,   280,   240,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,   196,   280,   240,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,   519,   396,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,   519,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,   519,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,     4,     5,    -1,    -1,
      -1,     9,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,     4,     5,    -1,
      -1,    -1,     9,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,   292,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,     8,
      -1,    -1,    11,    -1,   511,   512,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
       8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    80,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    80,    -1,    -1,    42,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,   177,    55,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,    80,    -1,    -1,    -1,    -1,   167,
      -1,    37,    -1,    -1,   172,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    48,    -1,    -1,   224,   225,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,   166,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,
      -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
     196,    -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,   280,   240,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,   224,   225,
      -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   326,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,   460,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   320,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,
     396,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    37,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,
     177,    -1,    48,    -1,     8,    -1,    -1,    11,    -1,    55,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   196,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    80,    -1,   172,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    48,    -1,    -1,   224,   225,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,   240,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,   280,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,   177,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,    37,    -1,   294,    -1,
      -1,   297,    -1,   167,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,   177,    55,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,   240,    -1,    -1,   201,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,    -1,   280,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,   240,
      15,    16,    17,    18,    19,    20,    21,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,   396,    48,    -1,    -1,   277,    -1,    -1,   280,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    80,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    48,   511,   512,   513,   514,   515,
     516,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,   396,     8,    -1,    -1,    11,
      -1,    -1,   177,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    37,   201,    -1,    -1,   430,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    80,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,   196,    -1,    -1,    15,    16,   201,    -1,    19,
      20,    21,   277,   504,    -1,   280,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,   294,
     224,   225,   297,    -1,    -1,    -1,    -1,    -1,    48,    -1,
       8,    -1,    -1,    11,    -1,    55,   240,    -1,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      80,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      48,    -1,    -1,   277,    -1,    -1,   280,    55,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
     294,    -1,    -1,   297,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    80,    -1,    -1,    16,    -1,    -1,    19,    20,
      21,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    37,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    80,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
     240,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,    -1,   240,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,   396,   196,    11,    -1,    -1,    -1,
     201,    16,    -1,    -1,    19,    20,    21,    -1,    -1,   277,
     504,    -1,   280,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,   224,   225,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,   240,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,   396,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,     5,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,   292,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    35,
      36,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    -1,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,   169,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,   169,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    35,    36,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,     4,    -1,
      -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    42,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,    -1,    -1,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
      -1,   278,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,    -1,   324,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,    -1,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,    -1,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,    -1,   177,   178,    -1,   180,   181,
      -1,    -1,    -1,    -1,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,    -1,   278,   279,   280,   281,
      -1,    -1,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,    -1,   324,   325,   326,    -1,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,    -1,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,    -1,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,   503,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
      -1,   177,   178,    -1,   180,   181,    -1,    -1,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,    -1,   278,   279,   280,   281,    -1,    -1,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,    -1,   324,   325,
     326,    -1,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,    -1,   439,    -1,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
      -1,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,    -1,   177,   178,    -1,
     180,   181,    -1,    -1,    -1,    -1,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,    -1,   278,   279,
     280,   281,    -1,    -1,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,    -1,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,    -1,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,    -1,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,   503,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
      -1,    -1,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,    -1,   278,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,    -1,
     324,   325,   326,    -1,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,    -1,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,    -1,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,   503,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,    -1,
     177,   178,    -1,   180,   181,    -1,    -1,    -1,    -1,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,    -1,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
      -1,   278,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,    -1,   324,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
      -1,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,    -1,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,    -1,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    35,    36,    -1,    -1,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    54,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    63,    -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,    -1,    98,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   125,    -1,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,   168,
     152,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,    -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,   328,
      -1,    -1,    -1,    -1,    -1,   317,   318,   319,    -1,    -1,
      -1,    -1,    -1,   325,    -1,    -1,   328,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   369,    -1,    -1,
      -1,   390,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,   383,    -1,    -1,    -1,    -1,    -1,   406,   390,    -1,
      -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,   418,
      -1,    -1,    -1,   422,   406,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   418,    -1,    -1,    -1,
     422,    -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
     442,    -1,   461,    -1,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   470,    -1,   455,    -1,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   482,   466,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     482,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    75,    86,
      98,   100,   111,   125,   127,   136,   144,   152,   154,   155,
     168,   172,   200,   216,   243,   317,   318,   319,   325,   328,
     360,   369,   383,   390,   395,   406,   418,   422,   442,   455,
     458,   461,   466,   482,   506,   520,   535,   536,   537,   538,
     539,   546,   557,   558,   559,   562,   563,   573,   590,   638,
     650,   653,   656,   658,   661,   662,   666,   673,   675,   682,
     686,   687,   688,   695,   700,   716,   719,   722,   740,   777,
     778,   781,   783,   784,   785,   786,   788,   790,   791,   795,
     847,   848,  1007,  1009,  1010,  1011,  1016,  1019,  1025,  1026,
    1030,   436,   485,  1008,   205,   376,   385,   422,   473,   108,
     560,  1008,     3,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    32,    33,    34,    40,    44,    45,    46,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    61,    62,    63,    64,    65,    66,    69,    70,    71,
      72,    73,    75,    76,    77,    78,    79,    81,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    94,    95,
      96,    97,    98,    99,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   116,   118,
     119,   120,   121,   122,   123,   125,   126,   127,   128,   129,
     130,   133,   134,   135,   136,   137,   138,   139,   141,   142,
     143,   145,   146,   147,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   161,   163,   164,   165,   166,
     168,   170,   171,   173,   174,   175,   176,   177,   178,   180,
     181,   184,   185,   186,   187,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   202,   203,   204,
     205,   206,   207,   208,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   221,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   237,   238,   239,
     240,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   278,   279,   280,   281,
     283,   284,   285,   286,   287,   288,   290,   291,   294,   295,
     296,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   332,
     333,   334,   335,   336,   337,   338,   339,   341,   342,   343,
     344,   345,   346,   347,   348,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     420,   421,   423,   424,   425,   426,   427,   428,   429,   431,
     432,   434,   436,   437,   438,   439,   440,   442,   443,   444,
     445,   446,   447,   448,   449,   452,   453,   454,   456,   457,
     458,   459,   461,   462,   463,   464,   465,   466,   467,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   480,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     566,   641,   642,   643,   648,   917,   996,  1000,     3,   176,
     250,   415,   564,   566,   641,   648,  1008,    57,   520,   585,
     178,   244,   297,   338,   376,   426,   428,   445,   451,   454,
     636,   694,     5,    31,   328,   566,   567,   995,   108,   560,
      24,    81,    97,   147,   157,   169,   174,   205,   249,   253,
     322,   338,   339,   373,   376,   385,   388,   408,   422,   429,
     439,   445,   473,   667,   668,   671,  1008,   995,   100,   136,
     470,   520,   538,   539,   546,   562,   563,   573,   590,   638,
     650,   653,   656,   658,   661,   662,   666,   673,   678,   682,
     688,   695,   716,   777,   778,   781,   783,  1007,  1009,  1011,
    1016,  1019,  1025,  1030,   108,    75,   216,    68,    79,    81,
     159,   182,   235,   283,   293,   304,   323,   372,   417,   438,
     440,   444,   466,   520,   565,   566,   567,   784,   848,   850,
     852,   862,   869,   870,   917,   919,   920,   108,     5,   566,
     568,   717,   717,   566,   995,    31,   431,   436,   566,  1017,
    1018,  1028,  1008,    31,   131,   803,   804,   178,   244,   376,
     389,   431,  1020,  1021,  1028,  1008,   520,   566,   783,   795,
    1029,   566,   869,   422,   800,   565,   173,   520,  1013,   520,
     347,   796,   797,   995,   796,     3,    55,    56,    58,    59,
      71,    72,    79,   112,   113,   153,   159,   165,   176,   184,
     185,   212,   218,   219,   221,   250,   269,   271,   276,   283,
     285,   300,   304,   323,   327,   344,   371,   391,   399,   415,
     417,   431,   432,   438,   440,   444,   466,   467,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   641,
     649,   718,   784,   785,     0,   523,   470,   676,   120,   215,
     457,   148,   220,   298,   450,   806,   807,   852,   852,   784,
     786,   788,   524,    31,   431,   436,   783,  1029,   194,   565,
     995,   194,   565,   194,   869,   194,   565,   568,   518,   522,
     569,   570,   520,   783,   565,   426,   428,   426,   428,   358,
     181,   194,   565,   565,   174,   249,   347,   385,   422,   473,
     651,   205,    31,   995,   194,     3,   255,   439,   107,   422,
     422,   473,   181,   379,     3,    38,    44,    51,    56,    57,
      58,    59,    71,    72,    81,    83,    89,   101,   112,   113,
     135,   165,   171,   173,   177,   194,   196,   211,   218,   219,
     221,   224,   225,   227,   238,   240,   250,   269,   270,   271,
     280,   285,   301,   303,   324,   344,   367,   371,   384,   391,
     396,   399,   415,   424,   431,   432,   444,   450,   467,   470,
     641,   644,   648,   672,   880,   882,   884,   886,   888,   890,
     892,   893,   894,   896,   897,   898,   900,   901,  1001,   194,
     566,   669,  1002,   194,   992,   995,   194,   995,   520,   674,
     678,     3,    38,    44,    51,    55,    56,    57,    58,    59,
      71,    72,    79,    81,    83,    89,   101,   112,   113,   153,
     159,   165,   171,   173,   176,   177,   184,   185,   196,   211,
     212,   218,   219,   221,   224,   225,   227,   238,   240,   250,
     269,   270,   271,   276,   280,   283,   285,   300,   301,   303,
     304,   323,   324,   327,   344,   367,   371,   384,   391,   396,
     399,   415,   417,   424,   431,   432,   438,   440,   444,   466,
     467,   470,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   641,   645,   648,   679,   681,   682,   684,
     685,   676,   566,   568,   564,   717,   520,   520,   167,   520,
     520,   740,   784,   870,   520,   520,   565,   520,   520,   172,
     520,   520,   520,   520,   784,   848,   852,   862,   513,   569,
      42,   566,   863,   864,   863,   383,   524,   787,    38,    44,
     101,   173,   211,   227,   238,   270,   317,   324,   367,   384,
     455,   866,   864,    42,   566,   863,   865,   506,   874,   568,
     509,   520,   520,   779,   503,   226,   522,   292,     4,     6,
       7,     8,     9,    10,    41,    56,    58,    59,    67,    71,
      72,    83,   112,   113,   115,   153,   160,   165,   184,   185,
     218,   219,   221,   250,   269,   271,   277,   282,   285,   294,
     344,   371,   399,   431,   432,   441,   467,   504,   511,   512,
     513,   518,   520,   526,   527,   532,   533,   566,   568,   784,
     837,   885,   888,   891,   892,   893,   895,   896,   897,   900,
     901,   912,   914,   915,   916,   917,   918,   920,   921,   935,
     936,   947,   969,   974,   982,   983,   984,   996,   997,   998,
     981,   983,  1020,  1020,   568,  1020,   503,   172,   433,   509,
     522,   569,   663,   869,     3,   171,   173,   470,   682,  1012,
    1014,   171,  1015,   912,   953,   954,   796,   524,   520,  1004,
     252,   521,   521,   537,   565,   172,   297,   703,   663,    31,
     131,   801,   801,    61,   801,   162,   167,   241,   289,   812,
     814,   815,   840,   842,   843,   844,   183,   292,   460,   292,
     806,   807,   520,   423,  1027,   503,   226,   153,    27,    33,
     136,   296,   356,   360,   390,   463,   551,   554,   555,   356,
     153,    42,    62,   106,   204,   254,   262,   274,   306,   356,
     362,   385,   390,   406,   540,   543,   554,   153,   356,   390,
     554,   153,   356,   390,   554,    42,   561,   912,   975,     3,
      31,    35,    36,    37,    39,    41,    42,    43,    47,    60,
      67,    68,    74,    80,    82,    93,   100,   115,   117,   124,
     131,   132,   140,   144,   148,   160,   162,   167,   169,   172,
     179,   182,   183,   188,   201,   209,   220,   222,   235,   236,
     241,   277,   282,   289,   292,   293,   297,   298,   317,   318,
     319,   320,   331,   340,   349,   364,   383,   401,   419,   422,
     430,   433,   435,   441,   450,   451,   455,   460,   466,   468,
     478,   479,   481,   482,   571,   572,   641,   645,   647,   648,
     570,     3,    31,    38,    44,    51,    57,    81,    83,    89,
     101,   131,   171,   173,   176,   177,   196,   211,   224,   225,
     227,   238,   240,   250,   270,   280,   301,   303,   324,   367,
     384,   396,   415,   424,   444,   468,   470,   521,   641,   646,
     648,   912,   956,   957,   999,  1005,   521,   520,   625,   376,
     636,   565,   277,   654,    42,   473,   194,   565,   194,   565,
     640,   194,   565,   194,   565,    89,   691,   153,   486,   565,
      90,   128,   309,   427,   469,   899,   899,   899,   520,   887,
     887,   327,   520,   889,   153,   520,    71,    72,   899,   887,
     884,   484,   506,   520,   902,   520,   902,   520,    65,   363,
     524,   670,   520,    41,   883,   520,   109,   110,   191,   192,
     256,   257,   258,   259,   260,   261,   264,   265,   380,   381,
     500,   501,   520,   903,   904,   905,   906,   907,   908,   909,
     910,   911,   887,   153,   522,  1003,   524,   670,   153,   524,
     670,   153,   292,   954,   521,   524,     4,   160,   292,   441,
     511,   512,   542,   545,   568,   677,   679,   680,   683,   998,
     678,   433,   520,   580,   584,   912,   954,   520,     3,   568,
     903,   904,   905,   906,   907,   908,   909,   910,   959,   960,
     466,   864,   865,   912,   565,   912,   961,   511,   512,   566,
     913,   914,   936,   947,   963,   520,   912,   953,   964,   912,
      60,   172,   236,   435,   912,   954,   967,   912,   521,   567,
     520,   424,   820,   821,   821,   803,   804,   852,   222,   798,
      38,   227,   384,   866,   227,   301,   867,   852,   867,   227,
     866,   520,   227,   867,   149,   202,   854,   227,   821,   520,
     567,   520,   821,   299,   542,   683,  1022,  1024,   956,   882,
     958,    42,   239,   566,   520,   518,   784,   912,   973,   520,
     784,   527,   912,   520,   520,   912,   912,   912,   149,   985,
     986,   912,   954,   955,   784,   912,   953,   567,   937,   938,
     939,     9,   572,   522,   569,   976,   569,   520,   568,   520,
     568,   998,     3,     8,    11,    15,    16,    17,    18,    19,
      20,    21,    37,    42,    48,    55,    80,   177,   196,   201,
     224,   225,   240,   277,   280,   294,   297,   396,   504,   507,
     508,   509,   511,   512,   513,   514,   515,   516,   945,   946,
     947,   949,   979,   483,   922,   303,   912,   524,   798,   520,
     568,   798,     3,   115,   244,   542,   568,   901,  1023,   104,
     115,  1024,   115,  1024,   566,    42,   566,   521,   524,   676,
     524,   521,   797,   992,   993,    42,   718,   746,   750,   751,
    1004,   663,   195,   358,   222,   390,   786,   786,    31,   808,
     809,   912,    61,   786,   802,   164,   273,   828,   230,   274,
     343,   393,   457,     4,     9,    31,   823,   912,   511,   512,
     824,   825,   912,   914,   840,   841,   815,   814,   812,   813,
     167,   843,   287,   845,    61,   792,   793,   794,   855,   913,
     983,   983,   812,   840,   954,   239,   565,    74,    82,    93,
     169,   194,   331,   451,   566,   607,   617,   632,    82,    93,
     782,    93,   782,   520,   433,   520,   605,   248,   454,   605,
      93,   524,   433,   565,   884,   542,    61,   544,   542,   542,
     106,   254,   262,    61,   433,   482,   506,   541,   267,   376,
     541,   543,   869,    93,   433,   782,   376,   565,   433,   376,
     566,   580,   519,   531,   956,   956,   957,   524,   806,   807,
      13,    14,   433,   566,   624,   629,   482,   583,   565,   347,
     385,   422,   473,   651,   275,   472,   720,   153,   100,   590,
     655,   656,   688,  1030,   145,   882,   565,   277,   540,   657,
     277,   520,   625,    42,   277,   625,   277,   520,   652,   194,
     566,   619,   692,     3,   670,   520,   955,   998,   672,   958,
     899,   899,    41,   883,   431,   431,   998,   998,   566,   879,
     882,   879,   518,   518,   998,   998,   433,   433,   433,   433,
     669,   571,   522,  1002,   992,   995,   995,  1002,   521,   678,
     684,     4,   998,     4,   998,   568,   572,   582,   589,    57,
     102,   121,   142,   146,   168,   171,   189,   282,   290,   311,
     341,   586,    42,   521,   912,   521,   172,   524,   521,   320,
     962,   521,   913,   913,    11,    15,    16,    19,    20,    21,
     201,   224,   294,   507,   508,   509,   511,   512,   513,   514,
     515,   516,   947,   913,   521,   871,   872,   919,   167,   172,
     965,   966,   524,   521,    42,   967,   954,   967,   967,   172,
     521,    42,   863,   520,   993,     4,     9,   566,   816,   818,
     819,   983,   981,   178,   244,   422,   426,   428,   454,   565,
     799,   479,   875,   852,   227,   852,   292,   460,   868,   852,
     227,   983,   852,   284,   284,   520,   852,   567,   876,   877,
     520,   567,   876,   524,   521,   524,   521,   524,   573,   662,
     695,   780,   783,  1009,   954,   955,   478,   970,   971,   912,
     912,   940,   941,   942,   943,     8,    15,    16,    19,    20,
      21,   507,   508,   509,   511,   512,   513,   514,   515,   516,
     566,   945,   950,   521,   954,   520,   566,   358,   990,   167,
     519,   521,   524,   531,   524,   528,   513,   570,   954,   912,
     911,   911,   882,   912,   912,   912,   912,   912,   912,   912,
     912,     5,   572,  1006,   431,    47,   419,   980,  1002,   912,
     912,   520,   784,   968,   131,   160,   277,   282,   287,   441,
     452,   912,   282,   520,   912,   433,    55,   177,   196,   201,
     240,   396,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,    31,    39,   401,   944,   518,   522,   978,   183,
     163,   923,   371,   520,   936,   984,   172,   849,   956,   849,
     520,   568,   566,   565,  1012,   557,   565,   912,   524,   521,
     520,   509,    31,    39,   394,   749,   229,   524,   743,   460,
     665,   565,   697,   520,   566,   702,   712,   713,   715,    43,
     124,   810,   524,   460,   810,   267,   786,   371,   372,   511,
     512,   825,   827,   914,   393,   230,   293,   316,   316,   524,
     515,     4,   826,   998,   826,   371,   372,   827,   565,   991,
     281,   398,   846,   520,   993,   994,   524,   183,   460,   201,
     183,   222,   841,   813,   521,   356,   554,   520,   194,   617,
     995,   230,   277,   230,   460,   520,   610,   881,   882,   995,
     566,   194,   995,   194,   566,    27,   136,   390,   550,   553,
     572,   601,   615,   995,   572,   609,   628,   995,   551,   995,
     356,   390,   540,   554,   542,  1002,   995,   542,  1002,   995,
     542,   356,   390,   554,   995,   995,   995,   995,   356,   390,
     554,   995,   995,   912,   975,   806,   806,   806,   468,   957,
     195,   361,   805,   912,   912,   336,   579,   521,   524,   290,
     172,   433,   574,   654,   473,   565,   565,   640,   565,   565,
     423,   565,   297,   636,   520,   784,   520,   153,   153,   240,
     566,   607,   617,   620,   623,   633,   635,   482,   484,   612,
     152,   783,   153,   482,   693,   153,   521,   956,    42,   277,
     292,   954,   521,   521,   670,   521,   518,   503,   503,   521,
     521,   882,   521,   524,   521,   998,   519,   998,   521,   521,
     904,   906,   907,   908,   907,   908,   908,   670,   571,   670,
     292,   670,   580,   513,   520,   542,   581,   683,   521,   524,
      42,   578,   568,   578,   277,   282,   341,   578,    61,   578,
     882,   521,   912,   912,   912,   965,   882,   913,   913,   913,
     913,   913,   913,   131,   277,   287,   913,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   521,   524,    42,   873,
     912,   912,   966,   965,   882,   521,   521,   521,   954,   882,
     993,   521,   316,   515,   316,   372,   515,   520,   520,   798,
     426,   428,   426,   428,   565,   800,   800,   800,   912,   183,
     829,   868,   852,   912,   520,   852,   167,   520,   567,   859,
     868,   882,   521,   524,   876,   521,  1022,   882,   521,   519,
     912,   140,   971,   972,   521,   531,   524,   528,   522,   521,
     521,   993,   520,   912,   987,   566,   912,   912,   937,   986,
     521,   521,   503,   913,   913,   146,   954,   172,   131,   160,
     282,   287,   441,   452,   520,   146,   950,   912,   419,   980,
     912,   968,   912,   433,   520,   784,   912,   975,   571,   520,
     520,   156,   924,   850,   851,   875,   806,   875,   998,   911,
    1004,  1004,   780,    26,   314,   315,   394,   397,   434,   477,
     744,   747,     9,   394,   748,     9,    17,   507,   512,   518,
     520,   759,   760,   761,   762,   769,   770,   771,   774,   775,
     749,   751,   479,   739,   851,   479,   664,    42,    61,   698,
     708,   715,   976,   524,   849,   509,   505,   811,   809,   294,
     945,   948,   811,     4,   998,   827,   293,   457,   824,   524,
     247,   993,   792,    61,   983,   520,   567,    61,   267,   433,
     912,   277,   632,   520,   153,   520,   610,   205,   629,   630,
     591,    42,   176,   600,   626,   591,    27,   136,   360,   362,
     390,   547,   548,   549,   555,   556,   153,   670,   153,   670,
     601,   615,   601,   521,   524,   568,   594,   509,   522,   521,
     524,   433,   376,    93,   433,   782,   376,   433,   433,   433,
     376,   519,   805,   805,   805,   957,   284,   284,   521,   409,
     410,   568,   588,   624,   579,   565,   657,   520,    42,   625,
     652,   520,   654,   358,   422,   568,   659,   660,   629,   565,
     565,   640,   565,   521,   524,   290,   605,   290,   292,   604,
     995,   482,   639,   565,   605,    42,   565,   521,   422,   912,
     153,   565,   521,   883,   998,   902,   902,   883,   566,   883,
     519,   519,  1002,   576,   587,   683,   582,   568,   568,   282,
     629,   513,   629,   568,   513,   629,   568,   521,   521,   966,
     172,   131,   287,   520,   874,   871,   520,   521,   521,   521,
     566,   816,   875,   800,   800,   800,   800,   565,   565,   565,
      61,   188,   838,   868,   993,   520,   856,   857,   858,   915,
     996,   993,   167,    80,   878,   877,   521,   430,   912,   144,
     912,   940,   950,   521,   912,   987,   988,   989,    42,   201,
     521,   990,   911,   912,    37,    37,   912,   521,   912,   172,
     520,   958,   912,   521,   146,   913,   913,   146,   146,   912,
     912,   519,   531,   520,   977,   807,   479,   912,   302,   928,
     524,   829,   805,   829,   521,   521,   744,   747,   744,   744,
     744,   747,   747,   747,   512,   769,   508,   518,   746,   758,
     718,   772,   773,   761,   761,   525,   752,   773,   511,   513,
     526,   527,   754,   277,   504,   511,   512,   776,   914,   936,
      83,   912,   364,   706,   566,   267,   323,   115,   305,   520,
     696,   783,   521,   524,   702,   664,   912,   164,   234,   520,
     811,   293,   565,   521,   994,   183,   784,   785,   983,   994,
     995,   995,   521,   153,   630,   617,   630,   591,   619,   524,
     521,   117,   209,   274,   277,   616,   520,    34,    61,   637,
     626,    74,    80,    93,   115,   117,   209,   277,   282,   331,
     349,   451,   460,   596,   597,   611,   176,   115,   193,   277,
     605,   541,   107,   115,   176,   277,   408,   411,   543,   605,
     390,   549,   445,   995,   566,   553,     3,    38,    44,    51,
      57,    81,    83,    89,   101,   171,   173,   176,   177,   196,
     211,   224,   225,   227,   238,   240,   250,   270,   276,   280,
     294,   301,   303,   324,   367,   384,   391,   396,   415,   424,
     444,   450,   470,   511,   512,   542,   568,   592,   631,   641,
     647,   648,   882,   948,   999,   572,   628,   995,   995,   995,
     995,   995,   995,   995,   995,   995,   995,   521,   521,   521,
     806,   541,   588,   520,   623,   783,   693,    42,   565,   729,
     734,   636,   194,   565,   521,   524,   521,   657,   520,    42,
     614,   612,   620,    86,   674,   107,   274,   625,   783,   652,
     783,   619,   460,   690,   519,   882,   670,   521,   524,   629,
     913,   172,   520,   958,   876,   521,   524,   521,   829,   565,
     565,   565,   565,    31,   103,   184,   370,   520,   830,   831,
     832,   833,   834,   835,   836,   912,   912,   481,   925,   521,
     914,   951,   952,   201,   183,   853,   857,   520,   521,   859,
     860,   861,  1002,   912,   524,   521,   566,   912,   914,   912,
     912,   912,   958,   521,   912,    37,    37,   912,   912,   146,
     521,   975,   521,   956,   521,   912,   521,   520,   566,   929,
     838,   521,   838,   568,   183,   186,   745,   518,   747,   519,
     224,   531,   767,   768,   521,   511,   761,   519,     9,   753,
     776,   776,   776,   776,    11,    16,    17,    18,    19,    20,
      21,    37,    48,    55,    80,   177,   196,   201,   224,   225,
     240,   277,   280,   297,   396,   504,   507,   508,   509,   511,
     512,   513,   514,   515,   516,   947,   303,   520,   982,   466,
     421,   459,   707,   566,   701,   711,   292,   704,   509,   715,
     706,   950,    61,   521,   521,   465,   466,   789,   591,   617,
     521,   521,   482,   622,   118,   197,   207,   117,   462,   912,
     115,    42,   520,  1002,   995,   913,   118,   197,   117,   282,
     230,   565,   622,    88,   637,   194,   282,   542,   912,   637,
     282,   511,   512,   545,   566,   882,   670,   670,   250,   415,
     999,  1003,   509,   433,   433,   805,   580,   460,   575,   577,
     629,   521,   639,    42,   422,   912,    42,   524,   723,   274,
     337,   738,   422,   277,   520,   568,   693,   623,   152,   783,
     150,   203,   604,   120,   136,   330,   639,   107,   693,   482,
    1031,    42,   292,   566,   689,   520,   587,   913,   958,   521,
     521,     9,   357,   822,   838,   520,   392,   520,   521,   524,
     566,   926,   927,   340,   839,   524,   521,   520,   567,    61,
     521,   956,   201,   521,   860,   987,   519,   194,   521,   912,
     912,   912,   519,   521,   521,   566,   930,   925,   568,   925,
     762,   754,   739,   520,   530,   718,   766,   525,   512,   769,
     524,   882,   776,   776,   776,   776,   776,   776,   776,   431,
     419,   980,  1002,   776,   776,   968,   131,   160,   277,   282,
     287,   441,   452,   776,   282,   776,   433,    55,   196,   201,
     240,   396,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   936,   741,   742,   984,   524,   465,   976,   521,
     524,    91,   706,   912,   521,   994,   994,   349,   622,   520,
     613,   591,   521,   193,   520,   912,   277,   597,   622,   625,
     995,    42,   153,   878,  1003,   515,   592,   995,   995,   521,
     541,   122,   521,   612,   783,   783,   718,   729,   521,   337,
      40,   520,   732,   737,   231,   565,   153,    42,   521,   995,
     639,    31,    85,    94,   116,   193,   206,   408,   411,   608,
     608,   372,   372,    42,    66,    74,   244,   422,   912,   565,
     520,   566,   705,   714,   919,   521,   521,   520,   925,   954,
     520,   954,   832,    42,   524,   912,   460,   817,   914,   983,
     993,   864,   806,   520,   864,   912,   311,   931,   839,   839,
     739,    99,   757,   765,   766,   766,   754,   753,   503,   913,
     913,   146,   172,   131,   160,   282,   287,   441,   452,   520,
     146,   776,   419,   980,   776,   968,   776,   433,   521,   524,
     783,   305,   783,   701,   292,   520,   699,   565,   591,   572,
     618,   621,   412,   475,   598,   599,   520,   593,   912,   521,
     252,   634,   193,   460,   552,   515,   445,   580,   568,   693,
     604,  1031,   723,   138,   353,   721,   718,   733,   735,    31,
     718,   520,   565,   783,   612,   674,   783,    74,   295,    74,
     783,   690,   912,    80,   709,   521,   524,   709,     9,   839,
     521,   831,   521,   929,   927,   374,   521,   805,   983,   519,
      61,   806,   817,   817,   757,   913,   521,   525,   529,   528,
     776,    37,    37,   776,   776,   172,   520,   958,   776,   146,
     913,   913,   146,   146,   776,   521,   741,   707,    93,   714,
     132,   625,   509,   521,   524,   540,   521,   274,   606,   173,
     310,   397,   292,   602,   603,   627,   593,   912,   445,    42,
     423,    42,   521,   524,    83,   201,   728,   520,  1031,   604,
     639,  1031,   295,   295,   520,   521,  1002,   710,  1002,   693,
     705,   710,   521,   817,   521,   819,   521,   521,   953,   342,
     372,   932,   115,   756,   763,   766,   764,   766,   776,   776,
     776,   958,   521,   776,    37,    37,   776,   776,   146,   565,
     465,   995,   521,   278,   457,   634,   592,   621,   521,   599,
     207,   120,   457,   292,   627,   292,   602,   783,   520,   718,
     733,   148,   736,   565,   714,   709,   810,   875,   810,    55,
     104,   447,   912,   933,   934,   933,   521,     4,     9,   755,
     525,   529,   521,   776,   776,   776,   783,   875,   390,   603,
      65,   274,   363,   390,   595,   595,  1031,   731,   734,   520,
     520,   521,   710,   811,   811,   934,   371,   166,   326,   166,
     326,   763,   764,   713,   591,    25,   115,   282,   524,   730,
     402,   735,   718,   727,   693,   810,    37,   875,   731,   521,
     230,   725,   726,   521,   521,   524,   875,   811,   934,   730,
     520,   724,   349,   565,   718,   992,   724,   521,   126,   726,
     565,   724,   738,   231,   718,   728
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   534,   535,   536,   536,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   546,   546,   546,   546,
     546,   546,   546,   546,   547,   547,   548,   548,   549,   549,
     549,   549,   550,   550,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   552,   552,   553,   553,   553,   553,   554,
     554,   555,   556,   556,   556,   661,   661,   661,   661,   565,
     565,   566,   566,   566,   566,   567,   567,   568,   569,   569,
     570,   571,   572,   572,   572,   572,   572,   781,   781,   781,
     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,
     782,   782,   695,   696,   696,   696,   696,   696,   697,   697,
     698,   698,   698,   699,   699,   699,   700,   700,   701,   702,
     702,   703,   703,   703,   704,   704,   704,   705,   705,   705,
     706,   706,   707,   707,   708,   708,   709,   709,   710,   710,
     711,   711,   712,   712,   713,   713,   714,   714,   715,   658,
     658,   658,   659,   659,   660,   660,   777,   777,   777,   656,
     656,   656,   657,   657,   673,   673,   673,   674,   674,   539,
     539,   540,   540,   541,   541,   541,   542,   542,   542,   542,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   544,   544,   545,   545,   545,  1007,
    1007,  1007,  1007,  1007,  1007,  1008,  1008,  1008,  1010,   718,
     718,   718,   719,   720,   720,   721,   721,   722,   723,   723,
     724,   725,   726,   727,   727,   728,   728,   729,   730,   730,
     731,   732,   732,   733,   733,   734,   734,   735,   735,   736,
     736,   737,   737,   738,   738,   738,   739,   739,   740,   741,
     742,   742,   743,   743,   744,   744,   744,   745,   745,   745,
     746,   746,   747,   747,   747,   747,   747,   748,   748,   749,
     749,   749,   749,   749,   749,   750,   750,   751,   752,   752,
     753,   753,   754,   754,   754,   754,   754,   755,   755,   756,
     756,   757,   757,   758,   759,   760,   760,   761,   761,   761,
     762,   762,   763,   763,   764,   764,   765,   765,   765,   766,
     766,   766,   767,   767,   768,   768,   769,   769,   769,   770,
     770,   771,   771,   772,   772,   773,   774,   774,   775,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     590,   590,   590,   591,   591,   592,   592,   592,   592,   592,
     592,   593,   593,   594,   595,   595,   595,   595,   595,   596,
     596,   596,   596,   597,   597,   597,   597,   597,   597,   597,
     597,   598,   598,   599,   599,   600,   600,   600,   601,   602,
     603,   603,   603,   603,   603,   604,   604,   604,   604,   605,
     606,   606,   607,   607,   608,   608,   608,   608,   608,   608,
     608,   608,   609,   609,   610,   611,   611,   611,   611,   612,
     612,   612,   612,   613,   614,   614,   614,   615,   616,   616,
     616,   616,   616,   616,   617,   617,   618,   618,   619,   620,
     620,   620,   621,   621,   622,   622,   623,   623,   623,   624,
     625,   625,   626,   626,   627,   628,   628,   628,   628,   629,
     629,   630,   630,   631,   631,   631,   632,   632,   632,   632,
     632,   632,   633,   633,   634,   634,   634,   634,   635,   636,
     636,   636,   636,   636,   636,   636,   636,   637,   637,   666,
     666,   666,   666,   666,   666,   666,   666,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   668,   668,   668,   668,   668,   668,
     669,   669,   670,   670,   670,   671,   671,   671,   672,   672,
     650,   650,   650,   650,   650,   650,   651,   651,   652,   652,
    1009,   573,   573,   574,   574,   575,   575,   576,   576,   577,
     577,   578,   578,   579,   579,   580,   580,   581,   581,   581,
     581,   581,   582,   583,   583,   584,   584,   585,   585,   586,
     586,   586,   586,   586,   586,   586,   586,   586,   586,   586,
     586,   586,   586,   586,   586,   587,   588,   588,   588,   589,
     589,   783,   783,   784,   784,   785,   785,   785,   785,   785,
     785,   785,   785,   786,   786,   787,   787,   788,   788,   788,
     788,   788,   788,   788,   788,   788,   788,   788,   788,   788,
     788,   788,   788,   788,   788,   788,   789,   789,   790,   790,
     791,   791,   792,   792,   792,   793,   793,   794,   794,   795,
     795,   795,   796,   796,   797,   798,   798,   799,   799,   799,
     799,   799,   799,   799,   799,   799,   800,   800,   801,   801,
     801,   802,   803,   803,   804,   804,   805,   805,   805,   806,
     806,   807,   807,   808,   808,   809,   809,   810,   810,   810,
     811,   811,   811,   812,   812,   812,   812,   813,   813,   814,
     814,   814,   814,   815,   815,   816,   816,   816,   816,   816,
     816,   817,   817,   818,   818,   819,   819,   819,   819,   820,
     821,   821,   822,   822,   823,   823,   823,   823,   823,   824,
     825,   825,   825,   826,   826,   827,   827,   828,   828,   829,
     829,   829,   830,   830,   831,   831,   832,   832,   832,   832,
     832,   833,   834,   835,   836,   837,   837,   838,   838,   839,
     839,   840,   840,   841,   841,   842,   842,   843,   844,   844,
     844,   844,   845,   845,   846,   846,   846,   847,   847,   848,
     848,   849,   849,   850,   850,   851,   851,   852,   852,   852,
     852,   852,   852,   852,   852,   852,   852,   852,   853,   853,
     854,   854,   854,   855,   855,   856,   856,   857,   857,   858,
     858,   859,   859,   860,   861,   861,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   863,   863,   863,
     863,   864,   864,   865,   865,   865,   865,   865,   866,   866,
     866,   866,   866,   866,   867,   867,   868,   868,   869,   869,
     869,   869,   870,   870,   871,   872,   872,   873,   873,   874,
     874,   875,   875,   876,   876,   877,   878,   878,   879,   879,
     880,   880,   881,   881,   882,   882,   882,   882,   882,   882,
     882,   882,   882,   883,   883,   883,   884,   884,   884,   884,
     884,   884,   884,   885,   885,   885,   885,   886,   887,   887,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   889,   889,   890,   890,   891,   891,   892,   893,   894,
     894,   895,   895,   896,   897,   898,   898,   898,   898,   898,
     898,   899,   899,   900,   900,   900,   900,   901,   902,   902,
     902,   903,   903,   904,   904,   905,   905,   906,   906,   907,
     907,   908,   908,   909,   909,   910,   910,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   913,   913,   913,   913,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   913,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   913,   913,   914,   914,
     914,   915,   915,   915,   915,   915,   915,   915,   915,   915,
     915,   915,   915,   915,   916,   916,   916,   916,   916,   916,
     917,   917,   917,   917,   917,   917,   918,   918,   919,   919,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   921,   921,   922,   922,   923,   923,
     923,   924,   924,   925,   925,   926,   926,   927,   928,   928,
     928,   929,   930,   930,   931,   931,   932,   932,   932,   933,
     933,   934,   934,   934,   934,   934,   935,   935,   936,   936,
     937,   938,   938,   939,   939,   940,   941,   941,   942,   942,
     943,   943,   944,   944,   944,   945,   945,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   947,   947,   948,   948,   949,   949,   949,   949,   949,
     949,   949,   949,   950,   950,   951,   951,   952,   952,   953,
     953,   954,   954,   955,   955,   956,   956,   957,   957,   957,
     958,   958,   959,   959,   960,   960,   960,   960,   960,   960,
     960,   960,   960,   960,   961,   961,   962,   963,   963,   964,
     964,   964,   964,   964,   964,   965,   966,   967,   967,   967,
     968,   968,   969,   970,   970,   971,   972,   972,   973,   973,
     974,   974,   570,   570,   975,   975,   976,   976,   977,   977,
     977,   978,   978,   978,   979,   979,   980,   980,   981,   981,
     982,   982,   983,   983,   984,   984,   984,   985,   985,   986,
     986,   987,   988,   988,   989,   989,   990,   990,   990,   991,
     991,   992,   992,   993,   993,   994,   994,   995,   996,   996,
     997,   997,   997,   997,   997,   997,   997,   997,   997,   997,
     997,   997,   997,   997,   998,   999,   999,   999,   999,  1000,
    1000,  1000,  1000,  1001,  1001,  1001,  1001,  1002,  1002,  1003,
    1003,  1004,  1004,  1005,  1006,  1006,   778,   779,   779,   780,
     780,   780,   780,   780,   653,   653,   653,   654,   654,   655,
     655,   655,   655,   688,   688,   689,   690,   690,   691,   691,
     692,   692,   693,   693,   694,   694,   538,   538,   538,   538,
     538,   538,   563,   563,   564,   564,   686,   686,   687,   675,
     675,   675,   675,   676,   676,   677,   677,   677,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   679,   679,
     679,   679,   680,   680,   681,   681,   682,   682,   683,   683,
     683,   683,   684,   685,   685,  1019,  1019,  1019,  1019,  1020,
    1020,  1020,  1020,  1021,  1021,  1021,  1021,  1022,  1022,  1023,
    1023,  1023,  1023,  1023,  1023,  1023,  1024,  1024,   716,   716,
     716,   717,   717,  1011,  1011,  1011,  1011,  1011,  1012,  1012,
    1012,  1012,  1012,  1013,  1013,  1014,  1014,  1015,  1015,   662,
     662,   663,   663,   663,   664,   664,   665,   665,   557,   557,
     558,   559,   559,   560,   560,   561,   561,  1016,  1017,  1017,
    1018,  1018,  1018,  1025,  1025,  1025,  1025,  1025,  1025,  1025,
    1025,  1026,  1026,  1027,  1027,  1028,  1028,  1029,  1029,   562,
    1030,  1030,  1030,  1030,  1030,  1031,  1031,  1031,  1031,   638,
     638,   638,   639,   639,   639,   640,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     4,     6,     4,     6,
       4,     6,     4,     6,     1,     2,     3,     2,     1,     3,
       2,     3,     1,     3,     2,     5,     3,     6,     4,     6,
       6,     6,     5,     5,     6,     9,     4,     5,     7,     6,
       4,     8,     4,     2,     4,     3,     6,     4,     2,     2,
       2,     2,     1,     2,     0,     1,     2,     2,     2,     1,
       3,     4,     2,     1,     0,     2,     3,     2,     3,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     6,     6,     8,
       6,     8,     6,     8,     6,     8,     8,    10,     8,    10,
       1,     0,     9,     1,     4,     4,     7,     2,     1,     3,
       2,     2,     0,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,
       8,     5,     1,     0,     1,     3,     2,     4,     5,     5,
       8,     7,     1,     0,     3,     9,    12,     3,     0,     4,
       6,     1,     2,     1,     1,     0,     1,     2,     2,     1,
       2,     2,     1,     2,     3,     2,     2,     2,     2,     3,
       3,     3,     1,     3,     1,     0,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     0,     2,     1,
       1,     1,     5,     1,     1,     1,     1,    16,     3,     0,
       3,     2,     2,     1,     3,     5,     0,     5,     3,     0,
      13,     1,     0,     1,     3,     1,     3,     1,     3,     4,
       0,     4,     3,     2,     2,     0,     2,     0,    12,     1,
       1,     3,     2,     0,     1,     1,     0,     1,     1,     0,
       2,     0,     2,     2,     2,     2,     1,     1,     0,     3,
       4,     3,     2,     3,     0,     1,     3,     3,     1,     3,
       1,     0,     1,     1,     1,     5,     0,     1,     1,     2,
       0,     3,     0,     5,     4,     1,     1,     2,     2,     0,
       1,     3,     1,     3,     1,     3,     1,     3,     3,     1,
       2,     3,     2,     0,     1,     1,     1,     2,     1,     2,
       3,     2,     1,     1,     0,     4,     2,     5,     3,     1,
       3,     3,     5,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     5,     4,     6,     3,     5,
       4,     6,     4,     6,     5,     7,     3,     2,     4,     3,
       2,     3,     3,     3,     3,     4,     3,     4,     3,     4,
       5,     6,     6,     7,     6,     7,     6,     7,     3,     4,
       9,    12,    11,     0,     2,     1,     1,     1,     1,     1,
       1,     3,     0,     1,     2,     1,     1,     2,     2,     3,
       1,     1,     2,     2,     1,     2,     3,     5,     3,     2,
       5,     1,     1,     1,     0,     5,     7,     5,     2,     3,
       1,     1,     2,     2,     0,     3,     4,     4,     0,     3,
       2,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     1,     2,     2,     2,     2,
       2,     2,     0,     3,     3,     3,     0,     1,     2,     1,
       2,     2,     2,     2,     3,     4,     1,     3,     1,     1,
       1,     1,     3,     1,     2,     0,     1,     2,     0,     1,
       3,     0,     2,     0,     3,     3,     1,     5,     3,     1,
       3,     1,     2,     1,     4,     5,     5,     6,     3,     7,
       4,    11,     1,     3,     2,     2,     2,     0,     3,     1,
       1,     2,     2,     2,     2,     1,     0,     1,     2,     6,
       4,     6,     4,     6,     8,     4,     6,     1,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     1,     1,     1,
       3,     3,     3,     3,     2,     2,     1,     3,     1,     1,
       1,     3,     1,     1,     0,     1,     1,     1,     1,     3,
       8,    11,    10,     7,    10,     9,     1,     1,     2,     3,
       8,    11,     9,     1,     1,     3,     0,     1,     3,     1,
       0,     1,     0,     1,     0,     1,     3,     1,     1,     1,
       3,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       3,     3,     4,     3,     2,     1,     1,     1,     1,     1,
       3,     1,     1,     3,     3,     1,     2,     4,     4,     2,
       3,     5,     5,     1,     1,     3,     0,    11,    11,    10,
      12,     1,     2,     5,     4,     4,     4,     4,     7,     5,
       4,     7,     6,     9,     9,     4,     1,     1,     1,     1,
       1,     1,     1,     5,     1,     1,     3,     1,     2,     2,
       2,     3,     1,     3,     6,     2,     0,     3,     3,     4,
       4,     4,     4,     3,     2,     1,     1,     0,     1,     1,
       0,     2,     1,     5,     1,     0,     2,     2,     0,     1,
       0,     3,     5,     1,     3,     4,     3,     1,     1,     0,
       2,     2,     0,     2,     2,     1,     1,     1,     0,     2,
       4,     5,     4,     2,     3,     2,     2,     2,     2,     1,
       2,     3,     0,     1,     0,     5,     1,     4,     6,     2,
       1,     0,     4,     0,     1,     1,     2,     2,     2,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     3,
       3,     0,     1,     3,     1,     2,     1,     1,     1,     1,
       1,     2,     4,     4,     5,     1,     1,     2,     0,     2,
       0,     1,     3,     1,     0,     1,     2,     3,     2,     4,
       2,     3,     2,     0,     1,     2,     0,     4,     5,     1,
       2,     2,     0,     1,     3,     1,     2,     3,     3,     3,
       3,     3,     3,     1,     4,     2,     9,     9,     3,     0,
       2,     2,     0,     5,     3,     1,     3,     5,     3,     1,
       2,     1,     3,     5,     1,     2,     3,     4,     5,     4,
       5,     4,     6,     5,     4,     5,     5,     5,     2,     4,
       1,     1,     0,     1,     4,     5,     4,     0,     2,     2,
       2,     1,     1,     1,     1,     0,     4,     2,     1,     2,
       2,     4,     2,     6,     2,     1,     3,     4,     0,     2,
       0,     2,     0,     1,     3,     3,     2,     0,     2,     4,
       1,     1,     1,     0,     2,     3,     5,     6,     2,     3,
       5,     5,     5,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       4,     3,     5,     1,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
       2,     1,     1,     2,     2,     3,     1,     2,     4,     1,
       1,     2,     2,     4,     1,     1,     3,     3,     4,     1,
       3,     6,     7,     9,     7,     7,     5,     1,     1,     1,
       5,     6,     6,     4,     4,     4,     4,     6,     5,     5,
       5,     4,     6,     4,     7,     9,     5,     0,     5,     4,
       0,     1,     0,     2,     0,     1,     3,     3,     2,     2,
       0,     6,     1,     0,     3,     0,     2,     2,     0,     1,
       4,     2,     2,     2,     2,     2,     4,     3,     1,     5,
       3,     1,     3,     1,     2,     3,     1,     3,     1,     2,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     4,     1,     4,     1,     2,     1,
       2,     1,     2,     1,     3,     1,     3,     1,     2,     1,
       3,     1,     2,     1,     0,     1,     3,     1,     3,     3,
       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     5,     1,     2,     4,     2,     0,     1,     0,
       1,     2,     3,     5,     1,     0,     0,     2,     0,     2,
       3,     3,     3,     5,     0,     2,     1,     0,     1,     0,
       1,     3,     1,     2,     3,     2,     1,     4,     2,     1,
       0,     3,     1,     3,     1,     2,     4,     2,     0,     1,
       3,     1,     3,     1,     2,     1,     3,     1,     1,     2,
       1,     1,     2,     1,     1,     2,     7,     2,     5,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     5,     3,     0,     1,
       1,     1,     1,     1,     4,     7,     6,     2,     0,     1,
       1,     1,     1,    13,    16,     1,     2,     0,     1,     0,
       1,     0,     2,     0,     1,     0,     6,     8,     6,     8,
       6,     8,     3,     2,     1,     0,     4,     6,     3,     2,
       4,     3,     5,     1,     0,     1,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     2,     3,     3,     3,     1,
       3,     3,     2,     3,     3,     3,     3,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     3,     2,     2,
       3,     1,     1,     4,     6,     5,     4,     6,     1,     1,
       1,     1,     1,     1,     0,     1,     3,     1,     0,     7,
       3,     1,     2,     3,     2,     0,     2,     0,     2,     4,
       5,     3,     5,     1,     0,     2,     0,     2,     1,     1,
       1,     2,     3,     2,     2,     2,     2,     3,     4,     3,
       1,     1,     1,     1,     0,     1,     3,     1,     3,     2,
       9,    12,    11,    12,    14,     3,     4,     4,     0,     7,
      10,     9,     2,     3,     0,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 548 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 564 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 576 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* stmt: %empty  */
#line 625 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 20024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 20033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 20050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 20074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 20134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 20164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColId: pgq_unreserved_keyword  */
#line 47 "third_party/libpg_query/grammar/statements/common.y"
                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColIdOrString: ColId  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColIdOrString: SCONST  */
#line 52 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* Sconst: SCONST  */
#line 56 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection: indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* indirection: indirection indirection_el  */
#line 61 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* indirection_el: '.' attr_name  */
#line 66 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* attr_name: ColLabel  */
#line 71 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: IDENT  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: other_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* ColLabel: unreserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColLabel: reserved_keyword  */
#line 79 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* ColLabel: pgq_unreserved_keyword  */
#line 80 "third_party/libpg_query/grammar/statements/common.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 20546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 21033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 21096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 21351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 21453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 21506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* Discriminator: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 21517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 133 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 21532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 147 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* EdgeTableDefinitionList: %empty  */
#line 149 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 157 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-12].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-10].list);
				n->src_name = (yyvsp[-9].range);
				n->src_pk = (yyvsp[-8].list);
				n->dst_fk = (yyvsp[-6].list);
				n->dst_name = (yyvsp[-5].range);
				n->dst_pk = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 21565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* IdentOptionalAs: PGQ_IDENT  */
#line 182 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 21571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 184 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 21577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* QualifiednameOptionalAs: qualified_name  */
#line 188 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 21583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 190 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 21589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* PropertiesList: IdentOptionalAs  */
#line 194 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* ExceptOptional: %empty  */
#line 204 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 21622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* PropertiesClause: NO PROPERTIES  */
#line 218 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 21634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 221 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* PropertiesClause: %empty  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 21646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 232 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 21652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* GraphTableWhereOptional: %empty  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 21658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-10].str);
				n->paths = (yyvsp[-8].list);
				if ((yyvsp[-7].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-7].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 21684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColumnSpec: target_el  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColumnList: ColumnSpec  */
#line 268 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* KeepOptional: KEEP PathPrefix  */
#line 274 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* KeepOptional: %empty  */
#line 276 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 21714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* GroupOrGroupsOptional: GROUP_P  */
#line 284 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* GroupOrGroupsOptional: GROUPS  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* GroupOrGroupsOptional: %empty  */
#line 288 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* PathVariableOptional: PGQ_IDENT '='  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 21738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* PathVariableOptional: %empty  */
#line 294 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 21744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 298 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 300 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 21756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 302 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 21762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 304 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 21768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* PathModeOptional: PathOrPathsOptional  */
#line 306 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* TopKOptional: ICONST  */
#line 310 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* TopKOptional: %empty  */
#line 312 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 317 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 329 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 341 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* PathPrefix: ALL PathModeOptional  */
#line 353 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 365 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* PathPrefix: %empty  */
#line 377 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* PathPatternList: PathPattern  */
#line 391 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 394 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* PatternUnion: '|'  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 21920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* PatternUnion: '|' '+' '|'  */
#line 425 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* KleeneQuantifierOptional: ICONST  */
#line 429 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* KleeneQuantifierOptional: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 21938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* KleeneOptional: '*'  */
#line 437 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* KleeneOptional: '+'  */
#line 446 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* KleeneOptional: '?'  */
#line 455 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 464 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* KleeneOptional: %empty  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* CostNum: ICONST  */
#line 483 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* CostNum: FCONST  */
#line 485 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 22010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* CostDefault: DEFAULT CostNum  */
#line 489 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 22016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* CostDefault: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 22022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* CostOptional: COST b_expr CostDefault  */
#line 496 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 22035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* CostOptional: %empty  */
#line 506 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 516 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 528 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 22069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* PathElement: VertexPattern  */
#line 536 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* PathElement: EdgePattern  */
#line 538 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* PathSequence: EnclosedSubPath PathSequence  */
#line 543 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* PathSequence: PathElement PathSequence  */
#line 565 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 22113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* PathSequence: %empty  */
#line 567 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 22119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* PathConcatenation: PathSequence  */
#line 571 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 574 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 22137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* OrLabelExpression: LabelExpression  */
#line 584 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* AndLabelExpression: LabelExpression  */
#line 597 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 600 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ComposedLabelExpression: LabelExpression  */
#line 610 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 613 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 622 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* LabelExpression: PGQ_IDENT  */
#line 633 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 22214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* LabelExpression: '!' LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 649 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 653 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 22238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* LabelExpressionOptional: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 22244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* ArrowRight: '-'  */
#line 667 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 22250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* ArrowRight: '-' '>'  */
#line 669 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 22256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* ArrowRight: LAMBDA_ARROW  */
#line 671 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 22262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* ArrowLeftBracket: '-' '['  */
#line 675 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 22268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* ArrowLeftBracket: '<' '-' '['  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 22274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* AbbreviatedEdge: '<' ArrowRight  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* AbbreviatedEdge: ArrowRight  */
#line 688 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 22292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* VariableOptional: PGQ_IDENT  */
#line 695 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* VariableOptional: %empty  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 702 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 729 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* VertexPattern: '(' FullElementSpec ')'  */
#line 756 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* pgq_expr: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 790 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 22400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 792 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 22422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* pgq_expr: '+' pgq_expr  */
#line 815 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 22428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* pgq_expr: '-' pgq_expr  */
#line 817 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 22434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 819 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 821 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 823 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 825 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 827 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 829 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 831 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 833 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 835 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 837 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 839 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 841 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 843 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 850 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: NOT pgq_expr  */
#line 852 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: NOT_LA pgq_expr  */
#line 854 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 856 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 866 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 878 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 897 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 902 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 22643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 918 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 22655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 926 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 22667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 22679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr IS NULL_P  */
#line 952 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr ISNULL  */
#line 960 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 968 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 22715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 976 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr NOTNULL  */
#line 984 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 992 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 22751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1000 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 22759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: row OVERLAPS row  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 22779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1052 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1060 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1068 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 22867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1076 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1084 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1092 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1100 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 22955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 23038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 23066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 23072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 23084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 23090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 23096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 23126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 23132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 23138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 23312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 23318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 23428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 23434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 23440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 23446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 23458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 23464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 23704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 23734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 23816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 23887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 23917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 24071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 24083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 24110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 24162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 24168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 24174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 24180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 24298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 24304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 24322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 24328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 24334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 24340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 24346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 24352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 24358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 24364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 24370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 24376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 24382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 24388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 24394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 24400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 24406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 24412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 24418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 24424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 24430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 24448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 24454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 24460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 24466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 24472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 24490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 24505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 24552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 24590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 24645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 24680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 24734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 24746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 24776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 24788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 24804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 24816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 24822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 24884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 24948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 25004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 25010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 25016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 25033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 25069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 25081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 25134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 25237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 25245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 25411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 25422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 25485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 25510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* into_clause: INTO OptTempTableName  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* into_clause: %empty  */
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 25530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 25599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* OptTempTableName: TABLE qualified_name  */
#line 520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* OptTempTableName: qualified_name  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* opt_table: TABLE  */
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* opt_table: %empty  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 25629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* all_or_distinct: ALL  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 25635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* all_or_distinct: DISTINCT  */
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* all_or_distinct: %empty  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* by_name: BY NAME_P  */
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 25653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* distinct_clause: DISTINCT  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 25659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* opt_all_clause: ALL  */
#line 554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 25671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* opt_all_clause: %empty  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 25683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 25689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_ignore_nulls: %empty  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_sort_clause: sort_clause  */
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 25701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_sort_clause: %empty  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* sort_clause: ORDER BY sortby_list  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 25730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* sortby_list: sortby  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 25736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* sortby_list: sortby_list ',' sortby  */
#line 588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 25742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 25755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 25768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_asc_desc: ASC_P  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 25774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_asc_desc: DESC_P  */
#line 612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_asc_desc: %empty  */
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 25786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 25792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 25798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* opt_nulls_order: %empty  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 25804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* select_limit: limit_clause offset_clause  */
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 25810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* select_limit: offset_clause limit_clause  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 25816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* select_limit: limit_clause  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 25822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* select_limit: offset_clause  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 25828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* opt_select_limit: select_limit  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* opt_select_limit: %empty  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 25840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* limit_clause: LIMIT select_limit_value  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 25859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 653 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 25865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 25871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* offset_clause: OFFSET select_offset_value  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 25883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* sample_count: FCONST '%'  */
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* sample_count: ICONST '%'  */
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* sample_count: FCONST PERCENT  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* sample_count: ICONST PERCENT  */
#line 683 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* sample_count: ICONST  */
#line 687 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 25923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* sample_count: ICONST ROWS  */
#line 691 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 25931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* sample_clause: %empty  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 25945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_sample_func: ColId  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_sample_func: %empty  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 25957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 715 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* tablesample_entry: sample_count  */
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 25974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 25982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 25991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* opt_tablesample_clause: tablesample_clause  */
#line 742 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* opt_tablesample_clause: %empty  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 26011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 748 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 26017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* opt_repeatable_clause: %empty  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 26023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* select_limit_value: a_expr  */
#line 753 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* select_limit_value: ALL  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 26038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* select_limit_value: a_expr '%'  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 26044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* select_limit_value: FCONST PERCENT  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 26050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* select_limit_value: ICONST PERCENT  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 26056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* select_offset_value: a_expr  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* select_fetch_first_value: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* select_fetch_first_value: '+' I_or_F_const  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* select_fetch_first_value: '-' I_or_F_const  */
#line 792 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* I_or_F_const: Iconst  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 26086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* I_or_F_const: FCONST  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* row_or_rows: ROW  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 26098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* row_or_rows: ROWS  */
#line 802 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* first_or_next: FIRST_P  */
#line 805 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 26110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* first_or_next: NEXT  */
#line 806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 26116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* group_clause: GROUP_P BY ALL  */
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 26131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* group_clause: %empty  */
#line 837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* group_by_list: group_by_item  */
#line 841 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* group_by_list: group_by_list ',' group_by_item  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 26149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* group_by_list_opt_comma: group_by_list  */
#line 846 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* group_by_list_opt_comma: group_by_list ','  */
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* group_by_item: a_expr  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* group_by_item: empty_grouping_set  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* group_by_item: cube_clause  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* group_by_item: rollup_clause  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* group_by_item: grouping_sets_clause  */
#line 855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* empty_grouping_set: '(' ')'  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 26199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* grouping_or_grouping_id: GROUPING  */
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* grouping_or_grouping_id: GROUPING_ID  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 26235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* having_clause: HAVING a_expr  */
#line 898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* having_clause: %empty  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* qualify_clause: QUALIFY a_expr  */
#line 903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* qualify_clause: %empty  */
#line 904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* for_locking_clause: for_locking_items  */
#line 908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* for_locking_clause: FOR READ_P ONLY  */
#line 909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* opt_for_locking_clause: for_locking_clause  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* opt_for_locking_clause: %empty  */
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* for_locking_items: for_locking_item  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* for_locking_items: for_locking_items for_locking_item  */
#line 919 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 26295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 26307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* for_locking_strength: FOR UPDATE  */
#line 934 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 26313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 26319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* for_locking_strength: FOR SHARE  */
#line 936 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 26325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* for_locking_strength: FOR KEY SHARE  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 26331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* locked_rels_list: OF qualified_name_list  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* locked_rels_list: %empty  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* opt_nowait_or_skip: NOWAIT  */
#line 947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 26349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 26355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_nowait_or_skip: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 26361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 959 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* values_clause_opt_comma: values_clause  */
#line 973 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* values_clause_opt_comma: values_clause ','  */
#line 974 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* from_clause: FROM from_list_opt_comma  */
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* from_clause: %empty  */
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* from_list: table_ref  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* from_list: from_list ',' table_ref  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* from_list_opt_comma: from_list  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* from_list_opt_comma: from_list ','  */
#line 998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 26439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1019 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 26464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 26502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* table_ref: joined_table  */
#line 1054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 26510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 26519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1063 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 26527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1089 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 26561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_pivot_group_by: %empty  */
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 26567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 26573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_include_nulls: %empty  */
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1099 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* pivot_header: d_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1121 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1129 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* pivot_value_list: pivot_value  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* unpivot_header: ColIdOrString  */
#line 1148 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1149 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 26669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1154 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* unpivot_value_list: unpivot_value  */
#line 1163 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* joined_table: '(' joined_table ')'  */
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 26704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 26809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1304 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 26863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1319 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 26883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* alias_clause: AS ColIdOrString  */
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* alias_clause: ColId  */
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* opt_alias_clause: alias_clause  */
#line 1361 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 26927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* opt_alias_clause: %empty  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 26933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* func_alias_clause: alias_clause  */
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 26941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 26949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* func_alias_clause: %empty  */
#line 1391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 26977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* join_type: FULL join_outer  */
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* join_type: LEFT join_outer  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* join_type: RIGHT join_outer  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* join_type: SEMI  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 27001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* join_type: ANTI  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 27007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* join_type: INNER_P  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 27013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* join_outer: OUTER_P  */
#line 1405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 27019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* join_outer: %empty  */
#line 1406 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 27031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* join_qual: ON a_expr  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* relation_expr: qualified_name  */
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 27048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* relation_expr: qualified_name '*'  */
#line 1432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 27059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* relation_expr: ONLY qualified_name  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 27070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 27081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* func_table: func_expr_windowless opt_ordinality  */
#line 1478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 27096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 27111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1502 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 27117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* rowsfrom_list: rowsfrom_item  */
#line 1506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* opt_col_def_list: %empty  */
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 27147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* opt_ordinality: %empty  */
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* where_clause: WHERE a_expr  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* where_clause: %empty  */
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* TableFuncElementList: TableFuncElement  */
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* opt_collate_clause: COLLATE any_name  */
#line 1558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* opt_collate_clause: %empty  */
#line 1565 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 27221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* colid_type_list: ColId Typename  */
#line 1578 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* opt_Typename: Typename  */
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* opt_Typename: %empty  */
#line 1589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 27249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* Typename: SimpleTypename opt_array_bounds  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 27258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 27268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 27277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 27287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* Typename: SimpleTypename ARRAY  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 27296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 27306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 27317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 27328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 27339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 27345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1649 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 27351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* opt_array_bounds: %empty  */
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 27357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* SimpleTypename: GenericType  */
#line 1655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* SimpleTypename: Numeric  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* SimpleTypename: Bit  */
#line 1657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* SimpleTypename: Character  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* SimpleTypename: ConstDatetime  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* SimpleTypename: ConstInterval opt_interval  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 27396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 27406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* ConstTypename: Numeric  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* ConstTypename: ConstBit  */
#line 1686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* ConstTypename: ConstCharacter  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* ConstTypename: ConstDatetime  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* GenericType: type_name_token opt_type_modifiers  */
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* opt_type_modifiers: %empty  */
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* Numeric: INT_P  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* Numeric: INTEGER  */
#line 1726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* Numeric: SMALLINT  */
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* Numeric: BIGINT  */
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* Numeric: REAL  */
#line 1741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* Numeric: FLOAT_P opt_float  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* Numeric: DOUBLE_P PRECISION  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* Numeric: DEC opt_type_modifiers  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* Numeric: BOOLEAN_P  */
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_float: '(' Iconst ')'  */
#line 1781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_float: %empty  */
#line 1802 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 27587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* Bit: BitWithLength  */
#line 1812 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* Bit: BitWithoutLength  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* ConstBit: BitWithLength  */
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* ConstBit: BitWithoutLength  */
#line 1828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* BitWithoutLength: BIT opt_varying  */
#line 1848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* Character: CharacterWithLength  */
#line 1869 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* Character: CharacterWithoutLength  */
#line 1873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* ConstCharacter: CharacterWithLength  */
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* ConstCharacter: CharacterWithoutLength  */
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 27700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* CharacterWithoutLength: character  */
#line 1904 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* character: CHARACTER opt_varying  */
#line 1914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* character: CHAR_P opt_varying  */
#line 1916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* character: VARCHAR  */
#line 1918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 27730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* character: NATIONAL CHARACTER opt_varying  */
#line 1920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* character: NATIONAL CHAR_P opt_varying  */
#line 1922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* character: NCHAR opt_varying  */
#line 1924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* opt_varying: VARYING  */
#line 1928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 27754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* opt_varying: %empty  */
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1946 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* ConstDatetime: TIME opt_timezone  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* ConstInterval: INTERVAL  */
#line 1974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 27825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 27831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* opt_timezone: %empty  */
#line 1983 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* opt_interval: year_keyword  */
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 27843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* opt_interval: month_keyword  */
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 27849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* opt_interval: day_keyword  */
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 27855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* opt_interval: hour_keyword  */
#line 2018 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 27861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* opt_interval: minute_keyword  */
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 27867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* opt_interval: second_keyword  */
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 27873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* opt_interval: millisecond_keyword  */
#line 2024 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 27879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* opt_interval: microsecond_keyword  */
#line 2026 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 27885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* opt_interval: year_keyword TO month_keyword  */
#line 2028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 27894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* opt_interval: day_keyword TO hour_keyword  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 27903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* opt_interval: day_keyword TO minute_keyword  */
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* opt_interval: day_keyword TO second_keyword  */
#line 2044 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2051 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* opt_interval: hour_keyword TO second_keyword  */
#line 2056 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* opt_interval: minute_keyword TO second_keyword  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* opt_interval: %empty  */
#line 2067 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: c_expr  */
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr TYPECAST Typename  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr COLLATE any_name  */
#line 2103 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: '+' a_expr  */
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: '-' a_expr  */
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr '+' a_expr  */
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: a_expr '-' a_expr  */
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: a_expr '*' a_expr  */
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: a_expr '/' a_expr  */
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: a_expr '%' a_expr  */
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: a_expr '^' a_expr  */
#line 2142 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* a_expr: a_expr POWER_OF a_expr  */
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* a_expr: a_expr '<' a_expr  */
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* a_expr: a_expr '>' a_expr  */
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* a_expr: a_expr '=' a_expr  */
#line 2150 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2154 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* a_expr: a_expr qual_Op a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* a_expr: qual_Op a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* a_expr: a_expr qual_Op  */
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* a_expr: a_expr AND a_expr  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* a_expr: a_expr OR a_expr  */
#line 2168 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* a_expr: NOT a_expr  */
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 28124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* a_expr: NOT_LA a_expr  */
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 28130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* a_expr: a_expr GLOB a_expr  */
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* a_expr: a_expr LIKE a_expr  */
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 28168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* a_expr: a_expr ILIKE a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 28208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 28243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 28255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 28267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* a_expr: a_expr IS NULL_P  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* a_expr: a_expr ISNULL  */
#line 2278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* a_expr: a_expr IS NOT NULL_P  */
#line 2286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* a_expr: a_expr NOT NULL_P  */
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* a_expr: a_expr NOTNULL  */
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2310 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 28339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 28347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* a_expr: row OVERLAPS row  */
#line 2322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 28367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* a_expr: a_expr IS TRUE_P  */
#line 2338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* a_expr: a_expr IS FALSE_P  */
#line 2354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* a_expr: a_expr IS UNKNOWN  */
#line 2370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* a_expr: a_expr IN_P in_expr  */
#line 2434 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 28543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 28569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 28595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* a_expr: DEFAULT  */
#line 2494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 28637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* b_expr: c_expr  */
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* b_expr: b_expr TYPECAST Typename  */
#line 2546 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* b_expr: '+' b_expr  */
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* b_expr: '-' b_expr  */
#line 2550 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* b_expr: b_expr '+' b_expr  */
#line 2552 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* b_expr: b_expr '-' b_expr  */
#line 2554 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* b_expr: b_expr '*' b_expr  */
#line 2556 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* b_expr: b_expr '/' b_expr  */
#line 2558 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2560 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* b_expr: b_expr '%' b_expr  */
#line 2562 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* b_expr: b_expr '^' b_expr  */
#line 2564 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* b_expr: b_expr POWER_OF b_expr  */
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* b_expr: b_expr '<' b_expr  */
#line 2568 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* b_expr: b_expr '>' b_expr  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* b_expr: b_expr '=' b_expr  */
#line 2572 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2576 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* b_expr: b_expr qual_Op b_expr  */
#line 2580 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* b_expr: qual_Op b_expr  */
#line 2582 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* b_expr: b_expr qual_Op  */
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* c_expr: row  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2617 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 28833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* d_expr: columnref  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* d_expr: AexprConst  */
#line 2631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* d_expr: '#' ICONST  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* d_expr: '$' ColLabel  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 28873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* d_expr: list_comprehension  */
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 28881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* d_expr: ARRAY select_with_parens  */
#line 2651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* d_expr: case_expr  */
#line 2667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* d_expr: select_with_parens  */
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* d_expr: select_with_parens indirection  */
#line 2680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 28955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* d_expr: EXISTS select_with_parens  */
#line 2704 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2715 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* indirection_expr: '?'  */
#line 2726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* indirection_expr: PARAM  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 29000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* indirection_expr: '(' a_expr ')'  */
#line 2737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 29008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 29017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 29038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* indirection_expr: func_expr  */
#line 2763 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* func_application: func_name '(' ')'  */
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 29054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 29065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 29077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2788 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 29089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 29104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 29156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* func_expr: func_expr_common_subexpr  */
#line 2863 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* func_expr_windowless: func_application  */
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 29184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2888 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 29190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 29196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 29256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 29299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 29310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 29323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 29342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2995 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* within_group_clause: %empty  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* filter_clause: %empty  */
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* export_clause: EXPORT_STATE  */
#line 3006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 29378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* export_clause: %empty  */
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* window_clause: WINDOW window_definition_list  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* window_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* window_definition_list: window_definition  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 29402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 29408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* window_definition: ColId AS window_specification  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 29418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* over_clause: OVER window_specification  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 29424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* over_clause: OVER ColId  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 29441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* over_clause: %empty  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 29447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 29465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* opt_existing_window_name: ColId  */
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* opt_existing_window_name: %empty  */
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 29477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_partition_clause: %empty  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_frame_clause: RANGE frame_extent  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 29499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* opt_frame_clause: ROWS frame_extent  */
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 29509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* opt_frame_clause: %empty  */
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* frame_extent: frame_bound  */
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 29542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 29583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* frame_bound: CURRENT_P ROW  */
#line 3196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* frame_bound: a_expr PRECEDING  */
#line 3204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* frame_bound: a_expr FOLLOWING  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* qualified_row: ROW '(' ')'  */
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* row: qualified_row  */
#line 3236 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 29661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* row: '(' expr_list ',' a_expr ')'  */
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 29667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 29680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* dict_arguments: dict_arg  */
#line 3251 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* dict_arguments_opt_comma: dict_arguments  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* map_arg: a_expr ':' a_expr  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 29712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* map_arguments: map_arg  */
#line 3268 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* map_arguments: map_arguments ',' map_arg  */
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* map_arguments_opt_comma: map_arguments  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* map_arguments_opt_comma: map_arguments ','  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3280 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* opt_map_arguments_opt_comma: %empty  */
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 29748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* sub_type: ANY  */
#line 3284 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* sub_type: SOME  */
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* sub_type: ALL  */
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 29766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* all_Op: Op  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* all_Op: MathOp  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 29778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* MathOp: '+'  */
#line 3293 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 29784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* MathOp: '-'  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 29790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* MathOp: '*'  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 29796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* MathOp: '/'  */
#line 3296 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 29802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* MathOp: INTEGER_DIVISION  */
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 29808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* MathOp: '%'  */
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 29814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* MathOp: '^'  */
#line 3299 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 29820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* MathOp: POWER_OF  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 29826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* MathOp: '<'  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 29832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* MathOp: '>'  */
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 29838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* MathOp: '='  */
#line 3303 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* MathOp: LESS_EQUALS  */
#line 3304 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* MathOp: GREATER_EQUALS  */
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* MathOp: NOT_EQUALS  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* qual_Op: Op  */
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* qual_all_Op: all_Op  */
#line 3317 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* subquery_Op: all_Op  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3326 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* subquery_Op: LIKE  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* subquery_Op: NOT_LA LIKE  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* subquery_Op: GLOB  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* subquery_Op: NOT_LA GLOB  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* subquery_Op: ILIKE  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* subquery_Op: NOT_LA ILIKE  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* any_operator: all_Op  */
#line 3352 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* any_operator: ColId '.' any_operator  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* c_expr_list: c_expr  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* c_expr_list_opt_comma: c_expr_list  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* expr_list: a_expr  */
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* expr_list: expr_list ',' a_expr  */
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* expr_list_opt_comma: expr_list  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* expr_list_opt_comma: expr_list ','  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 30010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_expr_list_opt_comma: %empty  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 30026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* func_arg_list: func_arg_expr  */
#line 3417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 30034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 30042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* func_arg_expr: a_expr  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 30063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 30076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* type_list: Typename  */
#line 3450 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 30082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* type_list: type_list ',' Typename  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 30088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* extract_list: extract_arg FROM a_expr  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 30096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* extract_list: %empty  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* extract_arg: IDENT  */
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* extract_arg: year_keyword  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 30114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* extract_arg: month_keyword  */
#line 3468 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 30120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* extract_arg: day_keyword  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 30126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* extract_arg: hour_keyword  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 30132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* extract_arg: minute_keyword  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 30138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* extract_arg: second_keyword  */
#line 3472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 30144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* extract_arg: millisecond_keyword  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 30150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* extract_arg: microsecond_keyword  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 30156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* extract_arg: Sconst  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* overlay_placing: PLACING a_expr  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* position_list: b_expr IN_P b_expr  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 30190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* position_list: %empty  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* substr_list: a_expr substr_from substr_for  */
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* substr_list: a_expr substr_for substr_from  */
#line 3525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 30213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* substr_list: a_expr substr_from  */
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* substr_list: a_expr substr_for  */
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 30240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* substr_list: expr_list  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* substr_list: %empty  */
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 30254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* substr_from: FROM a_expr  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* substr_for: FOR a_expr  */
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 30272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* trim_list: FROM expr_list_opt_comma  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* trim_list: expr_list_opt_comma  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* in_expr: select_with_parens  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 30295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 30301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 30315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* when_clause_list: when_clause  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* when_clause_list: when_clause_list when_clause  */
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 30339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* case_default: ELSE a_expr  */
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* case_default: %empty  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* case_arg: a_expr  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* case_arg: %empty  */
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* columnref: ColId  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 30371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* columnref: ColId indirection  */
#line 3628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 30379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* indirection_el: '[' a_expr ']'  */
#line 3635 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* opt_slice_bound: a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* opt_slice_bound: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* opt_indirection: %empty  */
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* opt_indirection: opt_indirection indirection_el  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* opt_func_arguments: %empty  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 30433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* opt_func_arguments: '(' ')'  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 30439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3671 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 30458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* extended_indirection_el: '[' a_expr ']'  */
#line 3680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* opt_extended_indirection: %empty  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 30488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_target_list_opt_comma: %empty  */
#line 3721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* target_list: target_el  */
#line 3725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 30512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* target_list: target_list ',' target_el  */
#line 3726 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 30518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* target_list_opt_comma: target_list  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* target_list_opt_comma: target_list ','  */
#line 3731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* target_el: a_expr AS ColLabelOrString  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* target_el: a_expr IDENT  */
#line 3751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 30554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* target_el: a_expr  */
#line 3759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 30566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* except_list: EXCLUDE ColId  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* opt_except_list: except_list  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* opt_except_list: %empty  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* replace_list_el: a_expr AS ColId  */
#line 3776 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 30596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* replace_list: replace_list_el  */
#line 3780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* replace_list: replace_list ',' replace_list_el  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* replace_list_opt_comma: replace_list  */
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* replace_list_opt_comma: replace_list ','  */
#line 3786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* opt_replace_list: REPLACE replace_list_el  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* opt_replace_list: %empty  */
#line 3791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* qualified_name_list: qualified_name  */
#line 3801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3802 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* name_list: name  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* name_list: name_list ',' name  */
#line 3809 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* name_list_opt_comma: name_list  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* name_list_opt_comma: name_list ','  */
#line 3815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* name: ColIdOrString  */
#line 3823 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* func_name: function_name_token  */
#line 3835 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* func_name: ColId indirection  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* AexprConst: Iconst  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* AexprConst: FCONST  */
#line 3853 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* AexprConst: Sconst opt_indirection  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* AexprConst: BCONST  */
#line 3869 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* AexprConst: XCONST  */
#line 3873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* AexprConst: func_name Sconst  */
#line 3882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* AexprConst: ConstTypename Sconst  */
#line 3927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* AexprConst: TRUE_P  */
#line 3943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* AexprConst: FALSE_P  */
#line 3947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* AexprConst: NULL_P  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* Iconst: ICONST  */
#line 3956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* type_function_name: IDENT  */
#line 3973 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* type_function_name: unreserved_keyword  */
#line 3974 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* type_function_name: type_func_name_keyword  */
#line 3975 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* type_function_name: pgq_unreserved_keyword  */
#line 3976 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* function_name_token: IDENT  */
#line 3980 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* function_name_token: unreserved_keyword  */
#line 3981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* function_name_token: func_name_keyword  */
#line 3982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* function_name_token: pgq_unreserved_keyword  */
#line 3983 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* type_name_token: IDENT  */
#line 3987 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* type_name_token: unreserved_keyword  */
#line 3988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* type_name_token: type_name_keyword  */
#line 3989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* type_name_token: pgq_unreserved_keyword  */
#line 3990 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* any_name: ColId  */
#line 3994 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* any_name: ColId attrs  */
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* attrs: '.' attr_name  */
#line 3999 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* attrs: attrs '.' attr_name  */
#line 4001 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* opt_name_list: %empty  */
#line 4006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* ColLabelOrString: ColLabel  */
#line 4013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* ColLabelOrString: SCONST  */
#line 4014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 31007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 31019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 31103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 31109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 31181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 31187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 31205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 31217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 31223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 31341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 31434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 31440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 31458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* NonReservedWord: pgq_unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                            { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 31516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 31522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 31528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 31534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 31540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 31554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 31566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 31576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 31596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 31612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 31638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 31650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 31702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 31743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 31795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 31806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 31817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 31829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 31881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 31907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 31913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 31919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 31925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 31931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 31945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 31963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 31969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 31995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 32009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 32017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 32028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 32039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 32051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 32063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 32077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 32131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 32137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 32149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 32155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 32167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 32178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 32184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 32195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 32206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1575: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 32308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 32314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 32320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 32330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1597: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 32438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1598: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 32444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1599: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1600: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1601: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1602: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1603: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 32507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1604: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1605: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 32527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32531 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
