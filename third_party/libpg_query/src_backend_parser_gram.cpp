/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 243 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_POWER_OF = 15,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 16,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 17,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 18,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 19,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 20,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 21,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 22,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 23,                    /* ACCESS  */
  YYSYMBOL_ACTION = 24,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 25,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANY = 37,                       /* ANY  */
  YYSYMBOL_ARE = 38,                       /* ARE  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 42,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 43,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 44,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 45,                        /* AT  */
  YYSYMBOL_ATTACH = 46,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 47,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 48,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 49,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 50,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 51,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 52,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 53,                    /* BIGINT  */
  YYSYMBOL_BINARY = 54,                    /* BINARY  */
  YYSYMBOL_BIT = 55,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 56,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 57,                      /* BOTH  */
  YYSYMBOL_BY = 58,                        /* BY  */
  YYSYMBOL_CACHE = 59,                     /* CACHE  */
  YYSYMBOL_CALL_P = 60,                    /* CALL_P  */
  YYSYMBOL_CALLED = 61,                    /* CALLED  */
  YYSYMBOL_CASCADE = 62,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 63,                  /* CASCADED  */
  YYSYMBOL_CASE = 64,                      /* CASE  */
  YYSYMBOL_CAST = 65,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 66,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 67,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 68,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 69,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 70,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 71,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 72,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 73,                     /* CLASS  */
  YYSYMBOL_CLOSE = 74,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 75,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 76,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 77,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 78,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 79,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 80,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 81,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 82,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 83,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 84,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 85,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 86,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 87,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 88,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 89,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 90,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 91,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 92,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 93,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 94,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 95,                      /* COPY  */
  YYSYMBOL_COST = 96,                      /* COST  */
  YYSYMBOL_CREATE_P = 97,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 98,                     /* CROSS  */
  YYSYMBOL_CSV = 99,                       /* CSV  */
  YYSYMBOL_CUBE = 100,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 101,                /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 102,          /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 103,             /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 104,             /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 105,           /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 106,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 107,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 108,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 109,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 110,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 111,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 112,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 113,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 114,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 115,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 116,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 117,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 118,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 119,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 120,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 121,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 122,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 123,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 124,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 125,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 126,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 127,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 128,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 129,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 130,              /* DESTINATION  */
  YYSYMBOL_DETACH = 131,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 132,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 133,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 134,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 135,                 /* DISTINCT  */
  YYSYMBOL_DO = 136,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 137,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 138,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 139,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 140,                     /* DROP  */
  YYSYMBOL_EACH = 141,                     /* EACH  */
  YYSYMBOL_EDGE = 142,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 143,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 144,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 145,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 146,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 147,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 148,                    /* END_P  */
  YYSYMBOL_ENUM_P = 149,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 150,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 151,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 152,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 153,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 154,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 155,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 156,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 157,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 158,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 159,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 160,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 161,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 162,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 163,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 164,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 165,                   /* FAMILY  */
  YYSYMBOL_FETCH = 166,                    /* FETCH  */
  YYSYMBOL_FILTER = 167,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 168,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 169,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 170,                /* FOLLOWING  */
  YYSYMBOL_FOR = 171,                      /* FOR  */
  YYSYMBOL_FORCE = 172,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 173,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 174,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 175,                   /* FREEZE  */
  YYSYMBOL_FROM = 176,                     /* FROM  */
  YYSYMBOL_FULL = 177,                     /* FULL  */
  YYSYMBOL_FUNCTION = 178,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 179,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 180,                /* GENERATED  */
  YYSYMBOL_GLOB = 181,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 182,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 183,                    /* GRANT  */
  YYSYMBOL_GRANTED = 184,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 185,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 186,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 187,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 188,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 189,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 190,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 191,                  /* HANDLER  */
  YYSYMBOL_HAVING = 192,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 193,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 194,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 195,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 196,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 197,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 198,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 199,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 200,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 201,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 202,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 203,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 204,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 205,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 206,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 207,                /* INCREMENT  */
  YYSYMBOL_INDEX = 208,                    /* INDEX  */
  YYSYMBOL_INDEXES = 209,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 210,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 211,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 212,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 213,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 214,                  /* INNER_P  */
  YYSYMBOL_INOUT = 215,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 216,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 217,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 218,                   /* INSERT  */
  YYSYMBOL_INSTALL = 219,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 220,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 221,                    /* INT_P  */
  YYSYMBOL_INTEGER = 222,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 223,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 224,                 /* INTERVAL  */
  YYSYMBOL_INTO = 225,                     /* INTO  */
  YYSYMBOL_INVOKER = 226,                  /* INVOKER  */
  YYSYMBOL_IS = 227,                       /* IS  */
  YYSYMBOL_ISNULL = 228,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 229,                /* ISOLATION  */
  YYSYMBOL_JOIN = 230,                     /* JOIN  */
  YYSYMBOL_JSON = 231,                     /* JSON  */
  YYSYMBOL_KEEP = 232,                     /* KEEP  */
  YYSYMBOL_KEY = 233,                      /* KEY  */
  YYSYMBOL_LABEL = 234,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 235,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 236,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 237,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 238,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 239,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 240,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 241,                     /* LEFT  */
  YYSYMBOL_LEVEL = 242,                    /* LEVEL  */
  YYSYMBOL_LIKE = 243,                     /* LIKE  */
  YYSYMBOL_LIMIT = 244,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 245,                   /* LISTEN  */
  YYSYMBOL_LOAD = 246,                     /* LOAD  */
  YYSYMBOL_LOCAL = 247,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 248,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 249,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 250,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 251,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 252,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 253,                   /* LOGGED  */
  YYSYMBOL_MACRO = 254,                    /* MACRO  */
  YYSYMBOL_MAP = 255,                      /* MAP  */
  YYSYMBOL_MAPPING = 256,                  /* MAPPING  */
  YYSYMBOL_MATCH = 257,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 258,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 259,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 260,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 261,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 262,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 263,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 264,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 265,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 266,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 267,                 /* MINVALUE  */
  YYSYMBOL_MODE = 268,                     /* MODE  */
  YYSYMBOL_MONTH_P = 269,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 270,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 271,                     /* MOVE  */
  YYSYMBOL_NAME_P = 272,                   /* NAME_P  */
  YYSYMBOL_NAMES = 273,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 274,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 275,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 276,                    /* NCHAR  */
  YYSYMBOL_NEW = 277,                      /* NEW  */
  YYSYMBOL_NEXT = 278,                     /* NEXT  */
  YYSYMBOL_NO = 279,                       /* NO  */
  YYSYMBOL_NODE = 280,                     /* NODE  */
  YYSYMBOL_NONE = 281,                     /* NONE  */
  YYSYMBOL_NOT = 282,                      /* NOT  */
  YYSYMBOL_NOTHING = 283,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 284,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 285,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 286,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 287,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 288,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 289,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 290,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 291,                 /* OBJECT_P  */
  YYSYMBOL_OF = 292,                       /* OF  */
  YYSYMBOL_OFF = 293,                      /* OFF  */
  YYSYMBOL_OFFSET = 294,                   /* OFFSET  */
  YYSYMBOL_OIDS = 295,                     /* OIDS  */
  YYSYMBOL_OLD = 296,                      /* OLD  */
  YYSYMBOL_ON = 297,                       /* ON  */
  YYSYMBOL_ONLY = 298,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 299,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 300,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 301,                  /* OPTIONS  */
  YYSYMBOL_OR = 302,                       /* OR  */
  YYSYMBOL_ORDER = 303,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 304,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 305,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 306,                  /* OUTER_P  */
  YYSYMBOL_OVER = 307,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 308,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 309,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 310,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 311,                    /* OWNED  */
  YYSYMBOL_OWNER = 312,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 313,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 314,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 315,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 316,                /* PARTITION  */
  YYSYMBOL_PASSING = 317,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 318,                 /* PASSWORD  */
  YYSYMBOL_PATH = 319,                     /* PATH  */
  YYSYMBOL_PATHS = 320,                    /* PATHS  */
  YYSYMBOL_PERCENT = 321,                  /* PERCENT  */
  YYSYMBOL_PLACING = 322,                  /* PLACING  */
  YYSYMBOL_PLANS = 323,                    /* PLANS  */
  YYSYMBOL_POLICY = 324,                   /* POLICY  */
  YYSYMBOL_POSITION = 325,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 326,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 327,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 328,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 329,                /* PRECISION  */
  YYSYMBOL_PREPARE = 330,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 331,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 332,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 333,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 334,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 335,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 336,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 337,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 338,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 339,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 340,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 341,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 342,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 343,                    /* QUOTE  */
  YYSYMBOL_RANGE = 344,                    /* RANGE  */
  YYSYMBOL_READ_P = 345,                   /* READ_P  */
  YYSYMBOL_REAL = 346,                     /* REAL  */
  YYSYMBOL_REASSIGN = 347,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 348,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 349,                /* RECURSIVE  */
  YYSYMBOL_REF = 350,                      /* REF  */
  YYSYMBOL_REFERENCES = 351,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 352,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 353,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 354,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 355,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 356,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 357,                  /* RELEASE  */
  YYSYMBOL_RENAME = 358,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 359,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 360,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 361,                  /* REPLICA  */
  YYSYMBOL_RESET = 362,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 363,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 364,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 365,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 366,                /* RETURNING  */
  YYSYMBOL_RETURNS = 367,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 368,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 369,                    /* RIGHT  */
  YYSYMBOL_ROLE = 370,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 371,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 372,                   /* ROLLUP  */
  YYSYMBOL_ROW = 373,                      /* ROW  */
  YYSYMBOL_ROWS = 374,                     /* ROWS  */
  YYSYMBOL_RULE = 375,                     /* RULE  */
  YYSYMBOL_SAMPLE = 376,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 377,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 378,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 379,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 380,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 381,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 382,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 383,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 384,                 /* SECURITY  */
  YYSYMBOL_SELECT = 385,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 386,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 387,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 388,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 389,                   /* SERVER  */
  YYSYMBOL_SESSION = 390,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 391,             /* SESSION_USER  */
  YYSYMBOL_SET = 392,                      /* SET  */
  YYSYMBOL_SETOF = 393,                    /* SETOF  */
  YYSYMBOL_SETS = 394,                     /* SETS  */
  YYSYMBOL_SHARE = 395,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 396,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 397,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 398,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 399,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 400,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 401,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 402,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 403,                     /* SOME  */
  YYSYMBOL_SOURCE = 404,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 405,                    /* SQL_P  */
  YYSYMBOL_STABLE = 406,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 407,             /* STANDALONE_P  */
  YYSYMBOL_START = 408,                    /* START  */
  YYSYMBOL_STATEMENT = 409,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 410,               /* STATISTICS  */
  YYSYMBOL_STDIN = 411,                    /* STDIN  */
  YYSYMBOL_STDOUT = 412,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 413,                  /* STORAGE  */
  YYSYMBOL_STORED = 414,                   /* STORED  */
  YYSYMBOL_STRICT_P = 415,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 416,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 417,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 418,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 419,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 420,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 421,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 422,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 423,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 424,                    /* TABLE  */
  YYSYMBOL_TABLES = 425,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 426,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 427,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 428,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 429,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 430,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 431,                   /* TEXT_P  */
  YYSYMBOL_THEN = 432,                     /* THEN  */
  YYSYMBOL_TIME = 433,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 434,                /* TIMESTAMP  */
  YYSYMBOL_TO = 435,                       /* TO  */
  YYSYMBOL_TRAIL = 436,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 437,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 438,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 439,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 440,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 441,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 442,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 443,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 444,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 445,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 446,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 447,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 448,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 449,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 450,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 451,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 452,                    /* UNION  */
  YYSYMBOL_UNIQUE = 453,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 454,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 455,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 456,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 457,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 458,                   /* UPDATE  */
  YYSYMBOL_USE_P = 459,                    /* USE_P  */
  YYSYMBOL_USER = 460,                     /* USER  */
  YYSYMBOL_USING = 461,                    /* USING  */
  YYSYMBOL_VACUUM = 462,                   /* VACUUM  */
  YYSYMBOL_VALID = 463,                    /* VALID  */
  YYSYMBOL_VALIDATE = 464,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 465,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 466,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 467,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 468,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 469,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 470,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 471,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 472,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 473,                   /* VERTEX  */
  YYSYMBOL_VIEW = 474,                     /* VIEW  */
  YYSYMBOL_VIEWS = 475,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 476,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 477,                 /* VOLATILE  */
  YYSYMBOL_WALK = 478,                     /* WALK  */
  YYSYMBOL_WHEN = 479,                     /* WHEN  */
  YYSYMBOL_WHERE = 480,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 481,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 482,                   /* WINDOW  */
  YYSYMBOL_WITH = 483,                     /* WITH  */
  YYSYMBOL_WITHIN = 484,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 485,                  /* WITHOUT  */
  YYSYMBOL_WORK = 486,                     /* WORK  */
  YYSYMBOL_WRAPPER = 487,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 488,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 489,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 490,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 491,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 492,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 493,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 494,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 495,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 496,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 497,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 498,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 499,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 500,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 501,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 502,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 503,                    /* YES_P  */
  YYSYMBOL_ZONE = 504,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 505,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 506,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 507,                  /* WITH_LA  */
  YYSYMBOL_508_ = 508,                     /* '<'  */
  YYSYMBOL_509_ = 509,                     /* '>'  */
  YYSYMBOL_510_ = 510,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 511,                /* POSTFIXOP  */
  YYSYMBOL_512_ = 512,                     /* '+'  */
  YYSYMBOL_513_ = 513,                     /* '-'  */
  YYSYMBOL_514_ = 514,                     /* '*'  */
  YYSYMBOL_515_ = 515,                     /* '/'  */
  YYSYMBOL_516_ = 516,                     /* '%'  */
  YYSYMBOL_517_ = 517,                     /* '^'  */
  YYSYMBOL_UMINUS = 518,                   /* UMINUS  */
  YYSYMBOL_519_ = 519,                     /* '['  */
  YYSYMBOL_520_ = 520,                     /* ']'  */
  YYSYMBOL_521_ = 521,                     /* '('  */
  YYSYMBOL_522_ = 522,                     /* ')'  */
  YYSYMBOL_523_ = 523,                     /* '.'  */
  YYSYMBOL_524_ = 524,                     /* ';'  */
  YYSYMBOL_525_ = 525,                     /* ','  */
  YYSYMBOL_526_ = 526,                     /* '|'  */
  YYSYMBOL_527_ = 527,                     /* '?'  */
  YYSYMBOL_528_ = 528,                     /* '{'  */
  YYSYMBOL_529_ = 529,                     /* '}'  */
  YYSYMBOL_530_ = 530,                     /* '&'  */
  YYSYMBOL_531_ = 531,                     /* '!'  */
  YYSYMBOL_532_ = 532,                     /* ':'  */
  YYSYMBOL_533_ = 533,                     /* '#'  */
  YYSYMBOL_534_ = 534,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 535,                 /* $accept  */
  YYSYMBOL_stmtblock = 536,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 537,                /* stmtmulti  */
  YYSYMBOL_stmt = 538,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 539,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 540,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 541,               /* SeqOptList  */
  YYSYMBOL_opt_with = 542,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 543,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 544,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 545,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 546,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 547,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 548, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 549,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 550, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 551, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 552,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 553,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 554, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 555,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 556,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 557,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 558,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 559,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 560,               /* DetachStmt  */
  YYSYMBOL_opt_database = 561,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 562,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 563,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 564,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 565,               /* opt_col_id  */
  YYSYMBOL_CopyStmt = 566,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 567,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 568,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 569, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 570,                /* opt_using  */
  YYSYMBOL_opt_as = 571,                   /* opt_as  */
  YYSYMBOL_opt_program = 572,              /* opt_program  */
  YYSYMBOL_copy_options = 573,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 574,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 575,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 576,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 577,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 578,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 579,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 580, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 581,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 582,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 583,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 584,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 585,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 586, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 587,       /* generic_option_arg  */
  YYSYMBOL_key_action = 588,               /* key_action  */
  YYSYMBOL_ColConstraint = 589,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 590,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 591,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 592,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 593,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 594,      /* generic_option_elem  */
  YYSYMBOL_key_update = 595,               /* key_update  */
  YYSYMBOL_key_actions = 596,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 597,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 598,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 599,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 600,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 601,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 602,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 603,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 604,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 605,                  /* OptWith  */
  YYSYMBOL_definition = 606,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 607,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 608,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 609,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 610,                /* columnDef  */
  YYSYMBOL_def_list = 611,                 /* def_list  */
  YYSYMBOL_index_name = 612,               /* index_name  */
  YYSYMBOL_TableElement = 613,             /* TableElement  */
  YYSYMBOL_def_elem = 614,                 /* def_elem  */
  YYSYMBOL_opt_definition = 615,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 616,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 617,               /* columnElem  */
  YYSYMBOL_opt_column_list = 618,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 619,              /* ColQualList  */
  YYSYMBOL_key_delete = 620,               /* key_delete  */
  YYSYMBOL_reloption_elem = 621,           /* reloption_elem  */
  YYSYMBOL_columnList = 622,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 623,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 624,                /* func_type  */
  YYSYMBOL_ConstraintElem = 625,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 626,         /* TableElementList  */
  YYSYMBOL_key_match = 627,                /* key_match  */
  YYSYMBOL_TableLikeClause = 628,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 629,                  /* OptTemp  */
  YYSYMBOL_generated_when = 630,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 631,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 632,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 633,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 634,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 635,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 636,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 637,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 638,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 639,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 640,         /* reserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 641,   /* pgq_unreserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 642,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateDatabaseStmt = 643,       /* CreateDatabaseStmt  */
  YYSYMBOL_opt_extension_name = 644,       /* opt_extension_name  */
  YYSYMBOL_CreateFunctionStmt = 645,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 646,              /* macro_alias  */
  YYSYMBOL_param_list = 647,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 648,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 649,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 650,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 651,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 652,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 653,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 654,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 655,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 656,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 657,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 658,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 659,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 660,             /* using_clause  */
  YYSYMBOL_DropStmt = 661,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 662,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 663,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 664,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 665,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 666, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 667,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 668,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 669,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 670,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 671,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 672,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 673,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 674,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 675, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 676,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 677,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 678,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 679,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 680,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 681,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 682,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 683,                /* IndexStmt  */
  YYSYMBOL_access_method = 684,            /* access_method  */
  YYSYMBOL_access_method_clause = 685,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 686,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 687,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 688,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 689,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 690,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 691,              /* insert_rest  */
  YYSYMBOL_insert_target = 692,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 693,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 694,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 695,       /* insert_column_item  */
  YYSYMBOL_set_clause = 696,               /* set_clause  */
  YYSYMBOL_opt_or_action = 697,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 698,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 699,               /* index_elem  */
  YYSYMBOL_returning_clause = 700,         /* returning_clause  */
  YYSYMBOL_override_kind = 701,            /* override_kind  */
  YYSYMBOL_set_target_list = 702,          /* set_target_list  */
  YYSYMBOL_opt_collate = 703,              /* opt_collate  */
  YYSYMBOL_opt_class = 704,                /* opt_class  */
  YYSYMBOL_insert_column_list = 705,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 706,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 707, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 708,             /* index_params  */
  YYSYMBOL_set_target = 709,               /* set_target  */
  YYSYMBOL_LoadStmt = 710,                 /* LoadStmt  */
  YYSYMBOL_file_name = 711,                /* file_name  */
  YYSYMBOL_PGQ_IDENT = 712,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 713,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 714,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 715,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 716,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 717, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 718,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 719,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 720,             /* KeyReference  */
  YYSYMBOL_LabelList = 721,                /* LabelList  */
  YYSYMBOL_Discriminator = 722,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 723,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 724,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 725,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 726,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 727,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 728,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 729,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 730,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 731,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 732,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 733,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableStmt = 734,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 735,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 736,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 737,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 738,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 739,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 740,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 741,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 742,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 743,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 744,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 745,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 746,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 747, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 748,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 749,                  /* CostNum  */
  YYSYMBOL_CostDefault = 750,              /* CostDefault  */
  YYSYMBOL_CostOptional = 751,             /* CostOptional  */
  YYSYMBOL_SubPath = 752,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 753,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 754,              /* PathElement  */
  YYSYMBOL_PathSequence = 755,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 756,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 757,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 758,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 759,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 760,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 761,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 762,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 763,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 764,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 765,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 766,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 767,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 768,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 769,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 770,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 771,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 772,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 773,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 774,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 775,               /* RenameStmt  */
  YYSYMBOL_opt_column = 776,               /* opt_column  */
  YYSYMBOL_SelectStmt = 777,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 778,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 779,         /* select_no_parens  */
  YYSYMBOL_select_clause = 780,            /* select_clause  */
  YYSYMBOL_opt_select = 781,               /* opt_select  */
  YYSYMBOL_simple_select = 782,            /* simple_select  */
  YYSYMBOL_with_clause = 783,              /* with_clause  */
  YYSYMBOL_cte_list = 784,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 785,        /* common_table_expr  */
  YYSYMBOL_into_clause = 786,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 787,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 788,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 789,          /* all_or_distinct  */
  YYSYMBOL_by_name = 790,                  /* by_name  */
  YYSYMBOL_distinct_clause = 791,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 792,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 793,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 794,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 795,              /* sort_clause  */
  YYSYMBOL_sortby_list = 796,              /* sortby_list  */
  YYSYMBOL_sortby = 797,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 798,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 799,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 800,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 801,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 802,             /* limit_clause  */
  YYSYMBOL_offset_clause = 803,            /* offset_clause  */
  YYSYMBOL_sample_count = 804,             /* sample_count  */
  YYSYMBOL_sample_clause = 805,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 806,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 807,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 808,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 809,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 810,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 811,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 812,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 813, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 814,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 815,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 816,            /* first_or_next  */
  YYSYMBOL_group_clause = 817,             /* group_clause  */
  YYSYMBOL_group_by_list = 818,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 819,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 820,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 821,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 822,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 823,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 824,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 825,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 826,            /* having_clause  */
  YYSYMBOL_qualify_clause = 827,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 828,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 829,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 830,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 831,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 832,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 833,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 834,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 835,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 836,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 837,              /* from_clause  */
  YYSYMBOL_from_list = 838,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 839,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 840,                /* table_ref  */
  YYSYMBOL_joined_table = 841,             /* joined_table  */
  YYSYMBOL_alias_clause = 842,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 843,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 844,        /* func_alias_clause  */
  YYSYMBOL_join_type = 845,                /* join_type  */
  YYSYMBOL_join_outer = 846,               /* join_outer  */
  YYSYMBOL_join_qual = 847,                /* join_qual  */
  YYSYMBOL_relation_expr = 848,            /* relation_expr  */
  YYSYMBOL_func_table = 849,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 850,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 851,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 852,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 853,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 854,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 855,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 856,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 857,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 858,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 859,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 860,             /* opt_Typename  */
  YYSYMBOL_Typename = 861,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 862,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 863,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 864,            /* ConstTypename  */
  YYSYMBOL_GenericType = 865,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 866,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 867,                  /* Numeric  */
  YYSYMBOL_opt_float = 868,                /* opt_float  */
  YYSYMBOL_Bit = 869,                      /* Bit  */
  YYSYMBOL_ConstBit = 870,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 871,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 872,         /* BitWithoutLength  */
  YYSYMBOL_Character = 873,                /* Character  */
  YYSYMBOL_ConstCharacter = 874,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 875,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 876,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 877,                /* character  */
  YYSYMBOL_opt_varying = 878,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 879,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 880,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 881,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 882,             /* year_keyword  */
  YYSYMBOL_month_keyword = 883,            /* month_keyword  */
  YYSYMBOL_day_keyword = 884,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 885,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 886,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 887,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 888,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 889,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 890,             /* opt_interval  */
  YYSYMBOL_a_expr = 891,                   /* a_expr  */
  YYSYMBOL_b_expr = 892,                   /* b_expr  */
  YYSYMBOL_c_expr = 893,                   /* c_expr  */
  YYSYMBOL_indirection_expr = 894,         /* indirection_expr  */
  YYSYMBOL_func_application = 895,         /* func_application  */
  YYSYMBOL_func_expr = 896,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 897,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 898, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 899,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 900,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 901,            /* filter_clause  */
  YYSYMBOL_export_clause = 902,            /* export_clause  */
  YYSYMBOL_window_clause = 903,            /* window_clause  */
  YYSYMBOL_window_definition_list = 904,   /* window_definition_list  */
  YYSYMBOL_window_definition = 905,        /* window_definition  */
  YYSYMBOL_over_clause = 906,              /* over_clause  */
  YYSYMBOL_window_specification = 907,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 908, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 909,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 910,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 911,             /* frame_extent  */
  YYSYMBOL_frame_bound = 912,              /* frame_bound  */
  YYSYMBOL_qualified_row = 913,            /* qualified_row  */
  YYSYMBOL_row = 914,                      /* row  */
  YYSYMBOL_dict_arg = 915,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 916,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 917, /* dict_arguments_opt_comma  */
  YYSYMBOL_sub_type = 918,                 /* sub_type  */
  YYSYMBOL_all_Op = 919,                   /* all_Op  */
  YYSYMBOL_MathOp = 920,                   /* MathOp  */
  YYSYMBOL_qual_Op = 921,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 922,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 923,              /* subquery_Op  */
  YYSYMBOL_any_operator = 924,             /* any_operator  */
  YYSYMBOL_expr_list = 925,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 926,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 927,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 928,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 929,            /* func_arg_expr  */
  YYSYMBOL_type_list = 930,                /* type_list  */
  YYSYMBOL_extract_list = 931,             /* extract_list  */
  YYSYMBOL_extract_arg = 932,              /* extract_arg  */
  YYSYMBOL_overlay_list = 933,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 934,          /* overlay_placing  */
  YYSYMBOL_position_list = 935,            /* position_list  */
  YYSYMBOL_substr_list = 936,              /* substr_list  */
  YYSYMBOL_substr_from = 937,              /* substr_from  */
  YYSYMBOL_substr_for = 938,               /* substr_for  */
  YYSYMBOL_trim_list = 939,                /* trim_list  */
  YYSYMBOL_in_expr = 940,                  /* in_expr  */
  YYSYMBOL_case_expr = 941,                /* case_expr  */
  YYSYMBOL_when_clause_list = 942,         /* when_clause_list  */
  YYSYMBOL_when_clause = 943,              /* when_clause  */
  YYSYMBOL_case_default = 944,             /* case_default  */
  YYSYMBOL_case_arg = 945,                 /* case_arg  */
  YYSYMBOL_columnref = 946,                /* columnref  */
  YYSYMBOL_indirection_el = 947,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 948,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 949,              /* indirection  */
  YYSYMBOL_opt_indirection = 950,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 951,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 952, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 953,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 954,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 955,                /* target_el  */
  YYSYMBOL_except_list = 956,              /* except_list  */
  YYSYMBOL_opt_except_list = 957,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 958,          /* replace_list_el  */
  YYSYMBOL_replace_list = 959,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 960,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 961,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 962,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 963,           /* qualified_name  */
  YYSYMBOL_name_list = 964,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 965,      /* name_list_opt_comma  */
  YYSYMBOL_name = 966,                     /* name  */
  YYSYMBOL_attr_name = 967,                /* attr_name  */
  YYSYMBOL_func_name = 968,                /* func_name  */
  YYSYMBOL_AexprConst = 969,               /* AexprConst  */
  YYSYMBOL_Iconst = 970,                   /* Iconst  */
  YYSYMBOL_Sconst = 971,                   /* Sconst  */
  YYSYMBOL_ColId = 972,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 973,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 974,       /* type_function_name  */
  YYSYMBOL_function_name_token = 975,      /* function_name_token  */
  YYSYMBOL_type_name_token = 976,          /* type_name_token  */
  YYSYMBOL_any_name = 977,                 /* any_name  */
  YYSYMBOL_attrs = 978,                    /* attrs  */
  YYSYMBOL_opt_name_list = 979,            /* opt_name_list  */
  YYSYMBOL_param_name = 980,               /* param_name  */
  YYSYMBOL_ColLabel = 981,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 982,         /* ColLabelOrString  */
  YYSYMBOL_named_param = 983,              /* named_param  */
  YYSYMBOL_TransactionStmt = 984,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 985,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 986,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 987,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 988,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 989,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 990,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 991,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 992,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 993,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 994,            /* generic_reset  */
  YYSYMBOL_reset_rest = 995,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 996,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 997,                 /* set_rest  */
  YYSYMBOL_generic_set = 998,              /* generic_set  */
  YYSYMBOL_var_value = 999,                /* var_value  */
  YYSYMBOL_zone_value = 1000,              /* zone_value  */
  YYSYMBOL_var_list = 1001,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1002,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1003,        /* show_or_describe  */
  YYSYMBOL_var_name = 1004,                /* var_name  */
  YYSYMBOL_table_id = 1005,                /* table_id  */
  YYSYMBOL_ViewStmt = 1006,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1007         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  777
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   67338

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  535
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  473
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2242
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3709

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   764


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   531,     2,   533,   534,   516,   530,     2,
     521,   522,   514,   512,   525,   513,   523,   515,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   532,   524,
     508,   510,   509,   527,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   519,     2,   520,   517,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   528,   526,   529,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   511,   518
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   541,   541,   557,   569,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   620,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    72,    81,    90,    97,    98,   103,   115,
     120,   145,   150,   155,   161,   171,   181,   187,   198,   209,
     224,   225,   231,   232,   237,   238,   244,   245,   249,   250,
     255,   257,   263,   264,   268,   269,   272,   273,   278,     7,
      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,
      15,    22,    28,    34,    41,    48,    59,     9,    19,    32,
      33,     7,    14,    31,    51,    52,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     2,     9,    15,    21,
      28,    35,    45,    46,    47,     2,    40,    41,    42,    50,
      64,    66,    70,    72,    76,    89,    92,    96,   100,   104,
     108,   109,   113,   122,   132,   146,   149,   153,   176,   177,
     182,   184,   188,   190,   194,   196,   201,   204,   208,   214,
     218,   220,   223,   232,   234,   238,   264,   268,   270,   274,
     276,   280,   280,   280,   284,   286,   288,   292,   294,   298,
     300,   302,   304,   306,   310,   312,   316,   328,   340,   352,
     364,   377,   391,   393,   398,   423,   425,   429,   431,   436,
     445,   454,   463,   473,   483,   485,   489,   491,   495,   506,
     515,   527,   536,   538,   542,   565,   567,   571,   573,   584,
     586,   597,   599,   610,   612,   621,   632,   640,   649,   653,
     655,   659,   661,   667,   669,   671,   675,   677,   681,   687,
     695,   697,   701,   712,   728,   755,   788,   789,   791,   799,
     814,   816,   818,   820,   822,   824,   826,   828,   830,   832,
     834,   836,   838,   840,   842,   845,   847,   849,   851,   853,
     855,   860,   865,   872,   877,   884,   889,   896,   901,   909,
     917,   925,   933,   951,   959,   967,   975,   983,   991,   999,
    1003,  1019,  1027,  1035,  1043,  1051,  1059,  1067,  1071,  1075,
    1079,  1083,  1091,  1099,  1107,  1115,  1135,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   115,   116,   117,   118,   119,   120,   125,   126,
     131,   132,   133,   138,   139,   140,   143,   144,     8,    20,
      33,    46,    58,    70,    86,    87,    91,    95,     7,     1,
      30,    53,    54,    59,    63,    68,    72,    80,    81,    85,
      86,    91,    92,    96,    97,   102,   103,   104,   105,   106,
     111,   119,   123,   128,   129,   134,   138,   143,   147,   151,
     155,   159,   163,   167,   171,   175,   179,   183,   187,   191,
     195,   199,   203,   211,   217,   218,   219,   224,   228,    47,
      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,
     116,   127,   128,   155,   160,   168,   184,   201,   218,   235,
     236,   255,   259,   263,   267,   284,   291,   298,   308,   309,
     312,   324,   335,   343,   348,   353,   358,   363,   371,   379,
     384,   389,   396,   397,   401,   402,   403,   407,   414,   415,
     419,   420,   424,   425,   426,   430,   431,   435,   436,   446,
     459,   460,   463,   472,   483,   484,   485,   488,   489,   490,
     494,   495,   496,   497,   501,   502,   506,   508,   524,   526,
     531,   534,   542,   546,   550,   554,   558,   562,   569,   574,
     581,   582,   586,   591,   595,   599,   607,   614,   615,   620,
     621,   625,   626,   631,   633,   635,   640,   660,   661,   663,
     668,   669,   673,   674,   677,   678,   703,   704,   709,   714,
     718,   719,   723,   724,   728,   729,   730,   731,   732,   736,
     749,   756,   763,   770,   771,   775,   776,   780,   781,   785,
     786,   790,   791,   795,   796,   800,   811,   812,   813,   814,
     818,   819,   824,   825,   826,   835,   841,   850,   851,   864,
     865,   869,   870,   874,   875,   881,   887,   895,   904,   912,
     921,   930,   934,   939,   965,   969,   982,   996,  1011,  1023,
    1036,  1052,  1058,  1063,  1069,  1076,  1077,  1085,  1089,  1093,
    1099,  1106,  1111,  1112,  1113,  1114,  1118,  1119,  1131,  1132,
    1137,  1144,  1151,  1158,  1190,  1201,  1214,  1219,  1220,  1223,
    1224,  1227,  1228,  1233,  1234,  1239,  1243,  1249,  1270,  1278,
    1291,  1294,  1298,  1298,  1301,  1302,  1304,  1309,  1316,  1321,
    1327,  1332,  1338,  1344,  1350,  1359,  1361,  1364,  1368,  1369,
    1370,  1371,  1372,  1373,  1378,  1398,  1399,  1400,  1401,  1412,
    1426,  1427,  1433,  1438,  1443,  1448,  1453,  1458,  1463,  1468,
    1474,  1480,  1486,  1493,  1515,  1524,  1528,  1536,  1540,  1548,
    1560,  1581,  1585,  1591,  1595,  1608,  1616,  1626,  1628,  1630,
    1632,  1634,  1636,  1641,  1642,  1649,  1658,  1666,  1675,  1686,
    1694,  1695,  1696,  1700,  1700,  1703,  1703,  1706,  1706,  1709,
    1709,  1712,  1712,  1715,  1715,  1718,  1718,  1721,  1721,  1724,
    1726,  1728,  1730,  1732,  1734,  1736,  1738,  1740,  1745,  1750,
    1756,  1763,  1768,  1774,  1780,  1811,  1813,  1815,  1823,  1838,
    1840,  1842,  1844,  1846,  1848,  1850,  1852,  1854,  1856,  1858,
    1860,  1862,  1864,  1866,  1869,  1871,  1873,  1876,  1878,  1880,
    1882,  1884,  1889,  1894,  1901,  1906,  1913,  1918,  1925,  1930,
    1938,  1946,  1954,  1962,  1980,  1988,  1996,  2004,  2012,  2020,
    2028,  2032,  2048,  2056,  2064,  2072,  2080,  2088,  2096,  2100,
    2104,  2108,  2112,  2120,  2128,  2136,  2144,  2164,  2186,  2197,
    2204,  2218,  2227,  2246,  2248,  2250,  2252,  2254,  2256,  2258,
    2260,  2262,  2264,  2266,  2268,  2270,  2272,  2274,  2276,  2278,
    2280,  2282,  2284,  2286,  2290,  2294,  2298,  2312,  2313,  2314,
    2321,  2333,  2337,  2341,  2345,  2348,  2359,  2364,  2366,  2377,
    2401,  2412,  2423,  2427,  2434,  2438,  2443,  2448,  2452,  2459,
    2467,  2475,  2486,  2494,  2522,  2558,  2569,  2570,  2577,  2583,
    2587,  2591,  2595,  2599,  2603,  2607,  2611,  2615,  2619,  2623,
    2627,  2631,  2635,  2639,  2643,  2645,  2647,  2651,  2660,  2665,
    2672,  2687,  2694,  2698,  2702,  2706,  2710,  2720,  2729,  2751,
    2752,  2756,  2757,  2758,  2762,  2763,  2770,  2771,  2775,  2776,
    2781,  2789,  2791,  2805,  2808,  2835,  2836,  2839,  2840,  2851,
    2857,  2864,  2873,  2890,  2935,  2943,  2951,  2959,  2967,  2988,
    2989,  2992,  2993,  2997,  3007,  3008,  3012,  3013,  3017,  3018,
    3019,  3022,  3023,  3026,  3027,  3028,  3029,  3030,  3031,  3032,
    3033,  3034,  3035,  3036,  3037,  3038,  3041,  3043,  3048,  3050,
    3055,  3057,  3059,  3061,  3063,  3065,  3067,  3069,  3083,  3085,
    3089,  3093,  3100,  3105,  3112,  3117,  3125,  3129,  3135,  3139,
    3148,  3159,  3160,  3164,  3168,  3175,  3176,  3177,  3178,  3179,
    3180,  3181,  3182,  3183,  3184,  3194,  3198,  3205,  3212,  3213,
    3229,  3233,  3238,  3242,  3257,  3262,  3266,  3269,  3272,  3273,
    3274,  3277,  3284,  3294,  3308,  3309,  3313,  3324,  3325,  3328,
    3329,  3332,  3336,  3343,  3347,  3355,  3366,  3367,  3371,  3372,
    3376,  3377,  3380,  3381,  3391,  3392,  3396,  3397,  3401,  3402,
    3405,  3421,  3429,  3437,  3452,  3470,  3471,  3474,  3475,  3478,
    3482,  3483,  3487,  3488,  3491,  3492,  3493,  3503,  3504,  3515,
    3519,  3547,  3549,  3555,  3556,  3559,  3561,  3571,  3574,  3585,
    3589,  3593,  3605,  3609,  3618,  3625,  3663,  3667,  3671,  3675,
    3679,  3683,  3687,  3693,  3694,  3710,  3711,  3712,  3713,  3716,
    3717,  3723,  3724,  3725,  3728,  3729,  3730,  3733,  3734,  3735,
    3738,  3739,  3742,  3744,  3749,  3750,  3753,  3761,  3762,  3763,
    3764,  3767,  3768,  3771,     7,    18,    19,    23,    24,    25,
      26,     7,    26,    54,    61,    66,    67,    68,    69,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     7,    16,    25,    34,    43,    52,     5,    12,
      22,    23,     7,    19,    33,     9,    16,    26,    33,    44,
      45,    50,    51,    52,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    90,    91,    92,    97,    98,   103,
     107,   115,   116,   121,   122,   123,   129,   134,   142,   143,
      10,    16,    22,    28,    38,    39,    47,    58,    70,    78,
      86,    93,   103,   105,   111,   115,   119,   134,   141,   142,
     143,   147,   148,     7,    14,    20,    28,    29,     8,    22,
      36,    48,    56,    70,    71,    72,    73,    74,    87,    88,
      93,    94,    98,    99,     7,    18,    31,    35,    42,    53,
      54,    60,    61,     9,    19,     7,    18,    25,    34,    35,
      39,    40,     2,     7,    15,    26,    27,    34,     3,    10,
      17,    24,    31,    38,    45,    52,    61,    61,    63,    64,
      68,    69,     6,     8,    21,    34,    47,    65,    87,    88,
      89,    90,    11,    24,    37,    54,    55,    56,    61,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW",
  "DOUBLE_ARROW", "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P",
  "ABSOLUTE_P", "ACCESS", "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER",
  "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE",
  "AND", "ANY", "ARE", "ARRAY", "AS", "ASC_P", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXPORT_STATE", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GRAPH",
  "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEEP", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE", "NONE", "NOT",
  "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P",
  "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON",
  "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PATH", "PATHS", "PERCENT", "PLACING", "PLANS", "POLICY",
  "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME",
  "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART",
  "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHORTEST",
  "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME",
  "SOURCE", "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT",
  "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT_P",
  "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE",
  "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
  "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
  "TIMESTAMP", "TO", "TRAIL", "TRAILING", "TRANSACTION", "TRANSFORM",
  "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USE_P",
  "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P",
  "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P",
  "VERTEX", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_unreserved_keyword", "pgq_col_name_keyword", "CreateDatabaseStmt",
  "opt_extension_name", "CreateFunctionStmt", "macro_alias", "param_list",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "CreateSeqStmt",
  "OptSeqOptList", "CreateTypeStmt", "opt_enum_val_list", "enum_val_list",
  "DeallocateStmt", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "ExecuteStmt", "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_or_action", "opt_on_conflict",
  "index_elem", "returning_clause", "override_kind", "set_target_list",
  "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "LoadStmt",
  "file_name", "PGQ_IDENT", "DropPropertyGraphStmt", "VertexOrNode",
  "EdgeOrRelationship", "CreatePropertyGraphStmt",
  "VertexTableDefinitionList", "KeySpecification", "KeyDefinition",
  "KeyReference", "LabelList", "Discriminator", "VertexTableDefinition",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "AreOptional",
  "IdentOptionalAs", "QualifiednameOptionalAs", "PropertiesList",
  "ExceptOptional", "PropertiesSpec", "PropertiesClause",
  "GraphTableWhereOptional", "GraphTableStmt", "ColumnSpec", "ColumnList",
  "KeepOptional", "PathOrPathsOptional", "GroupOrGroupsOptional",
  "PathVariableOptional", "PathModeOptional", "TopKOptional", "PathPrefix",
  "PathPatternList", "PathPattern", "PatternUnion",
  "KleeneQuantifierOptional", "KleeneOptional", "CostNum", "CostDefault",
  "CostOptional", "SubPath", "EnclosedSubPath", "PathElement",
  "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "with_clause", "cte_list",
  "common_table_expr", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list_opt_comma",
  "target_list", "target_list_opt_comma", "target_el", "except_list",
  "opt_except_list", "replace_list_el", "replace_list",
  "replace_list_opt_comma", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name_list_opt_comma", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "TransactionStmt",
  "opt_transaction", "UpdateStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "var_name", "table_id",
  "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3223)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2096)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7418,   -32,   872, -3223, -3223,   315,   -32, 43433, 58995,   -32,
     102,  1009, 46445, -3223,   356, 66851,   -32, 49457,  5765,   410,
     290, 26996,   531, 49959, 49959, 58995, 49457, 50461,   -32,   334,
   59497, -3223,   -32, 30008, 46947,   404, 49457,    79,   284, 50963,
   49457, 33021,   668,   363, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223,   463, -3223, -3223, -3223,
   -3223,   143, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
     150, -3223,   847,   164,   854,   329, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, 29506, -3223, -3223, -3223, -3223, 51465,
   49457, 51967, 47449, 52469, -3223,   977, -3223,   198, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223,   203, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223,   232, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223,   233, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,   234,
   -3223, -3223, -3223, -3223,   577,   -61, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223,  1755, 49457, -3223, 52971,
     606,   698,   811,  1003, 53473, -3223, -3223, 49457, -3223, -3223,
     855,  1072,  1000, -3223, -3223, -3223, 47951, -3223, -3223, -3223,
    1040,  1216,   984, -3223, -3223, -3223,   812, -3223,   159, -3223,
   -3223,   878,   794, -3223,  1145, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223,   970, -3223, 64000, -3223, 59999, 53975, 54477, -3223,
     842,  1866, 66864, 40905, 29004, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223,   463, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, 49959, 58995, 49959,
     853,   887,  1310,   235,   239,   240,   244,   975,   980,   245,
     991,  1020, 27498,  1028,  1041,  1046, 30511,  1051,  1092,  1217,
     246,  1157,  1163,  1169,  1188,   247,   284, 26493, 54979, 54979,
     -27,   979, -3223, 54979, 55481, -3223,   998, -3223,   976,   -61,
   -3223,   977, -3223, -3223, -3223, -3223,   358,  1198, -3223,  1096,
    1306, -3223, -3223, -3223,  1117, -3223, -3223,  1427, 12730, 12730,
   60501, 60501,   977, 60501,  1227, -3223, -3223,    86, -3223,  1755,
   -3223,   854, -3223,  1210, -3223,   -61, -3223, 46947, -3223, -3223,
     266,  1563, 18050, 49457,  1239, -3223,  1221,  1239, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,   284,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223,  1245,  1250,  1256, -3223,  7418, -3223,
   49457,  1608,  1503, 46947,   403,   403,  1749,   403,   699,  1124,
   -3223,  1937, -3223,  1302, -3223,  1343,  1601, -3223,  1210,  1704,
    1338,  1509,  1723,  5739,  1732,  1532,  1753,  1583,  1886,  9538,
   18050, 41927, -3223,   -61,  1432,  1438,  1679,  1787, -3223, -3223,
   -3223, -3223,  1036, 49457,  1692, -3223,  1938, -3223, -3223,  1510,
   55983, 56485, 56987, 57489, 49457,  1903, -3223, -3223,  1836, -3223,
   -3223, -3223,  1514, -3223, -3223, -3223, 49457,   185, -3223, -3223,
   -3223, -3223,  1535, -3223,  1535,  1535, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223,  1488,  1488,  1687,  1492, -3223,
   -3223, -3223,  1872, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223,  1519,  1213, -3223,  1535, -3223,  1488, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, 66450, -3223, -3223, -3223,
   -3223,   466,   705, -3223,  1528, -3223, -3223, -3223, -3223, -3223,
     136,  1531, -3223,  1992, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223,  1533, -3223,  2804,  1488,  1900,   191,  1536, -3223,
    1914,   269, -3223,  1928,  1790, 18050, -3223,  1731, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223,   284, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,   769, -3223,
   -3223, 38693, 40905,  1581,  1672, -3223, -3223, 18050, 18050,  1589,
    2105,  2105,  3929, 65948, -3223, 54979, 55481,  2105,  2105, 18050,
   49457, -3223, 18050, 22838,  1602, 18050, 18050, 10602, 18050, 25991,
   54979,   979,  1603, 49457, -3223,  1698,  1605,  1698,   334, 26996,
    1902,  1898,  1823, -3223, 26996,  1823,   791,  1901,  1823,  1904,
    1698, 31013, -3223,  1698,  1612,  1834, -3223, -3223,  1047, -3223,
   38693, 18582, 64487,  2102, -3223,  1906, 58995,  1623, -3223, -3223,
   -3223, -3223, -3223, -3223,   738,  2141,   187,  2144, 18050,   187,
     187,  1633,   250,   250, -3223,  1636, -3223,   252,  1638,  1645,
    2146,  2164,   186,  1213,   187, 18050, -3223,   250,  1649,  2167,
    1652,  2169,   177,   182, -3223,   253, 18050, 18050, 18050,  2022,
   18050, 10070, -3223, 49457,  2171,  2173,   -61,  1657,   977, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223,   219,  5912, -3223,
   -3223,  1699, -3223, -3223, -3223, -3223,  1878, 18050, -3223, -3223,
    1662,  1902, -3223,   260, -3223, -3223, -3223,   546,  1902, -3223,
   -3223, -3223, -3223, -3223,   317,  2081, 37689, 38191, 58995,   -61,
   -3223, 61003, -3223, -3223, -3223, -3223, -3223, -3223,   913, -3223,
     463, 40037,  1663,  1667,   -61,  1239, 49457, 49457,  2154,  1939,
   -3223, -3223, -3223,  1221, 46947,   199,  1970,  1806, -3223, -3223,
     854,   854, 11666,   587,   674,    99, 13262, 19114,  2031,  1909,
     820,   858,  2034, -3223,  1922,   699,  1124, 18050, -3223,  1964,
   49457, 44939,  1034,  1059,  1694,  1781,  1700,    46,  2129, -3223,
    1695, -3223,  1797, 49457, 66450,   273, -3223,  2175,   273,   273,
     772,  2178,  1802,   368,  1953,   620,   670,  3199, -3223,  1695,
   46947,   312,   684,  1695, 49457,  1807,   807,  1695, 58995,  1581,
     152, 18582,  1407,  1429,   383,   267,  1593,  1613,   166,   171,
     176,   183,   197, 18582,  1644,  1684,   200,  1798,  1804,  1827,
    1852,  1859,  1874,  1929,  1936,   202,  1986,  1994,  2009,  2020,
    2025,  2029,   207,  2042,   218,  2056,   276,   222, 18582,  2064,
    1717, -3223,   229, -3223, 40037,     9, -3223, -3223,  2069, 35388,
    1725, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223,  1820, 58995,  1775,  2103,   977, 49457,   983,    62,
    2104,  2168, 64974, 49457,  1982,  3199,  1984,  2227,  1750,  1990,
    1438,  1991,  1754, -3223, -3223, 61505,  2271, -3223,   212, -3223,
   -3223, -3223, -3223, -3223,  1756, -3223, -3223, 18050, -3223, -3223,
   -3223,  2105, -3223, 64487, 64487,  1535,  1535, -3223, -3223,  2239,
    1846,  1847,  2105, -3223,  2105, -3223, 58995, -3223, -3223, 64487,
   -3223, 58995,  1765,  1766,  2105, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223,  2105,  1854, -3223,  1855,  1873,  1875, -3223, -3223, -3223,
   -3223, -3223, 58995, 58995, -3223, 41927,  1764, 49457, 49457, -3223,
   49457, 58995,  1785,  1087, 40905, 44437, -3223, -3223, -3223, -3223,
    1193,  1231, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, 41927, -3223,  2333,   977, 39295,  1792, 18050,  1794,  1795,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,  1799,
    2127, -3223, -3223, -3223, -3223,  1805,  1808,  7519,  1811, 39335,
    1812, 22838, 22838,   844, -3223, -3223, 22838,  1816, 42931, 39205,
    1801,  1817, 39348, 13794, 18050, 13794, 13794, 39590, -3223,  1818,
   39865, 54979,  1822, 48453, -3223, -3223, 49457, -3223, 12730, 12730,
     979, 48955,  1840, 26996, -3223, -3223,  1821, -3223, 26996,  2098,
   26996, -3223, 26996, -3223, 49457,  1824, -3223, 49457, -3223, -3223,
   -3223, -3223,  1819,   988, -3223,   999,   864, -3223, -3223, 18050,
   18050, -3223, 40037,  1862,   181, -3223,  7779, 34029, 14326,  7779,
    2331,  2331, 31515, -3223,  1987, 39896, -3223,  1826,  1385,  7659,
    1825, -3223,  1829,  1828,  1830, -3223, -3223, -3223,   -61, 18050,
   -3223, 18050,  3556,  3556, -3223,   293, 64487, 18050, 18050, 18050,
   18050, 18050, 18050, 18050, 41425,  1915,   291, 58995, 18050, 18050,
    1838,  1399, -3223, 18050,  2062, -3223,  1839, 18050,  1916,   914,
   18050, 18050, 18050, 18050, 18050, 18050, 18050, 18050, 18050, -3223,
   -3223, 24966,   343,   -61,  2165,  2188,   -21,  1014, 12730,  2185,
    9538, -3223,   -61, 36183,   194,  2185, -3223, -3223, -3223, -3223,
     261, -3223, -3223, -3223, -3223,  1819, -3223,  1819, -3223, 58995,
   -3223, 49457,   266, 45943, 18050, -3223, -3223,  1841,  1842,  1844,
   65948, -3223,  1908, -3223, -3223, 49457, 32017,  2151, -3223,   385,
     385,  1856, -3223, 39192,  2110,  2151,   854, -3223, -3223, 23370,
    1993,  2150,  2088, -3223, -3223,  2070,  2072, -3223,  1865, 40237,
   19646, 19646, -3223,  1101, 40037,  1724, -3223, -3223, -3223, -3223,
   -3223, -3223,   857, -3223, 49457,    71,  2031,   858,  1880, -3223,
    1628,  1877, 62007, 49457,  2163,  2115,  2170,   -56, -3223, -3223,
   -3223, 64487, -3223, 49457, 58995, 57991, 62509, 42429, 49457, 41927,
   -3223, -3223, -3223, -3223, 49457,  1090, 49457,  8498, -3223, -3223,
   -3223,   273, -3223, -3223, -3223, -3223, -3223, 58995, 49457, -3223,
   -3223,   273, 58995, 49457,   273, -3223,  1629, 49457, 49457, 49457,
   49457,  1703, 49457, 49457, -3223, -3223,    24,    24,  2097, -3223,
   14858,   161, -3223, 18050, 18050, -3223, 18050,  2067, -3223,  1011,
   -3223,  2117,   131, 49457, -3223,  2238,  1941, 49457, 49457, 49457,
   -3223, -3223,  1997, 49457,  2213, -3223, -3223, -3223, -3223, -3223,
    1895, -3223,  1896,  2262,  3199, -3223,  2267,   744, 45441,   839,
    2268,  1950,  2280, 15390,  2400,  2160, -3223,  2147, -3223, -3223,
   -3223, 18050,  1923,  1924,   136,  1023, -3223, -3223,  1930,  1766,
    1943,  1944,  1932,  1933,  1054, 64487, -3223,  1073,  2105,   158,
    1935,  1940,  1831,  1597,   893,  1722,   191, -3223, -3223, 41927,
     269, -3223,  2153,   212, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223,  1079, 28502, -3223, -3223,  2411,   977,  2411,   824,
   -3223, -3223,  2411, -3223,  2394,  2411, -3223,  1581, 64487, -3223,
    8331, -3223, -3223, -3223, 18050, -3223, -3223, 18050, -3223, 18050,
    2283, -3223,  2450,  2450, 64487, 22838, 22838, 22838, 22838, 22838,
     726,  1649, 22838, 22838, 22838, 22838, 22838, 22838, 22838, 22838,
   22838, 23902,   377, -3223, -3223,  1116,  2423, 18050, 18050,  2293,
    2283, 18050, -3223, 64487,  1945, -3223,  1946,  1947, 18050, -3223,
   64487, -3223, 49457,    -5,    35,  1949,  1954, -3223, -3223,  1952,
    1902, -3223,  1190,  1274, 49457,  3924,  4078,  4658, -3223, -3223,
   18050,  2289, -3223, 18050,  1957, -3223, -3223, 26996, -3223,  1821,
    1128, -3223, 64487, 49457,  1151, 64487, 38693, -3223, 18582, -3223,
   64487, -3223, -3223, -3223, -3223, -3223,  1958,  1961, 18050,   160,
   -3223,  2022,  1960, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,  1962,  1965,
   -3223,  1963, 49457, -3223, 20178, -3223, 58995, -3223, -3223, 18050,
   49457, -3223, 18050,  1968,  8451, -3223, -3223, -3223,  1232, 40557,
    1014,  5156,  5156,  5156,  7779, -3223, -3223, -3223,  1983, -3223,
   22838, 22838, -3223,  6168,  1894, 10070, -3223, -3223,  2315, -3223,
    1630, -3223,  1973, -3223, -3223,  2608, -3223, 34029,  4808, 18050,
     299, -3223, 18050,  1838, 18050,  2063,  5156,  5156,  5156,   304,
     304,   214,   214,   214,  1232,  1014, -3223, -3223, -3223,  1979,
   -3223,  1980,  1981,  2343,  1652, 18050, -3223, -3223, 26996,  1840,
       9,  2022,  1840,  2105,  3556, -3223,  1221, -3223, -3223, -3223,
   40037, 49457, -3223,   864,  1996,   400,    73, -3223, 26996,  2024,
    1776,  2467, 58995, -3223,  1985,  2185,  2003, -3223, -3223, -3223,
    2008,  2008, 18050,  1154,  2008, -3223,  2151,    -4,  2219,  1316,
    1316,  1101,  2220, -3223, -3223,  2065, -3223, -3223, -3223, 18050,
   11134,  1738, -3223,  1743, -3223, -3223, -3223, -3223,  1999, -3223,
   -3223,  2269, -3223, -3223, -3223, -3223,  2092,  1695, 18050,  2246,
   -3223,   175,  2011,  2372,   -51,  2322, 58995, -3223,   346,   472,
   -3223,   196,  2377,   212,  2378,   212, 41927, 41927, 41927,  1152,
   -3223, -3223,   977, -3223, -3223,  1158, -3223,   493, -3223, -3223,
   -3223,  2101,   939,  3199,  1695, -3223, -3223, -3223, -3223, -3223,
   -3223, -3223,   324,  1021,  1695,  2106, -3223,  2108, -3223,  2109,
    1172,  1695, -3223, -3223,   161,   161,   161, 18582, -3223,  2248,
    2249,  2023, 40037, 40037, 40037,  2032, -3223,   204, -3223, 58995,
   -3223, -3223, -3223,  2067,  2373,   977, 49457,  2511,  2033,  1438,
    1754,  2037, -3223,  2195,  1326,   255, -3223, 58995, 49457, 49457,
   49457,  2076, 49457, -3223, -3223, -3223,  2039,  2028, -3223, 63513,
      -2,  2270,  2265, 49457,  1700,  2524, 49457, -3223,  1160, 15922,
    2409, 49457,  2045, -3223, -3223, -3223, -3223,  2105, -3223, -3223,
     -40,   -40, -3223, 58995, -3223, -3223,  2048, -3223,  2053, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223, 58995, -3223, -3223, 41927, -3223, 43935, -3223, -3223, -3223,
   -3223,   977, -3223,   977,  2287, 58995, 36685,   977, 37187,   977,
   -3223,  2057, -3223, 40037, 34539, 40037,  2293, -3223,  2450,   828,
     828,   828,  1737,  2399,   211,  2059,   828,   828,   828,   440,
     440,   281,   281,   281,  2450,   377,   998, 42931,  2073, -3223,
   40037, 40037, -3223, -3223,  2074, -3223, -3223, -3223, -3223,  2078,
    2080, -3223, -3223, -3223, -3223, -3223, 58995,  1369, -3223,  1840,
     404,   404,   404,   404, -3223, 49457, 49457, 49457, 40037,  2520,
    2403, 40037, 49457, -3223, -3223, -3223, 49457,  2521,  1181, -3223,
   -3223, -3223, -3223, -3223, 39944, 18050, -3223,  2455,  1987, -3223,
   -3223, 34029, -3223,  2082, 10070, 39989, -3223,  2401, 34570, -3223,
   40037, -3223,  3556, 18050,  1863,  2806, 18050,  2083, 18050,  2431,
   -3223, -3223,  2087, -3223, -3223, 64487, 18050,  2089,  3532, 22838,
   22838,  4600, -3223,  5176, 18050, 10070, -3223,  2097, 16454, -3223,
    2302,  2085, -3223,  2289,   161,  1987,  2289,  2091, -3223, -3223,
    2095, -3223,   835,   210,  2605,   287,   400, 65948,  2145, -3223,
   18050,  2258,  2166,   -11, 30008,  2330, -3223, 58995,  1192, -3223,
   32017,  2024, 18050,   -61,   664, -3223, -3223, -3223,  2113, -3223,
    2008, -3223, -3223, -3223,  2332, -3223, -3223, -3223, 49457, -3223,
   49457, 34615,  2481, -3223, 58995, 58995, 58995, -3223, 58995,  2120,
    2118,  1010,  2121,   362, -3223,  1876,  1010,  2466,   321,  1700,
     368,  3950,   683, -3223, -3223, -3223,  2200, 49457, -3223, 58995,
   -3223, -3223, -3223, -3223, -3223, 42429, -3223, -3223, -3223, 41927,
   33526, 41927, 49457, 49457, 49457, 49457, 49457, 49457, 49457, 49457,
   49457, 49457,  2128,  2132,  2133,  2097, -3223, -3223, -3223, -3223,
   -3223, -3223,   670, -3223, -3223,   204,   977, -3223,  2130,  1755,
   45441,  1950,  2616, 49457,  2168,  1087, 58493,  2135,  2134, -3223,
    1196,  3199,  2618,  2140,   842,   264, -3223, -3223,   839, 45441,
   -3223, -3223, -3223,  2579, -3223,  1438, -3223,  1755,  1754, -3223,
    1755, 40037, 58995,  2203, -3223,  1766,  2148, -3223, -3223,  1766,
   64487,  1766, -3223, -3223,   212, -3223,  1218, -3223, -3223, -3223,
   -3223, 58995,  2149, -3223,  2149, -3223, -3223,  2149, -3223, -3223,
   -3223, -3223, 22838,  2489,  2152, 64487, -3223, -3223, 49457, -3223,
   -3223, -3223,  1222,  2156,  2289, 49457, 49457, 49457, 49457, -3223,
   -3223, -3223, 12198, 18050,  2189,  2157, -3223, 58995, -3223, -3223,
   18050, 40037, -3223,  2159, -3223, -3223,  6518, -3223,  2158,  2162,
   58995, 18050, -3223, -3223,   966, 18050, 18050,  6168, -3223, 40684,
   18050, 64487,  1224,  6168,   381, 18050,  2851,  3187, 18050, 18050,
    5891, 34665,  2172, 18050, 34696, 32519, -3223, 26996,  2403,  2174,
   -3223,  2403,   977, -3223,  1800, -3223, -3223,   825,  1800,  1800,
    1800, -3223, -3223, -3223,   825,   825,   825, -3223,   157,   -90,
   65948, 65948,   287,   287,  2187, -3223, -3223, 65948,   992, -3223,
   -3223, -3223, -3223, 22306,  2590, 40037, 12730, -3223, -3223, -3223,
   -3223,  2206, -3223,  1229, -3223,  2587,  2258, -3223,  2176, 58995,
   -3223,  2258, 40037, -3223, -3223, 34029, -3223, -3223, -3223, -3223,
   -3223, 58995,  2182, -3223,  2192,  1010, -3223, 58995,  2208, -3223,
     682,  2482,   295, -3223, 18050, -3223,  2574,  2657,  1876,  2177,
   58995, 49457, 22838, -3223,   885,   223, -3223,  2478, 49457,  2208,
    2615, -3223, -3223, -3223,   362, -3223,  2518,  2430, -3223,   273,
   -3223, 18050,   362,  2434,   163, 58995, -3223, -3223,  2125, -3223,
   64487,   212,   212, -3223, -3223,  2199,  2201,  2202,  2204,  2205,
    2207,  2209,  2210,  2212,  2215,  2218,  2222,  2225,  2226, -3223,
    2228,  2229,  2230,  2232,  2233,  2236,  2237,  2241,  1519,  2242,
   -3223,  2243,  2113,  2244,  2245,  2250,  2251,  2252, 65461,  2253,
    2254,  2256,  2257,  1528,  2259,  2260,  1193,  1231, -3223, -3223,
   -3223,  2261, -3223, -3223, -3223, -3223,  1536,  2216, -3223, -3223,
    2294, -3223,  2301, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
   -3223,   161,  1581,   322, -3223, 58995,  2076,  2196,  2702, 16986,
    2247,   537,  2703,   589,  2479,  2266, -3223,   977,  1950, -3223,
    1031, 45441,  2076, -3223,  2660,   271,  2265, -3223,   205,  1950,
    2298,  2745, -3223,  2491, 58995,  2272, -3223, -3223, -3223, -3223,
   43935,  2149,  4380, 22838, 64487,  1236,  1238, -3223,  2777,  2433,
    2403, -3223, -3223, -3223, -3223, -3223,  2273,   459,  2274, -3223,
    9006,  2275, -3223, -3223, -3223, -3223, -3223, -3223, 40037, 40037,
   58995,  2448, -3223, -3223, 40037, -3223, 18050, -3223, -3223, 35525,
    2601,  6168,  6168, 40684,  1255, -3223,  6168, 18050, 18050,  6168,
    6168, 18050, -3223, -3223, 34940, -3223, 63011, -3223, -3223,  2189,
     977,  2189, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,
    1592,   318, -3223, -3223, -3223,   825,  2281, -3223,    60,  2282,
   -3223, -3223,  2290,   287,  2285, -3223, -3223, -3223,  2797, -3223,
   22306, 22306, 22306, 22306, 40282, -3223,  2499,  2291,  2286,  1755,
    1461, 58995,   -61,   -26, -3223, 18050, -3223, -3223,  2288,  1010,
   -3223,  2464,  2208,  2297, -3223, -3223, -3223, -3223, -3223, -3223,
   34988, -3223,    76, 18050, -3223,  1032,  1737, -3223, -3223, -3223,
   -3223,  2208,  1438, -3223, 49457,  2779,  2663, -3223, -3223, 40037,
   -3223, -3223,  2105,  2105, -3223, -3223,  2521, -3223, -3223, -3223,
   -3223,  1536,   659, 33526, 49457, 49457,  2305, -3223, -3223,   670,
    2705,  1279, -3223,   839,  1755,  1755, 40037, 49457,  2306,  2490,
     145,  2599, 65948, 49457,  2677, 45441, -3223,  2795, 49457,  2076,
    2314, -3223, -3223,  1523,  1523, -3223,  2463, -3223,  2465,  2798,
     300, -3223, 17518, 49457, -3223, -3223, 28000, -3223,  4380,  1281,
   -3223, -3223,  2318,  2323, -3223,  2189, 18050,  2324, 18050, -3223,
   20710,  2321, -3223,  2803, 18050,  2388, -3223, -3223, 18050, -3223,
    6168,  6168,  6168, -3223,  2537, -3223,  2448, -3223,  2448, -3223,
   -3223, -3223, -3223,   287,   992, -3223, -3223,  2145, 25480, -3223,
    2328, -3223,   217, -3223,  2340, 40653, 40653,  2844,  2844, 64487,
   22306, 22306, 22306, 22306, 22306, 22306, 22306,  2435,   311, 58995,
   22306, 22306,  1838,  1572, -3223, 22306,  2580, -3223, 22306,  2437,
     189, 22306, 22306, 22306, 22306, 22306, 22306, 22306, 22306, 22306,
   22306,   -21, 12730, 12730, -3223,   -11, -3223, -3223,  2783, 28000,
    2738, 40037, -3223, 49457, -3223, 41927, -3223,  1010,   -30,  2354,
   18050, 35140,  2589, -3223, -3223,  2620, -3223,  2681, -3223,  2418,
     781,  2436, -3223, -3223, -3223, -3223,  1581,   977,  1950,  2265,
    2298, -3223,  2247,   195, -3223, -3223, 65948,  2850, -3223, 65948,
   -3223,  2364, 49457,  1755,   842, -3223,   839, -3223, -3223, -3223,
   -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223,  1755,
    2815,  2588,  2818,  1755, 40037,  2203, 18050, -3223,  1291,  2814,
     225, -3223, -3223,  2883,  2448,  2371, 20710,  2374, -3223, 58995,
    2379, 40037,  2522, -3223, 35683,  2836,  2097,  2388,  2388,  2145,
   -3223,  2805, 25480, 25480, -3223, -3223, -3223,  2393,   992,  2797,
   -3223,  1377, 40588,  1119,  5478,  5478,  5478, 40653,  2402, 22838,
   22838, -3223,  7673,  5965, -3223,  2727, -3223,  1696, -3223,  2383,
   -3223, -3223,  6614, -3223, 40633, 22306,   330, 22306,  1838, 22306,
    2470,  5478,  5478,  5478,   448,   448,   323,   323,   323,  1377,
    1119, -3223, -3223,  1371, -3223,  2442, 49457,  1376,    57,  1438,
    1010,  1378, -3223,  2404, -3223, -3223, -3223, -3223,  3199, -3223,
   35232,  2630,   231,  2614,  2354, 18050, -3223,  2472, -3223, -3223,
   -3223,  2872, -3223, -3223, -3223, -3223, -3223,  2488,  2881, -3223,
    1390,  2842,  2718, 45441,  2405,  2298,  2076,  2265,  2298,  2624,
   -3223,  2628, -3223,  2416, 35280,  1950, 28000, 58995, 58995, 58995,
    2408,  2388, -3223,  2417, -3223, -3223, -3223, 48453, -3223, 18050,
     648, -3223, -3223,  2805, 22838, -3223,  2424,   555, -3223, -3223,
    2420, 22306,  3393,  3627, 22306, 22306,  2764, -3223, -3223,  2429,
   -3223, -3223, 64487, 22306,  8313, 22838, 22838, 34584, -3223, 35631,
   22306,  2439, 12730,  1755, -3223,  1840, -3223,  2553,  2620, -3223,
   41927, 33526,   969,   -30,  2741, -3223, -3223, -3223, -3223,   184,
    2655, -3223,  2656, -3223, 40037, -3223,  1755,  2438, 65948, -3223,
   65948,  2811, 49457, -3223, 45441, -3223, -3223, -3223, -3223, -3223,
   -3223, 28000,  2814,  1840, -3223, -3223,   385, -3223,   385, -3223,
   -3223, -3223, -3223,  1801, 21242, 21242,  2443, -3223,  2193, -3223,
   25480, 25480, -3223,   973, 22306, 22306,  7673, 40928, 22306, 64487,
    1396,  7673, 22306,  3766,  4896, 22306, 22306, 40605, 49457, -3223,
   -3223, -3223, 32017,  2614, -3223, -3223, -3223, -3223, -3223,   747,
     747,  2831, -3223,  2506, -3223,  2298, 49457, -3223, -3223,  2446,
   -3223,  2447,  1398, 58995, -3223,  2008,  2008, 24434,  2596,   335,
   39245, -3223, -3223, -3223, -3223,  1392, -3223, -3223,  2444, -3223,
    2441,  7673,  7673, 40928,  1410, -3223,  7673, 22306, 22306,  7673,
    7673, 22306, -3223,  1840, -3223, -3223,  2949, -3223,   285, -3223,
   -3223, -3223,  2451,  2571, 65948, 65948,  1950,   385, -3223, -3223,
    2941, -3223, -3223, -3223, -3223, -3223, -3223, -3223, -3223, 25480,
   25480, -3223,  7673,  7673,  7673, -3223,  1010, -3223, -3223, -3223,
   49457,  2456,  2746,  1426, -3223,  1433,  1840,  2008, 21774, -3223,
   -3223,  2451, -3223,  2459,  2631, 49457, -3223, -3223, 65948, -3223,
   -3223, -3223, -3223, 49457, -3223, -3223,  2459, -3223,  1445,  2853,
   -3223,  2746, 49457,  2459,   537,  2747, 65948,  2718, -3223
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     137,   234,     0,  1442,  1441,  1509,   234,     0,  1391,   234,
     636,   553,     0,  1527,  1509,     0,   234,     0,   137,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   234,   711,
       0,  1526,   234,     0,     0,   703,     0,  1489,     0,     0,
       0,     0,     0,     2,     4,     5,     6,     7,     8,     9,
      23,    10,    11,    12,    19,    13,    14,    15,    17,    18,
      20,    21,    22,    25,    26,    27,  1400,    28,    30,    31,
      32,     0,    33,    24,    16,    29,    34,    35,    36,    37,
     672,   659,   716,   671,   136,   817,   679,    38,    39,    40,
      41,    42,    43,    44,  1525,    45,   233,   232,   226,     0,
       0,     0,     0,     0,  1508,     0,   227,  1325,  1549,  1550,
    1551,  1552,  2169,  1553,  1554,  1555,  1556,  1557,  1558,  1559,
    2170,  1560,  1561,  1562,  1563,  1564,  1908,  1565,  1566,  1567,
    1854,  1855,  1909,  1856,  1857,  1568,  1569,  1570,  1571,  1572,
    1573,  1574,  1575,  1858,  1859,  1576,  1577,  1578,  1579,  1580,
    1860,  1910,  1861,  1581,  1582,  1583,  1584,  1585,  1911,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,  1593,  2171,  1912,  1594,
    1595,  1596,  1913,  1914,  1915,  1916,  1917,  1597,  1598,  1599,
    1600,  1601,  1602,  1603,  1862,  1863,  1604,  1605,  1606,  1607,
    1608,  1609,  1610,  1611,  1612,  2172,  1613,  1614,  1615,  1616,
    1617,  1618,  1619,  1620,  1621,  2173,  2174,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,  1629,  1630,  1631,  1864,  1632,  1633,
    1634,  1635,  1636,  1865,  1637,  1638,  1639,  1866,  1640,  1641,
    1642,  1918,  1919,  1643,  1644,  1867,  1921,  1645,  1646,  2175,
    1868,  1869,  2176,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,  1922,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,
    1663,  1664,  1665,  1923,  1870,  1666,  1667,  1668,  1669,  1670,
    1871,  1872,  1873,  1671,  1924,  1925,  1672,  1926,  1673,  2177,
    1674,  1675,  1676,  1677,  1678,  1679,  1927,  1680,  1928,  1681,
    1682,  1683,  1684,  1685,  1686,  1687,  1688,  1874,  1689,  1690,
    1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,
    1701,  1702,  1703,  1704,  1705,  1706,  1875,  1930,  1876,  1707,
    1708,  1709,  2178,  1877,  1710,  1711,  1931,  1712,  1878,  1713,
    1879,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1880,  1932,  1723,  1933,  1881,  1724,  1725,  1726,  1727,  1728,
    1729,  1730,  1731,  1732,  2179,  2180,  1733,  1734,  1735,  1882,
    1934,  1736,  1737,  1883,  1738,  1739,  1740,  1741,  1742,  1743,
    1744,  1745,  2181,  2182,  1746,  1747,  1748,  1749,  1884,  1750,
    1751,  1752,  1753,  1754,  1755,  1756,  2183,  1757,  1758,  1759,
    1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1935,
    1769,  1770,  1771,  1885,  1772,  1773,  1774,  1775,  1776,  1777,
    1778,  1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,
    1936,  1788,  1886,  1789,  1790,  2184,  1791,  1937,  2185,  1792,
    1887,  1793,  2186,  1794,  1795,  1796,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,  1805,  1888,  1806,  1889,  1807,  1808,
    1809,  1810,  1939,  1811,  1812,  1813,  1814,  1815,  1890,  1891,
    2187,  1816,  1817,  1892,  1818,  1893,  1819,  1820,  1894,  1821,
    1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1831,
    1940,  1832,  1833,  1834,  1835,  1836,  1895,  1896,  1837,  1941,
    1838,  2188,  1839,  1840,  1841,  1842,  2189,  1843,  1844,  1845,
    1846,  1847,  1848,  1849,  1897,  1898,  1899,  1900,  1901,  1902,
    1903,  1904,  1905,  1906,  1907,  1850,  1851,  1852,  1853,  1327,
    1328,  1336,  1326,  1532,     0,     0,  1307,  1325,  1867,  1874,
    1888,  1389,  1327,  1390,   229,   635,     0,     0,  1324,     0,
       0,     0,     0,     0,     0,   547,   546,     0,  1380,   552,
       0,     0,     0,   186,  1330,   108,  1738,   106,  1329,  1305,
    1508,     0,     0,   574,   575,   565,     0,   584,     0,   567,
     572,   568,     0,   593,     0,   586,   594,   576,   566,   587,
     577,   564,     0,   595,     0,   570,     0,     0,     0,   230,
     195,   553,     0,   137,     0,  1404,  1405,  1406,  1407,  1408,
    1409,  1414,  1410,  1411,  1412,  1413,  1415,  1416,  1417,  1418,
    1419,  1395,  1400,  1420,  1421,  1422,  1423,  1424,  1425,  1426,
    1427,  1428,  1429,  1430,  1431,  1432,  1433,     0,  1391,     0,
       0,  1860,  1910,  1122,  1109,  1118,  1123,  1110,  1112,  1119,
    1865,     0,     0,  1114,  1116,  1878,     0,  1881,  1882,  1772,
    1120,  1889,  1892,  1893,  1894,  1121,  1895,     0,   846,     0,
     674,   821,   831,   846,   851,  1106,   872,  1107,   860,  1329,
    1299,     0,  1474,  1476,  1477,  1473,   176,  1356,  1514,  1890,
    1816,  1528,  1515,  1512,  1513,   231,   710,   708,     0,  1275,
    1645,  1683,  1776,  1787,  1890,  1450,  1454,     0,   228,     0,
    1519,     0,  1530,  1520,   680,  1329,   702,     0,   235,  1488,
       0,  1493,     0,  1752,   685,   688,  1345,   686,   236,  2190,
    2191,  2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,
    2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,  2209,  2210,
    2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,  2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,
    2241,  2242,   237,   238,     0,   672,     0,     1,   137,  1399,
    1503,     0,   143,     0,   706,   706,     0,   706,     0,   664,
     672,   667,   671,   818,  1524,  1890,  1816,  1518,  1521,  1653,
       0,     0,  1653,     0,  1653,     0,  1653,     0,  1511,     0,
    1267,     0,  1268,  1308,     0,   518,  1653,   179,   551,   550,
     549,   548,   553,     0,  1653,  1364,     0,   604,   605,     0,
       0,     0,     0,     0,     0,  1375,   109,   107,     0,  1506,
     582,   583,     0,   573,   569,   571,     0,     0,  1337,  1942,
     915,  1943,   944,   922,   944,   944,  1944,  1945,  1946,  1947,
    1948,  1949,  1950,  1951,  1952,   911,   911,  1619,   924,  1953,
    1954,  1955,  1653,  1956,  1957,   912,   913,   949,  1958,  1959,
    1960,  1961,  1962,     0,     0,  1963,   944,  1964,   911,  1965,
    1966,  1967,   916,  1968,   882,  1969,     0,  1970,   914,   883,
    1971,   952,   952,  1972,     0,  1973,   939,  1974,  1338,  1339,
     592,     0,   596,   897,   898,   899,   900,   925,   926,   901,
     931,   932,   936,   902,   984,   911,  1653,   592,  1340,   588,
    1653,   592,  1301,  1653,     0,     0,   191,     0,  1397,  1434,
    1975,  1976,  1977,  1978,  1979,  1980,  1982,  1981,  1983,  1984,
    1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,
    1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,
    2005,  2006,  2009,  2007,  2008,  2010,  2011,  2012,  2013,  2014,
    2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2024,  2023,
    2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,
    2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,
    2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,
    2055,  2056,  2057,  2058,  2059,  1435,  1436,  1448,     0,  1449,
    1439,  1403,   137,   634,     0,  1388,  1475,     0,     0,     0,
       0,     0,  1224,     0,   833,   846,   851,     0,     0,     0,
       0,   862,     0,  1239,     0,  1245,     0,     0,     0,   846,
     679,     0,   831,     0,   845,   758,   844,   758,   711,     0,
     692,     0,   857,   855,     0,   857,     0,     0,   857,     0,
     758,     0,   847,   758,   844,     0,   864,   861,  1300,  1394,
       0,     0,     0,     0,  1516,     0,     0,     0,  1310,  1312,
    1313,  1196,  1323,  1093,     0,  1855,  1856,  1857,  1260,  1858,
    1859,  1861,  1862,  1863,  1050,  1864,  1321,  1866,  1868,  1869,
    1871,  1872,  1873,  1875,  1876,     0,  1322,  1879,  1719,  1884,
    1885,  1887,  1890,  1891,  1320,  1896,     0,     0,     0,  1288,
    1215,     0,  1092,     0,     0,     0,  1088,     0,     0,   905,
     906,   927,   928,   907,   933,   934,   908,     0,  1282,   985,
    1270,  1140,  1096,  1105,  1084,  1171,  1082,     0,  1087,  1077,
    1278,   692,  1276,     0,  1078,  1309,  1270,  1261,   692,  1274,
    1453,  1451,  1457,  1452,     0,     0,     0,     0,     0,  1300,
    1495,  1496,  1487,  1485,  1486,  1484,  1483,  1490,     0,  1492,
    1400,  1210,  1212,     0,  1261,   687,     0,     0,     0,     0,
     662,   661,     3,  1345,     0,     0,     0,     0,   704,   705,
       0,     0,     0,     0,     0,     0,     0,     0,   802,   732,
     733,   735,   799,   803,   811,     0,   668,     0,  1522,     0,
       0,     0,   124,   124,     0,     0,     0,     0,     0,   100,
      49,    93,     0,     0,     0,     0,   209,   222,     0,     0,
       0,     0,     0,   219,     0,     0,   202,   196,   198,    51,
       0,   124,     0,    47,     0,     0,     0,    53,     0,   634,
    1325,     0,  1908,  1909,  1910,  1861,  1911,  1912,  1122,  1109,
    1118,  1123,  1119,     0,  1918,  1919,  1867,  1921,  1922,  1923,
    1924,  1925,  1926,  1927,  1928,  1874,  1930,  1931,  1932,  1933,
    1934,  1935,  1120,  1937,  1888,  1939,  1894,  1121,     0,  1941,
       0,  1097,  1327,  1333,  1218,   716,  1216,  1346,     0,  1266,
       0,  1347,  2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,
    2104,  2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,
    2114,  2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,
    2124,  2125,  2126,  2127,  2128,  2129,  2130,  2131,  2132,  2133,
    2134,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,
    2144,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,  2153,
    2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,
    2046,  2164,  2165,  2166,  2167,  2168,  1349,  1348,  1350,  1263,
    1306,  1269,     0,     0,   632,     0,     0,     0,     0,     0,
       0,  1361,     0,     0,  1653,   190,  1653,     0,   518,  1653,
     518,  1653,     0,   180,  1374,  1377,     0,   585,   592,   581,
     579,   578,   580,   943,   930,   938,   937,  1215,   920,   919,
     918,     0,   917,     0,     0,   944,   944,   942,   921,   897,
       0,     0,     0,   948,     0,   946,     0,   590,   591,     0,
     562,     0,   890,   886,     0,   957,   958,   959,   960,   967,
     968,   965,   966,   961,   962,   955,   956,   963,   964,   953,
     954,     0,   969,   970,   971,   972,   973,   974,   975,   976,
     903,   909,     0,     0,   557,     0,  1341,     0,     0,   559,
       0,     0,     0,   553,   137,     0,   203,  1444,  1445,  1443,
       0,     0,  1402,   206,  1447,  1437,  1446,  1401,   223,  1438,
    1396,     0,  1392,   623,     0,     0,     0,     0,     0,     0,
    1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,     0,
       0,  1234,  2230,   830,   828,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1053,  1082,     0,     0,     0,  1210,
    1244,     0,     0,     0,     0,     0,     0,  1210,  1250,     0,
       0,   834,   842,   751,   757,   829,     0,   827,     0,  1275,
     822,     0,   874,     0,   856,   852,     0,   853,     0,     0,
       0,   854,     0,   825,     0,   842,   826,     0,   871,  1463,
    1462,  1471,   177,     0,  1221,     0,   137,  1517,  1529,     0,
    1215,  1085,  1259,     0,     0,  1090,  1009,     0,     0,  1010,
     989,   990,     0,  1287,  1296,  1210,  1214,     0,  1088,  1210,
       0,  1174,  1176,     0,     0,  1079,  1353,  1081,  1089,     0,
    1316,     0,   984,   984,  1281,  1196,     0,  1189,     0,     0,
    1193,  1194,  1195,     0,     0,     0,  1273,     0,  1204,  1206,
       0,     0,  1025,  1202,     0,  1028,     0,     0,     0,     0,
    1190,  1191,  1192,  1183,  1184,  1185,  1186,  1187,  1188,  1200,
    1182,  1006,     0,  1080,     0,  1143,     0,  1005,  1279,   820,
       0,  1314,  1311,     0,  1262,   820,  1465,  1469,  1470,  1468,
       0,  1464,  1456,  1455,  1460,  1458,  1461,  1459,  1531,     0,
    1497,  1481,     0,  1478,  1213,   815,   689,  1303,     0,     0,
     288,  1504,  1502,   142,   141,     0,     0,   684,   683,   726,
     726,   717,   720,   726,     0,   682,     0,   774,   775,     0,
       0,     0,     0,   808,   806,  1310,  1323,   762,   736,   761,
       0,     0,   740,     0,   766,   985,   801,   666,   730,   731,
     734,   665,     0,   804,     0,   814,   802,   735,     0,  1523,
       0,     0,     0,     0,     0,  1653,     0,     0,    84,    65,
     470,   885,   123,     0,     0,     0,     0,     0,     0,     0,
      92,    89,    90,    91,     0,     0,     0,     0,   207,   208,
     221,     0,   212,   213,   210,   214,   215,     0,     0,   200,
     201,     0,     0,     0,     0,   199,     0,     0,     0,     0,
       0,     0,     0,     0,  1510,  1505,   716,   716,   716,  1103,
       0,   714,   715,     0,     0,  1264,  1267,   622,   526,     0,
     516,     0,     0,     0,   183,   182,     0,     0,     0,     0,
     241,   240,     0,     0,   553,  1365,  1363,  1367,  1366,  1368,
    1625,   171,     0,     0,   189,   187,     0,     0,   515,   489,
       0,  1379,     0,     0,     0,  1653,  1376,     0,   505,  1507,
     239,     0,     0,     0,   592,     0,   941,   940,   891,   887,
       0,     0,     0,     0,     0,     0,   597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   592,   589,  1342,     0,
     592,  1302,     0,   592,   194,  1398,  1440,   204,   224,   205,
     225,   657,     0,   629,   637,   642,   620,     0,   620,     0,
     639,   643,   620,   638,     0,   620,   633,   634,     0,  1136,
       0,  1111,  1113,  1126,     0,  1115,  1117,     0,   863,     0,
       0,  1127,  1055,  1056,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1072,  1071,  1128,   867,     0,   870,     0,     0,  1242,
    1243,     0,  1129,     0,     0,  1249,     0,     0,     0,  1134,
       0,   832,     0,     0,   746,   753,     0,   756,   750,     0,
     692,   673,  1645,  1683,     0,   703,   703,   703,   691,   701,
       0,   779,   835,     0,     0,   837,   839,     0,   840,     0,
       0,   875,     0,     0,     0,  1305,     0,   178,     0,  1355,
       0,  1360,  1358,  1354,  1357,  1359,     0,     0,     0,  1258,
    1254,  1288,     0,  1181,  1189,  1193,  1194,  1195,  1190,  1191,
    1192,  1183,  1184,  1185,  1186,  1187,  1188,  1208,     0,     0,
    1170,     0,     0,  1286,     0,  1283,     0,  1083,  1094,     0,
    1177,  1095,     0,     0,     0,  1318,  1319,   986,   997,  1029,
    1030,  1001,  1002,  1003,  1007,  1352,  1351,  1280,     0,  1272,
       0,     0,   987,  1011,  1016,     0,  1251,  1046,     0,  1034,
       0,  1024,     0,  1032,  1036,  1012,  1027,     0,  1008,     0,
    1273,  1205,  1207,     0,  1203,     0,   998,   999,  1000,   991,
     992,   993,   994,   995,   996,  1004,  1180,  1178,  1179,     0,
    1271,     0,     0,  1145,     0,     0,  1031,  1277,     0,   874,
     716,  1288,   874,     0,   984,  1498,  1345,  1491,  1480,  1479,
    1211,  1304,  1344,   137,     0,   301,   280,   302,     0,  1500,
       0,   131,     0,   162,   164,   820,     0,  1270,   724,   725,
     729,   729,     0,     0,   729,   707,   681,  1885,  1772,     0,
       0,     0,     0,   767,   809,     0,   800,   764,   765,     0,
     763,  1310,   768,  1309,   769,   772,   773,   741,   810,  1297,
     812,     0,   805,   670,   669,   816,     0,    50,     0,  1653,
      67,     0,     0,     0,     0,     0,     0,   420,     0,   520,
     420,   105,  1653,   592,  1653,   592,  1553,  1620,  1788,     0,
      63,    96,     0,   494,   117,     0,   479,   523,    86,   101,
     110,     0,     0,   197,    52,   211,   216,   113,   220,   217,
    1384,   218,   124,     0,    48,     0,   111,     0,  1382,     0,
       0,    54,   115,  1386,   714,   714,   714,     0,  1217,     0,
       0,     0,  1219,  1220,  1266,     0,   621,     0,   517,     0,
     631,   611,   612,   622,   181,     0,     0,     0,   518,   518,
       0,     0,  1364,     0,     0,   173,   169,     0,     0,     0,
       0,  1547,     0,   508,   506,   539,     0,   513,   507,   516,
       0,     0,   465,     0,     0,     0,     0,   606,     0,     0,
       0,     0,     0,   910,   923,   563,   897,     0,   951,   950,
     952,   952,   897,     0,   880,   897,     0,   895,     0,   935,
     904,   977,   978,   979,   980,   981,   982,   983,   556,  1343,
     558,     0,   560,   624,     0,   627,     0,   626,   630,   625,
     619,     0,   652,     0,     0,     0,     0,     0,     0,     0,
    1393,     0,  1108,  1223,     0,  1237,  1236,  1054,  1063,  1067,
    1068,  1069,  1238,     0,     0,     0,  1064,  1065,  1066,  1057,
    1058,  1059,  1060,  1061,  1062,  1070,   872,     0,     0,   866,
    1247,  1246,  1240,  1241,     0,  1131,  1132,  1133,  1248,     0,
       0,   744,   742,   745,   747,   743,     0,     0,   843,   874,
     703,   703,   703,   703,   700,     0,     0,     0,   873,     0,
     796,   859,     0,   838,   836,   848,     0,   879,     0,   850,
    1472,  1222,   709,  1086,     0,     0,  1255,     0,  1296,  1052,
    1197,     0,  1169,     0,     0,     0,  1295,     0,  1211,  1175,
    1173,  1091,   984,     0,     0,     0,     0,     0,     0,     0,
    1035,  1026,     0,  1033,  1037,     0,     0,     0,  1020,     0,
       0,  1018,  1047,  1014,     0,     0,  1048,     0,     0,  1144,
    1153,   823,   819,   779,   714,  1296,   779,     0,  1466,  1482,
       0,   287,   283,   295,     0,   326,   301,   288,   274,  1501,
       0,   151,     0,     0,     0,   146,   126,     0,     0,   154,
     165,  1500,     0,   168,     0,   718,   719,   721,     0,  1198,
     729,   723,   771,   770,     0,   739,   807,   737,     0,   813,
       0,     0,     0,   469,     0,     0,     0,   420,     0,   528,
       0,   535,     0,     0,   520,   501,    85,     0,     0,     0,
      59,   104,    77,    69,    55,    83,     0,     0,    88,     0,
      81,    98,    99,    97,   102,     0,   455,   430,   466,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   716,   712,   713,  1098,  1265,
     655,   656,   202,   654,   527,     0,     0,   185,     0,     0,
     515,  1379,     0,     0,  1362,   553,     0,     0,   172,   174,
       0,   190,     0,   518,   195,     0,  1542,   493,   489,   514,
     487,   486,   488,     0,  1548,   518,  1378,     0,     0,   607,
       0,   601,     0,  1373,   929,   893,     0,   947,   945,   894,
       0,   892,   888,   896,   592,   658,     0,   615,   653,   640,
     645,     0,   651,   647,   646,   641,   649,   648,   644,  1124,
    1135,  1235,     0,     0,     0,     0,   865,   868,     0,  1130,
    1125,   841,     0,     0,   779,     0,     0,     0,     0,   694,
     693,   699,     0,     0,  1147,     0,   876,     0,   877,   849,
       0,  1257,  1253,     0,  1209,  1285,  1210,  1290,  1292,     0,
       0,     0,  1172,  1317,   988,     0,     0,  1017,  1252,  1038,
       0,     0,     0,  1013,  1197,     0,     0,     0,     0,     0,
    1022,     0,     0,     0,     0,     0,  1104,   824,   796,     0,
    1284,   796,     0,   690,   283,   281,   282,   283,   283,   283,
     283,   293,   299,   294,   283,   283,   283,   345,     0,   343,
     288,   351,   326,   326,   327,   304,   349,   351,   313,   323,
     322,   279,   303,     0,     0,  1499,     0,  1494,   130,   153,
     152,     0,   160,     0,  1270,     0,   151,   132,     0,     0,
     163,   151,   139,   727,   728,     0,   722,   738,  1298,   118,
     420,     0,     0,    66,     0,   537,   481,   529,   512,   496,
       0,     0,     0,   421,     0,   554,     0,     0,   502,     0,
       0,     0,     0,   482,     0,     0,   441,     0,     0,   512,
       0,   519,   437,   438,     0,    58,    78,     0,    74,     0,
     103,     0,     0,     0,     0,     0,    61,    73,     0,    56,
       0,   592,   592,    64,   480,  1337,  1942,  1943,  1944,  1945,
    1946,  1947,  1948,  1949,  1950,  1951,  1952,  1953,  1954,  2073,
    1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  2082,  1963,
     427,  1964,  1719,  1965,  1966,  1967,  1968,  1969,     0,  1970,
     883,  1971,  1972,  2161,  1973,  1974,  1183,  1184,   425,   522,
     422,  1338,   423,   530,   424,   426,     0,   525,   114,  1385,
       0,   112,     0,  1383,   121,   119,   116,  1387,  1101,  1102,
    1099,   714,   634,   614,   184,     0,  1547,     0,     0,     0,
     246,   272,   262,     0,  1653,     0,   170,     0,  1379,   188,
       0,   515,  1547,  1545,     0,   545,   465,   540,     0,  1379,
    1541,     0,   598,     0,     0,     0,   889,   881,   561,   628,
       0,   650,  1073,     0,     0,     0,     0,   754,     0,   760,
     796,   698,   697,   696,   695,   777,  1595,  1868,  1771,   778,
       0,   782,   776,   780,   785,   787,   786,   788,   784,   795,
       0,   798,   858,   878,  1256,  1051,  1293,  1294,  1289,     0,
     985,  1044,  1042,  1039,     0,  1040,  1021,     0,     0,  1019,
    1015,     0,  1049,  1139,     0,  1142,  1156,  1151,  1152,  1147,
    1098,  1147,  1467,   292,   298,   291,   290,   289,   296,   300,
     286,   343,   348,   344,   346,   283,     0,   350,   340,     0,
     324,   325,   305,   326,     0,   310,   309,   311,   308,   353,
       0,     0,     0,     0,   273,   356,  1082,     0,   150,     0,
       0,     0,   138,   135,   125,     0,   155,   608,     0,   533,
      68,     0,   512,     0,   420,   498,   497,   500,   495,   499,
       0,   555,     0,     0,   439,     0,   446,   484,   485,   483,
     440,   512,   518,   442,     0,     0,     0,    70,    60,    57,
      62,    71,     0,     0,    72,    75,   879,    87,    80,  2082,
    2091,     0,     0,     0,     0,     0,     0,   610,   617,   202,
       0,     0,  1544,   489,     0,     0,   603,     0,     0,     0,
     259,     0,     0,     0,     0,   515,   175,     0,     0,  1547,
       0,   192,  1546,     0,     0,   417,     0,   462,     0,     0,
       0,  1533,     0,     0,  1372,  1371,     0,   616,  1074,     0,
    1075,   869,     0,     0,   752,  1147,     0,     0,     0,   789,
     783,  1146,  1148,     0,     0,   749,  1291,  1137,     0,  1041,
    1045,  1043,  1023,  1141,  1158,  1155,   798,  1315,   798,   284,
     285,   297,   347,   326,   313,   341,   342,   274,     0,   355,
       0,   328,     0,   307,     0,   378,   379,   360,   361,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1273,     0,
       0,     0,     0,     0,   394,     0,     0,   397,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   127,     0,   128,   161,     0,     0,
       0,   140,  1199,     0,   420,     0,   511,   534,   451,   429,
       0,     0,     0,   436,   443,   544,   445,     0,    79,    95,
       0,     0,   524,   122,   120,  1100,   634,     0,  1379,   465,
    1541,   600,   246,     0,   270,   258,     0,     0,   271,     0,
     263,     0,     0,     0,   195,  1543,   489,   478,   471,   472,
     473,   474,   475,   476,   477,   492,   491,   463,   464,     0,
       0,     0,     0,     0,   602,  1373,     0,   166,     0,   157,
     157,  1076,   755,     0,   798,     0,     0,     0,   781,     0,
       0,   797,     0,   677,     0,     0,   716,   749,   749,   274,
     321,   319,     0,     0,   336,   339,   306,   343,   313,   308,
     357,   368,   398,   399,   372,   373,   374,   376,     0,     0,
       0,   358,   380,   385,   415,     0,   403,     0,   393,     0,
     401,   405,   381,   396,   377,     0,  1273,     0,     0,     0,
       0,   369,   370,   371,   362,   363,   364,   365,   366,   367,
     375,   400,   277,     0,   276,     0,     0,     0,     0,   518,
     536,     0,   503,   510,   449,   448,   450,   454,     0,   452,
       0,   468,     0,   461,   429,     0,    82,     0,   531,   609,
     613,     0,   419,  1535,   245,   242,   243,     0,   260,   264,
       0,     0,   253,   515,     0,  1541,  1547,   465,  1541,     0,
    1538,     0,   599,     0,     0,  1379,     0,     0,   159,   159,
       0,   749,   791,     0,   790,  1149,  1150,   751,  1138,     0,
    1161,   676,   675,   319,     0,   352,     0,   333,   337,   354,
       0,     0,     0,     0,     0,     0,     0,   404,   395,     0,
     402,   406,     0,     0,   389,     0,     0,   387,   416,   383,
       0,     0,     0,     0,   134,   874,   145,     0,   544,   490,
       0,     0,     0,   451,     0,   444,   541,   542,   543,     0,
     457,   447,   458,    76,    94,   532,     0,     0,     0,   269,
       0,   267,     0,   254,   515,  1536,   193,   418,  1534,  1539,
    1540,     0,   157,   874,   167,   156,   726,   158,   726,   759,
     678,   792,   748,  1157,     0,     0,     0,   320,   317,   338,
       0,     0,   312,   359,     0,     0,   386,   407,     0,     0,
       0,   382,     0,     0,     0,     0,     0,   391,     0,   278,
     129,   133,     0,   461,   504,   509,   428,   453,   467,     0,
       0,     0,   459,     0,   460,  1541,     0,   261,   265,     0,
     268,     0,     0,   159,  1369,   729,   729,  1854,  1596,  1823,
       0,  1159,  1162,  1160,  1154,     0,   318,   334,   329,   335,
     331,   413,   411,   408,     0,   409,   390,     0,     0,   388,
     384,     0,   275,   874,   420,   433,     0,   432,     0,   521,
     456,  1537,   256,     0,     0,     0,  1379,   726,   148,   147,
       0,  1166,  1165,  1164,  1168,  1167,   315,   314,   316,     0,
       0,   410,   414,   412,   392,   144,   538,   431,   435,   434,
       0,     0,     0,     0,   250,     0,   874,   729,     0,   330,
     332,   256,   244,     0,     0,     0,   266,   252,     0,  1370,
     149,  1163,   255,     0,   248,   249,     0,   251,     0,     0,
     247,     0,     0,     0,   272,     0,     0,   253,   257
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3223, -3223, -3223,  2211,    89,   106,  -797, -1243,  -980, -1264,
   -3223,   130,   108, -3223, -3223,   413, -3223,  1183, -3223,   401,
    -706,   759, -3223,  1270, -3223, -3223,  2980, -3223,   117,   118,
    2367,   121, -3223, -3223, -3223, -3223,  -398,   703, -1245, -3223,
     633, -3223, -3223, -3223, -3223,    33,   386, -3223,     2, -2175,
   -2917,  -420, -3223,  -585, -3223,   -83, -3223,  -500, -3223,  -787,
    -508,  -568, -2793, -1187, -3223,  1778,  -134, -3223,   797, -3223,
   -2507, -3223, -3223,   785, -3223, -1189, -3223, -2199,   384,  -486,
   -2530, -2517, -2148,  -777,   462,  -493,   439, -2090,  -966, -3223,
     808, -3223,  -478, -3223,  -768, -1629,   124, -2782, -1682,    -8,
   -3223, -3223, -3223,  -527, -3223, -2510, -3223, -3223, -3223, -3223,
     125,  1614, -2074,   126,   729, -3223,    11,   407,   127, -3223,
   -3223,   128,    14,  -565,   503, -3223,   129, -3223, -3223,  1538,
    -816, -3223,  1590,   132, -2491, -3223,  -467, -3223,  -512,  -511,
   -3223, -3223,    31,  -994,  1527, -3223, -3223, -3223,    12, -3223,
    -281, -3223, -3223, -2531, -3223,    29, -3223, -3223, -3223, -3223,
     -25,   515, -3223, -3223,  -409, -1702,  -207, -3223, -3002, -3080,
   -3223, -3223,  -533, -2976, -2035,   134,   120,   -31, -3223, -3223,
   -3223, -3223,  -241, -2317, -3223,  -648, -3223,  -651,   -80,  -623,
    -611, -3223,  -470, -3220,  -583, -3223, -3223,  -642, -2860,  2440,
    -438, -3223, -3223, -1356, -3223,   301, -2196, -3223,   556, -3223,
     558, -3223,  -283, -2880, -3223, -3223,  -396, -3223, -3223, -3223,
   -2462,  -124,  -577,  -575, -3223, -2825, -3223, -3223, -2594, -3223,
   -3223, -3223,   306, -3223, -3223,  3717,   135,   138, -3223,   924,
     139, -1169,   100,   693,     1,   -20, -3223,    -7,    78,    80,
    1883, -1064, -3223,  -604,   923, -3223,  2018,  2027, -2114,  -770,
     -62, -3223,   906, -1690, -2118,  -534,  1313,  1861,  1864,   665,
   -2490, -3223,  -370, -3223,   364, -3223, -3223,   899,  1351, -1513,
   -1586, -3223, -2152, -3223,  -237,   -79, -3223, -3223, -3223, -3223,
   -3223, -2398, -2386,  -525,  1327, -3223,  1870, -3223, -3223, -3223,
   -3223,   -16, -1527,  3083,   938,  -617,  2452,  -554,  -399,  2066,
    2038,   894,  1081,    28,  2476,   701, -3223, -3223,   713, -2064,
   -1542,   680,    15,  1656, -3223, -3223,  -524, -1375,  -861, -3223,
   -3223,   359,  -259, -3223, -3223, -3223,  1428,  1882, -3223, -3223,
    1988,  2264, -3223,  -686,  3064,  -475,  -857,  2086,  -938,  2090,
    -944,  -923,  -955,  2096,  2099, -1530,  4593, -1493,  5207, -3223,
      23, -3223, -1522,   -13, -3223, -3223, -3223, -3223, -2630, -3223,
    -209, -3223,  -201, -3223, -3223, -3223,  -413, -3222, -3223,  5419,
    1064, -3223, -3223, -3223, -1584, -3223,  4759,   963, -3223, -1971,
   -1028,  -705, -1106,  -975, -1236, -1413, -3223, -3223, -3223, -3223,
   -3223, -3223,  -903, -1796,  -147, -2062, -3223, -3223,  1098, -3223,
   -3223, -3223,  -774,  1303,  -593, -1129, -2063,  1562,   366,  -613,
   -1650, -3223, -1644, -2316, -3223, -3223, -2045, -3223,  2936,  -586,
   -1136,  2041, -1192,    49, -3223,  -889,  1868,  2908,  1350, -2511,
   -3223, -3223,  -562, -2577, -1141, -3223,  -753, -3223, -3223,   140,
    1565,    36, -3223,   147,  1436, -3223, -3223, -3223,   149, -3223,
   -3223,   153,   777, -3223,  1123, -3223,   935,   155, -3223,  3134,
    3068,    13, -3006
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    42,    43,    44,   595,   596,  1874,  1821,  1609,  1268,
    1811,  1523,   597,  2572,  2573,  2574,  2239,  1249,  3426,  2240,
    1250,  1251,  2576,    48,    49,    50,   105,  1279,   598,   599,
     531,   600,  2293,  3129,  2666,  3130,  2371,  2287,  1532,  2368,
    1931,  1852,  1533,   537,  1946,  2667,  2612,  1932,   601,  2561,
    2909,  3419,  2586,  3639,  2841,  2842,  3416,  3417,  2564,  2241,
    3520,  3521,  2644,  1803,  3515,  2313,  3315,  2245,  2227,  2843,
    2322,  3266,  2955,  2242,  2823,  2314,  3411,  1886,  2315,  3412,
    3084,  2316,  1848,  1879,  2565,  3522,  2246,  1849,  2560,  2910,
    1790,  2317,  3423,  2318,   550,  2827,   602,  2636,  1427,   519,
     520,   521,   909,  1407,  1323,  1408,   522,   773,    56,   551,
     603,   833,  1884,   604,  1421,  1866,   605,  1875,   606,  2627,
    2628,   607,   608,  1190,  2521,  2169,   609,   586,   587,   927,
    1470,   588,   910,   610,   936,    65,   780,  1524,   611,  1525,
    1526,  1028,    66,  1610,  1030,  1031,    67,    68,   613,  3164,
    2965,  1435,  1887,  2325,   552,   614,  2525,  2170,  3260,    71,
    2792,  2173,  1216,  2796,  3327,  2787,  2791,  2528,  3458,  3546,
    2793,  2174,  2175,  3328,  2176,   615,   672,  3354,    73,  1862,
    3437,    74,  3138,  3694,  3684,  3685,  3675,  3533,  2940,  3671,
    3642,  3297,  3439,  2941,  3440,  3600,  3298,  3141,  2784,    75,
    3402,  3403,  2518,  2761,  3201,  2165,  2762,  2765,  2515,  2166,
    2167,  3053,  3214,  3059,  3658,  3616,  3475,  3046,  2772,  2773,
    2774,  2775,  3617,  3619,  3476,  3618,  3207,  3208,  2776,  2777,
    2778,  3048,  3049,  2779,  2780,  3064,   616,   617,  1093,  2043,
     618,  1794,   619,  1146,    81,    82,  1070,    83,   701,   714,
     715,  1592,  2018,   707,  1220,  1746,   688,   689,  2281,   788,
    1842,  1741,  1742,  2180,  2535,  1770,  1771,  1229,  1230,  2005,
    3343,  2006,  2007,  1584,  1585,  3174,  1758,  1762,  1763,  2202,
    2192,  1749,  2440,  2991,  2992,  2993,  2994,  2995,  2996,  2997,
    1147,  2704,  3185,  1766,  1767,  1232,  1233,  1234,  1775,  2212,
      85,    86,  2149,  2501,  2502,   661,   662,  1064,  1065,  1083,
    1079,  1595,  2025,   663,   664,  1984,  1985,  2409,  1086,  2021,
    2030,  2031,  2708,  1904,   911,  2228,  1614,  1473,   913,  1148,
     914,  1448,  1149,  1452,   916,  1150,  1151,  1152,   919,  1153,
    1154,  1155,   922,  1444,  1156,  1157,  1463,  1492,  1493,  1494,
    1495,  1496,  1497,  1498,  1499,  1500,  1201,  1563,  1159,  1160,
    1161,  1162,   666,  1163,  1164,  1695,  2143,  2500,  3001,  3181,
    3182,  2746,  3027,  3194,  3346,  3556,  3611,  3612,  1165,  1166,
    1641,  1642,  1643,  2139,  1689,  1690,  1167,  2914,  1692,  2068,
    1202,  1578,  1637,  1325,  1326,  1615,  1549,  1550,  1560,  1960,
    1567,  1571,  1989,  1990,  1579,  2107,  1168,  2049,  2050,  2457,
    1623,  1169,   812,  1330,   813,  1693,  2101,  1178,  1170,  1179,
    1172,  1633,  1634,  2466,  2718,  2719,  2075,  2208,   668,  1727,
    2009,   932,  1409,  1173,  1174,  1175,  1176,  1204,   670,  1327,
     526,   925,  3547,  1506,  1208,  1328,  2243,  2097,  1647,   620,
      98,   621,    89,   622,  1197,   711,  1198,  1200,   623,   682,
     683,   624,   695,   696,  1611,  1712,  1612,   625,    94,   697,
     703,   626,  3161
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     532,   931,    54,  1825,   532,   659,  1267,  1203,   667,   532,
     774,    59,    69,    95,    62,   532,   532,   532,   532,   532,
     789,  1235,   532,  1824,   929,   532,   532,  1570,   532,    70,
     523,   532,   532,   772,  1835,  1459,    88,  1527,  1414,  1411,
    1061,  1895,   776,  2067,   665,  1465,  1986,  1702,  2147,   612,
    2181,  1522,  1789,  2184,  1418,  2566,   524,  2490,  1410,  1800,
     912,  2492,   704,  2536,   791,  2034,  2541,  1026,  1962,  1963,
     524,  1728,  1731,  1982,  1796,  1171,  1088,   792,    84,  2916,
    2912,   938,  1838,  1027,  1899,  2503,   532,  1546,  2506,    45,
    2938,   532,   532,   532,   532,   532,    84,  1269,  1544,  1273,
      79,  1277,  1829,  2937,  1542,  1067,    46,  1699,    47,   924,
    1082,  1504,  1189,  1640,  1705,  1509,  1613,    51,    52,  1545,
     717,    53,  2085,  2086,    55,    57,    58,    60,    61,    63,
     805,  2956,    64,   700,    72,    76,  2559,  2529,    77,    78,
      87,  2614,  1528,  2952,   675,  1032,  2487,    90,  2717,    91,
    -660,  1538,  1539,    92,  3132,    93,   535, -1334,  1555,  1556,
    2602,  2603,  2604,  3155,  -663, -1331, -1331,  1102,  1445,  1446,
    3151, -1913,  1102,  2767,  3042,  2297, -1914,  2207,  2152, -2066,
   -2066, -1915,  -952,  3295, -2067, -2067,   538,  -952, -1916, -2068,
   -2068,  -949,  -944,  2412,   797,  -949, -2069, -2069,  1467, -1308,
    1457,  1528, -1917, -1334,  1709, -1920,  3282, -1929, -1920,   538,
   -2070, -2070, -1936, -2073, -2073, -2082, -2082,  2630,  1217,  2763,
   -2089, -2089,  2567, -1938,   538,  1656,  2622, -1940,  1102,  1657,
    1512, -2091, -2091,  2767, -1335, -2094, -2094, -1929, -1938, -1335,
   -1913,  3386, -1332, -1332, -1914, -1915,  1781,  -660,  2204, -1916,
   -1917, -1936, -1940,  1467,  1228,  -911,   709,  -924,  -939,  1665,
     538,  -663,  1185,  1231,  1080,   538,   538,   781,  1652,  1192,
     842,  3258,  1439,  3269,  1467,  1809,  1465,  1516,  1812,  1813,
   -2063, -2063,  1102,  3407,  3433,  2672,  2674,  3205,  2677, -2093,
   -2093,  1667,  1964,  2640,  -772,  1528,  1965,  1528,  1528,  1801,
       3,     4,  3457,  2767,  2455,  2516,  1836,  2291,  3589,  3103,
    3050,  3051,   786,  1918,  1411,  1656,  2421,  1440,  1837,  1657,
    1706,  1516,   538, -1181,  3350,   915,  1102,   786,  3459,  3156,
   -1181,  1467,  1750,  1536,  3219,  2099,  2568,  3435,  3220,  3122,
    3506,  1892,  1860,  2099,  3099,  3157,  2683,  3351,  1784,  1665,
    3029,  2748,  2144,  3031,  2751,  2099,  2423,  2210,  1068,  2816,
    2279,   782,   628,  3320,   686,  2694,  1528,  3305,  3227,  1528,
    1528,  3321,  -202,  2136,  2099,  2953,  3643,  -202,  1751,  3548,
    2137,  1667,  2815,  3355,  3414,  3650,  2562,  3121,  1964,  3387,
    2749,  1792,  1965,  1808,  3388,  2825, -2062, -2062,  1733,  3196,
    3229,  3198,  1827,  1792,  3668,  2225,    96,  2458,  3516,  2424,
    2225, -1201,  2789,  2713,  2594,  1411,  3088,  3147, -1201,  3043,
    2826,   924,  2806,  1445,  1446,  3153,  2178,   104,  3159,  3044,
    2512,    21,  3389,  1218,  3150,  1636,  1707,  2513,  1457,  3535,
    2845,  1193,  3538,  1194,  1752,  1460,  3415,  -660,  -618,  2790,
    3643,  1964,  1590,  2963,    97,  1965,  3691,  1596,   810,  3219,
    2750,  -663,   811,  3220,  2559,  2226,  2559,  1461,   560,   687,
    2556,  2211,  2388,  2389,  2390,  2391,  2392,  3154,  3479,  2396,
    2397,  2398,  2399,  2400,  2401,  2402,  2403,  2404,  2405,  3473,
    2714,  2448,  1082,  3227,  1753,  3259,  3432,  1244,  1069,  1441,
    2145,  1468,  1802,  2684,  1026,  3652,  1067,  2505,  1786,   629,
    3100,  2422,  -884,  2179,  2047,  3507,  -660,  1628,  2846,  1799,
    1530,  1186,   627,  3647,  2280,  3229,  2563,  3477,  3478,   532,
    -663,   532,  1778,  2067,  1840,  1861,   532,  3158,  1219,   532,
    3603,   877,  2980,  2954,  3280,  3334,  3517,  3322,   532,  2038,
    3436,  2425,  3264,  1648,  1039,  1841,  1468,  1754,  2569,  1734,
    2570,  3034,  1893,  1026,  1708,  3602,  2292,  1799,  3038,  3039,
    3040,  3274,  3669,  1902,  2961,  1903,   908,  1468,   532,   532,
     532,  2971,  3175,   843,  1704,  1910,  1025,  3390,  2571,  3641,
    2681,  3211,  3206,  2220,  3585,   776,  1187,  3270,  2517,  2539,
     710,   783,  1911,  2847,  2278,  2544,  2764,  2474,  2475,  1096,
    1825,  1704,  2916,  2912,  1442,  2610,  2611,   924,  3358,   532,
     532,   532,  1890,   536,  2508,  1029,  3289,  2632,  1787,   667,
    3518,  1928,  1930,  -660,  1468,  3079,   814,   915,   532,  2048,
      29,  1060,  3590,   671,   667,  1744,  1553,  -663,  2531,  1732,
     532,   532,  -884,  1881,  3537,   532,   532,  1443,   776,  1026,
    1026,  1469,  1460,  3653,  3536,   665,  3296,  1460,   777,  2614,
    3041,    84,  -660, -1334,  -660,  3112,  3113,  2204,  2347,    34,
     665,   791,   532,   532,  1461,   532,  -663, -1913,  -663,  1461,
    3186,   524, -1914,    80,   792,  2051, -1181, -1915,  1462,   532,
     776,  1776,  2380,  1464, -1916,   532,   524,  -949,  -944,  1710,
    1777,    80,  2100,   810,   658, -1308,  1503,   811, -1917, -1334,
    2489, -1920,    38, -1929, -1920,  2150,    80,  2359, -1936,  1236,
    3357,  1688,  3369,  1723,   775,  1191,  3620,  1195,    39, -1938,
    1651,  1196,  1636, -1940,   810,  1418,  2138,  1828,   811,  1036,
   -1335,  3495,  1410, -1929, -1938, -1335, -1913,  3431,  3089,  2595,
   -1914, -1915,    40,    21,  3076, -1916, -1917, -1936, -1940,  1896,
    1897,  1447,   532,  1451,  -939,   532,   699,   790,  1933,   924,
      54,  1700,  2153,  3128, -1201,  1520,  1521,    80,  1624,    59,
      69,    95,    62,  1205,  1508,  2768,  2514,  1058,  1980,  3447,
    2769,  1322,  2278,  1406,  3085,   712,  2770,    70,  2771,  3635,
    3347,  1191,  3348,  3446,    88,   532,  3139,  3126,  1685,  1686,
    1687,  1688,   532,   532,   532,   532,   532,  3043,   706,  1520,
    1521,  2255,  2803,   915,  3078,  3620,  1101,  3202,   532,  1964,
    3249,  2258,  1747,  1965,  2261,  3131, -2096, -2096, -2096,  3203,
    2754,  1819,  1101,  3177,   793,  1964,    84,  3471,  3472,  1965,
    2754,  2393,  1966,  1967,  1968,  1224,  2420,    45,  1090,  1995,
    1225,  2203,  2203,  1801,  1411,  1820,  3140,  2067,    79,  1091,
    -202,  -202,  1814,  3086,    46,  1986,    47,   778,   908,  1975,
    1976,  1977,  1978,  1979,  1980,    51,    52,  2420,  1871,    53,
    2310,  2804,    55,    57,    58,    60,    61,    63,  2328,  3267,
      64,  2096,    72,    76,  2046,  1636,    77,    78,    87,  2140,
      21,  1920,  1528,  2071,  3543,    90,  2937,    91,  2140,   912,
    1411,    92,  1528,    93,   779,  1528,  2463,  1801,  1856,  2369,
     929,  1917,  2723,  1226,  2083,  1906,  2429,   924,  3461,  1923,
    1410,  1460,  1748,  2367,  1977,  1978,  1979,  1980,  2354,  2356,
    2357,  2655,  3246,  3247,  3248,  3249,  2120,  2659,  1072,  2352,
    2661,  3550,    29,  1461,  2351,  2010,  2022,  1656,   924,   924,
    -793,  2026,   538,  2028,  3219,  2029,  1224,  1462,  1026,  1825,
    2353,  2355,  3554,  1227,   924,   915,  2736,  2737,  1823,   784,
    2916,  2912,  1925,  2590,  1027,  1073,  2539,  3097,  2394,  1254,
    2253,    34,   774,  3143,   538,  2509,  2591,  3150,  2395,  2346,
    2348,  1598,  3555,  1025,  1224,  1656,  3636,  2001,  1255,  1657,
      21,  1815,  1075,   827,   818,   772,   819,   532,   532,  1816,
      21,  2605,   532,  1667,  1528,  1648,  2247,  2570,  2533,  1969,
    3229,   532,   532,   659,    38,   532,   667,  2386,   659,  1665,
    1801,   667,  1830,  1858,  1226,   810,  2274,  2275,  2276,  1703,
     785,  1970,  2732,   532,  2217,  2858,  1802,  1071,  2335,  1256,
      99,  3560,  1025,  1322,   908,  3561,  3098,  2413,   532,  3410,
    1750,  1667,   665,  2596,  3074,  2121,  2304,   665,   809,  3077,
    2358,  2254,  1226,  2829,  2360,  2102,  2374,  2362,   699,   828,
      84,  2375,  3637,  1792,  2122,  3676,  1241,  1640,   524,  2123,
    2264,   539,  1242,   524,  1793,  2271,   820,  1971,   821,    29,
    3219,  2819,  2087,  2641,  3220,   532,  1751,  2646,  1792,  3638,
    1802,  1799,   776,  1971,  2755,  2756,  2976,  1528,  1417,  1795,
     786,  2832,  1227,  1819,  2755,  2756,  1072,  2124,  1483,  1484,
    1078,   827,  2053,   915,  3227,  3370,  1410,  2376,    34,  2054,
    3374,   822,  2055,  2056,  2057,  3281,  1257,  1820,  1025,  1025,
     532,   924,  1919,   532,   834,  1833,  2332,  3148,   823,  2972,
    1460,   540,  1801,  1073,   915,   915,  3229,  1927,   532,   532,
    1737,  1738,  1102,  1745,   829,  1799,   532,    21,   835,  1074,
     915,    38,  1461,   792,   792,  3105,   792, -1381,   540,   839,
    1075,  2067,  2820,  3110,  2758,  1449,  1464,    39,  1258,    80,
    1243,  2757,   532,   532,  2758,  1929,  1259,   828,   838,    29,
    1102,   830,  1191,  1656,   840,   532,   908,  1458,  1260,    29,
     100,    40,  1753,   841,  1076,  2256,   541,  1620,   101,   699,
    2259,  2759,   532,  1802,  2507,   699,   532,  2229,   845,   540,
     532,  2759,  2975,  1322,  1801,  1487,  1488,  1665,    34,   831,
    1261,  1455,  1456,   541,  1501,  1322,    80,   775,    34,  2821,
    -715,  1514,  2822,  2418,  1515,  -715,   102,  3427,  1826,   787,
    2543,  2543,   844,  2760,  1919,  1077,  2705,  2856,    35,  1667,
    1322,   542,  2125,  2760,  3272,  1754,   924,  2593,  3014,  2836,
    2542,    38,  2320,  3496,  2321,  1102,  3498,  2849,  1799,   832,
     846,    38,  1856,  1263,   541,  1045, -2096, -2096, -2096,  3096,
    1975,  1976,  1977,  1978,  1979,  1980,   103,    39,  1078,   543,
    1059,   847,  1972,  1973,  1974,  1264,  1975,  1976,  1977,  1978,
    1979,  1980,   559,   935,  1241,  2837,  2813,   559,  -715,  2932,
    1242,    40,  2668,  2003,  1037,   699,   559,  1266,  2004,  3699,
    2504,  2344,  2848,  2838,  2857,   699,  3704,   544,  3219,   559,
     559,  1244,   775,  1054,   790,  1802,  3656,   915,  3033,  2597,
    2477,  3657,  3035,  3036,  3037,   532,  1026,  1857,  1038,   532,
    2443,  2435,  2436,  2437,   908,   532,    29,  2578,  -715,  2580,
   -2060, -2060,  3227,  1865,  2381,  1801,  1994,   532,  1996,  1997,
     924,  1587,  1867,  1868,  1869,  1721,  1640,   545,  1722,   546,
    2387,  3581, -2061, -2061,  1603,   908,   908,  1606,  2656,  2581,
     559,  2583,  1246,  2538,  3229,    34,   547,  1858,   532,  3666,
    1799,   908,   548,   532,   545,   549,   546,  1180,  1181,  2414,
    1183,    80,  1449,   924,  2205,  2206,  2419,  1802,  1243,  3604,
    3168,  1039,  1247,  2657,  2658,  2839,  1458,  3648,  3649,   924,
    1087,  3586,   549,  2840,   532,   532,  1040,  1406,    38,   532,
     532,  1041,   532,   532,  3055,  1085,  3056,  1025,  2447,  1026,
    2037,  2447,  1042,  2038,    39,   545,  2451,   546,   924,  3057,
    3058,  2039,  2621,  1406,  2040,   924,  1683,  1684,  1685,  1686,
    1687,  1688,   915,  2288,  2108,  1095,  2289,  -672,    40,  2539,
    2373,  1043,  1799,   549,  2377,  2336,  1029,  2379,  2040,  1047,
    2601,  -672,   699,  3307,  1248,   667,  -672,   924,  1241,  3690,
     924,  3169,  1048,  2109,  1242,   924,   810,  1049, -1308,  3665,
     811,   106,  1052,   532,   534,   532,  2342,   659,   532,  2343,
     667,   589,   659,   532,   659,   667,   659,   667,  2812,   667,
    2814,   665,    84,   685,  2856,  2345,   532,   698,  2343,   532,
    1094,  2363,  3404,  2147,  2364,  3308, -2064, -2064,  -672,  1241,
    2908,  1933,  3689,  1053,  3309,  1242,   665,   524,  2430,   532,
    2431,   665,  3080,   665,   532,   665, -2065, -2065,  1802,  -672,
    2041,  3244,  3245,  3246,  3247,  3248,  3249,    21,  2406,  1244,
    1096,  2407,   524,  3310,  3329,  2042,   915,   524,   908,   524,
    2445,   524,  2045,  2446,  1241,  1241,  1406, -2071, -2071,   532,
    1242,  1242,  2058,  2059,  2060,  3072,  2061,  2062,  2063,  2064,
    2065,  2066,  1243,  2449,  2584,   829,  2446,  2585,  1055,  -672,
    2588,  2110,  2649,  2589,  1056,  2038,  2111,  3127,  -672,   915,
    1057,  2112,  1322,  1799,    84,  1406,  1245, -2072, -2072,  2164,
    1246,  1528,  2432,  2709,  2433,   915,  2446,  3375,  1221,  1058,
    1223,   532,   830,   532,  2798,   532,  2044,  2799,  2948,  1092,
    3311,  2289,   772,  1243,  1097,    80,  2186,   532,   532,  1241,
    1247,  1184,  3312,  1188,   915,  1242,  3376,  3329,  1199,   792,
    2969,   915,  1207,  2970,  2977,  1101,  3015,  2978,  1964,  2040,
    2626,  3070,  1965,  1196,  3071,  1966,  1967,  1968,  3170,  2140,
    3171,  2040,   658,  2446,  1206,  2479,   532,   658,  1243,  1243,
    1209,  3255,  1210,   915,   532,   532,   915,  3189,  1211,  3199,
    2040,   915,  3200,   908,  1214,   532,   532,   532,   532,  1406,
     532,  1406,  1477,  1478,  2480,  2229,   532,  1621,   532,  2664,
     832,  3288,  1248,  3331,  2289,  1215,  2040,  1222,  1625,   532,
     532, -2074, -2074,  3455,   532,   532,  3456, -2075, -2075,   532,
     532,   532,   532,  1237,   532,   532,  2695,  2696,  2697,  2698,
    1239,  3486,  1322,  1244,  1638,  2931,  2247,  -672,  2917,  1026,
   -2076, -2076,  2113,  1243,   924,   532,    29,  1238,  2968,   532,
     532,   532,  3404,  2114,  3377,   532,  3605,  2943,  3606,  3378,
    3487,  1240,  1483,  1484,  3379, -2077, -2077,  1252,  2959,  3108,
     532,  1101, -2078, -2078,  1964,  1322,  3482,  3483,  1965,   553,
    1253,  1966,  1967,  1968,  1244,    34,  3286, -2079, -2079,  1270,
    1271,   673,   673,  3501,  1246,  2522,  3502,   908,  3505,  2725,
    3509,  3456,  1655,  3510,   810,  1656,   559,  1210,   811,  1657,
    1274,  1406,  3529,   790,   790,  3530,   790,  2481,  3625,  1071,
    3646,  2040,  2482,  3456,  1272,  1025,  1278,  2539,    38,  1244,
    1244,    21,  3661,  3313,  3329,  2040,  3314,   559,   559,  1665,
     908,  1275, -2080, -2080,    39,  1246, -2096,  2829,  3686, -2081,
   -2081,  3530,    21,  2830,  1412,  3687,   908,  3677,  3688,  1413,
    1528,  1415,  1640,  1416,  1970,  1528,  2831,  3700,    40,  1597,
    1508,  1667,  1601,   808,  1420,  1276,  2668,  2311,  1422,  1487,
    1488,  3558,   699,  3488,  1423,   908,  2216,  2262,  3489,  1434,
    1246,  1246,   908,  1436,   532,  2832,  1248,  2833,  1072, -2083,
   -2083,  1437,  3573,  3574,  1244,  1443,   532, -2084, -2084,  1447,
     924,   659,   917,  1451,   667,  3380,  1450,  1928,  1930,  3329,
    1247,  2263, -2085, -2085,   908,   532,  3381,   908,  1025,  1453,
    1322,  1472,   908, -2086, -2086,  1073,  1971,  1459, -2087, -2087,
    1454,  3429, -2088, -2088,  2476,  3117,  3118,  1248,   540,  1466,
     665,  1074,  1471,   557,  1474, -2090, -2090,  1502,   590,  1505,
     915,  2269,  1075,   559,   532,  1246,  2913,   677,   532, -2092,
   -2092,  1507,   532,  2483, -1381, -2096,   524, -2095, -2095,  3570,
     716,   716,  1843,  1844,  2484,  1510,  2523,  1511,  2834,   784,
    1970,  1513,  1248,  1248, -2096,  2270,  1076,  -767,  -767, -2096,
    1485,  1486,  1531,  -716,  1487,  1488,   776,  1534,  -716,   532,
    1537,  -771,  -771,   541,  1102,   924,  -770,  -770,  2023,  2755,
    2756,  1715,  1717,  1568,  1583,  1581,  1586,  1591,  1593,  1594,
    1590,  1600,   659,  1607,  1602,   667,  2967, -2096,  1608,  3490,
      29,   801,  1616,  2908,  1619,  3003,  -915,  1077,  1617,  -922,
    3491,  -912,   659,   532,  1624,   667,  3624,   699,  2835,  -793,
     785,    29,  1971,  2836,   532,  1254,  -794,  1248,   937,  -913,
    1627,   665,  -916,  1628,  -914,  1632,  1646,  2041,  1649,    34,
    1645,  -716,  1713,  1694,  1255,   924,  1696,  1698,  1724,  1725,
    1078,   665,  2042,  1676,  1729,  1735,  1730,   524,  1736,  2045,
      34,  1101,  1225,  1227,  1964,  1772,  1779,    80,  1965,  2837,
     924,  1966,  1967,  1968,  1774,  1797,  1798,   524,   532,  1804,
    1805,  1799,    38,  1928,  1930,  1822,   915,  2838,  1406,  1406,
    1406,  -716,  1806,  1810,  1528,  1256,  1817,  1818,    39,  1839,
     786,    84,  1832,    38,   544,  1972,  1973,  1974,  1825,  1975,
    1976,  1977,  1978,  1979,  1980,  1847,   924,  1846,  1851,    39,
    1853,  1863,    40,  2044,  1873,  1864,  1876,  1877,  3094,  1322,
    2526,  1878,  1880,  1882,  1889,  1883,   699,  1891,  1898,  1900,
    1901,   532,  2024,    40,  1908,  1909,   658,  1919,   532,  1912,
    1913,   658, -2096,   658,   545,   658,   546,  2524,  2140,   532,
     532,   532,   532,  1954,   532,  2852,   776,  1924,  1914,    80,
    1915,   908,  3615,   547,  1949,   532,  1951,  1952,   532,   548,
    2020,  1953,   549,   532,   917,  3275,  1991,  1955,  2027,  2839,
    1956,   915,  1257,  1958,  1961,   532,  3116,  2840,  1983,  1992,
    1999,  2048,  1656,  2002,  2036,  2033,  2077,  2074,  2098,  2116,
    2079,  2119,  2141,   532,  2080,  2142,  1406,  2081,  1025,  2105,
    2117,  2148,  2082,  2106,  2162,  2163,  2161,   532,   532,  2168,
     532,  1972,  1973,  1974,   785,  1975,  1976,  1977,  1978,  1979,
    1980,  2182,  2185,  2195,  1258,   924,  2196,  1934,  2194,   787,
    2199,  2197,  1259,  2198,   667,   540,  2222,  2223,  2218, -2096,
     786,   915,  2215,  2224,  1260,  2286,  1683,  1684,  1685,  1686,
    1687,  1688,  2290,  1582,  2295,  2296,  2305,  2307,   532,  2308,
    1970, -1381,  2301,   924,  2309,  2323,   915,   532,   532,   532,
     665,  1605,  1935,  2324,   532,  2742,  1261,  2326,   532,   790,
    2329,  3553,  2330,  1026,  2331,  2333,  2334,  2338,  2339,  2337,
    2361,  2370,  2378,   532,  2340,  2341,   524,  2349,  1936,  1988,
     541,  1964,  2350,  2408,  1987,   776,   918,  2415,  2416,  2417,
    2426,  3335,   915,  3337,  2428,  2427,  2439,   908,  2442,  1937,
    2452,  2453,  2459,  1938,  2460,  2462,  2164,  2473,  2461,  1263,
    2471,  2478,  1971,  1644,  2485,  1033,   776,   673,  2494,   924,
    2495,  2497,  2498,  2499,  2520,  1939,  2511,  2527,  1940,   772,
    2530,  1264,  3413,  2532,  2534,  2303,   532,  -773,  2545,   532,
     917,  2549,   532,  2546,  2548,   776,  1941,  2550,  2552,  2555,
    2558,  2908,  2554,  1266,  2577,  2579,  2592,  2606,  2607,  1089,
     532,  2598,   532,  2599,  2600,  2608,   532,   532,   532,  2616,
     532,  2619,  2609,  2639,  2620,  2625,   559,   559,  2623,  2635,
    1182,  2638,  2643,  2306,  2647,  2642,  2652,  2654,  2662,   532,
      80,   532,   920,  2663,  2671,  2682,  3470,  1406,  2702,  2679,
    2685,  1406,  2911,  1406,   532,   532,   532,   532,   532,   532,
     532,   532,   532,   532,  2688,  2703,  2689,   837,  2707,  2913,
    2690,   915,  2691,  2712,  2715,  2728,  2721,  2730,  2731,  2745,
    2747,  2734,   532,  2752,  2766,   532,  1655,  2753,   532,  1656,
    1942,  3512,  1528,  1657,  2786,  2783,  1865,  2795,  1943,   934,
    2807,   532,  3508,  2788,  2805,  1867,  1868,  1869,  2811,   915,
    2818,   545,  2824,   546,   532,  2817,  2844,  2860,   924,  1944,
    2928,  2935,   908,  1665,  2929,  2930,  2939,  2946,  2950,  2947,
   -2096,  2951,  2958,   532,  2964,  2973,   548,  3371,  2966,   549,
    3067,  3000,  3069,  2974,  2289,  3073,  1945,   908,  2979,  3002,
     532,  3005,   917,  3006,  3007,  1667,  3075,   532,   532,   532,
     532,  3083,  3087,  3091,  3023,  3360,  3030,  3092,  3093,   532,
    3104,  1972,  1973,  1974,  3081,  1975,  1976,  1977,  1978,  1979,
    1980,  3101,   532,  3052,  3082,   915,  3106,  3107,  3133,  2936,
     658,  3111, -1331,   908, -2060, -2061,  3123, -2062, -2063,  3124,
   -2064,   659, -2065, -2066,   667, -2067,  3125,   532, -2068,  2164,
    3047, -2069,  3134,  3142,   924, -2070,  3047,  2960, -2071, -2072,
    2962, -2074, -2075, -2076,   716, -2077, -2078,  3413,  2486, -2079,
   -2080,  3144,   772,   772, -2081, -2083, -2084, -2085, -2086,   772,
     665,  3152,  3137, -2087, -2088, -2089, -2090, -2091,   918, -2092,
   -2093,  3160, -2094, -2095, -1332,  3162,  3172,  3145,  3163, -2096,
    3184,   532,  3173,  3166,  3176,  3178,   524,   532,  1638,  3188,
    3180,  3204,  3210,   532,  3209,  3212,  3213,  3251, -2096,   532,
    3262,  3253,  3252, -2096,  1101,  3263,  2106,  1964,  3265,  3277,
    3278,  1965,   532,   532,  1966,  1967,  1968,  3285,  3293,  3294,
     532,  3287,  2496,  3299,  3302,  3303,  3306,  3317,  3319,  3318,
    3332,   658,  2726,  3340,  3333,  3336,  3339,   532,   921,  3342,
     917, -2096,   908,  3345,  3356,  3219,    80,   559,   559,  1101,
     559,   658,  1964,    80,   915,  3359,  1965,  3383,  3368,  1966,
    1967,  1968,  3385,  3406,  3408,  3418,  3100,  3422,  3424,  3425,
    3441,   917,   917,  3428,   920,  3443,  3449,  3017,  3450,  3451,
    2911,  3457,  3460,  3462,  3469,  3545,  3464,   917,  3467,  1529,
    3026,  3474,  3043,  3485,  3492,  3500,  3481,  1676,  3503,  3514,
    1551,  3519,  3526,  3527,  3511,   525,   533,  1475,  1476,  3525,
     558,  3528,  3531,  3532,  3539,   558,  3534,   532,  3540,   669,
    3549,   674,   674,   676,   558,   681,   559,  3541,   681,  3551,
    3568,   702,   705,   532,   705,  3582,  3559,   558,   558,  3562,
    3569,  3588,  3591,  3593,  2032,  3589,   532,  2035,  1529,  3596,
     915,  3578,  1025,  3599,  3590,  3614,   908,  3644,  3645,  3651,
    3659,  3660,   708,  3667,   918,  3672,  3670,  3678,  3682,  3683,
    3693,  3706,  3695,  3701,  3114,  2859,  2863,  2913,  2249,  1212,
    2575,   776,   532,  2158,   561,  1035,  2615,  2665,   775,  1477,
    1478,  2933,   702,  3167,  3523,  3640, -2096,   705,   558,   705,
     705,   705,  3273,  3587,  3594,  3634,  1650,   924,   532,  1788,
    3316,  2557,  2582,  2957,  3584,  1653,  2828,  3592,  2864,  2553,
    3583,  2624,  1859,  1970,  2801,   800,   924,   803,  2949,   807,
    1916,  1701,  1926,  1894,  3453,  2800,  3257,  3544,  3405,  3633,
    3149,  3434,  1711,  3702,  1529,  1529,  3708,  3292,  3692,  3681,
    3598,  3673,  3705,   532,  3579,  1479,  1480,  1481,  1482,  1483,
    1484,  3045,  2781,  1485,  1486,  2782,  3480,  3557,  1970,  3349,
     920,  1044,  3679,  3054,   917,  3680,  1588,  2510,  2537,  1726,
    2214,  1769,  2693,  1768,   924,  1589,   532,  3552,  2547,  3463,
    2191,  3338,  1773,  2213,   660,  1971,  2519,  3698,  2687,  1062,
    2444,  3300,  1554, -2096,  1599,  2911,   532,   532,  1046,  2686,
    1683,  1684,  1685,  1686,  1687,  1688,  2706,  1907,  1541,   532,
    3465,  3279,  1543,   559,   772,   532,   918,   532,  1547,  3466,
     532,  1548,  3613,   559,  2469,   559,  2540,  2456,   559,  2285,
    1971,  2011,  3068,   667,   559,   532,   559,  1638,  2157,  2450,
     921,   684,   798,     0,     0,     0,     0,     0,   559,  3254,
    3256,     0,     0,   559,     0,     0,     0,   559,   559,   559,
     559,     0,   559,   559,     0,     0,  1487,  1488,  1638,   665,
       0,     0,     0,     0,     0,  1101,     0,     0,  1964,     0,
     772,     0,  1965,     0,     0,  1966,  1967,  1968,     0,     0,
       0,   908,     0,     0,     0,   524,     0,   775,     0,   917,
       0,   532,     0,  3018,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   915,  3290,  3291,     0,     0,     0,  1254,
       0,     0,   920,     0,     0,     0,   667,   716,     0,     0,
       0,     0,   915,     0,     0,   532,     0,  1406,  1255,     0,
       0,     0,     0,     0,     0,  3438,     0,     0,  3442,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   665,     0,  1854,     0,     0,     0,   772,     0,
       0,   772,     0,     0,   532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   918,  1489,  1490,     0,   524,  1256,
     915,     0,    80,     0,  1972,  1973,  1974,     0,  1975,  1976,
    1977,  1978,  1979,  1980,     0,  1491,     0,     0,     0,     0,
       0,   532,     0,   917,     0,   918,   918,     0,     0,     0,
      80,     0,     0,    80,   772,   772,     0,     0,     0,     0,
       0,   918,   559,     0,     0,     0,   921,     0,     0,  1972,
    1973,  1974,     0,  1975,  1976,  1977,  1978,  1979,  1980,     0,
       0,     0,     0,     0,     0,     0,   917,     0,     0,     0,
       0,     0,     0,  2035,     0,     0,     0,     0,     0,     0,
       0,     0,   917,     0,     0,     0,     0,     0,   532,     0,
       0,  1101,  1947,  3445,  1964,     0,  1257,     0,  1965,     0,
     920,  1966,  1967,  1968,  1970,     0,     0,     0,     0,  3448,
       0,   917,   559,  3452,     0,     0,     0,     0,   917,  3564,
    1644,     0,     0,     0,     0,   532,     0,     0,     0,     0,
     658,   920,   920,   667,     0,   705,     0,   705,     0,   532,
     532,   532,   705,     0,     0,   705,     0,   920,  1258,   532,
     917,     0,     0,   917,   558,     0,  1259,     0,   917,     0,
       0,     0,     0,   815,     0,   817,     0,     0,  1260,   665,
     825,     0,     0,   826,   908,     0,  1971,     0,     0,     0,
       0,     0,  2052,     0,   928,   558,   558,  3597,     0,  3438,
       0,     0,  1406,  2911,     0,   524,     0,     0,     0,     0,
    1261,   559,     0,     0,     0,     0,     0,     0,   921,     0,
     772,     0,   772,     0,   532,     0,   532,     0,   667,     0,
       0,     0,     0,     0,     0,  1034,   533,   674,   918,     0,
    1655,     0,     0,  1656,     0,     0,     0,  1657,     0,  1921,
     525,  1922,   772,   772,   705,     0,     0,     0,     0,     0,
       0,   908,     0,  1263,   665,   669,  1066,  1066,     0,     0,
     532,  1066,  1084,     0,   532,     0,     0,  1665,  2154,     0,
       0,     0,  1051,     0, -2096,  1264,     0,     0,   532,     0,
     524,     0,     0,     0,     0,   532,  1177,  1177,   681,   681,
       0,   681,     0,  3580,     0,     0,     0,  1266,     0,  1667,
       0,     0,     0,  3438,  3674,   705,     0,     0,     0,     0,
    1970,   558,     0,     0,     0,     0,  3595,     0,     0,     0,
       0,     0,     0,     0,     0,  1101,   772,   772,  1964,     0,
       0,     0,  1965,    80,   920,  1966,  1967,  1968,   923,     0,
       0,   772,   772,     0,     0,     0,     0,  3697,     0,     0,
     559,     0,   532,  3565,     0,     0,     0,     0,     0,  1475,
    1476,     0,     0,   918,     0,  3707,     0,   532,     0,     0,
     772,     0,  2735,  1638,     0,   532,   921,     0,   705,     0,
       0,   705,  1971,     0,   532,  1972,  1973,  1974,   772,  1975,
    1976,  1977,  1978,  1979,  1980,     0,     0,     0,     0,     0,
       0,     0,     0, -2096,     0,     0,  1213,   921,   921,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   705, -2096,   921,     0,     0,     0, -2096,   705,   705,
     705,   705,   705,     0,     0,     0,     0,   917,     0,     0,
       0,  1477,  1478,     0,   705,     0,     0,     0,     0,  1419,
       0,     0,    80,    80,     0,     0,  1425,  1428,  1430,  1432,
    1433,     0,     0,     0,  1101, -2096,     0,  1964,     0,   920,
       0,  1965,  1438,     0,  1966,  1967,  1968,   918,     0,     0,
       0,     0,   559,     0,     0,     0,  2032,     0,     0,     0,
       0,  1529,  3627,     0,     0,  2372,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1479,  1480,  1481,
    1482,  1483,  1484,     0,  2221,  1485,  1486,    80,    80,     0,
     918,  1676,     0,     0,  2230,     0,  2233,     0,     0,  2244,
       0,     0,     0,     0,     0,  2248,   918,  2250,     0,     0,
       0,     0,     0,     0,  1970,     0,     0,     0,     0,  2257,
       0,     0,     0,     0,  2260,     0,     0,     0,  2265,  2266,
    2267,  2268,     0,  2272,  2273,   918,     0,     0,     0,     0,
       0,     0,   918,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   920,     0,     0,     0,     0,     0,     0,
     559,  1972,  1973,  1974,  1529,  1975,  1976,  1977,  1978,  1979,
    1980,     0,     0,   917,   918,     0,     0,   918,     0,     0,
     921,     0,   918,     0, -1812,  2106,  1971,   559,     0,     0,
   -2096,     0,  1540,     0,   538,     0,   920,     0,  1487,  1488,
       0,     0,   559,   559,   559,   559,   559,   559,   559,   559,
     559,   559,   920,  1066,  1084,     0,     0,     0,   705,     0,
     923,     0,     0,     0,     0,     0,     0,  1066,  1066,     0,
       0,   558,     0,     0,     0,     0,     0,   669,     0,     0,
       0,   920,   669,     0,     0,     0,  1558,     0,   920,   558,
    1254,     0,     0,  1970,     0,     0,    80,     0,     0,     0,
       0,     0,     0,     0,  1618,     0,     0,     0,     0,  1255,
       0,     0,    80,     0,     0,     0,    80,     0,   917,     0,
     920, -1812,     0,   920,     0,     0,     0,     0,   920,     0,
       0,     0,     0,     0,     0,     0,     0, -2096,  2032,     0,
       0,     0,  1475,  1476,  1683,  1684,  1685,  1686,  1687,  1688,
       0,   558,     0,     0,     0,   921,     0,  1489,  1490,     0,
    1256,  2850,     0,     0,     0,  1971,     0,     0,     0,  2851,
       0,     0,     0,     0,     0,     0, -1812,     0, -1814,     0,
       0,  2106,     0,     0,     0,     0,     0,     0,   917,     0,
   -1812,     0,     0,     0,     0, -1812,  1718,     0,     0,  1720,
   -1812,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2587, -1812,     0,   917,   558,   558, -1812,     0,     0,     0,
       0,     0,   705,     0,  1477,  1478,     0,     0,     0,     0,
    2852,     0,     0,     0,     0,  1972,  1973,  1974,     0,  1975,
    1976,  1977,  1978,  1979,  1980,     0,     0, -1812,   705,  1791,
       0,     0,     0,     0,     0,  2613,   923,  1257,     0,   917,
       0,   705,     0,  2617,     0,     0,     0,     0, -1812,   921,
       0,     0,     0,  2629,     0, -1814,  1780,     0,   705,     0,
       0,   559,   705,     0,     0,     0,  1834,     0,     0,  1807,
    1479,  1480,  1481,  1482,  1483,  1484,    80,     0,  1485,  1486,
       0,   918,  1921,     0,     0,     0,     0,     0,     0,  1258,
    1831,     0,   921,     0,     0,     0,     0,  1259, -1812,    80,
       0, -1812,     0,     0,     0,     0,     0, -1812,   921,  1260,
   -1814,     0,  2853,     0,  1529,     0,     0,     0,     0,  2669,
       0,  2670,     0,     0, -1814,  2675,     0,  2678,     0, -1814,
       0,     0,     0,     0, -1814,     0,     0,   921,     0,     0,
       0,  1261,     0,     0,   921, -1814, -1812,     0,     0,     0,
   -1814,     0,     0,     0,  1972,  1973,  1974,     0,  1975,  1976,
    1977,  1978,  1979,  1980,     0,     0,     0,     0,   917,     0,
   -1812,     0,     0,     0,     0,     0,   921,     0,     0,   921,
       0, -1814,     0,     0,   921,     0,     0,   920,     0,     0,
       0,  1487,  1488,     0,  1263,     0,     0,     0,   923,     0,
       0,  1850, -1814,     0,     0,   705,   917,     0,     0,     0,
       0,   705,     0,     0,     0,     0,  1264,     0,     0,     0,
       0,     0,     0,  1888,     0,     0,     0,     0,   706,     0,
       0,  2634,     0,  1855,     0,     0,     0,     0,  1266,  1872,
    2854,     0,     0,  2855,     0,     0,     0,   918,     0,     0,
       0,     0, -1814,     0,  1905, -1814, -1812,     0,     0,  1905,
       0, -1814,     0,     0,     0, -1812,     0,     0,  1101,     0,
       0,  1964,     0,     0,     0,  1965,     0,     0,  1966,  1967,
    1968,     0,   917,     0, -1812,     0, -1812, -1812,     0,     0,
     928,   928,     0,     0,     0,   558,   558,     0,   558,   928,
   -1814,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1489,  1490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1812, -1814,     0, -1812, -1812, -1812,     0,
       0,     0,     0,     0,   559,     0,     0,     0,  2915,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1799,   918,   920,   559,   559,   525,     0,     0,     0,
       0,     0,     0,  2613,  2934,     0,   923,     0,     0,  1066,
       0,  2008,     0,     0,   558,     0,  1177,  1177,   559,   705,
       0,   669,   706,     0,     0,     0,   669,     0,   669,     0,
     669,     0,   558,     0,     0,   558,     0,   923,   923,     0,
       0,     0,     0,     0,     0,     0,     0,  2019,     0,     0,
   -1814,     0,     0,   923,     0,  2069,     0,     0,     0, -1814,
    2073,     0,   918,     0,     0,     0,     0,     0,     0,     0,
       0,   917,     0,     0,     0,     0,     0,     0, -1814,     0,
   -1814, -1814,     0,     0,     0,     0,     0,   918,     0,     0,
       0,     0,     0,     0,     0,   928,     0,     0,   920,     0,
       0,     0,     0,   921,     0,     0,     0,     0,     0,     0,
       0,  2809,     0,     0,     0,     0,     0, -1814,     0,     0,
   -1814, -1814, -1814,     0,     0,     0,  1177, -2096,  1655,     0,
       0,  1656,     0,   918,     0,  1657,     0,     0,  2861,     0,
    3032,     0,     0,     0,     0,     0,     0,  2155,     0,   705,
       0,   705,     0,  2918,  2919,  2920,  2921,  2922,  2923,  2924,
    2925,  2926,  2927,   705,  2177,  1665,     0,   917,   920,     0,
       0,     0, -2096,     0,     0,     0,     0,  2156, -1828,  2159,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2171,     0,   920,     0,     0,     0,  1667,     0,  1971,
       0,     0,   705,     0,     0,     0,     0,     0,     0,     0,
    1791,   558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   558,  2231,   558,  2235,     0,   558,     0,     0,     0,
    2209,     0,   558,     0,   558,     0,     0,     0,     0,   920,
     923,     0,     0,     0,     0,   928,   558,     0,     0,     0,
     928,   558,     0,     0,     0,   558,   558,   558,   558,     0,
     558,   558,   918,     0,     0,     0,     0,     0,     0,   921,
    2738,     0,     0,     0,     0, -1828,   559,     0,     0,     0,
       0,   705,     0,     0,     0,   705,   705,   705,     0,     0,
       0,   705,     0,     0,     0,     0,     0,     0,     0,     0,
     918, -2096,     0,     0,     0,     0,  2319,     0,     0,  2294,
       0,     0,     0,  2298,  2299,  2300,     0,     0,     0,  2302,
   -2096,     0,     0,     0,     0, -2096,     0,     0,     0,     0,
   -1828,     0,     0,     0,     0,  3146,  1655,     0,     0,  1656,
       0,     0,     0,  1657, -1828,     0,  1660,  1661,  1662, -1828,
       0,     0,     0,     0, -1828,     0,     0,     0,  1529,     0,
       0,     0,     0, -2096,  1663, -1828,     0,     0,   920,     0,
   -1828,     0,     0,  1665,   921,   923,   918,     0,     0,     0,
    1666,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3095,     0,     0,     0,     0,     0,     0,     0,
       0, -1828,     0,     0,     0,  1667,   920,     0,  1972,  1973,
    1974,     0,  1975,  1976,  1977,  1978,  1979,  1980,  3197,  1676,
       0,     0, -1828,     0,  1101,     0,     0,  1964,     0,     0,
     558,  1965,     0,     0,  1966,  1967,  1968,     0,     0,     0,
     917,     0,   705,     0,   921,     0,     0,     0,     0,     0,
       0,     0,  3628,     0,     0,   669,     0,     0,     0,   917,
       0,   558,     0,     0,     0,     0,     0,     0,     0,   921,
    2434,     0, -1828,     0,     0, -1828,     0,     0,     0,     0,
       0, -1828,   920,     0,     0,     0,     0,     0,     0,   923,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     558,     0,     0,     0,  2467,     0,     0,     0,   558,  1668,
       0,  2915,     0,     0,     0,   921,     0,   917, -2096,     0,
   -1828,     0,     0,     0,     0,   918,     0,     0,  1669,     0,
       0,     0,   923,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1828,  2069,     0,     0,   923,     0,
       0,     0,     0,     0,     0,  1671,  1672,     0,     0,     0,
       0,     0,     0,   559,     0,     0,     0,     0,     0,     0,
       0,  1673,     0,     0,     0,     0,   669,   923,     0,     0,
       0,     0,     0,     0,   923,     0,     0,     0,     0,   558,
       0,     0,     0,     0,     0,     0,   669,     0,     0,     0,
    2177,     0,   706,     0,     0,     0,     0,     0,     0,     0,
    1674,     0,     0,  1675,     0,     0,   923,     0,     0,   923,
       0,   918,     0,     0,   923, -2096,     0,  1676,     0,     0,
   -1828,   920,  1683,  1684,  1685,  1686,  1687,  1688,     0, -1828,
       0,     0,     0,  1970,   921,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1850,     0,     0,     0, -1828,     0,
   -1828, -1828,     0,     0,     0,  3276,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3430,     0,     0,     0,     0,
       0,     0,   921,     0,  1655,  3283,  3284,  1656,     0,     0,
       0,  1657,     0,     0, -2096, -2096, -2096, -1828,     0,     0,
   -1828, -1828, -1828,     0,  1655,     0,     0,  1656,     0,  3304,
       0,  1657,     0,     0,     0,  1971,     0,  1850,     0,     0,
       0,  1665,     0,     0,   705,     0,  1678,   920,  1666,     0,
       0,     0,     0,     0,     0,  1850,   705,   705,   558,     0,
     705,  1665,     0,     0,     0,     0,     0,     0, -2096,     0,
       0,   705,  2618,  1667,   705,     0,     0,     0,   921,   705,
       0,     0,     0,     0,  2631,  2633,     0,     0,  2637,     0,
       0,  2660,     0,  1667,     0,     0,     0,     0,     0,  2645,
       0,     0,  2648,     0,     0,     0,     0,  2653,     0,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1158,  1158,  1850,  1850,     0,  1850,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1679,     0,   525,  1680,  1681,  1682,     0,
    1683,  1684,  1685,  1686,  1687,  1688,  2739,     0,     0,     0,
       0,     0,     0,     0,  2692,     0,     0,  1668,     0,     0,
       0,     0,     0,   705,   705,   705,     0,     0,     0,     0,
     558,     0,     0,     0,   558,     0,  1669, -2096,     0,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,  2069,
       0,  2699,  2700,  2701,   918,     0, -2096,     0,     0,  2915,
       0, -2096,     0,   923,     0,     0,     0,   921,     0,     0,
       0,     0,     0,   918,     0,     0,     0,     0,     0,  1673,
       0,     0,  1324,  1329,  1972,  1973,  1974,     0,  1975,  1976,
    1977,  1978,  1979,  1980,     0,     0,     0,     0,     0, -2096,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2794,     0,     0,  2797,     0,     0,  2177,     0,
       0,     0,     0,     0,     0,     0,     0,  3504,     0,     0,
       0,   918,     0,     0,     0,  1676,   705,     0,   558,     0,
       0,     0,  1850,  1791,  1850,     0,  1888,     0,     0,     0,
       0,     0,     0,     0,     0,  1676,     0,     0,     0,     0,
     920,     0,     0,   921,  2808,   558,  1101,  2862,     0,  3219,
       0,     0,     0,  3220,     0,     0, -2096, -2096, -2096,   920,
     558,   558,   558,   558,   558,   558,   558,   558,   558,   558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3227,     0,     0,     0,     0,  2319,     0,
    3228,   705,     0,     0,   705,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1791,     0,   923,
       0,     0,     0,     0,  1678,  3229,     0,   920,     0,  2942,
    1888,     0,  2945,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2096,     0,     0,     0,     0,  1850,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   558,     0,     0,     0,
       0,     0,     0,   705,   705,   705,   705,     0,     0,     0,
       0,     0,     0,     0,     0,   928,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3008,     0,
    1535,  2981,  2982,  2983,  2984,     0,     0,     0,     0,     0,
       0,     0,  1557,     0,     0,  1559,     0,     0,  1569,  1572,
    1577,  1580,     0,  3028,   923,   669,     0,     0,     0,  3230,
       0,  1679,     0,     0, -2096, -2096, -2096,     0,  1683,  1684,
    1685,  1686,  1687,  1688,     0,     0,     0,     0,  3231,     0,
       0, -2096,     0,  3232,  1324,     0,     0,     0,  1683,  1684,
    1685,  1686,  1687,  1688,  1177,     0,     0,     0,     0,     0,
       0,  1622,     0,     0,     0,     0,     0,  2177,     0,     0,
       0,     0,     0,  2069,     0,     0,     0,     0,  1626,  1791,
       0,  3235,     0,     0,   923,  1850,     0,     0,     0,  1629,
    1630,  1631,     0,  1635,  1639,     0,     0,     0,   928,   558,
       0,     0,     0,     0,     0,     0,   705,     0,     0,   923,
       0,     0,     0,     0,     0,     0,   921,     0,     0,     0,
    1697,     0,     0,  3115,     0,  1241,     0,     0,     0,     0,
       0,  1242,     0,     0,  3102,   921,     0,  1971,     0,  1254,
       0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,   923,     0,     2,  1255,     3,
       4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1566,     0,     0,  1743,     6,     0,     0,  1759,
    1764,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       0,     0,     0,   921,     0,     0,     0,     8,     0,     0,
       0,     0,     0,  1850,     0,     0,     0,     0,     9,  1256,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2319,
      10,     0,   591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3165,     0,  1324,     0,  3239,     0,     0,  1243,
      12,     0,     0,     0,     0,     0,  1324,     0,     0,     0,
       0,     0,     0,     0,    13,     0,     0,     0,     0,  1655,
       0,     0,  1656,     0,     0,   592,  1657,     0,  3183,     0,
       0,  1324,     0,    16,     0,  1654,     0,  1691,     0,     0,
    1655,    17,     0,  1656,   923,     0,     0,  1657,  1658,  1659,
    1660,  1661,  1662,     0,  3195,     0,  1665,    20,     0,     0,
       0,    21,     0, -2096,     0,     0,  1257,     0,  1663,     0,
       0,     0,  1664,     0,     0,     0,     0,  1665,     0,     0,
    1691,     0,   923,     0,  1666,     0,     0,     0,  1667,     0,
       0,     0,     0,  1101,     0,     0,  3219,     0,     0,  2794,
    3220,     0,     0,  3240,    23,     0, -2096, -2096, -2096,  1667,
    3244,  3245,  3246,  3247,  3248,  3249,     0,     0,  1258,     0,
       0,     0,     0,     0,     0,     0,  1259,     0,     0,     0,
    3227,    24,   558,     0,     0,     0,     0, -2096,  1260,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   558,   558,     0,     0,     0,     0,   923,     0,
    1244,  3021,  3229,     0,     0,   705,     0,     0,     0,     0,
    1261,   705,     0,  1791,     0,     0,   558,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   705, -2096,  2942,  3330,     0,     0,     0,     0,  3301,
       0,     0,     0,  1691,     0,     0,     0,     0,  1691,     0,
       0, -2096,    25,  1668,     0,    26, -2096,  1262,     0,  3325,
       0,  1246,     0,  1263,     0,     0,     0,     0,     0,     0,
       0,     0,  1669,     0,     0,  3484,     0,  1670,     0,     0,
       0,     0,     0,     0,     0,  1264,     0,    27,     0,     0,
    1950,  1265,     0,     0, -2096,     0,    28,   928,     0,  1671,
    1672,     0,     0,     0,     0,     0, -2096,  1266,     0,     0,
      29,     0,     0,     0,     0,  1673,     0,    30,     0,     0,
    1177,  1177,    31,     0,     0, -2096,  1577,  3330,  1577,  1577,
   -2096,   705,     0,    32,     0,     0,  1655,     0,     0,  1656,
       0,  1158,  1158,  1657,     0,    33,     0,   923,     0,    34,
    1676,     0,     0,     0,  1674,     0,     0,  1675,     0,  3409,
       0,     0,     0,  1248,     0,     0,     0,     0, -2096,    35,
     705,  1676,     0,  1665,  1677,     0,     0,     0,     0,     0,
   -2096,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,    38,     0,     0,     0,   593,     0,  3444,     0,
       0,     0,     0,     0,  2084,  1667,     0,  3183,    39,     0,
    2088,  2089,  2090,  2091,  2092,  2093,  2094,     0,     0,     0,
    1564,  2103,  2104,     0,  1971,     0,  2115,     0,     0,     0,
    2118,     0,    40,  2126,  2127,  2128,  2129,  2130,  2131,  2132,
    2133,  2134,     0,   923,  2135,     0,   594,     0,     0, -2096,
       0,  1158,     0,  1324,  1691,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1678,     0,     0,     0,   558,     0,  1691,  2160,  1691,     0,
    1566,  1566,  1981,     0,     0,  1566,     0,     0,  1691,     0,
       0,  1691,     0,     0,     0,     0,  1691,     0,     0,  1691,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2096,
       0,  1791,     0,  1630,  1631,     0,     0,     0,     0,     0,
       0,     0,     0, -2096,  3330,   928,   928,   928, -2096,     0,
       0,     0,     0, -2096,     0,  2008,     0,     0,     0,     0,
       0,  1691,     0,     0,     0,  1691,     0,     0,  1691,  1691,
    1691,     0,     0,     0,  1691,     0, -2096,     0,  1691,     0,
       0,     0,     0,  1683,  1684,  1685,  1686,  1687,  1688,     0,
    1177, -2096,     0,     0,     0,     0,     0,  1679,     0,     0,
    1680,  1681,  1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,
       0,     0,     0,  1324,  1765,     0,  2282,  2283,     0,  2284,
     705,     0,  1791,     0,     0,     0,     0,     0,     0,  3330,
       0,     0,     0,     0,     0,     0,  1691,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1676,  3601,     0,
   -2096,     0,  1565,     0,     0,     0,  1324,  3244,  3245,  3246,
    3247,  3248,  3249,     0,     0,     0,   705,     0,     0,     0,
    2177,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1691,     0,   705,     0,     0,     0,     0,     0,
       0,   928,     0,     0,  3632,     0,     0,     0,  1691,     0,
       0,     0,     0,  1691,     0,     0,  1655,     0,     0,  1656,
       0,     0,  2942,  1657,  1658,  1659,  1660,  1661,  1662,     0,
       0,     0,     0,     0,     0,     0,     0,  2383,     0,     0,
    2384,     0,  2385,     0,  1663,     0,   923,     0,  2720,     0,
       0,     0,     0,  1665,     0,     0, -2096,     0,     0,     0,
    1666,     0,     0,     0,     0,   923,     0,     0,   705,     0,
    2410,  2411,     0,     0,  2160,     0,     0,     0,     0,     0,
       0,     0,     0,   705,     0,  1667,     0,     0,     0,     0,
       0,   558,     0,     0,     0,     0,  2942,     0,     0,     0,
     705,     0,     0,  2438,     0,     0,  2441,     0,     0,     0,
       0,  3696,  1101,     0,     0,  3219,     0,     0,     0,  3220,
       0,  1324,     0,   923,     0,     0,     0,     0,  3703,     0,
       0,  2454,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3227,
       0,     0,     0,     0,     0,     0, -2096,  2465,     0,     0,
       0,     0,  2468, -2096,     0,  2470,     0,     0,     0,     0,
    1683,  1684,  1685,  1686,  1687,  1688,     0,     0,     0,     0,
       0,  3229,     0,     0,     0,     0,     0,     0,     0,  1668,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1691,
       0,     0,  2488,     0,     0,  2491,     0,  2493,  1669,     0,
       0,  1981,  1981,  1670,  1566,  1566,  1566,  1566,  1566,     0,
       0,  1566,  1566,  1566,  1566,  1566,  1566,  1566,  1566,  1566,
    1566,  1981,     0,     0,     0,  1671,  1672,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1673,     0,     0,  3493,     0,     0,     0,  1564,  1564,
       0,     0,     0,  1564,     0,  1743,     0,  3215,  3216,  3217,
    3218,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1764,  2133,     0, -2096,     0,     0,     0,     0,
    1674,     0,     0,  1675,     0,     0,     0,     0,     0,     0,
       0,  2551,     0,     0, -2096,     0,     0,  1676,     0, -2096,
    1677,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1691,     0,     0,     0,  1691,  1691,  1691,
    1691,  1691,  1691,  1691,     0,     0,     0, -2096,     0,  1566,
    1566,     0,  1691,  1691,     0,     0,     0,     0,     0,     0,
    1324,     0,     0,     0,  1691,     0,     0,  1691,     0,     0,
       0,     0,     0,     0,     0,  1691,  1691,  1691,  1691,  1691,
    1691,  1691,  1691,  1691,  1691,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1971,     0,     0,  1678,     0,     0,  1691,
       0,     0,  2651,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3361,  3362,  3363,
    3364,  3365,  3366,  3367,     0,     0,     0,  3372,  3373,     0,
       0,     0,  3382,     0,     0,  3384,  2193,     0,  3391,  3392,
    3393,  3394,  3395,  3396,  3397,  3398,  3399,  3400,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1565,  1565,     0,     0,     0,  1565,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2096,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1679,     0,     0,  1680,  1681,  1682,     0,
    1683,  1684,  1685,  1686,  1687,  1688,     0,     0,     0,     0,
    2078,  1691,  1691,  1691,     0,     0,     0,     0,  2711,     0,
       0,     0,     0,     0,     0,     0,     0,  2716,     0,     0,
       0,     0,     0,     0,     0,     0,  2724,     0,     0,  2727,
       0,  2729,     0,     0,     0,     0,     0,     0,     0,  2733,
       0,     0,     0,     0,     0,     0,     0,  2740,  2741,     0,
       0,  2744,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3494,     0,  3497,     0,  3499,     0,     0,     0,
       0,     0,     0,  2785,     0,  2146,     0,     0,     0, -2096,
       0,     0,     0,     0,     0,  2802,  3244,  3245,  3246,  3247,
    3248,  3249,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1691,  1691,  1691,     0,     0,  1981,  1981,  1981,
    1981,  1981,     0,     0,     0,  1981,  1981,  1981,  1981,  1981,
    1981,  1981,  1981,  1981,  1981,     0,     0,     0,  1565,  1691,
    1691,     0,  1564,  1564,  1564,  1564,  1564,     0,     0,  1564,
    1564,  1564,  1564,  1564,  1564,  1564,  1564,  1564,  1564,     0,
       0,     0,     0,     0,     0,     0,     0,  1691,  3563,     0,
    1691,  3566,  3567,     0,     0,     0,     0,     0,     0,     0,
    3571,     0,     0,  1691,     0,     0,     0,  3577,     0,     0,
       0,     0,     0,     0,  1691,     0,     0,  1691,     0,  1691,
       0,     0,     0,  1981,  1981,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1691,  1566,  1566,
    1691,     0,  1691,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3621,  3622,     0,     0,  3623,     0,     0,     0,  3626,
       0,     0,  3629,  3630,     0,  2998,  2999,     0,     0,     0,
       0,     0,     0,  3004,     0,     0,     0,  1564,  1564,     0,
    1691,     0,     0,     0,  3009,     0,     0,     0,  3011,  3012,
       0,     0,     0,  3013,     0,     0,     0,     0,  3016,     0,
       0,  3019,  3020,     0,     0,     0,  3024,     0,     0,     0,
       0,     0,     0,     0,  3662,  3663,     0,     0,  3664,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1158,
       0,     0,     0,     0,  1565,  1565,  1565,  1565,  1565,     0,
       0,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,
    1565,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1691,     0,     0,     0,     0,     0,     0,  3090,   -46,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,  1566,     0,     0,  3109,     0,     0,     0,     0,     0,
       2,     0,     3,     4,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     5,     0,     0,     0,     0,     6,
    1691,     0,     0,     0,     0,  1691,     0,     0,     7,     0,
       0,     0,     0,  1691,     0,     0,  1691,     0,  1691,     0,
       8,     0,  1691,     0,     0,  1981,  1981,     0,     0,  1691,
    1691,     9,     0,  1691,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    10,     0,    11,     0,     0,     0,  1565,
    1565,     0,     0,     0,     0,     0,     0,  1655,     0,     0,
    1656,     0,  3136,    12,  1657,  1658,  1659,  1660,  1661,  1662,
       0,     0,     0,     0,  1691,     0,     0,    13,     0,    14,
       0,     0,     0,     0,     0,  1663,     0,     0,    15,     0,
       0,  1691,     0,     0,  1665,     0,    16,     0,     0,     0,
       0,  1666,     0,     0,    17,     0,    18,    19,     0,     0,
       0,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
      20,  1566,     0,     0,    21,     0,  1667,     0,     0,  2465,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3190,  3191,     0,     0,  3192,     0,     0,     0,     0,     0,
       0,     0,    22,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,     0,     0,  1655,  3261,     0,
    1656,     0,     0,     0,  1657,  1658,  1659,  1660,  1661,  1662,
       0,  1101,     0,     0,  3219,     0,  3271,     0,  3220,     0,
       0,     0,     0,     0,     0,  1663,  1564,  1564,     0,     0,
    1668,     0,     0,     0,  1665,     0,     0,     0,     0,     0,
       0,  1666,     0,     0,     0,     0,     0,     0,  3227,  1669,
       0,     0,     0,     0,  1670, -2096,     0,     0,     0,     0,
       0,  1981,  1566,     0,     0,     0,  1667,     0,     0,     0,
       0,     0,     0,     0,     0,    25,  1671,  1672,    26,     0,
    3229,     0,     0,     0,     0,  3324,     0,  1691,  1691,     0,
       0,     0,  1673,  1691,     0,     0,     0,     0,  1691,     0,
    1691,  1691,  1691,  2998,     0,  1691,     0,  3341,  1691,  1691,
      27,  3344,     0,  1691,     0,     0,     0,  1655,     0,    28,
    1656,     0,     0,     0,  1657,     0,     0,  1660,  1661,  1662,
       0,  1674,     0,    29,  1675,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,    31,     0,     0,  1676,     0,
       0,  1677,     0,  3250,  1665,     0,    32,     0,     0,     0,
       0,  1666,     0,     0,     0,     0,     0,     0,    33,     0,
    1668,     0,    34,     0,     0,  1158,  1158,     0,     0,  1691,
       0,     0,     0,     0, -2096,  1981,  1667,     0,     0,  1669,
       0,     0,    35,  3420,  1670,     0,     0,     0,  1691,     0,
       0,     0,     0, -2096,     0,     0,     0,    36, -2096,     0,
      37,     0,     0,     0,     0,    38,  1671,  1672,     0,  1564,
       0,     0,     0,     0,     0,  1691,     0,     0,     0,     0,
       0,    39,  1673,     0,     0,     0,     0,     0,  1565,  1565,
       0,     0,     0,     0,     0,     0, -2096,  1678,     0,  3454,
       0,     0,     0,     0,     0,    40,     0,  1981,  3010,  2998,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,  1674,   -46,     0,  1675,     0,     0,     0,     0,  1691,
    1691,  1691,     0,     0,     0,     0,     0,     0,  1676,     0,
    1668,  1677,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1971,     0,  3250,  3250,  3250,  3250,     0,  1669,
       0,     0,     0,     0,  1670,     0,     0,     0,     0,     0,
    3065,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,  1672,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3524,     0,
    1691,     0,  1673,     0,  1679,     0,     0,  1680,  1681,  1682,
    1691,  1683,  1684,  1685,  1686,  1687,  1688,     0,     0,  1564,
       0,     0,     0,     0,  1957,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1678,     0,     0,
       0,  1674,     0,     0,  1675,     0,     0,     0,     0,     0,
       0, -2096,     0,     0,     0,     0,     0,     0,  1676,     0,
       0,     0,     0,  1691,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1158,     0,     0,     0,     0,
    1691,  1565,     0,  1691,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3250,  3250,  3250,  3250,  3250,  3250,  3250,     0,  1566,  1566,
       0,  3250,  3250,     0,     0,     0,     0,     0,     0,     0,
       0,  3250,     0,  3250,     0,     0,     0,  3610,  3610,     0,
    3250,  3250,  3250,  3250,  3250,  3250,  3250,  3250,  3250,  3250,
       0,     0,     0,     0,  1679,     0,     0,  1680,  1681,  1682,
       0,  1683,  1684,  1685,  1686,  1687,  1688,  1678, -2096,  1691,
    1564,  2078,     0,     0,     0,  3244,  3245,  3246,  3247,  3248,
    3249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3610,     0,  3066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1691,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1566,     0,     0,     0,     0,     0,     0,
       0,  1981,  1981,     0,     0,     0,     0,     0,     0,     0,
       0,  1565,     0,  3250,  1566,  1566,  3250,     0,  3250,     0,
       0,     0,     0,     0,     0,     0,     0,  3065,  3065,  3065,
    3065,  3610,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1691,  1679,     0,     0,  1680,  1681,  1682,
       0,  1683,  1684,  1685,  1686,  1687,  1688,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1981,     0,     0,
       0,  1101,  3250,     0,  3219,  3250,  3250,     0,  3220,     0,
    3250,     0,  1981,  1981,     0,     0,  3250,     0,     0,  1655,
       0,     0,  1656,     0,     0,     0,  1657,  1658,  1659,  1660,
    1661,  1662,     0,     0,     0,     0,     0,     0,  3227,     0,
       0,     0,     0,     0,     0, -2096,     0,  1663,     0,  1691,
       0,     0,     0,     0,     0,     0,  1665,     0,     0,     0,
    3250,  3250,  3250,  1666,     0,  3250,     0,     0,  3250,  3250,
    3229,     0,  1565,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1667,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3250,  3250,  3250,     0,     0,     0,  3065,  3065,  3065,
    3065,  3065,  3065,  3065,     0,     0,     0,  3065,  3065,     0,
       0,     0,  3065,     0,     0,  3065,     0,     0,  3065,  3065,
    3065,  3065,  3065,  3065,  3065,  3065,  3065,  3065,     0,  1655,
       0,     0,  1656,  3572,     0,     0,  1657,  1658,  1659,  1660,
    1661,  1662,     0,     0,     0,     0,     0,     0,     0,  3066,
    3066,  3066,  3066,     0,     0,     0,     0,  1663,     0,     0,
       0,     0,     0,     0, -2096,     0,  1665,     0,     0,     0,
       0,     0,     0,  1666,     0,     0,     0,     0,     0,     0,
       0,     0,  1668, -2096,     0,     0,     0,     0, -2096,     0,
       0,     0,     0,     0,  1241,     0,     0,     0,  1667,     0,
    1242,  1669,     0,     0,     0,     0,  1670,     0,  1254,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2096,  1255,  1671,  1672,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1673,     0,  1564,  1564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3065,     0,  3065,     0,  3065,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1256,     0,
       0,     0,  1971,  1674,     0,     0,  1675,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1676,     0,  1668,  1677,     0,     0,     0,     0,  1243,  3066,
    3066,  3066,  3066,  3066,  3066,  3066,     0,     0,     0,  3066,
    3066,  1669,     0,     0,  3066,     0,  1670,  3066,     0,     0,
    3066,  3066,  3066,  3066,  3066,  3066,  3066,  3066,  3066,  3066,
    3401,     0,     0,     0,     0,     0,     0,     0,  1671,  1672,
       0,  1564,     0,     0,     0,     0,     0,     0,  3065,     0,
       0,  3065,  3065,     0,  1673,     0,     0,     0,     0,     0,
    3065,     0,  1564,  1564,     0,  1257,     0,  3065,     0,     0,
       0, -2096,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1678,
       0,     0,     0,  1674,     0,     0,  1675,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1676,     0,     0,  1677,     0,     0,     0,  1258,     0,     0,
       0,     0,     0,     0,     0,  1259,     0,     0,     0,     0,
       0,  3065,  3065,     0,     0,  3065,     0,  1260,     0,  3065,
       0,     0,  3065,  3065,     0,     0,     0,     0,  1565,  1565,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1244,
       0,     0,     0,     0,  3066,     0,  3066,     0,  3066,  1261,
       0,     0,     0,     0,     0,     0,     0,     0, -2096,     0,
       0,     0,     0,     0,     0,  3244,  3245,  3246,  3247,  3248,
    3249,     0,     0,     0,  3065,  3065,  1679,     0,  3065,  1680,
    1681,  1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,  1678,
       0,     0,     0,  2382,     0,     0,  2251,     0,     0,     0,
    1246,     0,  1263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1264,     0,     0,     0,     0,     0,
    2252,     0,     0,  1565,     0,     0,     0,     0,     0,     0,
    3066,     0,     0,  3066,  3066,     0,  1266,     0,     0,     0,
       0,     0,  3066,     0,  1565,  1565,     0,     0,     0,  3066,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1679,     0,     0,  1680,
    1681,  1682,  1248,  1683,  1684,  1685,  1686,  1687,  1688,     0,
       0,     0,     0,  2472,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3066,  3066,     0,     0,  3066,     0,     0,
       0,  3066,     0,     0,  3066,  3066,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   107,
    1098,   538,  1099,  1100,  1101,  1102,  1103,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1104,  3066,  3066,   121,   122,
    3066,   123,   124,   125,   126,   127,   128,   129,   130,  1105,
     132,  1106,  1107,     0,   135,   136,   137,   138,   139,   140,
    1108,   630,   141,   142,  1109,  1110,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1111,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1112,  1113,   186,  1114,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   867,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1115,   218,   219,   220,   221,   222,   640,
    1116,   224,     0,   225,   226,  1117,   228,     0,   229,     0,
     230,   231,    21,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1118,  1119,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1120,  1121,     0,
    1122,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1123,   317,  1124,   319,   320,   321,   322,   323,  1125,   324,
     325,   326,   327,  1126,   645,   329,  1127,   331,   332,   333,
       0,   334,   335,     0,     0,  1128,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1129,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1130,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    29,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1131,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
      34,   451,   452,   453,   454,   455,   456,   457,     0,  1132,
    1133,     0,   460,     0,   461,   462,   652,   464,   653,  1134,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   656,  1135,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,    39,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1136,     0,    40,     0,     0,     0,     0,  1137,  1138,
       0,     0,     0,     0,     0,  1140,     0,  1141,  3179,     0,
       0,     0,     0,  1142,  1143,     0,     0,     0,     0,  1144,
    1145,  1280,  1098,   538,  1099,  1100,  1101,  1102,  1103,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,  1281,   117,
     118,   119,     0,     0,     0,     0,   120,  1104,     0,     0,
     121,   122,     0,   123,   124,   125,  1282,   127,   128,   129,
     130,  1105,  1283,  1106,  1107,     0,   135,   136,   137,   138,
     139,   140,  1108,   630,   141,   142,  1109,  1110,   145,     0,
     146,   147,   148,   149,   631,     0,  1284,     0,  1285,   153,
     154,   155,   156,   157,  1286,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,  1287,   169,   170,   171,
    1288,  1289,  1290,  1291,   637,   638,  1292,   177,   178,   179,
     180,   181,   182,   183,  1112,  1113,   186,  1114,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,  1293,     0,   200,   201,   867,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1115,   218,   219,   220,   221,
     222,   640,  1116,   224,     0,   225,   226,  1117,   228,     0,
     229,     0,   230,  1294,     0,  1295,   233,   234,  1296,  1297,
     237,     0,   238,   239,     0,     0,  1118,  1119,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,  1298,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,  1299,   264,   265,   266,   267,   268,   269,  1120,
    1121,     0,  1122,     0,   273,  1300,  1301,   276,  1302,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,  1303,
     287,  1304,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,  1305,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1123,  1306,  1124,   319,   320,   321,   322,   323,
    1125,   324,   325,  1307,   327,  1126,   645,   329,  1127,   331,
     332,   333,     0,   334,   335,     0,     0,  1128,   337,   338,
       0,     0,   339,   340,  1308,   342,  1309,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,  1310,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1129,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,  1311,   400,   401,
     402,  1130,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,  1312,
     421,   422,   423,   424,   425,   426,  1313,   428,   429,  1131,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,  1314,   446,   651,   448,     0,
     449,   450,     0,   451,  1315,   453,   454,   455,   456,   457,
       0,  1132,  1133,     0,   460,     0,   461,   462,   652,   464,
     653,  1134,   466,   467,  1316,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,  1317,     0,
     481,   482,   483,   484,   485,   486,  1135,  1318,   488,  1319,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1136,     0,     0,     0,     0,     0,     0,
    1137,  1138,  1320,     0,     0,     0,     0,  1140,     0,  1141,
    1321,     0,     0,     0,     0,  1142,  1143,     0,     0,     0,
       0,  1144,  1145,   107,  1098,   538,  1099,  1100,  1101,  1102,
    1103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1104,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1105,   132,  1106,  1107,     0,   135,   136,
     137,   138,   139,   140,  1108,   630,   141,   142,  1109,  1110,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1111,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1112,  1113,   186,  1114,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1115,   218,   219,
     220,   221,   222,   640,  1116,   224,     0,   225,   226,  1117,
     228,     0,   229,     0,   230,   231,    21,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1118,  1119,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1120,  1121,     0,  1122,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1123,   317,  1124,   319,   320,   321,
     322,   323,  1125,   324,   325,   326,   327,  1126,   645,   329,
    1127,   331,   332,   333,     0,   334,   335,     0,     0,  1128,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1129,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1130,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    29,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1131,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,    34,   451,   452,   453,   454,   455,
     456,   457,     0,  1132,  1133,     0,   460,     0,   461,   462,
     652,   464,   653,  1134,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   656,  1135,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,    39,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1136,     0,    40,     0,     0,
       0,     0,  1137,  1138,     0,     0,     0,     0,     0,  1140,
       0,  1141,     0,     0,     0,     0,     0,  1142,  1143,     0,
       0,     0,     0,  1144,  1145,   107,  1098,   538,  1099,  1100,
    1101,  1102,  1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1104,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1105,   132,  1106,  1107,  1573,
     135,   136,   137,   138,   139,   140,  1108,   630,   141,   142,
    1109,  1110,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1111,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1112,  1113,
     186,  1114,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   867,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1115,
     218,   219,   220,   221,   222,   640,  1116,   224,     0,   225,
     226,  1117,   228,     0,   229,     0,   230,   231,  1574,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1118,  1119,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1120,  1121,     0,  1122,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,  1575,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1123,   317,  1124,   319,
     320,   321,   322,   323,  1125,   324,   325,   326,   327,  1126,
     645,   329,  1127,   331,   332,   333,     0,   334,   335,     0,
       0,  1128,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1129,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1130,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1131,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1132,  1133,     0,   460,  1576,
     461,   462,   652,   464,   653,  1134,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1135,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1136,     0,     0,
       0,     0,     0,     0,  1137,  1138,     0,     0,     0,     0,
       0,  1140,     0,  1141,     0,     0,     0,     0,     0,  1142,
    1143,     0,     0,     0,     0,  1144,  1145,   107,  1098,   538,
    1099,  1100,  1101,  1102,  1103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116, -1187,   117,   118,   119,     0,     0,
       0, -1187,   120,  1104,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1105,   132,  1106,
    1107,     0,   135,   136,   137,   138,   139,   140,  1108,   630,
     141,   142,  1109,  1110,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1111,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1112,  1113,   186,  1114,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   867,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1115,   218,   219,   220,   221,   222,   640,  1116,   224,
       0,   225,   226,  1117,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1118,  1119,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1120,  1121,     0,  1122,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1123,   317,
    1124,   319,   320,   321,   322,   323,  1125,   324,   325,   326,
     327,  1126,   645,   329,  1127,   331,   332,   333,     0,   334,
     335,     0,     0,  1128,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1129,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1130,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1131,   431, -1187,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1132,  1133,     0,
     460,     0,   461,   462,   652,   464,   653,  1134,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1135,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1136,
       0,     0,     0,     0,     0,     0,  1137,  1138,     0,     0,
       0,     0,     0,  1140,     0,  1141,     0,     0,     0,     0,
       0,  1142,  1143,     0,     0,     0,     0,  1144,  1145,   107,
    1098,   538,  1099,  1100,  1101,  1102,  1103,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,  1739,   117,   118,   119,
       0,     0,     0,     0,   120,  1104,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1105,
     132,  1106,  1107,     0,   135,   136,   137,   138,   139,   140,
    1108,   630,   141,   142,  1109,  1110,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1111,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1112,  1113,   186,  1114,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   867,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1115,   218,   219,   220,   221,   222,   640,
    1116,   224,     0,   225,   226,  1117,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1118,  1119,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1120,  1121,     0,
    1122,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1123,   317,  1124,   319,   320,   321,   322,   323,  1125,   324,
     325,   326,   327,  1126,   645,   329,  1127,   331,   332,   333,
       0,   334,   335,     0,     0,  1128,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1129,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1130,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1131,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1132,
    1133,     0,   460,     0,   461,   462,   652,   464,   653,  1134,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1135,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1136,     0,     0,     0,     0,     0,     0,  1137,  1138,
    1740,     0,     0,     0,     0,  1140,     0,  1141,     0,     0,
       0,     0,     0,  1142,  1143,     0,     0,     0,     0,  1144,
    1145,   107,  1098,   538,  1099,  1100,  1101,  1102,  1103,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,  2985,   117,
     118,   119,     0,     0,     0,     0,   120,  1104,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1105,   132,  1106,  1107,     0,   135,   136,   137,   138,
     139,   140,  1108,   630,   141,   142,  1109,  1110,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,  1111,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,  2986,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1112,  1113,   186,  1114,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   867,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1115,   218,   219,   220,   221,
     222,   640,  1116,   224,     0,   225,   226,  1117,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  2987,  1119,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1120,
    1121,     0,  1122,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1123,   317,  1124,   319,   320,   321,   322,   323,
    1125,   324,   325,   326,   327,  1126,   645,   329,  1127,   331,
     332,   333,     0,   334,   335,     0,     0,  1128,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1129,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
    2988,  1130,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1131,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,     0,   451,   452,   453,   454,   455,   456,   457,
       0,  1132,  1133,     0,   460,     0,   461,   462,   652,   464,
     653,  1134,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1135,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1136,     0,     0,     0,     0,     0,     0,
    1137,  1138,  2989,     0,     0,     0,     0,  1140,     0,  2990,
       0,     0,     0,     0,     0,  1142,  1143,     0,     0,     0,
       0,  1144,  1145,   107,  1098,   538,  1099,  1100,  1101,  1102,
    1103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1104,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1105,   132,  1106,  1107,     0,   135,   136,
     137,   138,   139,   140,  1108,   630,   141,   142,  1109,  1110,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1111,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1112,  1113,   186,  1114,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1115,   218,   219,
     220,   221,   222,   640,  1116,   224,     0,   225,   226,  1117,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1118,  1119,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1120,  1121,     0,  1122,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1123,   317,  1124,   319,   320,   321,
     322,   323,  1125,   324,   325,   326,   327,  1126,   645,   329,
    1127,   331,   332,   333,     0,   334,   335,     0,     0,  1128,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1129,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1130,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1131,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1132,  1133,     0,   460,     0,   461,   462,
     652,   464,   653,  1134,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1135,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1136,     0,     0,     0,     0,
       0,     0,  1137,  1138,  1139,     0,     0,     0,     0,  1140,
       0,  1141,     0,     0,     0,     0,     0,  1142,  1143,     0,
       0,     0,     0,  1144,  1145,   107,  1755,   538,  1099,  1100,
    1101,  1756,  1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,  1757,   117,   118,   119,     0,     0,     0,     0,
     120,  1104,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1105,   132,  1106,  1107,     0,
     135,   136,   137,   138,   139,   140,  1108,   630,   141,   142,
    1109,  1110,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1111,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1112,  1113,
     186,  1114,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   867,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1115,
     218,   219,   220,   221,   222,   640,  1116,   224,     0,   225,
     226,  1117,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1118,  1119,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1120,  1121,     0,  1122,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1123,   317,  1124,   319,
     320,   321,   322,   323,  1125,   324,   325,   326,   327,  1126,
     645,   329,  1127,   331,   332,   333,     0,   334,   335,     0,
       0,  1128,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1129,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1130,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1131,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1132,  1133,     0,   460,     0,
     461,   462,   652,   464,   653,  1134,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1135,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1136,     0,     0,
       0,     0,     0,     0,  1137,  1138,     0,     0,     0,     0,
       0,  1140,     0,  1141,     0,     0,     0,     0,     0,  1142,
    1143,     0,     0,     0,     0,  1144,  1145,   107,  1098,   538,
    1099,  1100,  1101,  1102,  1103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1104,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1105,   132,  1106,
    1107,     0,   135,   136,   137,   138,   139,   140,  1108,   630,
     141,   142,  1109,  1110,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1111,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1112,  1113,   186,  1114,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   867,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1115,   218,   219,   220,   221,   222,   640,  1116,   224,
       0,   225,   226,  1117,   228,     0,   229,     0,   230,   231,
    1574,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1118,  1119,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1120,  1121,     0,  1122,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1123,   317,
    1124,   319,   320,   321,   322,   323,  1125,   324,   325,   326,
     327,  1126,   645,   329,  1127,   331,   332,   333,     0,   334,
     335,     0,     0,  1128,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1129,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1130,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1131,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1132,  1133,     0,
     460,     0,   461,   462,   652,   464,   653,  1134,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1135,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1136,
       0,     0,     0,     0,     0,     0,  1137,  1138,     0,     0,
       0,     0,     0,  1140,     0,  1141,     0,     0,     0,     0,
       0,  1142,  1143,     0,     0,     0,     0,  1144,  1145,   107,
    1098,   538,  1099,  1100,  1101,  1102,  1103,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1104,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1105,
     132,  1106,  1107,     0,   135,   136,   137,   138,   139,   140,
    1108,   630,   141,   142,  1109,  1110,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1111,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1112,  1113,   186,  1114,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   867,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1115,   218,   219,   220,   221,   222,   640,
    1116,   224,     0,   225,   226,  1117,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1118,  1119,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1120,  1121,     0,
    1122,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1123,   317,  1124,   319,   320,   321,   322,   323,  1125,   324,
     325,   326,   327,  1126,   645,   329,  1127,   331,   332,   333,
       0,   334,   335,     0,     0,  1128,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1129,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1130,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1131,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1132,
    1133,     0,   460,     0,   461,   462,   652,   464,   653,  1134,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1135,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1136,     0,     0,     0,     0,     0,     0,  1137,  1138,
       0,     0,     0,     0,     0,  1140,     0,  1141,  2070,     0,
       0,     0,     0,  1142,  1143,     0,     0,     0,     0,  1144,
    1145,  1280,  1098,   538,  1099,  1100,  1101,  1102,  1103,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1104,     0,     0,
     121,   122,     0,   123,   124,   125,  1282,   127,   128,   129,
     130,  1105,  1283,  1106,  1107,     0,   135,   136,   137,   138,
     139,   140,  1108,   630,   141,   142,  1109,  1110,   145,     0,
     146,   147,   148,   149,   631,     0,  1284,     0,  1285,   153,
     154,   155,   156,   157,  1286,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,  1287,   169,   170,   171,
    1288,  1289,  1290,  1291,   637,   638,  1292,   177,   178,   179,
     180,   181,   182,   183,  1112,  1113,   186,  1114,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   867,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1115,   218,   219,   220,   221,
     222,   640,  1116,   224,     0,   225,   226,  1117,   228,     0,
     229,     0,   230,  1294,     0,  1295,   233,   234,  1296,  1297,
     237,     0,   238,   239,     0,     0,  1118,  1119,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,  1298,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,  1299,   264,   265,   266,   267,   268,   269,  1120,
    1121,     0,  1122,     0,   273,  1300,  1301,   276,  1302,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,  1303,
     287,  1304,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,  1305,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1123,  1306,  1124,   319,   320,   321,   322,   323,
    1125,   324,   325,  1307,   327,  1126,   645,   329,  1127,   331,
     332,   333,     0,   334,   335,     0,     0,  1128,   337,   338,
       0,     0,   339,   340,  1308,   342,  1309,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,  1310,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1129,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,  1311,   400,   401,
     402,  1130,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,  1312,
     421,   422,   423,   424,   425,   426,  1313,   428,   429,  1131,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,  1314,   446,   651,   448,     0,
     449,   450,     0,   451,  1315,   453,   454,   455,   456,   457,
       0,  1132,  1133,     0,   460,     0,   461,   462,   652,   464,
     653,  1134,   466,   467,  1316,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,  1317,     0,
     481,   482,   483,   484,   485,   486,  1135,  2277,   488,  1319,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1136,     0,     0,     0,     0,     0,     0,
    1137,  1138,     0,     0,     0,     0,     0,  1140,     0,  1141,
       0,     0,     0,     0,     0,  1142,  1143,     0,     0,     0,
       0,  1144,  1145,  1280,  1098,   538,  1099,  1100,  1101,  1102,
    1103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1104,
       0,     0,   121,   122,     0,   123,   124,   125,  1282,   127,
     128,   129,   130,  1105,  1283,  1106,  1107,     0,   135,   136,
     137,   138,   139,   140,  1108,   630,   141,   142,  1109,  1110,
     145,     0,   146,   147,   148,   149,   631,     0,  1284,     0,
    1285,   153,   154,   155,   156,   157,  1286,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,  1287,   169,
     170,   171,  1288,  1289,  1290,  1291,   637,   638,  1292,   177,
     178,   179,   180,   181,   182,   183,  1112,  1113,   186,  1114,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1115,   218,   219,
     220,   221,   222,   640,  1116,   224,     0,   225,   226,  1117,
     228,     0,   229,     0,   230,  1294,     0,  1295,   233,   234,
    1296,  1297,   237,     0,   238,   239,     0,     0,  1118,  1119,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
    1298,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,  1299,   264,   265,   266,   267,   268,
     269,  1120,  1121,     0,  1122,     0,   273,  1300,  1301,   276,
    1302,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,  1303,   287,  1304,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,  1305,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1123,  1306,  1124,   319,   320,   321,
     322,   323,  1125,   324,   325,  1307,   327,  1126,   645,   329,
    1127,   331,   332,   333,     0,   334,   335,     0,     0,  1128,
     337,   338,     0,     0,   339,   340,  1308,   342,  1309,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,  1310,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1129,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,  1311,
     400,   401,   402,  1130,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,  1312,   421,   422,   423,   424,   425,   426,  1313,   428,
     429,  1131,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,  1314,   446,   651,
     448,     0,   449,   450,     0,   451,  1315,   453,   454,   455,
     456,   457,     0,  1132,  1133,     0,   460,     0,   461,   462,
     652,   464,   653,  1134,   466,   467,  1316,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
    1317,     0,   481,   482,   483,   484,   485,   486,  1135,     0,
     488,  1319,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1136,     0,     0,     0,     0,
       0,     0,  1137,  1138,     0,     0,     0,     0,     0,  1140,
       0,  1141,  2327,     0,     0,     0,     0,  1142,  1143,     0,
       0,     0,     0,  1144,  1145,   107,  1098,   538,  1099,  1100,
    1101,  1102,  1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1104,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1105,   132,  1106,  1107,     0,
     135,   136,   137,   138,   139,   140,  1108,   630,   141,   142,
    1109,  1110,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1111,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1112,  1113,
     186,  1114,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   867,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1115,
     218,   219,   220,   221,   222,   640,  1116,   224,     0,   225,
     226,  1117,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1118,  1119,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1120,  1121,     0,  1122,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1123,   317,  1124,   319,
     320,   321,   322,   323,  1125,   324,   325,   326,   327,  1126,
     645,   329,  1127,   331,   332,   333,     0,   334,   335,     0,
       0,  1128,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1129,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1130,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1131,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,  2650,   451,   452,   453,
     454,   455,   456,   457,     0,  1132,  1133,     0,   460,     0,
     461,   462,   652,   464,   653,  1134,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1135,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1136,     0,     0,
       0,     0,     0,     0,  1137,  1138,     0,     0,     0,     0,
       0,  1140,     0,  1141,     0,     0,     0,     0,     0,  1142,
    1143,     0,     0,     0,     0,  1144,  1145,   107,  1098,   538,
    1099,  1100,  1101,  1102,  1103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1104,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1105,   132,  1106,
    1107,     0,   135,   136,   137,   138,   139,   140,  1108,   630,
     141,   142,  1109,  1110,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1111,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1112,  1113,   186,  1114,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   867,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1115,   218,   219,   220,   221,   222,   640,  1116,   224,
       0,   225,   226,  1117,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1118,  1119,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1120,  1121,     0,  1122,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1123,   317,
    1124,   319,   320,   321,   322,   323,  1125,   324,   325,   326,
     327,  1126,   645,   329,  1127,   331,   332,   333,     0,   334,
     335,     0,     0,  1128,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1129,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1130,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1131,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1132,  1133,     0,
     460,     0,   461,   462,   652,   464,   653,  1134,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1135,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,  2743,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1136,
       0,     0,     0,     0,     0,     0,  1137,  1138,     0,     0,
       0,     0,     0,  1140,     0,  1141,     0,     0,     0,     0,
       0,  1142,  1143,     0,     0,     0,     0,  1144,  1145,   107,
    1098,   538,  1099,  1100,  1101,  1102,  1103,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1104,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1105,
     132,  1106,  1107,     0,   135,   136,   137,   138,   139,   140,
    1108,   630,   141,   142,  1109,  1110,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1111,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1112,  1113,   186,  1114,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   867,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1115,   218,   219,   220,   221,   222,   640,
    1116,   224,     0,   225,   226,  1117,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1118,  1119,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1120,  1121,     0,
    1122,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1123,   317,  1124,   319,   320,   321,   322,   323,  1125,   324,
     325,   326,   327,  1126,   645,   329,  1127,   331,   332,   333,
       0,   334,   335,     0,     0,  1128,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1129,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1130,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1131,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
    3135,   451,   452,   453,   454,   455,   456,   457,     0,  1132,
    1133,     0,   460,     0,   461,   462,   652,   464,   653,  1134,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1135,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1136,     0,     0,     0,     0,     0,     0,  1137,  1138,
       0,     0,     0,     0,     0,  1140,     0,  1141,     0,     0,
       0,     0,     0,  1142,  1143,     0,     0,     0,     0,  1144,
    1145,   107,  1098,   538,  1099,  1100,  1101,  1102,  1103,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1104,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1105,   132,  1106,  1107,     0,   135,   136,   137,   138,
     139,   140,  1108,   630,   141,   142,  1109,  1110,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,  1111,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1112,  1113,   186,  1114,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   867,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1115,   218,   219,   220,   221,
     222,   640,  1116,   224,     0,   225,   226,  1117,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  1118,  1119,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1120,
    1121,     0,  1122,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1123,   317,  1124,   319,   320,   321,   322,   323,
    1125,   324,   325,   326,   327,  1126,   645,   329,  1127,   331,
     332,   333,     0,   334,   335,     0,     0,  1128,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1129,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,  1130,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1131,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,  3323,   451,   452,   453,   454,   455,   456,   457,
       0,  1132,  1133,     0,   460,     0,   461,   462,   652,   464,
     653,  1134,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1135,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1136,     0,     0,     0,     0,     0,     0,
    1137,  1138,     0,     0,     0,     0,     0,  1140,     0,  1141,
       0,     0,     0,     0,     0,  1142,  1143,     0,     0,     0,
       0,  1144,  1145,   107,  1098,   538,  1099,  1100,  1101,  1102,
    1103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1104,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1105,   132,  1106,  1107,     0,   135,   136,
     137,   138,   139,   140,  1108,   630,   141,   142,  1109,  1110,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1111,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1112,  1113,   186,  1114,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1115,   218,   219,
     220,   221,   222,   640,  1116,   224,     0,   225,   226,  1117,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1118,  1119,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1120,  1121,     0,  1122,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1123,   317,  1124,   319,   320,   321,
     322,   323,  1125,   324,   325,   326,   327,  1126,   645,   329,
    1127,   331,   332,   333,     0,   334,   335,     0,     0,  1128,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1129,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1130,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1131,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1132,  1133,     0,   460,     0,   461,   462,
     652,   464,   653,  1134,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1135,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1136,     0,     0,     0,     0,
       0,     0,  1137,  1138,     0,     0,     0,     0,     0,  1140,
       0,  1141,     0,     0,     0,     0,     0,  1142,  1143,     0,
       0,     0,     0,  1144,  1145,  1280,  1098,   538,  1099,  1100,
    1101,  1102,  1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1104,     0,     0,   121,   122,     0,   123,   124,   125,
    1282,   127,   128,   129,   130,  1105,  1283,  1106,  1107,     0,
     135,   136,   137,   138,   139,   140,  1108,   630,   141,   142,
    1109,  1110,   145,     0,   146,   147,   148,   149,   631,     0,
    1284,     0,  1285,   153,   154,   155,   156,   157,  1286,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
    1287,   169,   170,   171,  1288,  1289,  1290,  1291,   637,   638,
    1292,   177,   178,   179,   180,   181,   182,   183,  1112,  1113,
     186,  1114,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   867,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1115,
     218,   219,   220,   221,   222,   640,  1116,   224,     0,   225,
     226,  1117,   228,     0,   229,     0,   230,  1294,     0,  1295,
     233,   234,  1296,  1297,   237,     0,   238,   239,     0,     0,
    1118,  1119,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,  1298,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,  1299,   264,   265,   266,
     267,   268,   269,  1120,  1121,     0,  1122,     0,   273,  1300,
    1301,   276,  1302,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,  1303,   287,  1304,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,  1305,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1123,  1306,  1124,   319,
     320,   321,   322,   323,  1125,   324,   325,  1307,   327,  1126,
     645,   329,  1127,   331,   332,   333,     0,   334,   335,     0,
       0,  1128,   337,   338,     0,     0,   339,   340,  1308,   342,
    1309,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,  1310,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1129,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,  1311,   400,   401,   402,  1130,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,  1312,   421,   422,   423,   424,   425,   426,
    1313,   428,   429,  1131,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,  1314,
     446,   651,   448,     0,   449,   450,     0,   451,  1315,   453,
     454,   455,   456,   457,     0,  1132,  1133,     0,   460,     0,
     461,   462,   652,   464,   653,  1134,   466,   467,  1316,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,  1317,     0,   481,   482,   483,   484,   485,   486,
    1135,     0,   488,  1319,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1136,     0,     0,
       0,     0,     0,     0,  1137,  1138,     0,     0,     0,     0,
       0,  1140,     0,  1141,     0,     0,     0,     0,     0,  1142,
    1143,     0,     0,     0,     0,  1144,  1145,   107,  1098,   538,
    1099,  1100,  1101,  1102,  1103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1104,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1105,   132,  1106,
    1107,     0,   135,   136,   137,   138,   139,   140,  1108,   630,
     141,   142,  1109,  1110,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1111,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1112,  1113,   186,  1114,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   867,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1115,   218,   219,   220,   221,   222,   640,  1116,   224,
       0,   225,   226,  1117,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1118,  1119,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1120,  1121,     0,  1122,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1123,   317,
    1124,   319,   320,   321,   322,   323,  1125,   324,   325,   326,
     327,  1126,   645,   329,  1127,   331,   332,   333,     0,   334,
     335,     0,     0,  1128,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1129,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1130,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1131,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1132,  1133,     0,
     460,     0,   461,   462,   652,   464,   653,  1134,   466,   467,
     654,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1135,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1136,
       0,     0,     0,     0,     0,     0,  1760,  1761,     0,     0,
       0,     0,     0,  1140,     0,  1141,     0,     0,     0,     0,
       0,  1142,  1143,     0,     0,     0,     0,  1144,  1145,   107,
    2201,   538,  1099,  1100,  1101,  1102,  1103,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1104,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1105,
     132,  1106,  1107,     0,   135,   136,   137,   138,   139,   140,
    1108,   630,   141,   142,  1109,  1110,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1111,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1112,  1113,   186,  1114,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   867,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1115,   218,   219,   220,   221,   222,   640,
    1116,   224,     0,   225,   226,  1117,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1118,  1119,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1120,  1121,     0,
    1122,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1123,   317,  1124,   319,   320,   321,   322,   323,  1125,   324,
     325,   326,   327,  1126,   645,   329,  1127,   331,   332,   333,
       0,   334,   335,     0,     0,  1128,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1129,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1130,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1131,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1132,
    1133,     0,   460,     0,   461,   462,   652,   464,   653,  1134,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1135,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  1136,     0,     0,     0,     0,     0,     0,  1137,  1138,
       0,     0,     0,     0,     0,  1140,     0,  1141,     0,     0,
       0,     0,     0,  1142,  1143,     0,     0,     0,     0,  1144,
    1145,   107,  1098,   538,  1099,  1100,  1101,  1102,  1103,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1104,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1105,   132,  1106,  1107,     0,   135,   136,   137,   138,
     139,   140,  1108,   630,   141,   142,  1109,  1110,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,  1111,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1112,  1113,   186,  1114,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   867,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1115,   218,   219,   220,   221,
     222,   640,  1116,   224,     0,   225,   226,  1117,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  1118,  1119,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1120,
    1121,     0,  1122,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1123,   317,  1124,   319,   320,   321,   322,   323,
    1125,   324,   325,   326,   327,  1126,   645,   329,  1127,   331,
     332,   333,     0,   334,   335,     0,     0,  1128,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1129,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,  1130,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1131,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,     0,   451,   452,   453,   454,   455,   456,   457,
       0,  1132,  1133,     0,   460,     0,   461,   462,   652,   464,
     653,  1134,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1135,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,  1136,     0,     0,     0,     0,     0,     0,
    1137,  1138,     0,     0,     0,     0,     0,  1140,     0,  2464,
       0,     0,     0,     0,     0,  1142,  1143,     0,     0,     0,
       0,  1144,  1145,   107,  1098,   538,  1099,  1100,  1101,  1102,
    1103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1104,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1105,   132,  1106,  1107,     0,   135,   136,
     137,   138,   139,   140,  1108,   630,   141,   142,  1109,  1110,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
    1111,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
    2986,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1112,  1113,   186,  1114,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1115,   218,   219,
     220,   221,   222,   640,  1116,   224,     0,   225,   226,  1117,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  2987,  1119,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1120,  1121,     0,  1122,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1123,   317,  1124,   319,   320,   321,
     322,   323,  1125,   324,   325,   326,   327,  1126,   645,   329,
    1127,   331,   332,   333,     0,   334,   335,     0,     0,  1128,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1129,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,  2988,  1130,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1131,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1132,  1133,     0,   460,     0,   461,   462,
     652,   464,   653,  1134,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1135,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,  1136,     0,     0,     0,     0,
       0,     0,  1137,  1138,     0,     0,     0,     0,     0,  1140,
       0,  2990,     0,     0,     0,     0,     0,  1142,  1143,     0,
       0,     0,     0,  1144,  1145,   107,  1098,   538,  1099,  1100,
    1101,  1102,  1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1104,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,  3607,  1105,   132,  1106,  1107,     0,
     135,   136,   137,   138,   139,   140,  1108,   630,   141,   142,
    1109,  1110,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,  1111,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,  3608,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1112,  1113,
     186,  1114,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   867,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1115,
     218,   219,   220,   221,   222,   640,  1116,   224,     0,   225,
     226,  1117,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1118,  1119,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1120,  1121,     0,  1122,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1123,   317,  1124,   319,
     320,   321,   322,   323,  1125,   324,   325,   326,   327,  1126,
     645,   329,  1127,   331,   332,   333,     0,   334,   335,     0,
       0,  1128,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1129,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1130,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1131,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1132,  1133,     0,   460,     0,
     461,   462,   652,   464,   653,  1134,   466,   467,   654,   469,
     470,  3609,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1135,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,  1136,     0,     0,
       0,     0,     0,     0,  1137,  1138,     0,     0,     0,     0,
       0,  1140,     0,  1141,     0,     0,     0,     0,     0,  1142,
    1143,     0,     0,     0,     0,  1144,  1145,   107,  1098,   538,
    1099,  1100,  1101,  1102,  1103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1104,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129,   130,  1105,   132,  1106,
    1107,     0,   135,   136,   137,   138,   139,   140,  1108,   630,
     141,   142,  1109,  1110,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1111,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,  3608,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1112,  1113,   186,  1114,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   867,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1115,   218,   219,   220,   221,   222,   640,  1116,   224,
       0,   225,   226,  1117,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,   239,
       0,     0,  1118,  1119,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1120,  1121,     0,  1122,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287,   288,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1123,   317,
    1124,   319,   320,   321,   322,   323,  1125,   324,   325,   326,
     327,  1126,   645,   329,  1127,   331,   332,   333,     0,   334,
     335,     0,     0,  1128,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1129,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1130,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426,   427,   428,   429,  1131,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1132,  1133,     0,
     460,     0,   461,   462,   652,   464,   653,  1134,   466,   467,
     654,   469,   470,  3609,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1135,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,  1136,
       0,     0,     0,     0,     0,     0,  1137,  1138,     0,     0,
       0,     0,     0,  1140,     0,  1141,     0,     0,     0,     0,
       0,  1142,  1143,     0,     0,     0,     0,  1144,  1145,   107,
    1098,   538,  1099,  1100,     0,  1102,  1103,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1104,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,  1105,
     132,  1106,  1107,     0,   135,   136,   137,   138,   139,   140,
    1108,   630,   141,   142,  1109,  1110,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1112,  1113,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   867,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,  1115,   218,   219,   220,   221,   222,   640,
    1116,   224,     0,   225,   226,  1117,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,     0,     0,  1118,  1119,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1120,  1121,     0,
    1122,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1123,   317,  1124,   319,   320,   321,   322,   323,  3060,   324,
     325,   326,   327,  1126,   645,   329,  1127,   331,   332,   333,
       0,   334,   335,     0,     0,   336,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1129,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1130,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,  1131,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1132,
    1133,     0,   460,     0,   461,   462,   652,   464,   653,  1134,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1135,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,  3061,     0,     0,     0,     0,     0,     0,  3062,  3063,
       0,     0,     0,     0,     0,  1140,     0,  1141,     0,     0,
       0,     0,     0,  1142,  1143,     0,     0,     0,     0,  1144,
    1145,   107,  1098,   538,  1099,  1100,  1101,  1102,  1103,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,  1104,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,  1105,   132,  1106,  1107,     0,   135,   136,   137,   138,
     139,   140,  1108,   630,   141,   142,  1109,  1110,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,  1112,  1113,   186,     0,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   867,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,  1115,   218,   219,   220,   221,
     222,   640,  1116,   224,     0,   225,   226,  1117,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,  1118,  1119,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,  1120,
    1121,     0,  1122,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,  1123,   317,  1124,   319,   320,   321,   322,   323,
       0,   324,   325,   326,   327,  1126,   645,   329,  1127,   331,
     332,   333,     0,   334,   335,     0,     0,  1128,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,  1129,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,  1130,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,  1131,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,     0,   451,   452,   453,   454,   455,   456,   457,
       0,  1132,  1133,     0,   460,     0,   461,   462,   652,   464,
     653,  1134,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,  1135,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,     0,     0,     0,     0,     0,     0,     0,
    1561,  1562,     0,     0,     0,     0,     0,  1140,     0,  1141,
       0,     0,     0,     0,     0,  1142,  1143,     0,     0,     0,
       0,  1144,  1145,   107,  1098,   538,  1099,  1100,     0,  1102,
    1103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,  1104,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,  1105,   132,  1106,  1107,     0,   135,   136,
     137,   138,   139,   140,  1108,   630,   141,   142,  1109,  1110,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,  1112,  1113,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,  1115,   218,   219,
     220,   221,   222,   640,  1116,   224,     0,   225,   226,  1117,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,  1118,  1119,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,  1120,  1121,     0,  1122,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1123,   317,  1124,   319,   320,   321,
     322,   323,     0,   324,   325,   326,   327,  1126,   645,   329,
    1127,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,  1129,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  2187,  2188,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,  1131,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,  1132,  1133,     0,   460,     0,   461,   462,
     652,   464,   653,  1134,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,  1135,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,     0,     0,     0,     0,     0,
       0,     0,  2189,  2190,     0,     0,     0,     0,     0,  1140,
       0,  1141,     0,     0,     0,     0,     0,  1142,  1143,     0,
       0,     0,     0,  1144,  1145,   107,  1098,   538,  1099,  1100,
    1101,  1102,  1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
     120,  1104,     0,     0,   121,   122,     0,   123,   124,   125,
     126,   127,   128,   129,   130,  1105,   132,  1106,  1107,     0,
     135,   136,   137,   138,   139,   140,  1108,   630,   141,   142,
    1109,  1110,   145,     0,   146,   147,   148,   149,   631,     0,
     632,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   633,   634,   635,   636,   637,   638,
     639,   177,   178,   179,   180,   181,   182,   183,  1112,  1113,
     186,     0,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,     0,   200,
     201,   867,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,  1115,
     218,   219,   220,   221,   222,   640,  1116,   224,     0,   225,
     226,  1117,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,   239,     0,     0,
    1118,  1119,   242,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,  1120,  1121,     0,  1122,     0,   273,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,   285,   286,   287,   288,     0,   289,   290,   291,
     643,   644,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,  1123,   317,  1124,   319,
     320,   321,   322,   323,     0,   324,   325,   326,   327,  1126,
     645,   329,  1127,   331,   332,   333,     0,   334,   335,     0,
       0,  1128,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   647,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   648,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,  1129,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1130,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   650,   421,   422,   423,   424,   425,   426,
     427,   428,   429,  1131,   431,     0,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   651,   448,     0,   449,   450,     0,   451,   452,   453,
     454,   455,   456,   457,     0,  1132,  1133,     0,   460,     0,
     461,   462,   652,   464,   653,  1134,   466,   467,   654,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   655,     0,   481,   482,   483,   484,   485,   486,
    1135,     0,   488,   489,   490,   491,   492,   493,   494,   495,
     496,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,     0,     0,     0,
       0,     0,     0,     0,  1561,  1562,     0,     0,     0,     0,
       0,  1140,     0,  1141,     0,     0,     0,     0,     0,  1142,
    1143,     0,     0,     0,     0,  1144,  1145,   107,  1098,   538,
    1099,  1100,  1101,  1102,  1103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,   120,  1104,     0,     0,   121,   122,     0,   123,
     124,   125,   126,   127,   128,   129, -2096,  1105,   132,  1106,
    1107,     0,   135,   136,   137,   138,   139,   140,  1108,   630,
     141,   142,  1109,  1110,   145,     0,   146,   147,   148,   149,
     631,     0,   632,     0,  1111,   153,   154,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,  3608,   633,   634,   635,   636,
     637,   638,   639,   177,   178,   179,   180,   181,   182,   183,
    1112,  1113,   186,  1114,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
       0,   200,   201,   867,   203,   204,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,  1115,   218,   219,   220,   221,   222,   640,  1116,   224,
       0,   225,   226,  1117,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235, -2096,   237,     0,   238,   239,
       0,     0,  1118,  1119,   242,   243,     0,   244,   245,   246,
     247,   248,   249,   250, -2096,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,  1120,  1121,     0,  1122,     0,
     273,     0,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,     0,   285,   286,   287, -2096,     0,   289,
     290,   291,   643,   644,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,  1123,   317,
    1124,   319,   320,   321,   322,   323,     0,   324,   325,     0,
     327,  1126,   645,   329,  1127,   331,   332,   333,     0,   334,
     335,     0,     0,  1128,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   647,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   648,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
    1129,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,  1130,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   650,   421,   422,   423,   424,
     425,   426, -2096,   428,   429,  1131,   431,     0,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   651,   448,     0,   449,   450,     0,   451,
     452,   453,   454,   455,   456,   457,     0,  1132,  1133,     0,
     460,     0,   461,   462,   652,   464,   653,  1134,   466,   467,
     654,   469,   470,  3609,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   655,     0,   481,   482,   483,   484,
     485,   486,  1135,     0,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518, -2096,
       0,     0,     0,     0,     0,     0,  1137,  1138,     0,     0,
       0,     0,     0,  1140,     0,  1141,     0,     0,     0,     0,
       0,  1142,  1143,     0,     0,     0,     0,  1144,  1145,   107,
    1098,   538,  1099,  1100,  1101,  1102,  1103,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,  1104,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,     0,  1105,
     132,  1106,  1107,     0,   135,   136,   137,   138,   139,   140,
    1108,   630,   141,   142,  1109,  1110,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,  1111,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,  1112,  1113,   186,  1114,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   867,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,     0,   212,     0,   213,
     214,   215,   216,  1115,   218,   219,   220,   221,   222,   640,
    1116,   224,     0,   225,   226,  1117,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,     0,   237,     0,
     238,   239,     0,     0,  1118,  1119,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,     0,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,  1120,  1121,     0,
    1122,     0,   273,     0,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,   286,   287,     0,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
    1123,   317,  1124,   319,   320,   321,   322,   323,     0,   324,
     325,     0,   327,  1126,   645,   329,  1127,   331,   332,   333,
       0,   334,   335,     0,     0,  1128,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,  1129,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1130,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,     0,   428,   429,  1131,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,  1132,
    1133,     0,   460,     0,   461,   462,   652,   464,   653,  1134,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   486,  1135,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,     0,     0,     0,     0,     0,     0,     0,  1137,  1138,
       0,     0,     0,   718,     0,  1140,     0,  1141,     0,     0,
       0,     0,     0,  1142,  1143,     0,     0,     0,     0,  1144,
    1145,   108,   109,   110,   111,     0,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,     0,   123,   124,   125,     0,   127,
     128,   129,   719,   720,     0,   721,   722,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   723,   724,
     145,     0,   146,   147,   148,   149,   725,     0,     0,     0,
       0,   153,   154,   155,   156,   157,     0,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   169,
     170,   171,     0,     0,     0,     0,     0,     0,     0,   177,
     178,   179,   180,   181,   182,   183,   726,   727,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
       0,   196,   197,   198,   199,     0,     0,   200,   201,   202,
     203,   204,     0,     0,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,   728,   218,   219,
     220,   221,   222,   729,     0,   224,     0,   225,   226,   730,
     228,     0,   229,     0,   230,     0,     0,     0,   233,   234,
     731,     0,   237,     0,   238,     0,     0,     0,   732,   733,
       0,   243,     0,   244,   245,   246,   247,   248,   249,   250,
       0,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   734,   265,   266,   267,   268,
     269,   735,   736,     0,   737,     0,   273,     0,     0,   276,
       0,   278,     0,   280,   281,   282,   283,   284,     0,     0,
     285,     0,   287,     0,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   738,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   739,     0,   740,   319,   320,   321,
       0,   741,     0,   324,   325,     0,   327,     0,   742,   329,
     743,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   744,     0,   342,     0,   745,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
       0,   356,     0,   357,   358,   746,     0,   361,   362,   747,
     364,   365,   366,     0,   367,   368,   369,   370,   371,     0,
       0,   374,     0,   375,   376,   377,   748,   379,   380,   381,
     382,     0,   383,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   749,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,     0,   421,   750,   423,   424,     0,   426,     0,     0,
     429,   751,   431,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   752,   446,   753,
     448,     0,   449,   450,     0,   451,     0,   453,   454,   455,
     456,   457,     0,   754,   755,     0,     0,     0,   461,   462,
     756,   464,   757,     0,   466,   467,   758,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
       0,     0,   481,   482,   483,   484,   485,  1552,   760,     0,
     488,     0,   490,     0,   492,   493,   494,   495,     0,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     761,   762,   763,   764,   765,   766,   767,   768,   769,   770,
     771,   515,   516,   517,   518,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   527,     0,     0,     0,     0,     0,
       0,  3352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3353,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,  1063,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,  -672,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,  -672,   225,   226,
     227,   228,  -672,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,  -672,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,  -672,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,  -672,   334,   335,     0,     0,
     336,   337,   338,     0,  -672,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,  -672,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   107,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1210,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,   630,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   631,
       0,   632,     0,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   633,   634,   635,   636,   637,
     638,   639,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   640,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,   231,    21,
     232,   233,   234,   235,   236,   237,     0,   238,   239,   641,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   642,     0,   285,   286,   287,   288,     0,   289,   290,
     291,   643,   644,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,     0,   324,   325,   326,   327,
       0,   645,   329,   330,   331,   332,   333,     0,   334,   335,
       0,   646,   336,   337,   338,     0,     0,   339,   340,   341,
     342,   343,   647,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   648,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   649,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    29,   415,
     416,   417,   418,   419,   650,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   651,   448,     0,   449,   450,    34,   451,   452,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   652,   464,   653,     0,   466,   467,   654,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   655,     0,   481,   482,   483,   484,   485,
     656,   487,     0,   488,   489,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,    39,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,     0,   107,
      40,   554,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   657,     0,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
       0,     0,     0,     0,   120,     0,     0,     0,   121,   122,
       0,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,     0,   135,   136,   137,   138,   139,   140,
       0,   630,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   631,     0,   632,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   633,   634,
     635,   636,   637,   638,   639,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   640,
       0,   224,     0,   225,   226,   227,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,   239,   641,     0,   240,   241,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   642,     0,   285,   286,   287,   288,
       0,   289,   290,   291,   643,   644,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,     0,   324,
     325,   326,   327,     0,   645,   329,   330,   331,   332,   333,
       0,   334,   335,     0,   646,   336,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   647,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   648,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     649,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   650,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   651,   448,     0,   449,   450,
       0,   451,   452,   453,   454,   455,   456,   457,     0,   458,
     459,     0,   460,     0,   461,   462,   652,   464,   653,     0,
     466,   467,   654,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   655,     0,   481,   482,
     483,   484,   485,   656,   487,     0,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,     0,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   107,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   657,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,     0,     0,     0,
     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,     0,   135,   136,   137,   138,
     139,   140,     0,   630,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   631,     0,   632,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     633,   634,   635,   636,   637,   638,   639,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   640,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,   239,     0,     0,   240,   241,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,   286,
     287,   288,     0,   289,   290,   291,   643,   644,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
       0,   324,   325,   326,   327,     0,   645,   329,   330,   331,
     332,   333,     0,   334,   335,     0,     0,   336,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   647,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   648,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   649,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   650,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   651,   448,     0,
     449,   450,     0,   451,   452,   453,   454,   455,   456,   457,
       0,   458,   459,     0,   460,     0,   461,   462,   652,   464,
     653,     0,   466,   467,   654,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   655,     0,
     481,   482,   483,   484,   485,   486,   487,     0,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   107,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   699,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,   120,     0,
       0,     0,   121,   122,     0,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,     0,   135,   136,
     137,   138,   139,   140,     0,   630,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   631,     0,   632,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   633,   634,   635,   636,   637,   638,   639,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,     0,   200,   201,   202,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   640,     0,   224,     0,   225,   226,   227,
     228,     0,   229,     0,   230,   231,     0,   232,   233,   234,
     235,   236,   237,     0,   238,   239,     0,     0,   240,   241,
     242,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     285,   286,   287,   288,     0,   289,   290,   291,   643,   644,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,     0,   324,   325,   326,   327,     0,   645,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   647,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   648,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   650,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,     0,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   651,
     448,     0,   449,   450,     0,   451,   452,   453,   454,   455,
     456,   457,     0,   458,   459,     0,   460,     0,   461,   462,
     652,   464,   653,     0,   466,   467,   654,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     655,     0,   481,   482,   483,   484,   485,   486,   487,     0,
     488,   489,   490,   491,   492,   493,   494,   495,   496,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   939,  1516,   538,     0,     0,
       0,  1102,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3326,     0,   108,   109,   110,   111,     0,   113,   114,
     115,   116,     0,   117,   118,   119,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,     0,   123,   124,   125,
     940,   127,   128,   129,   941,   942,   943,   944,   945,     0,
     135,   136,   137,   138,   139,   140,     0,     0,   141,   142,
     946,   947,   145,     0,   146,   147,   148,   149,   948,     0,
     949,     0,   950,   153,   154,   155,   156,   157,   951,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
     952,   169,   170,   171,   953,   954,   955,   956,     0,     0,
     957,   177,   178,   179,   180,   181,   182,   183,   958,   959,
     186,     0,   187,     0,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   196,   197,   198,   199,     0,     0,   200,
     201,   202,   203,   204,     0,     0,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,   960,
     218,   219,   220,   221,   222,   961,  1517,   224,     0,   225,
     226,   962,   228,     0,   229,     0,   230,   963,     0,   964,
     233,   234,   965,   966,   237,     0,   238,     0,     0,     0,
     967,   968,     0,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   969,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,     0,   262,   970,   971,   265,   266,
     267,   268,   269,   972,   973,     0,   974,     0,   273,   975,
     976,   276,   977,   278,     0,   280,   281,   282,   283,   284,
       0,     0,   285,   978,   287,   979,     0,   289,   290,   291,
       0,     0,   292,   293,   294,   295,   296,   980,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   981,   982,   983,   319,
     320,   321,     0,   984,     0,   324,   325,   985,   327,     0,
     986,   329,   987,   331,   332,   333,     0,   334,   335,  1518,
       0,   336,   337,   338,     0,     0,   339,   988,   989,   342,
     990,   991,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,     0,   356,     0,   357,   358,   992,   993,   361,
     362,   994,   364,   365,   366,     0,   367,   368,   369,   370,
     371,     0,     0,   374,     0,   375,   376,   377,   995,   379,
     380,   381,   382,     0,   383,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   996,   400,   401,   402,   997,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   998,   421,   999,   423,   424,     0,   426,
    1000,     0,   429,  1001,   431,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,  1002,
     446,  1003,   448,     0,   449,   450,     0,   451,  1004,   453,
     454,   455,   456,   457,     0,  1005,  1006,     0,     0,     0,
     461,   462,  1007,   464,  1008,  1519,   466,   467,  1009,   469,
     470,   471,   472,   473,     0,     0,   474,   475,   476,   477,
     478,   479,  1010,     0,   481,   482,   483,   484,   485,  1400,
    1012,     0,   488,  1013,   490,     0,   492,   493,   494,   495,
       0,     0,     0,   497,     0,     0,   498,   499,   500,   501,
     502,   503,  1014,  1015,  1016,  1017,  1018,  1019,  1020,  1021,
    1022,  1023,  1024,   515,   516,   517,   518,   939,     0,     0,
       0,     0,     0,     0,  1520,  1521,  2365,     0,     0,     0,
       0,     0,     0,  2366,     0,   108,   109,   110,   111,     0,
     113,   114,   115,   116,     0,   117,   118,   119,     3,     4,
       0,     0,     0,     0,     0,     0,   121,   122,     0,   123,
     124,   125,   940,   127,   128,   129,   941,   942,   943,   944,
     945,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     141,   142,   946,   947,   145,     0,   146,   147,   148,   149,
     948,     0,   949,     0,   950,   153,   154,   155,   156,   157,
     951,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,     0,   952,   169,   170,   171,   953,   954,   955,   956,
       0,     0,   957,   177,   178,   179,   180,   181,   182,   183,
     958,   959,   186,     0,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,     0,   196,   197,   198,   199,     0,
       0,   200,   201,   202,   203,   204,     0,     0,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   960,   218,   219,   220,   221,   222,   961,     0,   224,
       0,   225,   226,   962,   228,     0,   229,     0,   230,   963,
      21,   964,   233,   234,   965,   966,   237,     0,   238,     0,
       0,     0,   967,   968,     0,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   969,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   970,   971,
     265,   266,   267,   268,   269,   972,   973,     0,   974,     0,
     273,   975,   976,   276,   977,   278,     0,   280,   281,   282,
     283,   284,     0,     0,   285,   978,   287,   979,     0,   289,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   980,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   981,   982,
     983,   319,   320,   321,     0,   984,     0,   324,   325,   985,
     327,     0,   986,   329,   987,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,   988,
     989,   342,   990,   991,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,     0,   356,     0,   357,   358,   992,
     993,   361,   362,   994,   364,   365,   366,     0,   367,   368,
     369,   370,   371,     0,     0,   374,     0,   375,   376,   377,
     995,   379,   380,   381,   382,     0,   383,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   996,   400,   401,   402,   997,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    29,
     415,   416,   417,   418,   419,   998,   421,   999,   423,   424,
       0,   426,  1000,     0,   429,  1001,   431,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,  1002,   446,  1003,   448,     0,   449,   450,    34,   451,
    1004,   453,   454,   455,   456,   457,     0,  1005,  1006,     0,
       0,     0,   461,   462,  1007,   464,  1008,     0,   466,   467,
    1009,   469,   470,   471,   472,   473,     0,     0,   474,   475,
     476,   477,   478,   479,  1010,     0,   481,   482,   483,   484,
     485,  1011,  1012,     0,   488,  1013,   490,     0,   492,   493,
     494,   495,     0,     0,     0,   497,     0,    39,   498,   499,
     500,   501,   502,   503,  1014,  1015,  1016,  1017,  1018,  1019,
    1020,  1021,  1022,  1023,  1024,   515,   516,   517,   518,   527,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   699,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   794,   117,   118,   119,
       0,     0,     0,     0,   120,     0,     0,     0,   121,   122,
       0,   123,   124,   125,     0,   127,   128,   129,   130,   131,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
       0,     0,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,     0,     0,     0,   152,   153,   154,   155,
     156,   157,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   169,   170,   171,     0,     0,
       0,     0,     0,     0,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,     0,   188,   189,
     190,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,     0,   225,   226,   227,   228,     0,   229,     0,
     230,     0,    21,     0,   233,   234,   528,     0,   237,     0,
     238,   239,     0,     0,   240,   241,   242,   243,     0,   244,
     245,   246,   247,   248,   249,   250,     0,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,     0,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,     0,     0,   285,     0,   287,     0,
       0,   289,   290,   291,     0,     0,   292,   293,   294,   295,
     296,   529,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,   327,     0,   328,   329,   330,   331,   332,   333,
       0,   334,   335,     0,     0,   336,   337,   338,     0,     0,
     339,   340,     0,   342,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    29,   415,   416,   417,   418,   419,     0,   421,   422,
     423,   424,   425,   426,     0,   428,   429,   430,   431,     0,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   530,   446,   447,   448,     0,   449,   450,
      34,   451,     0,   453,   454,   455,   456,   457,     0,   795,
     459,     0,   460,     0,   796,   462,   463,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,   473,     0,     0,
     474,   475,   476,   477,   478,   479,     0,     0,   481,   482,
     483,   484,   485,   656,   487,     0,   488,     0,   490,   491,
     492,   493,   494,   495,   496,     0,     0,   497,     0,    39,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   527,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   699,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,   120,     0,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   127,   128,   129,
     130,   131,     0,   133,   134,     0,   135,   136,   137,   138,
     139,   140,     0,     0,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,     0,     0,     0,   152,   153,
     154,   155,   156,   157,     0,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   167,     0,     0,   169,   170,   171,
       0,     0,     0,     0,     0,     0,     0,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,    21,     0,   233,   234,   528,     0,
     237,     0,   238,   239,     0,     0,   240,   241,   242,   243,
       0,   244,   245,   246,   247,   248,   249,   250,     0,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   264,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   273,     0,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,     0,     0,   285,     0,
     287,     0,     0,   289,   290,   291,     0,     0,   292,   293,
     294,   295,   296,   529,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,   327,     0,   328,   329,   330,   331,
     332,   333,     0,   334,   335,     0,     0,   336,   337,   338,
       0,     0,   339,   340,     0,   342,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    29,   415,   416,   417,   418,   419,     0,
     421,   422,   423,   424,   425,   426,     0,   428,   429,   430,
     431,     0,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   530,   446,   447,   448,     0,
     449,   450,    34,   451,     0,   453,   454,   455,   456,   457,
       0,   458,   459,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,     0,     0,
     481,   482,   483,   484,   485,   656,   487,     0,   488,     0,
     490,   491,   492,   493,   494,   495,   496,     0,     0,   497,
       0,    39,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,     0,   527,    40,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   699,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1050,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1604,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   249,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2072,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2172,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   718,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3026,     0,   108,   109,   110,   111,     0,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,     0,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   719,   720,     0,   721,   722,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   723,
     724,   145,     0,   146,   147,   148,   149,   725,     0,     0,
       0,     0,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   726,   727,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,     0,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,     0,     0,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   728,   218,
     219,   220,   221,   222,   729,     0,   224,     0,   225,   226,
     730,   228,     0,   229,     0,   230,     0,    21,     0,   233,
     234,   731,     0,   237,     0,   238,     0,     0,     0,   732,
     733,     0,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   734,   265,   266,   267,
     268,   269,   735,   736,     0,   737,     0,   273,     0,     0,
     276,     0,   278,     0,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   738,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   739,     0,   740,   319,   320,
     321,     0,   741,     0,   324,   325,     0,   327,     0,   742,
     329,   743,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   744,     0,   342,     0,
     745,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,     0,   356,     0,   357,   358,   746,     0,   361,   362,
     747,   364,   365,   366,     0,   367,   368,   369,   370,   371,
       0,     0,   374,     0,   375,   376,   377,   748,   379,   380,
     381,   382,     0,   383,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   749,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    29,   415,   416,   417,
     418,   419,     0,   421,   750,   423,   424,     0,   426,     0,
       0,   429,   751,   431,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   752,   446,
     753,   448,     0,   449,   450,    34,   451,     0,   453,   454,
     455,   456,   457,     0,   754,   755,     0,     0,     0,   461,
     462,   756,   464,   757,     0,   466,   467,   758,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   759,   760,
       0,   488,     0,   490,     0,   492,   493,   494,   495,     0,
       0,     0,   497,     0,    39,   498,   499,   500,   501,   502,
     503,   761,   762,   763,   764,   765,   766,   767,   768,   769,
     770,   771,   515,   516,   517,   518,     0,     0,    40,  2865,
    1516,   538,     0,     0,  2053,  1102,     0,     0,     0,     0,
       0,  2054,   699,     0,  2055,  2056,  2057,   108,   109,   110,
     111,     0,   113,   114,   115,   116,  1332,   117,   118,   119,
    1333,  1334,  1335,  1336,     0,  1337,  1338,  1339,   121,   122,
    1340,   123,   124,   125,  2866,   127,   128,   129,     0,   850,
    2867,   852,   853,  1341,   135,   136,   137,   138,   139,   140,
    1342,  1343,   141,   142,   854,   855,   145,  1344,   146,   147,
     148,   149,     0,  1345,  2868,  1346,  2869,   153,   154,   155,
     156,   157,  2870,   159,   160,   161,  1347,   162,   163,   164,
     165,   166,     0,  1348,  2871,   169,   170,   171,  2872,  2873,
    2874,  2875,  1349,  1350,  2876,   177,   178,   179,   180,   181,
     182,   183,   865,   866,   186,  1351,   187,  1352,   188,   189,
     190,   191,   192,   193,  1353,   194,     0,   196,   197,   198,
     199,  1354,  1355,   200,   201,   867,   203,   204,     0,     0,
    1356,   207,   208,   209,  1357,   210,   211,   212,  1358,   213,
     214,   215,   216,     0,   218,   219,   220,   221,   222,     0,
    1359,   224,  1360,   225,   226,   868,   228,  1361,   229,  1362,
     230,  2877,  1363,  2878,   233,   234,  2879,  2880,   237,  1364,
     238,     0,  1365,  1366,     0,     0,     0,   243,  1367,   244,
     245,   246,   247,   248,   249,   250,  2881,   252,   253,   254,
     255,  1368,   256,   257,   258,   259,   260,   261,  1369,   262,
    2882,     0,   265,   266,   267,   268,   269,   875,   876,  1370,
     877,  1371,   273,  2883,  2884,   276,  2885,   278,     0,   280,
     281,   282,   283,   284,  1372,  1373,   285,  2886,   287,  2887,
    1374,   289,   290,   291,  1375,  1376,   292,   293,   294,   295,
     296,  2888,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     884,  2889,   886,   319,   320,   321,     0,  2890,  1377,   324,
     325,  2891,   327,  1378,     0,   329,   888,   331,   332,   333,
    1379,   334,   335,  1380,  1381,  2892,   337,   338,  1382,  1383,
     339,     0,  2893,   342,  2894,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,     0,     0,   356,  1384,   357,
     358,     0,  2895,   361,   362,     0,   364,   365,   366,  1385,
     367,   368,   369,   370,   371,     0,     0,   374,  1386,   375,
     376,   377,   892,   379,   380,   381,   382,  1387,   383,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,  1388,   397,   398,  2896,   400,   401,   402,   894,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,  1389,   415,   416,   417,   418,   419,  2897,   421,  2898,
     423,   424,     0,   426,  2899,     0,   429,   898,   431,  1390,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,  2900,   446,     0,   448,  1391,   449,   450,
    1392,   451,  2901,   453,   454,   455,   456,   457,  1393,   901,
     902,  1394,     0,  1395,   461,   462,     0,   464,     0,  1396,
     466,   467,  2902,   469,   470,   471,   472,   473,  2903,  1398,
     474,   475,   476,   477,   478,   479,  2904,  1399,   481,   482,
     483,   484,   485,     0,   906,  1401,   488,  2905,   490,     0,
     492,   493,   494,   495,     0,  1402,  1403,   497,  1404,  1405,
     498,   499,   500,   501,   502,   503,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   515,   516,   517,
     518,     0,   527,     0,  2058,  2059,  2060,  2053,  2906,  2907,
    2063,  2064,  2065,  2066,  2054,     0,     0,  2055,  2056,  2057,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,     0,     0,     0,  2058,  2059,  2060,
       0,  2061,  2062,  2063,  2064,  2065,  2066,  1655,     0,     0,
    1656,     0,     0,     0,  1657,  1658,  1659,  1660,  1661,  1662,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1663,     0,     0,  1655,     0,
       0,  1656,     0,     0,  1665,  1657,  1658,  1659,  1660,  1661,
    1662,  1666,  1101,     0,     0,  3219,     0,     0,     0,  3220,
       0,     0,     0,     0,     0,     0,  1663,     0,     0,     0,
       0,     0,     0,     0,     0,  1665,  1667,     0,     0,     0,
       0,     0,  1666,  1655,     0,     0,  1656,     0,     0,  3227,
    1657,  1658,  1659,  1660,  1661,  1662, -2096,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,     0,
       0,  1663,     0,     0,     0,     0,     0,     0,     0,     0,
    1665,  3229,     0,     0,     0,     0,     0,  1666,     0,     0,
       0,     0,     0,  1655,     0,     0,  1656,     0,     0,     0,
    1657,  1658,  1659,  1660,  1661,  1662,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,     0,     0,  1655,     0,     0,  1656,     0,     0,
    1665,  1657,  1658,  1659,  1660,  1661,  1662,  1666,     0,     0,
    1668,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1663,     0,  3575,     0,     0,     0,     0,  1669,
       0,  1665,  1667,     0,  1670,     0,     0,     0,  1666,     0,
       0,  1668,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2096,  1671,  1672,     0,     0,
    1669,     0,     0,  1667,     0,  1670,     0,     0,     0,     0,
       0,     0,  1673,     0, -2096,     0,     0,     0,     0, -2096,
       0,     0,     0,     0,     0,     0,  1668,  1671,  1672,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1673,     0,  1669,     0,     0,     0,     0,
    1670,  1674,     0,     0,  1675,     0,     0, -2096,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1676,     0,
       0,  1677,  1671,  1672,     0,     0,  1668,     0,     0,     0,
       0,     0,  1674,     0,     0,  1675,     0,     0,  1673,     0,
       0,     0,     0,     0,     0,  1669,     0,     0,     0,  1676,
    1670,     0,  1677,     0,     0,     0,     0,  1668,     0,     0,
       0,     0,     0,  1971,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,  1672,     0,     0,  1669,  1674,     0,     0,
    1675,  1670,     0,     0,     0,     0,     0,     0,  1673,     0,
       0,     0,     0,     0,  1676,     0,     0,  1677,     0,     0,
       0,     0,     0,  1671,  1672,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1678,     0,  1673,
       0,     0,     0,     0,     0,     0,     0,  1674,  1655,     0,
    1675,  1656,     0,     0,     0,  1657,  1658,  1659,  1660,  1661,
    1662,     0,     0,     0,  1676,     0,     0,  1677,  1678,     0,
       0,     0,     0,     0,     0,     0,  1663,     0,  1674,     0,
       0,  1675, -2096,     0,     0,  1665,     0,     0,     0,     0,
       0,     0,  1666,     0,     0,  1676,  1655,     0,  1677,  1656,
       0,     0,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,
       0,     0,     0,  1678,     0,     0,     0,  1667,     0,     0,
       0,     0,     0,     0,  1663,     0,     0,     0,     0,     0,
       0,     0,     0,  1665,     0,     0,     0,     0,     0,     0,
    1666,     0,     0,     0,  1679,     0,     0,  1680,  1681,  1682,
       0,  1683,  1684,  1685,  1686,  1687,  1688,     0,     0,     0,
       0,  2680,     0,  1678,     0,  1667,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1679,     0,     0,  1680,  1681,
    1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,     0, -2096,
       0,     0,  2722,     0,  1678,     0,  3244,  3245,  3246,  3247,
    3248,  3249,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1679,  1668,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,
    1686,  1687,  1688,     0,     0,     0,     0,  2810,     0,     0,
    1669,     0,     0,     0,     0,  1670,     0,     0,  1655,     0,
       0,  1656,     0,     0,     0,  1657,  1658,  1659,  1660,  1661,
    1662,     0,     0,     0,     0,     0,     0,  1671,  1672,  1668,
    1679,     0,     0,  1680,  1681,  1682,  1663,  1683,  1684,  1685,
    1686,  1687,  1688,  1673,     0,  1665,     0,  3022,  1669,     0,
       0,     0,  1666,  1670,     0,     0,     0,     0,     0,     0,
       0,  1679,     0,     0,  1680,  1681,  1682,     0,  1683,  1684,
    1685,  1686,  1687,  1688,     0,  1671,  1672,  1667,  3025,     0,
       0,     0,  1674,     0,     0,  1675,     0,     0,     0,     0,
       0,  1673,     0,     0,     0,     0,     0,     0,     0,  1676,
    1655,     0,  1677,  1656,     0,     0,     0,  1657,  1658,  1659,
    1660,  1661,  1662,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1663,     0,
    1674,     0,     0,  1675,     0,     0,     0,  1665,     0,     0,
       0,     0,     0,     0,  1666,     0,     0,  1676,  1655,     0,
    1677,  1656,     0,     0,     0,  1657,  1658,  1659,  1660,  1661,
    1662,     0,     0,     0,     0,     0,     0,     0,     0,  1667,
       0,     0,     0,     0,     0,     0,  1663,     0,     0,     0,
       0,  1668,     0,     0,     0,  1665,     0,     0,     0,     0,
       0,     0,  1666,     0,     0,     0,     0,     0,  1678,     0,
    1669,     0,     0,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,  1672,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1673,     0,     0,  1678,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1655,     0,     0,  1656,
       0,     0,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,
       0,     0,     0,  1668,     0,     0,     0,     0,     0,     0,
       0,     0,  1674,     0,  1663,  1675,     0,     0,     0,     0,
       0,     0,  1669,  1665,     0,     0,     0,  1670,     0,  1676,
    1666,     0,  1677,     0,     0,  1679,     0,     0,  1680,  1681,
    1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,     0,  1671,
    1672,  1668,  3193,     0,     0,  1667,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1673,     0,     0,     0,     0,
    1669,     0,     0,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,  1679,     0,     0,  1680,  1681,  1682,     0,
    1683,  1684,  1685,  1686,  1687,  1688,     0,  1671,  1672,     0,
    3268,     0,     0,     0,  1674,     0,     0,  1675,     0,     0,
       0,     0,     0,  1673,     0,     0,     0,     0,     0,     0,
       0,  1676,     0,  1655,  1677,     0,  1656,     0,  1678,     0,
    1657,  1658,  1659,  1660,  1661,  1662,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,  1674,     0,     0,  1675,     0,     0,     0,  1668,
    1665,     0,     0,     0,     0,     0,     0,  1666,     0,  1676,
       0,     0,  1677,     0,     0,     0,     0,     0,  1669,     0,
       0,     0,     0,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,  1672,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1678,  1673,     0,     0,     0,     0,     0,     0,     0,  1101,
       0,     0,  3219,     0,     0,  1679,  3220,     0,  1680,  1681,
    1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,     0,     0,
       0,     0,  3421,     0,     0,     0,     0,     0,     0,     0,
    1674,     0,     0,  1675,     0,     0,  3227,     0,  1678,     0,
       0,     0,     0, -2096,     0,     0,     0,  1676,     0,     0,
    1677,  1655,     0,     0,  1656,     0,     0,     0,  1657,  1658,
    1659,  1660,  1661,  1662,     0,     0,  1668,     0,  3229,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1663,
       0,     0,     0,     0,     0,  1669,     0,     0,  1665,     0,
    1670,     0,     0,     0,     0,  1666,     0,  1679,     0,     0,
    1680,  1681,  1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,
       0,     0,  1671,  1672,  3513,     0,     0,     0,     0,     0,
    1667,     0,     0,     0,     0,     0,     0,     0,  1673,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3576,     0,     0,     0,  1679,  1678,     0,  1680,  1681,
    1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,     0,     0,
       0,     0,  3542,     0,     0,     0,     0,  1674,     0,     0,
    1675,     0, -2096,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1676,     0,     0,  1677,     0,     0,
       0, -2096,     0,     0,     0,     0, -2096,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1668,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2096,     0,     0,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,     0,     0,  1670,     0,
       0,     0,     0,  1679,     0,     0,  1680,  1681,  1682,     0,
    1683,  1684,  1685,  1686,  1687,  1688,     0,     0,  1845,     0,
    1671,  1672,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1678,     0,     0,  1673,     0,     0,     0,
    1971,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1674,     0,     0,  1675,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1676,     0,     0,  1677,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2096,
    1679,     0,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,
    1686,  1687,  1688,     0,     0,  3187,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1678,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2096,     0,     0,     0,
       0,     0,     0,  3244,  3245,  3246,  3247,  3248,  3249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1331,     0,  1679,     0,
       0,  1680,  1681,  1682,     0,  1683,  1684,  1685,  1686,  1687,
    1688,     0,     0,  3468,   108,   109,   110,   111,     0,   113,
     114,   115,   116,  1332,   117,   118,   119,  1333,  1334,  1335,
    1336,     0,  1337,  1338,  1339,   121,   122,  1340,   123,   124,
     125,   940,   127,   128,   129,   941,   942,   943,   944,   945,
    1341,   135,   136,   137,   138,   139,   140,  1342,  1343,   141,
     142,   946,   947,   145,  1344,   146,   147,   148,   149,   948,
    1345,   949,  1346,   950,   153,   154,   155,   156,   157,   951,
     159,   160,   161,  1347,   162,   163,   164,   165,   166,     0,
    1348,   952,   169,   170,   171,   953,   954,   955,   956,  1349,
    1350,   957,   177,   178,   179,   180,   181,   182,   183,   958,
     959,   186,  1351,   187,  1352,   188,   189,   190,   191,   192,
     193,  1353,   194,     0,   196,   197,   198,   199,  1354,  1355,
     200,   201,   202,   203,   204,     0,     0,  1356,   207,   208,
     209,  1357,   210,   211,   212,  1358,   213,   214,   215,   216,
     960,   218,   219,   220,   221,   222,   961,  1359,   224,  1360,
     225,   226,   962,   228,  1361,   229,  1362,   230,   963,  1363,
     964,   233,   234,   965,   966,   237,  1364,   238,     0,  1365,
    1366,   967,   968,     0,   243,  1367,   244,   245,   246,   247,
     248,   249,   250,   969,   252,   253,   254,   255,  1368,   256,
     257,   258,   259,   260,   261,  1369,   262,   970,   971,   265,
     266,   267,   268,   269,   972,   973,  1370,   974,  1371,   273,
     975,   976,   276,   977,   278,     0,   280,   281,   282,   283,
     284,  1372,  1373,   285,   978,   287,   979,  1374,   289,   290,
     291,  1375,  1376,   292,   293,   294,   295,   296,   980,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   981,   982,   983,
     319,   320,   321,     0,   984,  1377,   324,   325,   985,   327,
    1378,   986,   329,   987,   331,   332,   333,  1379,   334,   335,
    1380,  1381,   336,   337,   338,  1382,  1383,   339,   988,   989,
     342,   990,   991,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,     0,   356,  1384,   357,   358,   992,   993,
     361,   362,   994,   364,   365,   366,  1385,   367,   368,   369,
     370,   371,     0,     0,   374,  1386,   375,   376,   377,   995,
     379,   380,   381,   382,  1387,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,  1388,
     397,   398,   996,   400,   401,   402,   997,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1389,   415,
     416,   417,   418,   419,   998,   421,   999,   423,   424,     0,
     426,  1000,     0,   429,  1001,   431,  1390,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
    1002,   446,  1003,   448,  1391,   449,   450,  1392,   451,  1004,
     453,   454,   455,   456,   457,  1393,  1005,  1006,  1394,     0,
    1395,   461,   462,  1007,   464,  1008,  1396,   466,   467,  1009,
     469,   470,   471,   472,   473,  1397,  1398,   474,   475,   476,
     477,   478,   479,  1010,  1399,   481,   482,   483,   484,   485,
    1400,  1012,  1401,   488,  1013,   490,     0,   492,   493,   494,
     495,     0,  1402,  1403,   497,  1404,  1405,   498,   499,   500,
     501,   502,   503,  1014,  1015,  1016,  1017,  1018,  1019,  1020,
    1021,  1022,  1023,  1024,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,  2151,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   249,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,  2673,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   939,  1516,   538,     0,     0,     0,  1102,     0,
       0,  2676,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,     0,     0,     0,
       0,   121,   122,     0,   123,   124,   125,   940,   127,   128,
     129,   941,   942,   943,   944,   945,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   946,   947,   145,
       0,   146,   147,   148,   149,   948,     0,   949,     0,   950,
     153,   154,   155,   156,   157,   951,   159,   160,   161,     0,
     162,   163,   164,   165,   166,     0,     0,   952,   169,   170,
     171,   953,   954,   955,   956,     0,     0,   957,   177,   178,
     179,   180,   181,   182,   183,   958,   959,   186,  1714,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,     0,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,     0,     0,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   960,   218,   219,   220,
     221,   222,   961,  1517,   224,     0,   225,   226,   962,   228,
       0,   229,     0,   230,   963,     0,   964,   233,   234,   965,
     966,   237,     0,   238,     0,     0,     0,   967,   968,     0,
     243,     0,   244,   245,   246,   247,   248,   249,   250,   969,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,   970,   971,   265,   266,   267,   268,   269,
     972,   973,     0,   974,     0,   273,   975,   976,   276,   977,
     278,     0,   280,   281,   282,   283,   284,     0,     0,   285,
     978,   287,   979,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   980,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   981,   982,   983,   319,   320,   321,     0,
     984,     0,   324,   325,   985,   327,     0,   986,   329,   987,
     331,   332,   333,     0,   334,   335,  1518,     0,   336,   337,
     338,     0,     0,   339,   988,   989,   342,   990,   991,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,     0,
     356,     0,   357,   358,   992,   993,   361,   362,   994,   364,
     365,   366,     0,   367,   368,   369,   370,   371,     0,     0,
     374,     0,   375,   376,   377,   995,   379,   380,   381,   382,
       0,   383,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   996,   400,
     401,   402,   997,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     998,   421,   999,   423,   424,     0,   426,  1000,     0,   429,
    1001,   431,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,  1002,   446,  1003,   448,
       0,   449,   450,     0,   451,  1004,   453,   454,   455,   456,
     457,     0,  1005,  1006,     0,     0,     0,   461,   462,  1007,
     464,  1008,  1519,   466,   467,  1009,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,  1010,
       0,   481,   482,   483,   484,   485,  1400,  1012,     0,   488,
    1013,   490,     0,   492,   493,   494,   495,     0,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,  1014,
    1015,  1016,  1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,
     515,   516,   517,   518,   939,  1516,   538,     0,     0,     0,
    1102,  1520,  1521,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,     0,
       0,     0,     0,   121,   122,     0,   123,   124,   125,   940,
     127,   128,   129,   941,   942,   943,   944,   945,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   946,
     947,   145,     0,   146,   147,   148,   149,   948,     0,   949,
       0,   950,   153,   154,   155,   156,   157,   951,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,   952,
     169,   170,   171,   953,   954,   955,   956,     0,     0,   957,
     177,   178,   179,   180,   181,   182,   183,   958,   959,   186,
    1716,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,     0,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,     0,     0,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   960,   218,
     219,   220,   221,   222,   961,  1517,   224,     0,   225,   226,
     962,   228,     0,   229,     0,   230,   963,     0,   964,   233,
     234,   965,   966,   237,     0,   238,     0,     0,     0,   967,
     968,     0,   243,     0,   244,   245,   246,   247,   248,   249,
     250,   969,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,   970,   971,   265,   266,   267,
     268,   269,   972,   973,     0,   974,     0,   273,   975,   976,
     276,   977,   278,     0,   280,   281,   282,   283,   284,     0,
       0,   285,   978,   287,   979,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   980,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   981,   982,   983,   319,   320,
     321,     0,   984,     0,   324,   325,   985,   327,     0,   986,
     329,   987,   331,   332,   333,     0,   334,   335,  1518,     0,
     336,   337,   338,     0,     0,   339,   988,   989,   342,   990,
     991,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,     0,   356,     0,   357,   358,   992,   993,   361,   362,
     994,   364,   365,   366,     0,   367,   368,   369,   370,   371,
       0,     0,   374,     0,   375,   376,   377,   995,   379,   380,
     381,   382,     0,   383,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     996,   400,   401,   402,   997,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   998,   421,   999,   423,   424,     0,   426,  1000,
       0,   429,  1001,   431,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,  1002,   446,
    1003,   448,     0,   449,   450,     0,   451,  1004,   453,   454,
     455,   456,   457,     0,  1005,  1006,     0,     0,     0,   461,
     462,  1007,   464,  1008,  1519,   466,   467,  1009,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,  1010,     0,   481,   482,   483,   484,   485,  1400,  1012,
       0,   488,  1013,   490,     0,   492,   493,   494,   495,     0,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,  1014,  1015,  1016,  1017,  1018,  1019,  1020,  1021,  1022,
    1023,  1024,   515,   516,   517,   518,   939,  1516,   538,     0,
       0,     0,  1102,  1520,  1521,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,     0,     0,     0,     0,   121,   122,     0,   123,   124,
     125,   940,   127,   128,   129,   941,   942,   943,   944,   945,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   946,   947,   145,     0,   146,   147,   148,   149,   948,
       0,   949,     0,   950,   153,   154,   155,   156,   157,   951,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
       0,   952,   169,   170,   171,   953,   954,   955,   956,     0,
       0,   957,   177,   178,   179,   180,   181,   182,   183,   958,
     959,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,     0,     0,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     960,   218,   219,   220,   221,   222,   961,  1517,   224,     0,
     225,   226,   962,   228,     0,   229,     0,   230,   963,     0,
     964,   233,   234,   965,   966,   237,     0,   238,     0,     0,
       0,   967,   968,     0,   243,     0,   244,   245,   246,   247,
     248,   249,   250,   969,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,   970,   971,   265,
     266,   267,   268,   269,   972,   973,     0,   974,     0,   273,
     975,   976,   276,   977,   278,     0,   280,   281,   282,   283,
     284,     0,     0,   285,   978,   287,   979,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   980,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   981,   982,   983,
     319,   320,   321,     0,   984,     0,   324,   325,   985,   327,
       0,   986,   329,   987,   331,   332,   333,     0,   334,   335,
    1518,     0,   336,   337,   338,     0,     0,   339,   988,   989,
     342,   990,   991,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,     0,   356,     0,   357,   358,   992,   993,
     361,   362,   994,   364,   365,   366,     0,   367,   368,   369,
     370,   371,     0,     0,   374,     0,   375,   376,   377,   995,
     379,   380,   381,   382,     0,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   996,   400,   401,   402,   997,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   998,   421,   999,   423,   424,     0,
     426,  1000,     0,   429,  1001,   431,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
    1002,   446,  1003,   448,     0,   449,   450,     0,   451,  1004,
     453,   454,   455,   456,   457,     0,  1005,  1006,     0,     0,
       0,   461,   462,  1007,   464,  1008,  1519,   466,   467,  1009,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,  1010,     0,   481,   482,   483,   484,   485,
    1400,  1012,     0,   488,  1013,   490,     0,   492,   493,   494,
     495,     0,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,  1014,  1015,  1016,  1017,  1018,  1019,  1020,
    1021,  1022,  1023,  1024,   515,   516,   517,   518,     0,     0,
    1655,     0,     0,  1656,     0,  1520,  1521,  1657,  1658,  1659,
    1660,  1661,  1662,  1655,     0,     0,  1656,     0,     0,     0,
    1657,  1658,  1659,  1660,  1661,  1662,     0,     0,  1663,     0,
       0,     0,     0,  2178,     0,     0,     0,  1665,     0,     0,
       0,  1663,     0,     0,  1666,     0,     0,     0,     0,     0,
    1665,     0,     0,  1655,     0,     0,  1656,  1666,     0,     0,
    1657,  1658,  1659,  1660,  1661,  1662,     0,     0,     0,  1667,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,  1667,     0,     0,     0,     0,     0,     0,     0,
    1665,     0,     0,     0,     0,     0,     0,  1666,     0,     0,
       0,     0,     0,  1655,     0,     0,  1656,     0,     0,     0,
    1657,  1658,  1659,  1660,  1661,  1662,     0,     0,     0,     0,
    2179,     0,  1667,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,     0,     0,     0,  1948,     0,     0,     0,     0,
    1665,     0,     0,  1655,     0,     0,  1656,  1666,     0,     0,
    1657,  1658,  1659,  1660,  1661,  1662,  1655,     0,     0,  1656,
       0,     0,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,
       0,  1663,  1667,  1668,     0,     0,  1987,     0,     0,     0,
    1665,  1988,     0,     0,  1663,     0,  1668,  1666,  1993,     0,
       0,     0,  1669,  1665,     0,     0,     0,  1670,     0,     0,
    1666,     0,     0,     0,     0,  1669,     0,     0,     0,     0,
    1670,     0,  1667,     0,     0,  3654,     0,     0,     0,  1671,
    1672,     0,     0,     0,     0,  1667,  1668,     0,     0,     0,
       0,     0,  1671,  1672,     0,  1673,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1669,     0,     0,  1673,     0,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,  1672,  1674,     0,  1668,  1675,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1674,  1673,     0,
    1675,  1676,     0,     0,  1677,  1669,     0,     0,     0,     0,
    1670,     0,     0,     0,  1676,     0,     0,  1677,     0,     0,
       0,     0,     0,     0,     0,     0,  1668,     0,     0,     0,
       0,     0,  1671,  1672,     0,     0,     0,  1674,     0,  1668,
    1675,     0,     0,     0,     0,  1669,     0,     0,  1673,     0,
    1670,     0,     0,     0,  1676,     0,     0,  1677,  1669,     0,
       0,     0,     0,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,  1672,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3655,     0,  1671,  1672,  1674,  1673,     0,
    1675,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1678,  1673,     0,     0,  1676,     0,     0,  1677,  1655,     0,
       0,  1656,     0,  1678,     0,  1657,  1658,  1659,  1660,  1661,
    1662,     0,     0,     0,     0,     0,     0,  1674,     0,     0,
    1675,     0,     0,     0,     0,     0,  1663,     0,     0,     0,
    1674,     0,     0,  1675,  1676,  1665,     0,  1677,     0,     0,
       0,     0,  1666,  1678,     0,     0,     0,  1676,     0,     0,
    1677,     0,     0,  2183,     0,     0,     0,  1959,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1678,     0,     0,     0,  1679,     0,     0,
    1680,  1681,  1682,     0,  1683,  1684,  1685,  1686,  1687,  1688,
    1679,     0,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,
    1686,  1687,  1688,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1678,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1678,     0,     0,     0,
    1679,     0,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,
    1686,  1687,  1688,     0,     0,     0,  1998,     0,     0,     0,
       0,  1668,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,     0,     0,  1670,     0,     0,     0,     0,
    1679,     0,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,
    1686,  1687,  1688,     0,     0,     0,     0,  1671,  1672,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1673,     0,     0,     0,     0,     0,     0,
    1679,     0,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,
    1686,  1687,  1688,  1679,     0,     0,  1680,  1681,  1682,     0,
    1683,  1684,  1685,  1686,  1687,  1688,     0,     0,     0,     0,
       0,     0,  1674,  1655,     0,  1675,  1656,     0,     0,     0,
    1657,  1658,  1659,  1660,  1661,  1662,     0,     0,     0,  1676,
       0,     0,  1677,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,     0,     0,  1655,  2000,     0,  1656,     0,     0,
    1665,  1657,  1658,  1659,  1660,  1661,  1662,  1666,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1663,     0,     0,     0,     0,     0,     0,     0,
       0,  1665,  1667,     0,     0,     0,     0,     0,  1666,     0,
       0,     0,  1655,     0,     0,  1656,     0,     0,     0,  1657,
    1658,  1659,  1660,  1661,  1662,     0,     0,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,     0,     0,     0,     0,
    1663,     0,     0,     0,     0,     0,     0,     0,  1678,  1665,
       0,     0,     0,     0,     0,     0,  1666,  1655,     0,     0,
    1656,     0,     0,     0,  1657,  1658,  1659,  1660,  1661,  1662,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1667,     0,     0,     0,  1663,     0,     0,     0,  2720,
       0,     0,     0,     0,  1665,     0,     0,     0,     0,     0,
       0,  1666,     0,     0,     0,  1655,  1668,     0,  1656,     0,
       0,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,     0,
       0,     0,     0,     0,     0,  1669,  1667,  2076,     0,     0,
    1670,     0,     0,  1663,     0,     0,     0,  1668,     0,     0,
       0,     0,  1665,     0,     0,     0,     0,     0,     0,  1666,
       0,     0,  1671,  1672,     0,  1679,  1669,     0,  1680,  1681,
    1682,  1670,  1683,  1684,  1685,  1686,  1687,  1688,  1673,     0,
       0,     0,     0,     0,  1667,     0,     0,     0,     0,     0,
       0,     0,     0,  1671,  1672,  1668,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1673,
       0,     0,     0,     0,  1669,     0,     0,  1674,     0,  1670,
    1675,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1676,     0,     0,  1677,     0,     0,
    1668,  1671,  1672,     0,     0,     0,     0,     0,  1674,     0,
       0,  1675,     0,     0,     0,     0,     0,  1673,     0,  1669,
       0,     0,     0,     0,  1670,  1676,     0,     0,  1677,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,  1672,  1668,     0,
       0,     0,     0,     0,     0,     0,  1674,     0,     0,  1675,
       0,     0,  1673,     0,     0,     0,     0,  1669,     0,     0,
       0,     0,  1670,  1676,     0,  1655,  1677,     0,  1656,     0,
       0,     0,  1657,  1658,  1659,  1660,  1661,  1662,     0,     0,
       0,     0,     0,  1678,  1671,  1672,     0,     0,     0,     0,
       0,  1674,     0,  1663,  1675,     0,     0,     0,     0,     0,
    1673,     0,  1665,     0,     0,     0,     0,     0,  1676,  1666,
    1101,  1677,     0,  3219,  1678,     0,     0,  3220,  3221,  3222,
    3223,  3224,  3225,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1667,     0,     0,     0,  3226,  1674,
       0,     0,  1675,     0,     0,     0,     0,  3227,     0,     0,
       0,     0,     0,     0,  3228,     0,  1676,     0,     0,  1677,
       0,     0,  1678,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3229,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1679,     0,     0,  1680,  1681,  1682,  2710,  1683,  1684,  1685,
    1686,  1687,  1688,     0,     0,     0,     0,  1678,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1679,     0,     0,  1680,  1681,  1682,     0,  1683,  1684,
    1685,  1686,  1687,  1688,     0,     0,     0,     0,  1668,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1678,     0,  1669,     0,     0,
       0,     0,  1670,     0,     0,     0,     0,     0,     0,  1679,
       0,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,  1686,
    1687,  1688,     0,  3230,  1671,  1672,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1673,     0,  3231,     0,     0,     0,     0,  3232,     0,     0,
       0,     0,     0,     0,  1679,     0,     0,  1680,  1681,  1682,
       0,  1683,  1684,  1685,  1686,  1687,  1688,     0,     0,  3233,
    3234,     0,     0,     0,     0,     0,     0,     0,     0,  1674,
       0,     0,  1675,     0,     0,  3235,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1676,     0,     0,  1677,
       0,     0,  1679,     0,     0,  1680,  1681,  1682,     0,  1683,
    1684,  1685,  1686,  1687,  1688,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3236,  1655,     0,  3237,  1656,     0,
       0,     0,  1657,     0,     0,  1660,  1661,  1662,     0,     0,
       0,  1971,     0,     0,  3238,     0,     0,     0,     0,     0,
       0,     0,     0,  1663,     0,     0,  1101,     0,     0,  3219,
       0,     0,  1665,  3220,     0,     0,  3223,  3224,  3225,  1666,
       0,     0,     0,  1101,     0,     0,  3219,     0,     0,     0,
    3220,     0,     0,     0,  3226,     0,     0,     0,     0,     0,
       0,     0,     0,  3227,  1667,  1678,     0,     0,     0,     0,
    3228,  1101,     0,     0,  3219,     0,     0,     0,  3220,     0,
    3227,  3223,  3224,  3225,     0,     0,     0, -2096,     0,     0,
       0,  1101,     0,     0,  3219,  3229,     0,     0,  3220,  3226,
       0,  3223,  3224,  3225,     0,     0,     0,     0,  3227,     0,
    3239,     0,  3229,     0,     0,  3228,     0,     0,     0,     0,
       0,     0,  1655,     0,     0,  1656,     0,     0,  3227,  1657,
       0,     0,  1660,  1661,  1662,  3228,     0,     0,     0,     0,
    3229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1665,
    3229,     0,     0,     0,     0,     0,  1666,     0,  1668,     0,
       0,     0,  1679,     0,     0,  1680,  1681,  1682,     0,  1683,
    1684,  1685,  1686,  2200,  1688,  3631,     0,  1669,     0,     0,
       0,  1667,  1670,     0,     0,     0,     0,     0,     0,  3230,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1671,  1672, -2096,  3240,  3231,     0,
    3241,  3242,  3243,  3232,  3244,  3245,  3246,  3247,  3248,  3249,
    1673,     0,     0,     0,     0, -2096,     0,     0,     0,     0,
   -2096,     0,     0,     0,  3230,  3233,  3234,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3235,     0,  3231,  3230,     0,     0,     0,  3232,  1674,
       0,     0,  1675,     0,     0,     0,     0,     0, -2096,     0,
       0,     0,     0,  3231,     0,     0,  1676,     0,  3232,  1677,
    3233,  3234,     0,     0,     0,  1668,     0,     0,     0,     0,
    3236,     0,     0,  3237,     0,     0,  3235,     0,     0,     0,
    3233,  3234,     0,     0,  1669,     0,     0,  1971,     0,  1670,
    3238,     0,     0,     0,     0,     0,  3235,     0,     0,     0,
       0,     0,     0,     0,  1971,     0,     0,     0,     0,     0,
       0, -2096, -2096,     0,     0,  3236,     0,     0,  3237,     0,
       0,     0,     0,     0,     0,     0,     1,  1673,     0,     0,
       0,     0,  1971,     0,     0,  3236,  1101,     2,  3237,  3219,
       0,     0,     0,  3220,     0,     0,  3223,  3224,  3225,     0,
       0,     0,  1971,     0,     0,  1678,     6,     0,     0,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0, -2096,
       0,     0,     0,  3227,     0,     0,     0,     8,     0,     0,
    3228,     0,     0,  1676,     0,     0,  3239,     0,     9,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,     0,   591, -2096,     0,  3229,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3239,     0,     0,    13,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   592,     0,     0,     0,     0,
       0,  3239,     0,    16,     0,     0,     0,     0,     0,     0,
       0,    17,  1679,     0,     0,  1680,  1681,  1682,     0,  1683,
    1684,  1685,  1686,  1687,  1688,     0,     0,    20,     0,     0,
       0,    21,  1678,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3240,     0,     0,  3241,  3242,  3243,     0,
    3244,  3245,  3246,  3247,  3248,  3249,     0,     0,     0,  3230,
   -2096,     0,     0,     0,     0,     0,     0,  3244,  3245,  3246,
    3247,  3248,  3249,     0,    23,     0,     0,     0,  3231,     0,
       0,     0,     0,  3232,     0,     0,     0,     0,  3240,     0,
       0,  3241,  3242,  3243,     0,  3244,  3245,  3246,  3247,  3248,
    3249,    24,     0,     0,     0, -2096, -2096,     0,  3240,     0,
       0,  3241,  3242,  3243,     0,  3244,  3245,  3246,  3247,  3248,
    3249,  3235,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1679,
       0,     0,  1680,  1681,  1682,     0,  1683,  1684,  1685,  1686,
    1687,  1688,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2096,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1971,     0,     0,
       0,     0,    25,     0,     0,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    33,  3239,     0,     0,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,    38,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   699,     0,  1331,     0,
    2095,     0,     0,  3240,     0,     0,  3241,  3242,  3243,     0,
    3244,  3245,  3246,  3247,  3248,  3249,   108,   109,   110,   111,
       0,   113,   114,   115,   116,  1332,   117,   118,   119,  1333,
    1334,  1335,  1336,     0,  1337,  1338,  1339,   121,   122,  1340,
     123,   124,   125,   940,   127,   128,   129,   941,   942,   943,
     944,   945,  1341,   135,   136,   137,   138,   139,   140,  1342,
    1343,   141,   142,   946,   947,   145,  1344,   146,   147,   148,
     149,   948,  1345,   949,  1346,   950,   153,   154,   155,   156,
     157,   951,   159,   160,   161,  1347,   162,   163,   164,   165,
     166,     0,  1348,   952,   169,   170,   171,   953,   954,   955,
     956,  1349,  1350,   957,   177,   178,   179,   180,   181,   182,
     183,   958,   959,   186,  1351,   187,  1352,   188,   189,   190,
     191,   192,   193,  1353,   194,     0,   196,   197,   198,   199,
    1354,  1355,   200,   201,   202,   203,   204,     0,     0,  1356,
     207,   208,   209,  1357,   210,   211,   212,  1358,   213,   214,
     215,   216,   960,   218,   219,   220,   221,   222,   961,  1359,
     224,  1360,   225,   226,   962,   228,  1361,   229,  1362,   230,
     963,  1363,   964,   233,   234,   965,   966,   237,  1364,   238,
       0,  1365,  1366,   967,   968,     0,   243,  1367,   244,   245,
     246,   247,   248,   249,   250,   969,   252,   253,   254,   255,
    1368,   256,   257,   258,   259,   260,   261,  1369,   262,   970,
     971,   265,   266,   267,   268,   269,   972,   973,  1370,   974,
    1371,   273,   975,   976,   276,   977,   278,     0,   280,   281,
     282,   283,   284,  1372,  1373,   285,   978,   287,   979,  1374,
     289,   290,   291,  1375,  1376,   292,   293,   294,   295,   296,
     980,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   981,
     982,   983,   319,   320,   321,     0,   984,  1377,   324,   325,
     985,   327,  1378,   986,   329,   987,   331,   332,   333,  1379,
     334,   335,  1380,  1381,   336,   337,   338,  1382,  1383,   339,
     988,   989,   342,   990,   991,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,     0,   356,  1384,   357,   358,
     992,   993,   361,   362,   994,   364,   365,   366,  1385,   367,
     368,   369,   370,   371,     0,     0,   374,  1386,   375,   376,
     377,   995,   379,   380,   381,   382,  1387,   383,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,  1388,   397,   398,   996,   400,   401,   402,   997,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
    1389,   415,   416,   417,   418,   419,   998,   421,   999,   423,
     424,     0,   426,  1000,     0,   429,  1001,   431,  1390,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,  1002,   446,  1003,   448,  1391,   449,   450,  1392,
     451,  1004,   453,   454,   455,   456,   457,  1393,  1005,  1006,
    1394,     0,  1395,   461,   462,  1007,   464,  1008,  1396,   466,
     467,  1009,   469,   470,   471,   472,   473,  1397,  1398,   474,
     475,   476,   477,   478,   479,  1010,  1399,   481,   482,   483,
     484,   485,  1400,  1012,  1401,   488,  1013,   490,     0,   492,
     493,   494,   495,     0,  1402,  1403,   497,  1404,  1405,   498,
     499,   500,   501,   502,   503,  1014,  1015,  1016,  1017,  1018,
    1019,  1020,  1021,  1022,  1023,  1024,   515,   516,   517,   518,
    1331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   113,   114,   115,   116,  1332,   117,   118,
     119,  1333,  1334,  1335,  1336,     0,  1337,  1338,  1339,   121,
     122,  1340,   123,   124,   125,   940,   127,   128,   129,   941,
     942,   943,   944,   945,  1341,   135,   136,   137,   138,   139,
     140,  1342,  1343,   141,   142,   946,   947,   145,  1344,   146,
     147,   148,   149,   948,  1345,   949,  1346,   950,   153,   154,
     155,   156,   157,   951,   159,   160,   161,  1347,   162,   163,
     164,   165,   166,     0,  1348,   952,   169,   170,   171,   953,
     954,   955,   956,  1349,  1350,   957,   177,   178,   179,   180,
     181,   182,   183,   958,   959,   186,  1351,   187,  1352,   188,
     189,   190,   191,   192,   193,  1353,   194,     0,   196,   197,
     198,   199,  1354,  1355,   200,   201,   202,   203,   204,     0,
       0,  1356,   207,   208,   209,  1357,   210,   211,   212,  1358,
     213,   214,   215,   216,   960,   218,   219,   220,   221,   222,
     961,  1359,   224,  1360,   225,   226,   962,   228,  1361,   229,
    1362,   230,   963,  1363,   964,   233,   234,   965,   966,   237,
    1364,   238,     0,  1365,  1366,   967,   968,     0,   243,  1367,
     244,   245,   246,   247,   248,   249,   250,   969,   252,   253,
     254,   255,  1368,   256,   257,   258,   259,   260,   261,  1369,
     262,   970,   971,   265,   266,   267,   268,   269,   972,   973,
    1370,   974,  1371,   273,   975,   976,   276,   977,   278,     0,
     280,   281,   282,   283,   284,  1372,  1373,   285,   978,   287,
     979,  1374,   289,   290,   291,  1375,  1376,   292,   293,   294,
     295,   296,   980,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   981,   982,   983,   319,   320,   321,     0,   984,  1377,
     324,   325,   985,   327,  1378,   986,   329,   987,   331,   332,
     333,  1379,   334,   335,  1380,  1381,   336,   337,   338,  1382,
    1383,   339,   988,   989,   342,   990,   991,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,     0,   356,  1384,
     357,   358,   992,   993,   361,   362,   994,   364,   365,   366,
    1385,   367,   368,   369,   370,   371,     0,     0,   374,  1386,
     375,   376,   377,   995,   379,   380,   381,   382,  1387,   383,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,  1388,   397,   398,   996,   400,   401,   402,
     997,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1389,   415,   416,   417,   418,   419,   998,   421,
     999,   423,   424,     0,   426,  1000,     0,   429,  1001,   431,
    1390,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,  1002,   446,  1003,   448,  1391,   449,
     450,  1392,   451,  1004,   453,   454,   455,   456,   457,  1393,
    1005,  1006,  1394,     0,  1395,   461,   462,  1007,   464,  1008,
    1396,   466,   467,  1009,   469,   470,   471,   472,   473,  1397,
    1398,   474,   475,   476,   477,   478,   479,  1010,  1399,   481,
     482,   483,   484,   485,  1400,  1012,  1401,   488,  1013,   490,
       0,   492,   493,   494,   495,     0,  1402,  1403,   497,  1404,
    1405,   498,   499,   500,   501,   502,   503,  1014,  1015,  1016,
    1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,   515,   516,
     517,   518,  1331,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,  2236,   114,   115,   116,  1332,
     117,   118,   119,  1333,  1334,  1335,  1336,     0,  1337,  1338,
    1339,   121,   122,  1340,   123,   124,   125,   940,   127,   128,
     129,   941,   942,   943,   944,   945,  1341,   135,   136,   137,
     138,   139,   140,  1342,  1343,   141,   142,   946,   947,   145,
    1344,   146,   147,   148,   149,   948,  1345,   949,  1346,   950,
     153,   154,   155,   156,   157,   951,   159,   160,   161,  1347,
     162,   163,   164,   165,   166,     0,  1348,   952,   169,   170,
     171,   953,   954,   955,   956,  1349,  1350,   957,   177,   178,
     179,   180,   181,   182,   183,   958,   959,   186,  1351,   187,
    1352,   188,   189,   190,   191,   192,   193,  1353,   194,     0,
     196,   197,   198,   199,  1354,  1355,   200,   201,   202,  2237,
     204,     0,     0,  1356,   207,   208,   209,  1357,   210,   211,
     212,  1358,   213,   214,   215,   216,   960,   218,   219,   220,
     221,   222,   961,  1359,   224,  1360,   225,   226,   962,   228,
    1361,   229,  1362,   230,   963,  1363,   964,   233,   234,   965,
     966,   237,  1364,   238,     0,  1365,  1366,   967,   968,     0,
     243,  1367,   244,   245,   246,   247,   248,   249,   250,   969,
     252,   253,   254,   255,  1368,   256,   257,   258,   259,   260,
     261,  1369,   262,   970,   971,   265,   266,   267,   268,   269,
     972,   973,  1370,   974,  1371,   273,   975,   976,   276,   977,
     278,     0,   280,   281,   282,   283,   284,  1372,  1373,   285,
     978,   287,   979,  1374,   289,   290,   291,  1375,  1376,   292,
     293,   294,   295,   296,   980,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   981,   982,   983,   319,   320,   321,     0,
     984,  1377,   324,   325,   985,   327,  1378,   986,   329,   987,
     331,   332,   333,  1379,   334,   335,  1380,  1381,   336,   337,
     338,  1382,  1383,   339,   988,   989,   342,   990,   991,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,     0,
     356,  1384,   357,   358,   992,   993,   361,   362,   994,   364,
     365,   366,  1385,   367,   368,   369,   370,   371,     0,     0,
     374,  1386,   375,   376,   377,   995,   379,   380,   381,   382,
    1387,   383,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,  1388,   397,   398,   996,   400,
     401,   402,   997,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1389,   415,   416,   417,   418,   419,
     998,  2238,   999,   423,   424,     0,   426,  1000,     0,   429,
    1001,   431,  1390,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,  1002,   446,  1003,   448,
    1391,   449,   450,  1392,   451,  1004,   453,   454,   455,   456,
     457,  1393,  1005,  1006,  1394,     0,  1395,   461,   462,  1007,
     464,  1008,  1396,   466,   467,  1009,   469,   470,   471,   472,
     473,  1397,  1398,   474,   475,   476,   477,   478,   479,  1010,
    1399,   481,   482,   483,   484,   485,  1400,  1012,  1401,   488,
    1013,   490,     0,   492,   493,   494,   495,     0,  1402,  1403,
     497,  1404,  1405,   498,   499,   500,   501,   502,   503,  1014,
    1015,  1016,  1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,
     515,   516,   517,   518,   107,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,   630,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   631,     0,   632,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   633,   634,   635,   636,   637,   638,   639,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   640,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,   231,     0,   232,   233,
     234,   235,   236,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,   286,   287,   288,     0,   289,   290,   291,   643,
     644,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,     0,   324,   325,   326,   327,     0,   645,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     647,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   648,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   650,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     651,   448,     0,   449,   450,     0,   451,   452,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   652,   464,   653,     0,   466,   467,   654,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   655,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,   489,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   107,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,   175,     0,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,   231,     0,
     232,   233,   234,   235,   236,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,   286,   287,   288,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,     0,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   480,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,   489,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   939,     0,
     538,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,     0,     0,     0,     0,   121,   122,     0,
     123,   124,   125,   940,   127,   128,   129,   941,   942,   943,
     944,   945,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   946,   947,   145,     0,   146,   147,   148,
     149,   948,     0,   949,     0,   950,   153,   154,   155,   156,
     157,   951,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,     0,   952,   169,   170,   171,   953,   954,   955,
     956,     0,     0,   957,   177,   178,   179,   180,   181,   182,
     183,   958,   959,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,     0,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,     0,     0,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   960,   218,   219,   220,   221,   222,   961,  1517,
     224,     0,   225,   226,   962,   228,     0,   229,     0,   230,
     963,     0,   964,   233,   234,   965,   966,   237,     0,   238,
       0,     0,     0,   967,   968,     0,   243,     0,   244,   245,
     246,   247,   248,   249,   250,   969,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,   970,
     971,   265,   266,   267,   268,   269,   972,   973,     0,   974,
       0,   273,   975,   976,   276,   977,   278,     0,   280,   281,
     282,   283,   284,     0,     0,   285,   978,   287,   979,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     980,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   981,
     982,   983,   319,   320,   321,     0,   984,     0,   324,   325,
     985,   327,     0,   986,   329,   987,   331,   332,   333,     0,
     334,   335,  1518,     0,   336,   337,   338,     0,     0,   339,
     988,   989,   342,   990,   991,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,     0,   356,     0,   357,   358,
     992,   993,   361,   362,   994,   364,   365,   366,     0,   367,
     368,   369,   370,   371,     0,     0,   374,     0,   375,   376,
     377,   995,   379,   380,   381,   382,     0,   383,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,   996,   400,   401,   402,   997,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,   998,   421,   999,   423,
     424,     0,   426,  1000,     0,   429,  1001,   431,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,  1002,   446,  1003,   448,     0,   449,   450,     0,
     451,  1004,   453,   454,   455,   456,   457,     0,  1005,  1006,
       0,     0,     0,   461,   462,  1007,   464,  1008,  1519,   466,
     467,  1009,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,  1010,     0,   481,   482,   483,
     484,   485,  1400,  1012,     0,   488,  1013,   490,     0,   492,
     493,   494,   495,     0,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,  1014,  1015,  1016,  1017,  1018,
    1019,  1020,  1021,  1022,  1023,  1024,   515,   516,   517,   518,
     939,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   113,   114,   115,   116,     0,   117,   118,
     119,     3,     4,     0,     0,     0,     0,     0,     0,   121,
     122,     0,   123,   124,   125,   940,   127,   128,   129,   941,
     942,   943,   944,   945,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   946,   947,   145,     0,   146,
     147,   148,   149,   948,     0,   949,     0,   950,   153,   154,
     155,   156,   157,   951,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,     0,   952,   169,   170,   171,   953,
     954,   955,   956,     0,     0,   957,   177,   178,   179,   180,
     181,   182,   183,   958,   959,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,     0,
       0,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   960,   218,   219,   220,   221,   222,
     961,     0,   224,     0,   225,   226,   962,   228,     0,   229,
       0,   230,   963,     0,   964,   233,   234,   965,   966,   237,
       0,   238,     0,     0,     0,   967,   968,     0,   243,     0,
     244,   245,   246,   247,   248,   249,   250,   969,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,   970,   971,   265,   266,   267,   268,   269,   972,   973,
       0,   974,     0,   273,   975,   976,   276,   977,   278,     0,
     280,   281,   282,   283,   284,     0,     0,   285,   978,   287,
     979,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   980,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   981,   982,   983,   319,   320,   321,     0,   984,     0,
     324,   325,   985,   327,     0,   986,   329,   987,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   988,   989,   342,   990,   991,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,     0,   356,     0,
     357,   358,   992,   993,   361,   362,   994,   364,   365,   366,
       0,   367,   368,   369,   370,   371,     0,     0,   374,     0,
     375,   376,   377,   995,   379,   380,   381,   382,     0,   383,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,   996,   400,   401,   402,
     997,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,   998,   421,
     999,   423,   424,     0,   426,  1000,     0,   429,  1001,   431,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,  1002,   446,  1003,   448,     0,   449,
     450,     0,   451,  1004,   453,   454,   455,   456,   457,     0,
    1005,  1006,     0,     0,     0,   461,   462,  1007,   464,  1008,
       0,   466,   467,  1009,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,  1010,     0,   481,
     482,   483,   484,   485,  1400,  1012,     0,   488,  1013,   490,
       0,   492,   493,   494,   495,     0,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,  1014,  1015,  1016,
    1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,   515,   516,
     517,   518,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
    1781,   146,   147,   148,   149,   150,     0,     0,  1782,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,  1783,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,  1784,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,  1785,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,  1786,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,  1787,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,  1781,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,  1783,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,  1784,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,  2312,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,  1786,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,  1787,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     3,     4,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   555,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   249,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   556,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,   646,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   804,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,   646,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   836,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,  2003,     0,     0,
       0,     0,  2004,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,  2012,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   249,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,  2013,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,  2014,
     451,     0,   453,  2015,   455,  2016,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,  2017,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   538,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   678,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   679,   459,     0,   460,     0,   680,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   713,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   799,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   802,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   806,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   816,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   824,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   930,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   933,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,  1063,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   249,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,  1081,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,  1424,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,  1426,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,  1429,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,  1431,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,  2232,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,  2944,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,   421,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,   249,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   690,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,   249,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   691,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   692,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   693,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     694,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,   926,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   692,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   694,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,   120,     0,  1719,     0,   121,   122,     0,   123,   124,
     125,     0,   127,   128,   129,   130,   131,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
       0,     0,     0,   152,   153,   154,   155,   156,   157,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   528,     0,   237,     0,   238,   239,     0,
       0,   240,   241,   242,   243,     0,   244,   245,   246,   247,
     248,   249,   250,     0,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   264,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   273,
       0,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,     0,     0,   285,     0,   287,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   529,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,   327,
       0,   328,   329,   330,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,     0,
     342,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,     0,     0,   422,   423,   424,   425,
     426,     0,   428,   429,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     530,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,   455,   456,   457,     0,   458,   459,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,   473,     0,     0,   474,   475,   476,
     477,   478,   479,     0,     0,   481,   482,   483,   484,   485,
     486,   487,     0,   488,     0,   490,   491,   492,   493,   494,
     495,   496,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,     0,
       0,     0,     0,   120,     0,     0,     0,   121,   122,     0,
     123,   124,   125,     0,   127,   128,   129,   130,   131,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,     0,
       0,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,     0,     0,     0,   152,   153,   154,   155,   156,
     157,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,   189,   190,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   528,     0,   237,     0,   238,
     239,     0,     0,   240,   241,   242,   243,     0,   244,   245,
     246,   247,   248,  1885,   250,     0,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     264,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   273,     0,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,     0,     0,   285,     0,   287,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     529,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,     0,   428,   429,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   530,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,   455,   456,   457,     0,   458,   459,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,   473,     0,     0,   474,
     475,   476,   477,   478,   479,     0,     0,   481,   482,   483,
     484,   485,   486,   487,     0,   488,     0,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   497,     0,     0,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   127,   128,   129,   130,
     131,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,     0,     0,     0,   152,   153,   154,
     155,   156,   157,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   528,     0,   237,
       0,   238,   239,     0,     0,   240,   241,   242,   243,     0,
     244,   245,   246,   247,   248,  2219,   250,     0,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   285,     0,   287,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   529,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,     0,   342,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,     0,   428,   429,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   530,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,   455,   456,   457,     0,
     458,   459,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,   473,     0,
       0,   474,   475,   476,   477,   478,   479,     0,     0,   481,
     482,   483,   484,   485,   486,   487,     0,   488,     0,   490,
     491,   492,   493,   494,   495,   496,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,     0,     0,     0,     0,   120,     0,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   127,   128,
     129,   130,   131,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,     0,     0,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,     0,     0,     0,   152,
     153,   154,   155,   156,   157,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   189,   190,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,     0,   225,   226,   227,   228,
       0,   229,     0,   230,     0,     0,     0,   233,   234,   528,
       0,   237,     0,   238,   239,     0,     0,   240,   241,   242,
     243,     0,   244,   245,   246,   247,   248,  2234,   250,     0,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,     0,     0,   285,
       0,   287,     0,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   529,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,     0,   342,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
       0,   421,   422,   423,   424,   425,   426,     0,   428,   429,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   530,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,   455,   456,
     457,     0,   458,   459,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
     473,     0,     0,   474,   475,   476,   477,   478,   479,     0,
       0,   481,   482,   483,   484,   485,   486,   487,     0,   488,
       0,   490,   491,   492,   493,   494,   495,   496,     0,     0,
     497,     0,     0,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,   120,
       0,     0,     0,   121,   122,     0,   123,   124,   125,     0,
     127,   128,   129,   130,   131,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,     0,     0,
       0,   152,   153,   154,   155,   156,   157,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,     0,     0,     0,   233,
     234,   528,     0,   237,     0,   238,   239,     0,     0,   240,
     241,   242,   243,     0,   244,   245,   246,   247,   248,   249,
     250,     0,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   285,     0,   287,     0,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   529,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,   327,     0,   328,
     329,   330,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,     0,   342,     0,
     344,   345,   346,   347,   348,   349,   350,     0,   352,   353,
     354,   355,   356,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,     0,   421,   422,   423,   424,   425,   426,     0,
     428,   429,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   530,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
     455,   456,   457,     0,   458,   459,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,     0,     0,   481,   482,   483,   484,   485,   486,   487,
       0,   488,     0,   490,   491,   492,   493,   494,   495,   496,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   848,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   113,
     114,   115,   116,     0,   117,   118,   119,     0,     0,     0,
       0,     0,     0,  -885,     0,   121,   122,     0,   123,   124,
     125,   849,   127,   128,   129,     0,   850,   851,   852,   853,
       0,   135,   136,   137,   138,   139,   140,     0,     0,   141,
     142,   854,   855,   145,     0,   146,   147,   148,   149,     0,
       0,   856,     0,   857,   153,   154,   155,   156,   157,   858,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
       0,   859,   169,   170,   171,   860,   861,   862,   863,     0,
       0,   864,   177,   178,   179,   180,   181,   182,   183,   865,
     866,   186,     0,   187,     0,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   196,   197,   198,   199,     0,     0,
     200,   201,   867,   203,   204,     0,     0,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
       0,   218,   219,   220,   221,   222,     0,     0,   224,     0,
     225,   226,   868,   228,     0,   229,     0,   230,   869,     0,
     870,   233,   234,  -885,   871,   237,     0,   238,     0,     0,
       0,     0,     0,     0,   243,     0,   244,   245,   246,   247,
     248,   249,   250,   873,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,     0,   262,   874,     0,   265,
     266,   267,   268,   269,   875,   876,     0,   877,     0,   273,
     878,   879,   276,   880,   278,     0,   280,   281,   282,   283,
     284,     0,     0,   285,   881,   287,   882,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   883,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   884,   885,   886,
     319,   320,   321,     0,     0,     0,   324,   325,   887,   327,
       0,     0,   329,   888,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,     0,   889,
     342,   890,     0,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,     0,   356,     0,   357,   358,     0,   891,
     361,   362,     0,   364,   365,   366,     0,   367,   368,   369,
     370,   371,     0,     0,   374,     0,   375,   376,   377,   892,
     379,   380,   381,   382,     0,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   893,   400,   401,   402,   894,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   895,   421,   896,   423,   424,     0,
     426,   897,     0,   429,   898,   431,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     899,   446,     0,   448,     0,   449,   450,     0,   451,   900,
     453,   454,   455,   456,   457,     0,   901,   902,     0,     0,
       0,   461,   462,     0,   464,     0,     0,   466,   467,   903,
     469,   470,   471,   472,   473,   904,     0,   474,   475,   476,
     477,   478,   479,   905,     0,   481,   482,   483,   484,   485,
       0,   906,     0,   488,   907,   490,     0,   492,   493,   494,
     495,     0,     0,     0,   497,     0,     0,   498,   499,   500,
     501,   502,   503,   848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   515,   516,   517,   518,     0,     0,
       0,   108,   109,   110,   111,     0,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,     0,   123,   124,   125,   849,   127,
     128,   129,     0,   850,   851,   852,   853,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   854,   855,
     145,     0,   146,   147,   148,   149,     0,     0,   856,     0,
     857,   153,   154,   155,   156,   157,   858,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,   859,   169,
     170,   171,   860,   861,   862,   863,     0,     0,   864,   177,
     178,   179,   180,   181,   182,   183,   865,   866,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
       0,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,     0,     0,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,     0,   218,   219,
     220,   221,   222,     0,     0,   224,     0,   225,   226,   868,
     228,     0,   229,     0,   230,   869,     0,   870,   233,   234,
       0,   871,   237,     0,   238,     0,     0,     0,     0,     0,
       0,   243,     0,   244,   245,   246,   247,   248,   872,   250,
     873,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   874,     0,   265,   266,   267,   268,
     269,   875,   876,     0,   877,     0,   273,   878,   879,   276,
     880,   278,     0,   280,   281,   282,   283,   284,     0,     0,
     285,   881,   287,   882,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   883,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   884,   885,   886,   319,   320,   321,
       0,     0,     0,   324,   325,   887,   327,     0,     0,   329,
     888,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,     0,   889,   342,   890,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
       0,   356,     0,   357,   358,     0,   891,   361,   362,     0,
     364,   365,   366,     0,   367,   368,   369,   370,   371,     0,
       0,   374,     0,   375,   376,   377,   892,   379,   380,   381,
     382,     0,   383,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   893,
     400,   401,   402,   894,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   895,   421,   896,   423,   424,     0,   426,   897,     0,
     429,   898,   431,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   899,   446,     0,
     448,     0,   449,   450,     0,   451,   900,   453,   454,   455,
     456,   457,     0,   901,   902,     0,     0,     0,   461,   462,
       0,   464,     0,     0,   466,   467,   903,   469,   470,   471,
     472,   473,   904,     0,   474,   475,   476,   477,   478,   479,
     905,     0,   481,   482,   483,   484,   485,     0,   906,     0,
     488,   907,   490,     0,   492,   493,   494,   495,     0,     0,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
     848,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   515,   516,   517,   518,     0,     0,     0,   108,   109,
     110,   111,     0,   113,   114,   115,   116,     0,   117,   118,
     119,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     122,     0,   123,   124,   125,   849,   127,   128,   129,     0,
     850,   851,   852,   853,     0,   135,   136,   137,   138,   139,
     140,     0,     0,   141,   142,   854,   855,   145,     0,   146,
     147,   148,   149,     0,     0,   856,     0,   857,   153,   154,
     155,   156,   157,   858,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,     0,   859,   169,   170,   171,   860,
     861,   862,   863,     0,     0,   864,   177,   178,   179,   180,
     181,   182,   183,   865,   866,   186,     0,   187,     0,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   196,   197,
     198,   199,     0,     0,   200,   201,   867,   203,   204,     0,
       0,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,     0,   218,   219,   220,   221,   222,
       0,     0,   224,     0,   225,   226,   868,   228,     0,   229,
       0,   230,   869,     0,   870,   233,   234,     0,   871,   237,
       0,   238,     0,     0,     0,     0,     0,     0,   243,     0,
     244,   245,   246,   247,   248,   249,   250,   873,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,     0,
     262,   874,     0,   265,   266,   267,   268,   269,   875,   876,
       0,   877,     0,   273,   878,   879,   276,   880,   278,     0,
     280,   281,   282,   283,   284,     0,     0,   285,   881,   287,
     882,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   883,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   884,   885,   886,   319,   320,   321,     0,     0,     0,
     324,   325,   887,   327,     0,     0,   329,   888,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,     0,   889,   342,   890,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,     0,   356,     0,
     357,   358,     0,   891,   361,   362,     0,   364,   365,   366,
       0,   367,   368,   369,   370,   371,     0,     0,   374,     0,
     375,   376,   377,   892,   379,   380,   381,   382,     0,   383,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,   893,   400,   401,   402,
     894,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,   895,   421,
     896,   423,   424,     0,   426,   897,     0,   429,   898,   431,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   899,   446,     0,   448,     0,   449,
     450,     0,   451,   900,   453,   454,   455,   456,   457,     0,
     901,   902,     0,     0,     0,   461,   462,     0,   464,     0,
       0,   466,   467,   903,   469,   470,   471,   472,   473,   904,
       0,   474,   475,   476,   477,   478,   479,   905,     0,   481,
     482,   483,   484,   485,     0,   906,     0,   488,   907,   490,
       0,   492,   493,   494,   495,     0,     0,     0,   497,     0,
       0,   498,   499,   500,   501,   502,   503,   848,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   515,   516,
     517,   518,     0,     0,     0,   108,   109,   110,   111,     0,
     113,   114,   115,   116,     0,   117,   118,   119,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,     0,   123,
     124,   125,   849,   127,   128,   129,     0,   850,   851,   852,
     853,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     141,   142,   854,   855,   145,     0,   146,   147,   148,   149,
       0,     0,   856,     0,   857,   153,   154,   155,   156,   157,
     858,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,     0,   859,   169,   170,   171,   860,   861,   862,   863,
       0,     0,   864,   177,   178,   179,   180,   181,   182,   183,
     865,   866,   186,     0,   187,     0,   188,   189,   190,   191,
     192,   193,     0,   194,     0,   196,   197,   198,   199,     0,
       0,   200,   201,   867,   203,   204,     0,     0,     0,   207,
     208,   209,     0,  1870,   211,   212,     0,   213,   214,   215,
     216,     0,   218,   219,   220,   221,   222,     0,     0,   224,
       0,   225,   226,   868,   228,     0,   229,     0,   230,   869,
       0,   870,   233,   234,     0,   871,   237,     0,   238,     0,
       0,     0,     0,     0,     0,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   873,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,     0,   262,   874,     0,
     265,   266,   267,   268,   269,   875,   876,     0,   877,     0,
     273,   878,   879,   276,   880,   278,     0,   280,   281,   282,
     283,   284,     0,     0,   285,   881,   287,   882,     0,   289,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   883,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   884,   885,
     886,   319,   320,   321,     0,     0,     0,   324,   325,   887,
     327,     0,     0,   329,   888,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,     0,
     889,   342,   890,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,     0,   356,     0,   357,   358,     0,
     891,   361,   362,     0,   364,   365,   366,     0,   367,   368,
     369,   370,   371,     0,     0,   374,     0,   375,   376,   377,
     892,   379,   380,   381,   382,     0,   383,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   893,   400,   401,   402,   894,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   895,   421,   896,   423,   424,
       0,   426,   897,     0,   429,   898,   431,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   899,   446,     0,   448,     0,   449,   450,     0,   451,
     900,   453,   454,   455,   456,   457,     0,   901,   902,     0,
       0,     0,   461,   462,     0,   464,     0,     0,   466,   467,
     903,   469,   470,   471,   472,   473,   904,     0,   474,   475,
     476,   477,   478,   479,   905,     0,   481,   482,   483,   484,
     485,     0,   906,     0,   488,   907,   490,     0,   492,   493,
     494,   495,     0,     0,     0,   497,     0,     0,   498,   499,
     500,   501,   502,   503,  2865,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   515,   516,   517,   518,     0,
       0,     0,   108,   109,   110,   111,     0,   113,   114,   115,
     116,     0,   117,   118,   119,     0,     0,     0,     0,     0,
       0,     0,     0,   121,   122,     0,   123,   124,   125,  2866,
     127,   128,   129,     0,   850,  2867,   852,   853,     0,   135,
     136,   137,   138,   139,   140,     0,     0,   141,   142,   854,
     855,   145,     0,   146,   147,   148,   149,     0,     0,  2868,
       0,  2869,   153,   154,   155,   156,   157,  2870,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,  2871,
     169,   170,   171,  2872,  2873,  2874,  2875,     0,     0,  2876,
     177,   178,   179,   180,   181,   182,   183,   865,   866,   186,
       0,   187,     0,   188,   189,   190,   191,   192,   193,     0,
     194,     0,   196,   197,   198,   199,     0,     0,   200,   201,
     867,   203,   204,     0,     0,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,     0,   218,
     219,   220,   221,   222,     0,     0,   224,     0,   225,   226,
     868,   228,     0,   229,     0,   230,  2877,     0,  2878,   233,
     234,  2879,  2880,   237,     0,   238,     0,     0,     0,     0,
       0,     0,   243,     0,   244,   245,   246,   247,   248,   249,
     250,  2881,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,     0,   262,  2882,     0,   265,   266,   267,
     268,   269,   875,   876,     0,   877,     0,   273,  2883,  2884,
     276,  2885,   278,     0,   280,   281,   282,   283,   284,     0,
       0,   285,  2886,   287,  2887,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,  3119,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   884,  2889,   886,   319,   320,
     321,     0,     0,     0,   324,   325,  2891,   327,     0,     0,
     329,   888,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,     0,  2893,   342,  2894,
       0,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,     0,   356,     0,   357,   358,     0,  2895,   361,   362,
       0,   364,   365,   366,     0,   367,   368,   369,   370,   371,
       0,     0,   374,     0,   375,   376,   377,   892,   379,   380,
     381,   382,     0,   383,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
    2896,   400,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,  2897,   421,     0,   423,   424,     0,   426,  2899,
       0,   429,   898,   431,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,  3120,   446,
       0,   448,     0,   449,   450,     0,   451,  2901,   453,   454,
     455,   456,   457,     0,   901,   902,     0,     0,     0,   461,
     462,     0,   464,     0,     0,   466,   467,  2902,   469,   470,
     471,   472,   473,     0,     0,   474,   475,   476,   477,   478,
     479,  2904,     0,   481,   482,   483,   484,   485,     0,   906,
       0,   488,  2905,   490,     0,   492,   493,   494,   495,     0,
       0,     0,   497,     0,     0,   498,   499,   500,   501,   502,
     503,   718,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   515,   516,   517,   518,     0,     0,     0,   108,
     109,   110,   111,     0,   113,   114,   115,   116,     0,   117,
     118,   119,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   127,   128,   129,
     719,   720,     0,   721,   722,     0,   135,   136,   137,   138,
     139,   140,     0,     0,   141,   142,   723,   724,   145,     0,
     146,   147,   148,   149,   725,     0,     0,     0,     0,   153,
     154,   155,   156,   157,     0,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   169,   170,   171,
       0,     0,     0,     0,     0,     0,     0,   177,   178,   179,
     180,   181,   182,   183,   726,   727,   186,     0,   187,     0,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   196,
     197,   198,   199,     0,     0,   200,   201,   202,   203,   204,
       0,     0,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   728,   218,   219,   220,   221,
     222,   729,     0,   224,     0,   225,   226,   730,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   731,     0,
     237,     0,   238,     0,     0,     0,   732,   733,     0,   243,
       0,   244,   245,   246,   247,   248,   249,   250,     0,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   734,   265,   266,   267,   268,   269,   735,
     736,     0,   737,     0,   273,     0,     0,   276,     0,   278,
       0,   280,   281,   282,   283,   284,     0,     0,   285,     0,
     287,     0,     0,   289,   290,   291,     0,     0,   292,   293,
     294,   295,   296,   738,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   739,     0,   740,   319,   320,   321,     0,   741,
       0,   324,   325,     0,   327,     0,   742,   329,   743,   331,
     332,   333,     0,   334,   335,     0,     0,   336,   337,   338,
       0,     0,   339,   744,     0,   342,     0,   745,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     0,     0,   356,
       0,   357,   358,   746,     0,   361,   362,   747,   364,   365,
     366,     0,   367,   368,   369,   370,   371,     0,     0,   374,
       0,   375,   376,   377,   748,   379,   380,   381,   382,     0,
     383,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   400,   401,
     402,   749,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,     0,
     421,   750,   423,   424,     0,   426,     0,     0,   429,   751,
     431,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   752,   446,   753,   448,     0,
     449,   450,     0,   451,     0,   453,   454,   455,   456,   457,
       0,   754,   755,     0,     0,     0,   461,   462,   756,   464,
     757,     0,   466,   467,   758,   469,   470,   471,   472,   473,
       0,     0,   474,   475,   476,   477,   478,   479,     0,     0,
     481,   482,   483,   484,   485,  1552,   760,     0,   488,     0,
     490,     0,   492,   493,   494,   495,     0,     0,     0,   497,
       0,     0,   498,   499,   500,   501,   502,   503,   761,   762,
     763,   764,   765,   766,   767,   768,   769,   770,   771,   515,
     516,   517,   518,   848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   113,   114,   115,   116,
       0,   117,   118,   119,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,     0,   123,   124,   125,   849,   127,
     128,   129,     0,   850,   851,   852,   853,     0,   135,   136,
     137,   138,   139,   140,     0,     0,   141,   142,   854,   855,
     145,     0,   146,   147,   148,   149,     0,     0,   856,     0,
     857,   153,   154,   155,   156,   157,   858,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,   859,   169,
     170,   171,   860,   861,   862,   863,     0,     0,   864,   177,
     178,   179,   180,   181,   182,   183,   865,   866,   186,     0,
     187,     0,   188,   189,   190,   191,   192,   193,     0,   194,
       0,   196,   197,   198,   199,     0,     0,   200,   201,   867,
     203,   204,     0,     0,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,     0,   218,   219,
     220,   221,   222,     0,     0,   224,     0,   225,   226,   868,
     228,     0,   229,     0,   230,   869,     0,   870,   233,   234,
       0,   871,   237,     0,   238,     0,     0,     0,     0,     0,
       0,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     873,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,     0,   262,   874,     0,   265,   266,   267,   268,
     269,   875,   876,     0,   877,     0,   273,   878,   879,   276,
     880,   278,     0,   280,   281,   282,   283,   284,     0,     0,
     285,   881,   287,   882,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   884,   885,   886,   319,   320,   321,
       0,     0,     0,   324,   325,   887,   327,     0,     0,   329,
     888,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,     0,   889,   342,   890,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
       0,   356,     0,   357,   358,     0,   891,   361,   362,     0,
     364,   365,   366,     0,   367,   368,   369,   370,   371,     0,
       0,   374,     0,   375,   376,   377,   892,   379,   380,   381,
     382,     0,   383,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   893,
     400,   401,   402,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   895,   421,     0,   423,   424,     0,   426,   897,     0,
     429,   898,   431,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   446,     0,
     448,     0,   449,   450,   562,   451,   900,   453,   454,   455,
     456,   457,     0,   901,   902,     0,     0,   562,   461,   462,
       0,   464,     0,     0,   466,   467,   903,   469,   470,   471,
     472,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     905,     0,   481,   482,   483,   484,   485,     0,   906,     0,
     488,   907,   490,     0,   492,   493,   494,   495,     0,   563,
       0,   497,     0,     0,   498,   499,   500,   501,   502,   503,
       0,     0,   563,     0,     0,   564,     0,     0,     0,     0,
       0,   515,   516,   517,   518,     0,     0,     0,   564,     0,
       0,     0,     0,   565,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   565,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   566,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   567,     0,     0,   566,     0,     0,     0,     0,
       0,     0,     0,     0,   568,   567,     0,     0,     0,   569,
       0,     0,     0,     0,     0,     0,     0,   568,     0,     0,
       0,     0,   569,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   570,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   570,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   571,     0,     0,     0,   572,
       0,     0,     0,     0,     0,     0,     0,     0,   571,     0,
       0,     0,   572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   573,     0,
       0,   574,   575,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   575,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   576,     0,     0,   577,
       0,     0,     0,     0,     0,     0,     0,   578,     0,   576,
     579,     0,   577,     0,     0,     0,     0,     0,     0,     0,
     578,     0,     0,   579,     0,     0,     0,     0,     0,     0,
       0,   580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   580,   581,     0,     0,     0,     0,
       0,     0,   582,     0,     0,     0,     0,     0,   581,     0,
       0,     0,   583,     0,     0,   582,     0,     0,   584,     0,
       0,     0,     0,     0,     0,   583,     0,     0,     0,     0,
       0,   584,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   585,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   585
};

static const yytype_int16 yycheck[] =
{
       8,   587,     0,  1267,    12,    21,   803,   712,    21,    17,
      41,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      82,   791,    30,  1266,   586,    33,    34,  1055,    36,     0,
       7,    39,    40,    41,  1279,   896,     0,  1031,   815,   813,
     657,  1454,    41,  1627,    21,   902,  1568,  1176,  1698,    18,
    1740,  1031,  1241,  1743,   822,  2230,     7,  2120,   811,  1246,
     584,  2123,    34,  2181,    84,  1607,  2184,   594,  1561,  1562,
      21,  1207,  1213,  1566,  1243,   688,   669,    84,     0,  2590,
    2590,   593,  1318,   594,  1459,  2149,    94,  1042,  2152,     0,
    2621,    99,   100,   101,   102,   103,    18,   803,  1042,   805,
       0,   807,  1271,  2620,  1042,   659,     0,  1171,     0,   584,
     664,   927,   705,  1141,  1178,   931,  1091,     0,     0,  1042,
      40,     0,  1652,  1653,     0,     0,     0,     0,     0,     0,
     102,  2638,     0,    33,     0,     0,  2226,  2172,     0,     0,
       0,  2289,  1031,  2634,    24,   612,  2117,     0,  2464,     0,
       0,  1040,  1041,     0,  2936,     0,    54,     5,  1047,  1048,
    2274,  2275,  2276,  2956,     0,    13,    14,     9,   854,   855,
    2952,     5,     9,    16,  2768,  1857,     5,  1763,  1705,    13,
      14,     5,     5,    38,    13,    14,     5,     5,     5,    13,
      14,     5,     5,  1989,    94,     9,    13,    14,    62,     5,
     886,  1090,     5,     5,  1184,     5,  3123,     5,     5,     5,
      13,    14,     5,    13,    14,    13,    14,  2307,   783,     9,
      13,    14,    26,     5,     5,    11,  2300,     5,     9,    15,
     935,    13,    14,    16,     5,    13,    14,     5,     5,     5,
       5,    52,    13,    14,     5,     5,    71,    97,  1761,     5,
       5,     5,     5,    62,   788,     5,   177,     5,     5,    45,
       5,    97,   176,   788,   663,     5,     5,   124,  1157,     3,
     111,   297,    87,   197,    62,  1255,  1133,     4,  1258,  1259,
      13,    14,     9,  3259,  3290,  2375,  2376,   227,  2378,    13,
      14,    77,    11,   295,   298,  1184,    15,  1186,  1187,   253,
      34,    35,    77,    16,   144,   232,  1281,   176,   124,  2839,
    2772,  2773,   303,  1505,  1088,    11,   321,   132,  1293,    15,
       3,     4,     5,    30,  3204,   584,     9,   303,  3330,   124,
      37,    62,   233,  1038,    11,    44,   140,   142,    15,  2916,
     283,  1447,   280,    44,   121,   140,   135,  3207,   173,    45,
    2748,  2503,   373,  2751,  2506,    44,   321,   286,   385,  2558,
     199,   218,    72,    63,    30,  2429,  1255,  3149,    45,  1258,
    1259,    71,     4,    30,    44,   111,  3596,     9,   279,  3459,
      37,    77,  2557,  3208,   414,  3607,    40,  2898,    11,   200,
    2504,    79,    15,  1254,   205,    33,    13,    14,   199,  3029,
      77,  3031,    90,    79,   119,   461,   438,  2051,   177,   374,
     461,    30,   423,  2458,    90,  1189,   121,  2948,    37,   509,
      58,   896,  2540,  1109,  1110,   154,    41,   112,  2959,   519,
      30,   176,   243,    30,  2951,  1140,   119,    37,  1124,  3445,
     119,   175,  3448,   177,   345,   485,   476,   297,   126,   460,
    3670,    11,  1069,  2652,   486,    15,  3678,  1074,   519,    11,
    2505,   297,   523,    15,  2554,   521,  2556,   507,   112,   135,
     521,   400,  1965,  1966,  1967,  1968,  1969,   206,  3358,  1972,
    1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  3349,
    2461,  2033,  1046,    45,   395,   521,  3289,   301,   525,   314,
     521,   365,   456,   292,  1031,   170,  1060,  2151,   333,   219,
     287,   516,    40,   128,  1620,   458,   366,   521,   197,   521,
    1032,   435,   112,  3603,   363,    77,   180,  3352,  3353,   537,
     366,   539,  1237,  2117,   525,   473,   544,   332,   135,   547,
    3542,   224,  2694,   279,  3121,  3175,   315,   247,   556,   525,
     355,   516,  3082,  1146,   171,  1325,   365,   458,   362,   360,
     364,  2757,  1451,  1090,   247,  3541,   435,   521,  2764,  2765,
    2766,  3101,   287,  1462,  2648,  1464,   584,   365,   586,   587,
     588,  2671,  2980,   424,  1177,  1474,   594,   398,   392,  3595,
    2386,  3053,   532,  1782,  3511,   594,   510,   521,   525,  2183,
     521,   458,  1491,   282,  1840,  2191,   396,  2100,  2101,   523,
    1874,  1204,  3123,  3123,   429,   411,   412,  1092,  3212,   627,
     628,   629,  1438,   521,  2154,   594,  3133,  2309,   453,   642,
     399,  1520,  1521,   483,   365,  2810,   536,   896,   646,   479,
     385,   657,   458,   112,   657,    58,  1045,   483,  2175,  1214,
     658,   659,   180,  1430,  3447,   663,   664,   470,   657,  1186,
    1187,   525,   485,   328,  3446,   642,   521,   485,     0,  2817,
     513,   593,   522,   521,   524,   512,   513,  2190,   520,   424,
     657,   701,   690,   691,   507,   693,   522,   521,   524,   507,
    3006,   642,   521,     0,   701,   514,   403,   521,   521,   707,
     699,  1235,  1947,   521,   521,   713,   657,   521,   521,  1184,
    1235,    18,   421,   519,    21,   521,   525,   523,   521,   521,
     421,   521,   467,   521,   521,  1700,    33,  1919,   521,   791,
     513,   517,   421,  1200,    41,   707,  3561,   471,   483,   521,
     521,   710,  1447,   521,   519,  1513,   403,   435,   523,   629,
     521,   421,  1505,   521,   521,   521,   521,  3288,   463,   435,
     521,   521,   507,   176,  2799,   521,   521,   521,   521,  1455,
    1456,   521,   780,   521,   521,   783,   521,    84,  1531,  1254,
     778,   521,   521,   461,   403,   512,   513,    94,   521,   778,
     778,   778,   778,   713,   525,   508,   396,   521,   517,  3306,
     513,   809,  2038,   811,   122,   521,   519,   778,   521,    62,
    3196,   783,  3198,  3304,   778,   823,   279,  2931,   514,   515,
     516,   517,   830,   831,   832,   833,   834,   509,   424,   512,
     513,  1811,   168,  1092,  2805,  3660,     8,   519,   846,    11,
     517,  1821,   168,    15,  1824,  2935,    18,    19,    20,  3045,
      25,   483,     8,   394,   525,    11,   778,  3347,  3348,    15,
      25,   135,    18,    19,    20,   166,  2002,   778,   510,  1574,
     171,  1760,  1761,   253,  1648,   507,   339,  2461,   778,   521,
     512,   513,   110,   201,   778,  2407,   778,   524,   896,   512,
     513,   514,   515,   516,   517,   778,   778,  2033,  1422,   778,
     156,   237,   778,   778,   778,   778,   778,   778,  1883,  3084,
     778,  1664,   778,   778,  1619,  1620,   778,   778,   778,  1693,
     176,  1507,  1811,  1628,  3455,   778,  3443,   778,  1702,  1453,
    1704,   778,  1821,   778,   471,  1824,  2072,   253,   349,  1933,
    1502,  1503,  2472,   244,  1649,  1469,  2010,  1422,  3334,  1511,
    1703,   485,   278,  1933,   514,   515,   516,   517,  1913,  1914,
    1915,  2336,   514,   515,   516,   517,    52,  2342,   177,  1913,
    2345,  3461,   385,   507,  1912,  1588,  1593,    11,  1453,  1454,
     521,  1598,     5,  1600,    11,  1602,   166,   521,  1515,  2253,
    1913,  1914,   344,   294,  1469,  1254,  2489,  2490,   378,   152,
    3511,  3511,  1514,   510,  1515,   214,  2590,   122,   282,    40,
    1807,   424,  1043,   424,     5,  2156,   523,  3534,   292,  1908,
    1909,   230,   374,  1031,   166,    11,   279,  1581,    59,    15,
     176,   259,   241,   178,   428,  1043,   430,  1045,  1046,   267,
     176,  2277,  1050,    77,  1933,  1638,  1799,   364,  2177,   205,
      77,  1059,  1060,  1069,   467,  1063,  1069,  1960,  1074,    45,
     253,  1074,   378,   474,   244,   519,  1836,  1837,  1838,   523,
     223,   227,  2485,  1081,  1780,   392,   456,    98,  1894,   110,
     208,   526,  1090,  1091,  1092,   530,   201,  1990,  1096,  3264,
     233,    77,  1069,  2262,  2796,   181,  1864,  1074,   521,  2801,
    1916,  1807,   244,    71,  1920,  1667,   282,  1923,   521,   254,
    1032,   287,   365,    79,   200,  3646,    26,  2145,  1069,   205,
    1826,   112,    32,  1074,    90,  1831,   428,   299,   430,   385,
      11,   121,  1656,  2320,    15,  1143,   279,  2324,    79,   392,
     456,   521,  1141,   299,   319,   320,  2688,  2036,   112,    90,
     303,   119,   294,   483,   319,   320,   177,   243,   265,   266,
     369,   178,     8,  1422,    45,  3228,  1919,   343,   424,    15,
    3232,   360,    18,    19,    20,   516,   207,   507,  1186,  1187,
    1188,  1656,   523,  1191,   112,   378,  1891,   156,   185,  2682,
     485,   182,   253,   214,  1453,  1454,    77,     4,  1206,  1207,
    1220,  1221,     9,  1223,   349,   521,  1214,   176,   208,   230,
    1469,   467,   507,  1220,  1221,  2844,  1223,   208,   182,     3,
     241,  2805,   212,  2852,   399,   866,   521,   483,   259,   536,
     140,   396,  1240,  1241,   399,     4,   267,   254,   198,   385,
       9,   386,  1214,    11,   260,  1253,  1254,   888,   279,   385,
     378,   507,   395,   441,   275,  1817,   247,   519,   386,   521,
    1822,   436,  1270,   456,  2153,   521,  1274,  1791,   474,   182,
    1278,   436,  2685,  1281,   253,   382,   383,    45,   424,   424,
     311,    68,    69,   247,   925,  1293,   593,   594,   424,   279,
     166,   522,   282,  1998,   525,   171,   424,   516,  1270,   452,
    2189,  2190,   424,   478,   523,   326,  2442,  2571,   444,    77,
    1318,   302,   398,   478,   282,   458,  1791,   378,  2731,   287,
       4,   467,   483,  3386,   485,     9,  3388,  2570,   521,   474,
     185,   467,   349,   364,   247,   642,   508,   509,   510,  2832,
     512,   513,   514,   515,   516,   517,   474,   483,   369,   340,
     657,   381,   508,   509,   510,   386,   512,   513,   514,   515,
     516,   517,    12,   521,    26,   333,  2555,    17,   244,  2612,
      32,   507,  2366,     4,   521,   521,    26,   408,     9,  3696,
    2150,  1905,  2569,   351,  2571,   521,  3703,   378,    11,    39,
      40,   301,   699,   176,   701,   456,     4,  1656,  2754,   378,
    2105,     9,  2758,  2759,  2760,  1413,  1933,   424,   521,  1417,
    2027,  2015,  2016,  2017,  1422,  1423,   385,  2233,   294,  2235,
      13,    14,    45,  1421,  1948,   253,  1573,  1435,  1575,  1576,
    1905,  1067,  1421,  1421,  1421,   522,  2464,   428,   525,   430,
    1964,  3505,    13,    14,  1080,  1453,  1454,  1083,  2337,  2236,
     100,  2238,   362,   299,    77,   424,   447,   474,  1466,  3634,
     521,  1469,   453,  1471,   428,   456,   430,   690,   691,  1993,
     693,   778,  1113,  1948,   373,   374,  2000,   456,   140,  3543,
    2973,   171,   392,  2340,  2341,   453,  1127,  3605,  3606,  1964,
     514,   522,   456,   461,  1502,  1503,   521,  1505,   467,  1507,
    1508,   521,  1510,  1511,   512,   507,   514,  1515,  2032,  2036,
     522,  2035,   521,   525,   483,   428,  2040,   430,  1993,   527,
     528,   522,  2299,  1531,   525,  2000,   512,   513,   514,   515,
     516,   517,  1791,   522,   135,   229,   525,   152,   507,  3123,
    1938,   521,   521,   456,  1942,   522,  1515,  1945,   525,   521,
     378,   166,   521,    30,   464,  1568,   171,  2032,    26,  3677,
    2035,  2974,   521,   164,    32,  2040,   519,   521,   521,  3633,
     523,     6,   521,  1581,     9,  1583,   522,  1593,  1586,   525,
    1593,    16,  1598,  1591,  1600,  1598,  1602,  1600,  2554,  1602,
    2556,  1568,  1514,    28,  2858,   522,  1604,    32,   525,  1607,
     504,   522,  3252,  3253,   525,    82,    13,    14,   223,    26,
    2590,  2364,  3676,   521,    91,    32,  1593,  1568,   428,  1627,
     430,  1598,  2811,  1600,  1632,  1602,    13,    14,   456,   244,
    1616,   512,   513,   514,   515,   516,   517,   176,   522,   301,
     523,   525,  1593,   120,  3166,  1616,  1905,  1598,  1656,  1600,
     522,  1602,  1616,   525,    26,    26,  1664,    13,    14,  1667,
      32,    32,   508,   509,   510,  2794,   512,   513,   514,   515,
     516,   517,   140,   522,   522,   349,   525,   525,   521,   294,
     522,   282,   522,   525,   521,   525,   287,  2932,   303,  1948,
     521,   292,  1700,   521,  1616,  1703,   358,    13,    14,  1730,
     362,  2590,   428,   522,   430,  1964,   525,   135,   785,   521,
     787,  1719,   386,  1721,   522,  1723,  1616,   525,   522,   521,
     197,   525,  1730,   140,   297,  1032,  1746,  1735,  1736,    26,
     392,   504,   209,   523,  1993,    32,   164,  3259,   175,  1746,
     522,  2000,   521,   525,   522,     8,   522,   525,    11,   525,
     424,   522,    15,  1722,   525,    18,    19,    20,   522,  2533,
     522,   525,  1069,   525,   525,   135,  1774,  1074,   140,   140,
     525,   310,   522,  2032,  1782,  1783,  2035,   522,   522,   187,
     525,  2040,   190,  1791,   176,  1793,  1794,  1795,  1796,  1797,
    1798,  1799,   195,   196,   164,  2319,  1804,  1104,  1806,  2361,
     474,   522,   464,   522,   525,   302,   525,    58,  1115,  1817,
    1818,    13,    14,   522,  1822,  1823,   525,    13,    14,  1827,
    1828,  1829,  1830,   521,  1832,  1833,  2430,  2431,  2432,  2433,
     229,   135,  1840,   301,  1141,  2605,  2589,   452,  2591,  2366,
      13,    14,   443,   140,  2319,  1853,   385,   504,  2664,  1857,
    1858,  1859,  3502,   454,   282,  1863,  3546,  2625,  3548,   287,
     164,   157,   265,   266,   292,    13,    14,   358,  2645,  2849,
    1878,     8,    13,    14,    11,  1883,  3369,  3370,    15,    11,
     157,    18,    19,    20,   301,   424,  3129,    13,    14,   157,
     358,    23,    24,   522,   362,   119,   525,  1905,   522,    36,
     522,   525,     8,   525,   519,    11,   556,   522,   523,    15,
     157,  1919,   522,  1220,  1221,   525,  1223,   287,   522,    98,
     522,   525,   292,   525,   392,  1933,    40,  3511,   467,   301,
     301,   176,   522,   410,  3456,   525,   413,   587,   588,    45,
    1948,   358,    13,    14,   483,   362,    52,    71,   522,    13,
      14,   525,   176,    77,   522,   522,  1964,  3647,   525,   521,
    2849,   282,  2990,   176,   227,  2854,    90,   522,   507,  1075,
     525,    77,  1078,   105,   282,   392,  2970,  1877,    40,   382,
     383,  3474,   521,   287,   474,  1993,   358,   358,   292,    86,
     362,   362,  2000,   157,  2002,   119,   464,   121,   177,    13,
      14,   487,  3495,  3496,   301,   470,  2014,    13,    14,   521,
    2485,  2027,   584,   521,  2027,   443,   329,  2906,  2907,  3541,
     392,   392,    13,    14,  2032,  2033,   454,  2035,  2036,   157,
    2038,    39,  2040,    13,    14,   214,   299,  2898,    13,    14,
     521,  3286,    13,    14,   150,  2861,  2862,   464,   182,   521,
    2027,   230,   521,    12,   521,    13,    14,   157,    17,   523,
    2319,   358,   241,   713,  2072,   362,  2590,    26,  2076,    13,
      14,   157,  2080,   443,   208,   181,  2027,    13,    14,  3492,
      39,    40,    13,    14,   454,   157,   310,   297,   212,   152,
     227,   360,   464,   464,   200,   392,   275,   373,   374,   205,
     269,   270,   521,   166,   382,   383,  2105,   435,   171,  2117,
     521,   373,   374,   247,     9,  2590,   373,   374,   297,   319,
     320,  1186,  1187,   521,   426,   522,   521,   225,   230,   306,
    2747,   230,  2148,   521,   230,  2148,  2660,   243,   304,   443,
     385,   100,    40,  3123,   521,  2707,     5,   326,   242,     5,
     454,     5,  2168,  2161,   521,  2168,  3569,   521,   282,   521,
     223,   385,   299,   287,  2172,    40,   521,   464,   302,     5,
     521,  2148,     5,   521,     5,   153,     3,  2163,   521,   424,
       9,   244,   101,   484,    59,  2660,   308,   525,   525,   522,
     369,  2168,  2163,   299,    40,   225,   257,  2148,   392,  2163,
     424,     8,   171,   294,    11,   171,   242,  1514,    15,   333,
    2685,    18,    19,    20,   292,   521,   435,  2168,  2226,    90,
     525,   521,   467,  3112,  3113,   272,  2485,   351,  2236,  2237,
    2238,   294,   435,    58,  3123,   110,    58,   435,   483,   522,
     303,  2163,   435,   467,   378,   508,   509,   510,  3512,   512,
     513,   514,   515,   516,   517,   435,  2731,   532,   483,   483,
     157,   157,   507,  2163,   282,    97,   282,    40,  2830,  2277,
    2170,   521,   282,   282,     3,   521,   521,   521,    39,   433,
     433,  2289,   461,   507,   519,   519,  1593,   523,  2296,   435,
     435,  1598,   398,  1600,   428,  1602,   430,   521,  3072,  2307,
    2308,  2309,  2310,   176,  2312,   180,  2305,   522,   435,  1616,
     435,  2319,   119,   447,   522,  2323,   522,   522,  2326,   453,
     480,   522,   456,  2331,   896,  3102,   525,   522,   230,   453,
     522,  2590,   207,   522,   522,  2343,  2860,   461,   522,   522,
     522,   479,    11,   521,   525,   521,   520,   360,   433,   287,
     525,   435,   187,  2361,   525,   167,  2364,   529,  2366,   521,
     521,   176,   532,  1670,   522,   521,   525,  2375,  2376,   461,
    2378,   508,   509,   510,   223,   512,   513,   514,   515,   516,
     517,   525,   272,   233,   259,  2860,   298,    54,   395,   452,
     525,   321,   267,   321,  2407,   182,   233,   282,   521,   505,
     303,  2660,   522,   233,   279,   338,   512,   513,   514,   515,
     516,   517,   295,  1063,   176,   474,   521,   521,  2426,   157,
     227,   208,   425,  2898,   157,   157,  2685,  2435,  2436,  2437,
    2407,  1081,    99,   483,  2442,  2497,   311,   157,  2446,  1746,
      40,  3469,   282,  2970,   297,   522,   522,   504,   504,   519,
     297,    40,    58,  2461,   522,   522,  2407,   522,   125,   176,
     247,    11,   522,    40,   171,  2464,   584,   522,   522,   522,
     521,  3176,  2731,  3178,   522,   521,   187,  2485,   521,   146,
     522,   520,   522,   150,   522,   522,  2517,   504,   523,   364,
     522,   176,   299,  1143,   521,   627,  2495,   629,   435,  2974,
     521,   521,   521,   160,   480,   172,   510,    40,   175,  2517,
     525,   386,  3265,   510,   506,   302,  2524,   298,   298,  2527,
    1092,   252,  2530,   458,   525,  2524,   193,   435,   282,   157,
     208,  3511,   521,   408,   157,   157,   435,   289,   289,   671,
    2548,   435,  2550,   435,   435,   522,  2554,  2555,  2556,   176,
    2558,    40,   520,   525,   521,   360,  1206,  1207,   521,   483,
     692,   522,   297,  1870,    40,   295,   157,   522,   520,  2577,
    1877,  2579,   584,   520,   287,   176,  3346,  2585,    58,   522,
     521,  2589,  2590,  2591,  2592,  2593,  2594,  2595,  2596,  2597,
    2598,  2599,  2600,  2601,   521,   192,   522,   556,    77,  3123,
     522,  2860,   522,   148,   522,   522,   205,   176,   521,   307,
     525,   522,  2620,   522,     9,  2623,     8,   522,  2626,    11,
     287,  3418,  3511,    15,   366,   480,  2624,   297,   295,   588,
     298,  2639,  3409,   467,   521,  2624,  2624,  2624,   157,  2898,
     522,   428,   521,   430,  2652,   525,   180,   447,  3123,   316,
     522,   521,  2660,    45,   522,   522,    40,   522,    40,   525,
      52,   521,    83,  2671,   461,   176,   453,  3229,   520,   456,
      80,   482,   466,   521,   525,    88,   343,  2685,   522,   522,
    2688,   522,  1254,   525,   522,    77,   510,  2695,  2696,  2697,
    2698,   483,   210,   119,   522,  3219,   522,    40,   521,  2707,
      85,   508,   509,   510,   522,   512,   513,   514,   515,   516,
     517,   233,  2720,   526,   522,  2974,   198,   287,   522,  2619,
    2027,   287,   523,  2731,   523,   523,   510,   523,   523,   435,
     523,  2747,   523,   523,  2747,   523,   435,  2745,   523,  2770,
    2771,   523,    40,    40,  3219,   523,  2777,  2647,   523,   523,
    2650,   523,   523,   523,   713,   523,   523,  3510,   150,   523,
     523,   282,  2770,  2771,   523,   523,   523,   523,   523,  2777,
    2747,   111,   525,   523,   523,   523,   523,   523,   896,   523,
     523,   483,   523,   523,   523,    40,     9,   521,   297,   181,
     342,  2799,   359,   521,   521,   521,  2747,  2805,  2105,   198,
     525,   520,   512,  2811,   522,   520,     9,   308,   200,  2817,
     522,   525,   521,   205,     8,   351,  2123,    11,   521,    40,
     157,    15,  2830,  2831,    18,    19,    20,   522,   522,   339,
    2838,   126,  2139,   234,   157,    40,   522,   374,    40,   374,
     522,  2148,    36,    40,   521,   521,   525,  2855,   584,   461,
    1422,   243,  2860,   316,   526,    11,  2163,  1507,  1508,     8,
    1510,  2168,    11,  2170,  3123,   525,    15,   287,   433,    18,
      19,    20,   435,    90,   136,   521,   287,   257,   197,   461,
      30,  1453,  1454,   447,   896,   521,    71,    36,   300,    71,
    2898,    77,     9,   522,    58,  3457,   522,  1469,   376,  1031,
     521,    96,   509,   176,   521,   435,   504,   299,   466,   279,
    1042,   297,    40,   425,   510,     7,     8,   113,   114,   447,
      12,    40,    80,   205,   300,    17,   521,  2935,   300,    21,
     522,    23,    24,    25,    26,    27,  1586,   521,    30,   522,
     176,    33,    34,  2951,    36,   392,   522,    39,    40,   529,
     521,   210,   297,   297,  1604,   124,  2964,  1607,  1090,   521,
    3219,   522,  2970,   152,   458,   522,  2974,   521,   521,   373,
     526,   530,    36,    24,  1092,   404,   525,    36,   522,   233,
     521,   234,   351,   130,  2854,  2572,  2585,  3511,  1805,   778,
    2231,  2990,  3000,  1723,    14,   628,  2293,  2364,  2305,   195,
     196,  2615,    94,  2970,  3424,  3590,   398,    99,   100,   101,
     102,   103,  3095,  3513,  3522,  3583,  1148,  3492,  3026,  1241,
    3154,  2224,  2237,  2639,  3510,  1157,  2564,  3520,  2589,  2221,
    3508,  2302,  1418,   227,  2531,    99,  3511,   101,  2631,   103,
    1502,  1173,  1515,  1453,  3325,  2530,  3071,  3456,  3255,  3582,
    2950,  3292,  1184,  3701,  1186,  1187,  3707,  3137,  3681,  3670,
    3530,  3644,  3704,  3071,  3502,   261,   262,   263,   264,   265,
     266,  2770,  2516,   269,   270,  2517,  3359,  3473,   227,  3203,
    1092,   641,  3659,  2777,  1656,  3660,  1068,  2163,  2182,  1206,
    1777,  1230,  2427,  1229,  3569,  1068,  3104,  3467,  2199,  3336,
    1749,  3180,  1232,  1776,    21,   299,  2168,  3693,  2407,   657,
    2029,  3142,  1046,   505,  1076,  3123,  3124,  3125,   642,  2406,
     512,   513,   514,   515,   516,   517,  2446,  1471,  1042,  3137,
    3339,  3116,  1042,  1783,  3142,  3143,  1254,  3145,  1042,  3340,
    3148,  1042,  3555,  1793,  2080,  1795,  2183,  2049,  1798,  1846,
     299,  1589,  2786,  3166,  1804,  3163,  1806,  2464,  1722,  2036,
     896,    27,    94,    -1,    -1,    -1,    -1,    -1,  1818,  3069,
    3070,    -1,    -1,  1823,    -1,    -1,    -1,  1827,  1828,  1829,
    1830,    -1,  1832,  1833,    -1,    -1,   382,   383,  2495,  3166,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
    3208,    -1,    15,    -1,    -1,    18,    19,    20,    -1,    -1,
      -1,  3219,    -1,    -1,    -1,  3166,    -1,  2524,    -1,  1791,
      -1,  3229,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3492,  3134,  3135,    -1,    -1,    -1,    40,
      -1,    -1,  1254,    -1,    -1,    -1,  3259,  1206,    -1,    -1,
      -1,    -1,  3511,    -1,    -1,  3263,    -1,  3265,    59,    -1,
      -1,    -1,    -1,    -1,    -1,  3296,    -1,    -1,  3299,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3259,    -1,  1416,    -1,    -1,    -1,  3296,    -1,
      -1,  3299,    -1,    -1,  3302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1422,   501,   502,    -1,  3259,   110,
    3569,    -1,  2619,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,   521,    -1,    -1,    -1,    -1,
      -1,  3339,    -1,  1905,    -1,  1453,  1454,    -1,    -1,    -1,
    2647,    -1,    -1,  2650,  3352,  3353,    -1,    -1,    -1,    -1,
      -1,  1469,  2002,    -1,    -1,    -1,  1092,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1948,    -1,    -1,    -1,
      -1,    -1,    -1,  2033,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1964,    -1,    -1,    -1,    -1,    -1,  3406,    -1,
      -1,     8,  1534,  3303,    11,    -1,   207,    -1,    15,    -1,
    1422,    18,    19,    20,   227,    -1,    -1,    -1,    -1,  3319,
      -1,  1993,  2072,  3323,    -1,    -1,    -1,    -1,  2000,    36,
    2080,    -1,    -1,    -1,    -1,  3443,    -1,    -1,    -1,    -1,
    2747,  1453,  1454,  3456,    -1,   537,    -1,   539,    -1,  3457,
    3458,  3459,   544,    -1,    -1,   547,    -1,  1469,   259,  3467,
    2032,    -1,    -1,  2035,   556,    -1,   267,    -1,  2040,    -1,
      -1,    -1,    -1,   537,    -1,   539,    -1,    -1,   279,  3456,
     544,    -1,    -1,   547,  3492,    -1,   299,    -1,    -1,    -1,
      -1,    -1,  1624,    -1,   586,   587,   588,  3528,    -1,  3530,
      -1,    -1,  3510,  3511,    -1,  3456,    -1,    -1,    -1,    -1,
     311,  2161,    -1,    -1,    -1,    -1,    -1,    -1,  1254,    -1,
    3528,    -1,  3530,    -1,  3532,    -1,  3534,    -1,  3541,    -1,
      -1,    -1,    -1,    -1,    -1,   627,   628,   629,  1656,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    -1,  1508,
     642,  1510,  3560,  3561,   646,    -1,    -1,    -1,    -1,    -1,
      -1,  3569,    -1,   364,  3541,   657,   658,   659,    -1,    -1,
    3578,   663,   664,    -1,  3582,    -1,    -1,    45,  1710,    -1,
      -1,    -1,   646,    -1,    52,   386,    -1,    -1,  3596,    -1,
    3541,    -1,    -1,    -1,    -1,  3603,   688,   689,   690,   691,
      -1,   693,    -1,  3503,    -1,    -1,    -1,   408,    -1,    77,
      -1,    -1,    -1,  3644,  3645,   707,    -1,    -1,    -1,    -1,
     227,   713,    -1,    -1,    -1,    -1,  3526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,  3644,  3645,    11,    -1,
      -1,    -1,    15,  2950,  1656,    18,    19,    20,   584,    -1,
      -1,  3659,  3660,    -1,    -1,    -1,    -1,  3688,    -1,    -1,
    2310,    -1,  3670,    36,    -1,    -1,    -1,    -1,    -1,   113,
     114,    -1,    -1,  1791,    -1,  3706,    -1,  3685,    -1,    -1,
    3688,    -1,   150,  2990,    -1,  3693,  1422,    -1,   780,    -1,
      -1,   783,   299,    -1,  3702,   508,   509,   510,  3706,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   181,    -1,    -1,   780,  1453,  1454,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   823,   200,  1469,    -1,    -1,    -1,   205,   830,   831,
     832,   833,   834,    -1,    -1,    -1,    -1,  2319,    -1,    -1,
      -1,   195,   196,    -1,   846,    -1,    -1,    -1,    -1,   823,
      -1,    -1,  3069,  3070,    -1,    -1,   830,   831,   832,   833,
     834,    -1,    -1,    -1,     8,   243,    -1,    11,    -1,  1791,
      -1,    15,   846,    -1,    18,    19,    20,  1905,    -1,    -1,
      -1,    -1,  2442,    -1,    -1,    -1,  2446,    -1,    -1,    -1,
      -1,  1933,    36,    -1,    -1,  1937,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   261,   262,   263,
     264,   265,   266,    -1,  1783,   269,   270,  3134,  3135,    -1,
    1948,   299,    -1,    -1,  1793,    -1,  1795,    -1,    -1,  1798,
      -1,    -1,    -1,    -1,    -1,  1804,  1964,  1806,    -1,    -1,
      -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,    -1,  1818,
      -1,    -1,    -1,    -1,  1823,    -1,    -1,    -1,  1827,  1828,
    1829,  1830,    -1,  1832,  1833,  1993,    -1,    -1,    -1,    -1,
      -1,    -1,  2000,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1905,    -1,    -1,    -1,    -1,    -1,    -1,
    2550,   508,   509,   510,  2036,   512,   513,   514,   515,   516,
     517,    -1,    -1,  2485,  2032,    -1,    -1,  2035,    -1,    -1,
    1656,    -1,  2040,    -1,     0,  3232,   299,  2577,    -1,    -1,
     398,    -1,     3,    -1,     5,    -1,  1948,    -1,   382,   383,
      -1,    -1,  2592,  2593,  2594,  2595,  2596,  2597,  2598,  2599,
    2600,  2601,  1964,  1045,  1046,    -1,    -1,    -1,  1050,    -1,
     896,    -1,    -1,    -1,    -1,    -1,    -1,  1059,  1060,    -1,
      -1,  1063,    -1,    -1,    -1,    -1,    -1,  1069,    -1,    -1,
      -1,  1993,  1074,    -1,    -1,    -1,  1050,    -1,  2000,  1081,
      40,    -1,    -1,   227,    -1,    -1,  3303,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1096,    -1,    -1,    -1,    -1,    59,
      -1,    -1,  3319,    -1,    -1,    -1,  3323,    -1,  2590,    -1,
    2032,    97,    -1,  2035,    -1,    -1,    -1,    -1,  2040,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,  2688,    -1,
      -1,    -1,   113,   114,   512,   513,   514,   515,   516,   517,
      -1,  1143,    -1,    -1,    -1,  1791,    -1,   501,   502,    -1,
     110,   111,    -1,    -1,    -1,   299,    -1,    -1,    -1,   119,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,     0,    -1,
      -1,  3388,    -1,    -1,    -1,    -1,    -1,    -1,  2660,    -1,
     166,    -1,    -1,    -1,    -1,   171,  1188,    -1,    -1,  1191,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2242,   187,    -1,  2685,  1206,  1207,   192,    -1,    -1,    -1,
      -1,    -1,  1214,    -1,   195,   196,    -1,    -1,    -1,    -1,
     180,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,   223,  1240,  1241,
      -1,    -1,    -1,    -1,    -1,  2287,  1092,   207,    -1,  2731,
      -1,  1253,    -1,  2295,    -1,    -1,    -1,    -1,   244,  1905,
      -1,    -1,    -1,  2305,    -1,    97,  1240,    -1,  1270,    -1,
      -1,  2831,  1274,    -1,    -1,    -1,  1278,    -1,    -1,  1253,
     261,   262,   263,   264,   265,   266,  3503,    -1,   269,   270,
      -1,  2319,  2161,    -1,    -1,    -1,    -1,    -1,    -1,   259,
    1274,    -1,  1948,    -1,    -1,    -1,    -1,   267,   294,  3526,
      -1,   297,    -1,    -1,    -1,    -1,    -1,   303,  1964,   279,
     152,    -1,   282,    -1,  2366,    -1,    -1,    -1,    -1,  2371,
      -1,  2373,    -1,    -1,   166,  2377,    -1,  2379,    -1,   171,
      -1,    -1,    -1,    -1,   176,    -1,    -1,  1993,    -1,    -1,
      -1,   311,    -1,    -1,  2000,   187,   342,    -1,    -1,    -1,
     192,    -1,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,  2860,    -1,
     366,    -1,    -1,    -1,    -1,    -1,  2032,    -1,    -1,  2035,
      -1,   223,    -1,    -1,  2040,    -1,    -1,  2319,    -1,    -1,
      -1,   382,   383,    -1,   364,    -1,    -1,    -1,  1254,    -1,
      -1,  1413,   244,    -1,    -1,  1417,  2898,    -1,    -1,    -1,
      -1,  1423,    -1,    -1,    -1,    -1,   386,    -1,    -1,    -1,
      -1,    -1,    -1,  1435,    -1,    -1,    -1,    -1,   424,    -1,
      -1,  2310,    -1,  1417,    -1,    -1,    -1,    -1,   408,  1423,
     410,    -1,    -1,   413,    -1,    -1,    -1,  2485,    -1,    -1,
      -1,    -1,   294,    -1,  1466,   297,   452,    -1,    -1,  1471,
      -1,   303,    -1,    -1,    -1,   461,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    -1,    -1,    18,    19,
      20,    -1,  2974,    -1,   480,    -1,   482,   483,    -1,    -1,
    1502,  1503,    -1,    -1,    -1,  1507,  1508,    -1,  1510,  1511,
     342,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   366,    -1,   522,   523,   524,    -1,
      -1,    -1,    -1,    -1,  3104,    -1,    -1,    -1,  2590,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,  2590,  2485,  3124,  3125,  1568,    -1,    -1,    -1,
      -1,    -1,    -1,  2615,  2616,    -1,  1422,    -1,    -1,  1581,
      -1,  1583,    -1,    -1,  1586,    -1,  1588,  1589,  3148,  1591,
      -1,  1593,   424,    -1,    -1,    -1,  1598,    -1,  1600,    -1,
    1602,    -1,  1604,    -1,    -1,  1607,    -1,  1453,  1454,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1591,    -1,    -1,
     452,    -1,    -1,  1469,    -1,  1627,    -1,    -1,    -1,   461,
    1632,    -1,  2660,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3123,    -1,    -1,    -1,    -1,    -1,    -1,   480,    -1,
     482,   483,    -1,    -1,    -1,    -1,    -1,  2685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1667,    -1,    -1,  2590,    -1,
      -1,    -1,    -1,  2319,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2550,    -1,    -1,    -1,    -1,    -1,   519,    -1,    -1,
     522,   523,   524,    -1,    -1,    -1,  1698,   227,     8,    -1,
      -1,    11,    -1,  2731,    -1,    15,    -1,    -1,  2577,    -1,
    2752,    -1,    -1,    -1,    -1,    -1,    -1,  1719,    -1,  1721,
      -1,  1723,    -1,  2592,  2593,  2594,  2595,  2596,  2597,  2598,
    2599,  2600,  2601,  1735,  1736,    45,    -1,  3219,  2660,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    -1,  1721,     0,  1723,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1735,    -1,  2685,    -1,    -1,    -1,    77,    -1,   299,
      -1,    -1,  1774,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1782,  1783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1793,  1794,  1795,  1796,    -1,  1798,    -1,    -1,    -1,
    1774,    -1,  1804,    -1,  1806,    -1,    -1,    -1,    -1,  2731,
    1656,    -1,    -1,    -1,    -1,  1817,  1818,    -1,    -1,    -1,
    1822,  1823,    -1,    -1,    -1,  1827,  1828,  1829,  1830,    -1,
    1832,  1833,  2860,    -1,    -1,    -1,    -1,    -1,    -1,  2485,
     150,    -1,    -1,    -1,    -1,    97,  3406,    -1,    -1,    -1,
      -1,  1853,    -1,    -1,    -1,  1857,  1858,  1859,    -1,    -1,
      -1,  1863,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2898,   181,    -1,    -1,    -1,    -1,  1878,    -1,    -1,  1853,
      -1,    -1,    -1,  1857,  1858,  1859,    -1,    -1,    -1,  1863,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
     152,    -1,    -1,    -1,    -1,  2947,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,   166,    -1,    18,    19,    20,   171,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,  2970,    -1,
      -1,    -1,    -1,   243,    36,   187,    -1,    -1,  2860,    -1,
     192,    -1,    -1,    45,  2590,  1791,  2974,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2831,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   223,    -1,    -1,    -1,    77,  2898,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,  3030,   299,
      -1,    -1,   244,    -1,     8,    -1,    -1,    11,    -1,    -1,
    2002,    15,    -1,    -1,    18,    19,    20,    -1,    -1,    -1,
    3492,    -1,  2014,    -1,  2660,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,  2027,    -1,    -1,    -1,  3511,
      -1,  2033,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2685,
    2014,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,   303,  2974,    -1,    -1,    -1,    -1,    -1,    -1,  1905,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2072,    -1,    -1,    -1,  2076,    -1,    -1,    -1,  2080,   181,
      -1,  3123,    -1,    -1,    -1,  2731,    -1,  3569,   398,    -1,
     342,    -1,    -1,    -1,    -1,  3123,    -1,    -1,   200,    -1,
      -1,    -1,  1948,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   366,  2117,    -1,    -1,  1964,    -1,
      -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,  3693,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,  2148,  1993,    -1,    -1,
      -1,    -1,    -1,    -1,  2000,    -1,    -1,    -1,    -1,  2161,
      -1,    -1,    -1,    -1,    -1,    -1,  2168,    -1,    -1,    -1,
    2172,    -1,   424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,  2032,    -1,    -1,  2035,
      -1,  3219,    -1,    -1,  2040,   505,    -1,   299,    -1,    -1,
     452,  3123,   512,   513,   514,   515,   516,   517,    -1,   461,
      -1,    -1,    -1,   227,  2860,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2226,    -1,    -1,    -1,   480,    -1,
     482,   483,    -1,    -1,    -1,  3104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3287,    -1,    -1,    -1,    -1,
      -1,    -1,  2898,    -1,     8,  3124,  3125,    11,    -1,    -1,
      -1,    15,    -1,    -1,    18,    19,    20,   519,    -1,    -1,
     522,   523,   524,    -1,     8,    -1,    -1,    11,    -1,  3148,
      -1,    15,    -1,    -1,    -1,   299,    -1,  2289,    -1,    -1,
      -1,    45,    -1,    -1,  2296,    -1,   398,  3219,    52,    -1,
      -1,    -1,    -1,    -1,    -1,  2307,  2308,  2309,  2310,    -1,
    2312,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,  2323,  2296,    77,  2326,    -1,    -1,    -1,  2974,  2331,
      -1,    -1,    -1,    -1,  2308,  2309,    -1,    -1,  2312,    -1,
      -1,  2343,    -1,    77,    -1,    -1,    -1,    -1,    -1,  2323,
      -1,    -1,  2326,    -1,    -1,    -1,    -1,  2331,    -1,  2361,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   688,   689,  2375,  2376,    -1,  2378,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,  2407,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2426,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,  2435,  2436,  2437,    -1,    -1,    -1,    -1,
    2442,    -1,    -1,    -1,  2446,    -1,   200,   181,    -1,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2461,
      -1,  2435,  2436,  2437,  3492,    -1,   200,    -1,    -1,  3511,
      -1,   205,    -1,  2319,    -1,    -1,    -1,  3123,    -1,    -1,
      -1,    -1,    -1,  3511,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,   809,   810,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2524,    -1,    -1,  2527,    -1,    -1,  2530,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3406,    -1,    -1,
      -1,  3569,    -1,    -1,    -1,   299,  2548,    -1,  2550,    -1,
      -1,    -1,  2554,  2555,  2556,    -1,  2558,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,
    3492,    -1,    -1,  3219,  2548,  2577,     8,  2579,    -1,    11,
      -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,  3511,
    2592,  2593,  2594,  2595,  2596,  2597,  2598,  2599,  2600,  2601,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,  2620,    -1,
      52,  2623,    -1,    -1,  2626,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2639,    -1,  2485,
      -1,    -1,    -1,    -1,   398,    77,    -1,  3569,    -1,  2623,
    2652,    -1,  2626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,  2671,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2688,    -1,    -1,    -1,
      -1,    -1,    -1,  2695,  2696,  2697,  2698,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2707,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2720,    -1,
    1037,  2695,  2696,  2697,  2698,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1049,    -1,    -1,  1052,    -1,    -1,  1055,  1056,
    1057,  1058,    -1,  2745,  2590,  2747,    -1,    -1,    -1,   181,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   200,    -1,
      -1,   505,    -1,   205,  1091,    -1,    -1,    -1,   512,   513,
     514,   515,   516,   517,  2786,    -1,    -1,    -1,    -1,    -1,
      -1,  1108,    -1,    -1,    -1,    -1,    -1,  2799,    -1,    -1,
      -1,    -1,    -1,  2805,    -1,    -1,    -1,    -1,  1125,  2811,
      -1,   243,    -1,    -1,  2660,  2817,    -1,    -1,    -1,  1136,
    1137,  1138,    -1,  1140,  1141,    -1,    -1,    -1,  2830,  2831,
      -1,    -1,    -1,    -1,    -1,    -1,  2838,    -1,    -1,  2685,
      -1,    -1,    -1,    -1,    -1,    -1,  3492,    -1,    -1,    -1,
    1167,    -1,    -1,  2855,    -1,    26,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,  2838,  3511,    -1,   299,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2731,    -1,    32,    59,    34,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1053,    -1,    -1,  1222,    51,    -1,    -1,  1226,
    1227,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3569,    -1,    -1,    -1,    72,    -1,    -1,
      -1,    -1,    -1,  2935,    -1,    -1,    -1,    -1,    83,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2951,
      95,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2964,    -1,  1281,    -1,   398,    -1,    -1,   140,
     115,    -1,    -1,    -1,    -1,    -1,  1293,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,   140,    15,    -1,  3000,    -1,
      -1,  1318,    -1,   148,    -1,     3,    -1,  1158,    -1,    -1,
       8,   156,    -1,    11,  2860,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,  3026,    -1,    45,   172,    -1,    -1,
      -1,   176,    -1,    52,    -1,    -1,   207,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    -1,    -1,
    1201,    -1,  2898,    -1,    52,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,  3071,
      15,    -1,    -1,   505,   219,    -1,   508,   509,   510,    77,
     512,   513,   514,   515,   516,   517,    -1,    -1,   259,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
      45,   246,  3104,    -1,    -1,    -1,    -1,    52,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3124,  3125,    -1,    -1,    -1,    -1,  2974,    -1,
     301,   150,    77,    -1,    -1,  3137,    -1,    -1,    -1,    -1,
     311,  3143,    -1,  3145,    -1,    -1,  3148,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3163,   181,  3137,  3166,    -1,    -1,    -1,    -1,  3143,
      -1,    -1,    -1,  1324,    -1,    -1,    -1,    -1,  1329,    -1,
      -1,   200,   327,   181,    -1,   330,   205,   358,    -1,  3163,
      -1,   362,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,    -1,   150,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   386,    -1,   362,    -1,    -1,
    1537,   392,    -1,    -1,   243,    -1,   371,  3229,    -1,   227,
     228,    -1,    -1,    -1,    -1,    -1,   181,   408,    -1,    -1,
     385,    -1,    -1,    -1,    -1,   243,    -1,   392,    -1,    -1,
    3252,  3253,   397,    -1,    -1,   200,  1573,  3259,  1575,  1576,
     205,  3263,    -1,   408,    -1,    -1,     8,    -1,    -1,    11,
      -1,  1588,  1589,    15,    -1,   420,    -1,  3123,    -1,   424,
     299,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,  3263,
      -1,    -1,    -1,   464,    -1,    -1,    -1,    -1,   243,   444,
    3302,   299,    -1,    45,   302,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,   471,    -1,  3302,    -1,
      -1,    -1,    -1,    -1,  1651,    77,    -1,  3339,   483,    -1,
    1657,  1658,  1659,  1660,  1661,  1662,  1663,    -1,    -1,    -1,
    1053,  1668,  1669,    -1,   299,    -1,  1673,    -1,    -1,    -1,
    1677,    -1,   507,  1680,  1681,  1682,  1683,  1684,  1685,  1686,
    1687,  1688,    -1,  3219,  1691,    -1,   521,    -1,    -1,   398,
      -1,  1698,    -1,  1700,  1535,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,    -1,    -1,    -1,  3406,    -1,  1557,  1724,  1559,    -1,
    1561,  1562,  1563,    -1,    -1,  1566,    -1,    -1,  1569,    -1,
      -1,  1572,    -1,    -1,    -1,    -1,  1577,    -1,    -1,  1580,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,
      -1,  3443,    -1,  1760,  1761,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,  3456,  3457,  3458,  3459,   200,    -1,
      -1,    -1,    -1,   205,    -1,  3467,    -1,    -1,    -1,    -1,
      -1,  1622,    -1,    -1,    -1,  1626,    -1,    -1,  1629,  1630,
    1631,    -1,    -1,    -1,  1635,    -1,   505,    -1,  1639,    -1,
      -1,    -1,    -1,   512,   513,   514,   515,   516,   517,    -1,
    3502,   243,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,  1840,  1227,    -1,  1843,  1844,    -1,  1846,
    3532,    -1,  3534,    -1,    -1,    -1,    -1,    -1,    -1,  3541,
      -1,    -1,    -1,    -1,    -1,    -1,  1697,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,  3532,    -1,
     505,    -1,  1053,    -1,    -1,    -1,  1883,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,  3578,    -1,    -1,    -1,
    3582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1743,    -1,  3596,    -1,    -1,    -1,    -1,    -1,
      -1,  3603,    -1,    -1,  3578,    -1,    -1,    -1,  1759,    -1,
      -1,    -1,    -1,  1764,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  3596,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1954,    -1,    -1,
    1957,    -1,  1959,    -1,    36,    -1,  3492,    -1,    40,    -1,
      -1,    -1,    -1,    45,    -1,    -1,   398,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,  3511,    -1,    -1,  3670,    -1,
    1987,  1988,    -1,    -1,  1991,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3685,    -1,    77,    -1,    -1,    -1,    -1,
      -1,  3693,    -1,    -1,    -1,    -1,  3670,    -1,    -1,    -1,
    3702,    -1,    -1,  2020,    -1,    -1,  2023,    -1,    -1,    -1,
      -1,  3685,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      -1,  2038,    -1,  3569,    -1,    -1,    -1,    -1,  3702,    -1,
      -1,  2048,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    -1,    52,  2074,    -1,    -1,
      -1,    -1,  2079,   505,    -1,  2082,    -1,    -1,    -1,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1950,
      -1,    -1,  2119,    -1,    -1,  2122,    -1,  2124,   200,    -1,
      -1,  1962,  1963,   205,  1965,  1966,  1967,  1968,  1969,    -1,
      -1,  1972,  1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,
    1981,  1982,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,   150,    -1,    -1,    -1,  1561,  1562,
      -1,    -1,    -1,  1566,    -1,  2182,    -1,  3060,  3061,  3062,
    3063,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2199,  2200,    -1,   181,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2218,    -1,    -1,   200,    -1,    -1,   299,    -1,   205,
     302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2084,    -1,    -1,    -1,  2088,  2089,  2090,
    2091,  2092,  2093,  2094,    -1,    -1,    -1,   243,    -1,  2100,
    2101,    -1,  2103,  2104,    -1,    -1,    -1,    -1,    -1,    -1,
    2277,    -1,    -1,    -1,  2115,    -1,    -1,  2118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2126,  2127,  2128,  2129,  2130,
    2131,  2132,  2133,  2134,  2135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   398,    -1,    -1,  2160,
      -1,    -1,  2329,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3220,  3221,  3222,
    3223,  3224,  3225,  3226,    -1,    -1,    -1,  3230,  3231,    -1,
      -1,    -1,  3235,    -1,    -1,  3238,  1749,    -1,  3241,  3242,
    3243,  3244,  3245,  3246,  3247,  3248,  3249,  3250,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1561,  1562,    -1,    -1,    -1,  1566,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
     522,  2282,  2283,  2284,    -1,    -1,    -1,    -1,  2455,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2464,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2473,    -1,    -1,  2476,
      -1,  2478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2494,  2495,    -1,
      -1,  2498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3385,    -1,  3387,    -1,  3389,    -1,    -1,    -1,
      -1,    -1,    -1,  2520,    -1,  1696,    -1,    -1,    -1,   505,
      -1,    -1,    -1,    -1,    -1,  2532,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2383,  2384,  2385,    -1,    -1,  2388,  2389,  2390,
    2391,  2392,    -1,    -1,    -1,  2396,  2397,  2398,  2399,  2400,
    2401,  2402,  2403,  2404,  2405,    -1,    -1,    -1,  1749,  2410,
    2411,    -1,  1965,  1966,  1967,  1968,  1969,    -1,    -1,  1972,
    1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2438,  3481,    -1,
    2441,  3484,  3485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3493,    -1,    -1,  2454,    -1,    -1,    -1,  3500,    -1,    -1,
      -1,    -1,    -1,    -1,  2465,    -1,    -1,  2468,    -1,  2470,
      -1,    -1,    -1,  2474,  2475,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2488,  2489,  2490,
    2491,    -1,  2493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3564,  3565,    -1,    -1,  3568,    -1,    -1,    -1,  3572,
      -1,    -1,  3575,  3576,    -1,  2702,  2703,    -1,    -1,    -1,
      -1,    -1,    -1,  2710,    -1,    -1,    -1,  2100,  2101,    -1,
    2551,    -1,    -1,    -1,  2721,    -1,    -1,    -1,  2725,  2726,
      -1,    -1,    -1,  2730,    -1,    -1,    -1,    -1,  2735,    -1,
      -1,  2738,  2739,    -1,    -1,    -1,  2743,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3627,  3628,    -1,    -1,  3631,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2786,
      -1,    -1,    -1,    -1,  1965,  1966,  1967,  1968,  1969,    -1,
      -1,  1972,  1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,
    1981,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2651,    -1,    -1,    -1,    -1,    -1,    -1,  2824,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      -1,  2682,    -1,    -1,  2851,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    51,
    2711,    -1,    -1,    -1,    -1,  2716,    -1,    -1,    60,    -1,
      -1,    -1,    -1,  2724,    -1,    -1,  2727,    -1,  2729,    -1,
      72,    -1,  2733,    -1,    -1,  2736,  2737,    -1,    -1,  2740,
    2741,    83,    -1,  2744,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    -1,    97,    -1,    -1,    -1,  2100,
    2101,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,  2939,   115,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,  2785,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,   140,    -1,
      -1,  2802,    -1,    -1,    45,    -1,   148,    -1,    -1,    -1,
      -1,    52,    -1,    -1,   156,    -1,   158,   159,    -1,    -1,
      -1,    -1,    -1,  2990,    -1,    -1,    -1,    -1,    -1,    -1,
     172,  2832,    -1,    -1,   176,    -1,    77,    -1,    -1,  3006,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3017,  3018,    -1,    -1,  3021,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,    -1,    -1,     8,  3075,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,     8,    -1,    -1,    11,    -1,  3093,    -1,    15,    -1,
      -1,    -1,    -1,    -1,    -1,    36,  2489,  2490,    -1,    -1,
     181,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    45,   200,
      -1,    -1,    -1,    -1,   205,    52,    -1,    -1,    -1,    -1,
      -1,  2972,  2973,    -1,    -1,    -1,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   327,   227,   228,   330,    -1,
      77,    -1,    -1,    -1,    -1,  3162,    -1,  2998,  2999,    -1,
      -1,    -1,   243,  3004,    -1,    -1,    -1,    -1,  3009,    -1,
    3011,  3012,  3013,  3180,    -1,  3016,    -1,  3184,  3019,  3020,
     362,  3188,    -1,  3024,    -1,    -1,    -1,     8,    -1,   371,
      11,    -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,
      -1,   282,    -1,   385,   285,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,   397,    -1,    -1,   299,    -1,
      -1,   302,    -1,  3064,    45,    -1,   408,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,   420,    -1,
     181,    -1,   424,    -1,    -1,  3252,  3253,    -1,    -1,  3090,
      -1,    -1,    -1,    -1,   181,  3096,    77,    -1,    -1,   200,
      -1,    -1,   444,  3270,   205,    -1,    -1,    -1,  3109,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,   459,   205,    -1,
     462,    -1,    -1,    -1,    -1,   467,   227,   228,    -1,  2682,
      -1,    -1,    -1,    -1,    -1,  3136,    -1,    -1,    -1,    -1,
      -1,   483,   243,    -1,    -1,    -1,    -1,    -1,  2489,  2490,
      -1,    -1,    -1,    -1,    -1,    -1,   243,   398,    -1,  3326,
      -1,    -1,    -1,    -1,    -1,   507,    -1,  3168,  2721,  3336,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,   282,   524,    -1,   285,    -1,    -1,    -1,    -1,  3190,
    3191,  3192,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
     181,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,  3215,  3216,  3217,  3218,    -1,   200,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,
    2783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3425,    -1,
    3261,    -1,   243,    -1,   505,    -1,    -1,   508,   509,   510,
    3271,   512,   513,   514,   515,   516,   517,    -1,    -1,  2832,
      -1,    -1,    -1,    -1,   525,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,
      -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,    -1,    -1,  3324,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3502,    -1,    -1,    -1,    -1,
    3341,  2682,    -1,  3344,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3361,  3362,  3363,  3364,  3365,  3366,  3367,    -1,  3369,  3370,
      -1,  3372,  3373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3382,    -1,  3384,    -1,    -1,    -1,  3554,  3555,    -1,
    3391,  3392,  3393,  3394,  3395,  3396,  3397,  3398,  3399,  3400,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,   398,   505,  3420,
    2973,   522,    -1,    -1,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3607,    -1,  2783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3454,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3474,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3482,  3483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2832,    -1,  3494,  3495,  3496,  3497,    -1,  3499,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3060,  3061,  3062,
    3063,  3678,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3524,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3558,    -1,    -1,
      -1,     8,  3563,    -1,    11,  3566,  3567,    -1,    15,    -1,
    3571,    -1,  3573,  3574,    -1,    -1,  3577,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    36,    -1,  3610,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
    3621,  3622,  3623,    52,    -1,  3626,    -1,    -1,  3629,  3630,
      77,    -1,  2973,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3662,  3663,  3664,    -1,    -1,    -1,  3220,  3221,  3222,
    3223,  3224,  3225,  3226,    -1,    -1,    -1,  3230,  3231,    -1,
      -1,    -1,  3235,    -1,    -1,  3238,    -1,    -1,  3241,  3242,
    3243,  3244,  3245,  3246,  3247,  3248,  3249,  3250,    -1,     8,
      -1,    -1,    11,   150,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3060,
    3061,  3062,  3063,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,   181,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   181,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    77,    -1,
      32,   200,    -1,    -1,    -1,    -1,   205,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   243,    59,   227,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,  3369,  3370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3385,    -1,  3387,    -1,  3389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,   299,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,   181,   302,    -1,    -1,    -1,    -1,   140,  3220,
    3221,  3222,  3223,  3224,  3225,  3226,    -1,    -1,    -1,  3230,
    3231,   200,    -1,    -1,  3235,    -1,   205,  3238,    -1,    -1,
    3241,  3242,  3243,  3244,  3245,  3246,  3247,  3248,  3249,  3250,
    3251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,
      -1,  3474,    -1,    -1,    -1,    -1,    -1,    -1,  3481,    -1,
      -1,  3484,  3485,    -1,   243,    -1,    -1,    -1,    -1,    -1,
    3493,    -1,  3495,  3496,    -1,   207,    -1,  3500,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,    -1,    -1,    -1,   259,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,    -1,
      -1,  3564,  3565,    -1,    -1,  3568,    -1,   279,    -1,  3572,
      -1,    -1,  3575,  3576,    -1,    -1,    -1,    -1,  3369,  3370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,
      -1,    -1,    -1,    -1,  3385,    -1,  3387,    -1,  3389,   311,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,  3627,  3628,   505,    -1,  3631,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,   398,
      -1,    -1,    -1,   522,    -1,    -1,   358,    -1,    -1,    -1,
     362,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   386,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,  3474,    -1,    -1,    -1,    -1,    -1,    -1,
    3481,    -1,    -1,  3484,  3485,    -1,   408,    -1,    -1,    -1,
      -1,    -1,  3493,    -1,  3495,  3496,    -1,    -1,    -1,  3500,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,   464,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3564,  3565,    -1,    -1,  3568,    -1,    -1,
      -1,  3572,    -1,    -1,  3575,  3576,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,  3627,  3628,    42,    43,
    3631,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,   507,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,   522,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
     522,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,   507,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    37,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,   522,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,
      -1,   533,   534,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,   533,   534,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,    -1,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,     3,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,
     534,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   531,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    40,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,   244,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   522,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,   298,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,     3,
     507,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,   298,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,   297,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,   176,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,   176,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,     3,   507,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,   176,    -1,   178,
     179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,    -1,   397,    -1,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,   507,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    15,   521,    -1,    18,    19,    20,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    -1,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,    -1,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,    -1,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,    -1,   186,   187,    -1,    -1,    -1,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,   322,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,    -1,   400,   401,   402,   403,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,    -1,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,
     504,    -1,     3,    -1,   508,   509,   510,     8,   512,   513,
     514,   515,   516,   517,    15,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    45,    15,    16,    17,    18,    19,
      20,    52,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    77,    -1,    -1,    -1,
      -1,    -1,    52,     8,    -1,    -1,    11,    -1,    -1,    45,
      15,    16,    17,    18,    19,    20,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    77,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      45,    15,    16,    17,    18,    19,    20,    52,    -1,    -1,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,   150,    -1,    -1,    -1,    -1,   200,
      -1,    45,    77,    -1,   205,    -1,    -1,    -1,    52,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   181,   227,   228,    -1,    -1,
     200,    -1,    -1,    77,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,   243,    -1,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,   181,   227,   228,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,   200,    -1,    -1,    -1,    -1,
     205,   282,    -1,    -1,   285,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,   302,   227,   228,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   285,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   299,
     205,    -1,   302,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,   200,   282,    -1,    -1,
     285,   205,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,     8,    -1,
     285,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,   299,    -1,    -1,   302,   398,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,   282,    -1,
      -1,   285,   398,    -1,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,   299,     8,    -1,   302,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,   398,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,   522,    -1,   398,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,   505,
      -1,    -1,   522,    -1,   398,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,   181,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,   522,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,   181,
     505,    -1,    -1,   508,   509,   510,    36,   512,   513,   514,
     515,   516,   517,   243,    -1,    45,    -1,   522,   200,    -1,
      -1,    -1,    52,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,   227,   228,    77,   522,    -1,
      -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
       8,    -1,   302,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
     282,    -1,    -1,   285,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    -1,    -1,   299,     8,    -1,
     302,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,   398,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,   398,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   282,    -1,    36,   285,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    45,    -1,    -1,    -1,   205,    -1,   299,
      52,    -1,   302,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,   227,
     228,   181,   522,    -1,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,   227,   228,    -1,
     522,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,    -1,     8,   302,    -1,    11,    -1,   398,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,   282,    -1,    -1,   285,    -1,    -1,    -1,   181,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,   299,
      -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,   505,    15,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,    45,    -1,   398,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,   299,    -1,    -1,
     302,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,   181,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    45,    -1,
     205,    -1,    -1,    -1,    -1,    52,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,   227,   228,   522,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   150,    -1,    -1,    -1,   505,   398,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,   520,    -1,
     227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,    -1,   243,    -1,    -1,    -1,
     299,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,   520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,   520,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    -1,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,    -1,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,    -1,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    -1,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,   297,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,     4,     5,    -1,    -1,    -1,
       9,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,   297,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,     4,     5,    -1,
      -1,    -1,     9,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
     297,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
       8,    -1,    -1,    11,    -1,   512,   513,    15,    16,    17,
      18,    19,    20,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    36,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,     8,    -1,    -1,    11,    52,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
     128,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    -1,    -1,     8,    -1,    -1,    11,    52,    -1,    -1,
      15,    16,    17,    18,    19,    20,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    36,    77,   181,    -1,    -1,   171,    -1,    -1,    -1,
      45,   176,    -1,    -1,    36,    -1,   181,    52,    40,    -1,
      -1,    -1,   200,    45,    -1,    -1,    -1,   205,    -1,    -1,
      52,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    77,    -1,    -1,   170,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,    -1,    77,   181,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,   243,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   227,   228,   282,    -1,   181,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,   243,    -1,
     285,   299,    -1,    -1,   302,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   282,    -1,   181,
     285,    -1,    -1,    -1,    -1,   200,    -1,    -1,   243,    -1,
     205,    -1,    -1,    -1,   299,    -1,    -1,   302,   200,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,   227,   228,   282,   243,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   243,    -1,    -1,   299,    -1,    -1,   302,     8,    -1,
      -1,    11,    -1,   398,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
     282,    -1,    -1,   285,   299,    45,    -1,   302,    -1,    -1,
      -1,    -1,    52,   398,    -1,    -1,    -1,   299,    -1,    -1,
     302,    -1,    -1,   461,    -1,    -1,    -1,   322,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   282,     8,    -1,   285,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,   299,
      -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,     8,    40,    -1,    11,    -1,    -1,
      45,    15,    16,    17,    18,    19,    20,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    77,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    45,
      -1,    -1,    -1,    -1,    -1,    -1,    52,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,     8,   181,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    77,   171,    -1,    -1,
     205,    -1,    -1,    36,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      -1,    -1,   227,   228,    -1,   505,   200,    -1,   508,   509,
     510,   205,   512,   513,   514,   515,   516,   517,   243,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   227,   228,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   200,    -1,    -1,   282,    -1,   205,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
     181,   227,   228,    -1,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,   243,    -1,   200,
      -1,    -1,    -1,    -1,   205,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,   205,   299,    -1,     8,   302,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,   398,   227,   228,    -1,    -1,    -1,    -1,
      -1,   282,    -1,    36,   285,    -1,    -1,    -1,    -1,    -1,
     243,    -1,    45,    -1,    -1,    -1,    -1,    -1,   299,    52,
       8,   302,    -1,    11,   398,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    36,   282,
      -1,    -1,   285,    -1,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    -1,   299,    -1,    -1,   302,
      -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,   432,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,   398,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,   181,   227,   228,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     243,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,   227,
     228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,    -1,   285,    -1,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   282,     8,    -1,   285,    11,    -1,
      -1,    -1,    15,    -1,    -1,    18,    19,    20,    -1,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    45,    15,    -1,    -1,    18,    19,    20,    52,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    77,   398,    -1,    -1,    -1,    -1,
      52,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    -1,
      45,    18,    19,    20,    -1,    -1,    -1,    52,    -1,    -1,
      -1,     8,    -1,    -1,    11,    77,    -1,    -1,    15,    36,
      -1,    18,    19,    20,    -1,    -1,    -1,    -1,    45,    -1,
     398,    -1,    77,    -1,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    45,    15,
      -1,    -1,    18,    19,    20,    52,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      77,    -1,    -1,    -1,    -1,    -1,    52,    -1,   181,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,   150,    -1,   200,    -1,    -1,
      -1,    77,   205,    -1,    -1,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   227,   228,   181,   505,   200,    -1,
     508,   509,   510,   205,   512,   513,   514,   515,   516,   517,
     243,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   181,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,   200,   181,    -1,    -1,    -1,   205,   282,
      -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   200,    -1,    -1,   299,    -1,   205,   302,
     227,   228,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,   243,    -1,    -1,    -1,
     227,   228,    -1,    -1,   200,    -1,    -1,   299,    -1,   205,
     302,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,   282,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,   243,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   282,     8,    32,   285,    11,
      -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,    -1,
      -1,    -1,   299,    -1,    -1,   398,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,   285,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    72,    -1,    -1,
      52,    -1,    -1,   299,    -1,    -1,   398,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    -1,    97,   398,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,
      -1,   398,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   156,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,   172,    -1,    -1,
      -1,   176,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,   181,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
     515,   516,   517,    -1,   219,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,   246,    -1,    -1,    -1,   227,   228,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,    -1,   327,    -1,    -1,   330,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,    -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,
      -1,    -1,   397,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   408,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   420,   398,    -1,    -1,   424,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   444,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,     3,    -1,
       5,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    -1,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,    -1,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,    -1,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
      -1,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    -1,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,    -1,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,    -1,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    -1,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,    -1,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,    -1,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,   297,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,    -1,    -1,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,   173,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,   243,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,   298,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,   298,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,     4,    -1,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    40,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    40,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    -1,    40,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    -1,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,    -1,    -1,   283,   284,   285,   286,
      -1,    -1,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,    -1,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,    -1,   326,
     327,   328,    -1,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,    -1,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
      -1,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,   504,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    -1,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
      -1,   181,   182,    -1,   184,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,    -1,    -1,   283,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,    -1,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,    -1,   326,   327,   328,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
      -1,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,    -1,   468,    -1,
     470,   471,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   501,   502,   503,   504,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    -1,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,    -1,    -1,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,    -1,   181,   182,
      -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,    -1,    -1,
     283,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,    -1,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,    -1,   326,   327,   328,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,    -1,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,    -1,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,   504,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      -1,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,    -1,   181,   182,    -1,   184,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,    -1,    -1,   283,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,    -1,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,    -1,
     326,   327,   328,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,    -1,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,    -1,   468,    -1,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,   503,   504,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    -1,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,    -1,    -1,   283,   284,   285,   286,    -1,    -1,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,    -1,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,    -1,   326,   327,   328,
      -1,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,    -1,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,    -1,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,   503,   504,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,    -1,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    -1,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
      -1,   181,   182,    -1,   184,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,    -1,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,    -1,    -1,   283,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,    -1,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,    -1,   326,   327,   328,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,    -1,   397,   398,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,    -1,
     420,    -1,   422,   423,    23,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    23,   438,   439,
      -1,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,    -1,   468,    -1,
     470,   471,   472,    -1,   474,   475,   476,   477,    -1,    78,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
      -1,    -1,    78,    -1,    -1,    94,    -1,    -1,    -1,    -1,
      -1,   501,   502,   503,   504,    -1,    -1,    -1,    94,    -1,
      -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   161,    -1,    -1,   151,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   161,    -1,    -1,    -1,   178,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
      -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   324,    -1,
      -1,   340,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,    -1,   375,
     389,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     386,    -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   410,   424,    -1,    -1,    -1,    -1,
      -1,    -1,   431,    -1,    -1,    -1,    -1,    -1,   424,    -1,
      -1,    -1,   441,    -1,    -1,   431,    -1,    -1,   447,    -1,
      -1,    -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,    -1,
      -1,   447,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   474,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   474
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    32,    34,    35,    46,    51,    60,    72,    83,
      95,    97,   115,   129,   131,   140,   148,   156,   158,   159,
     172,   176,   204,   219,   246,   327,   330,   362,   371,   385,
     392,   397,   408,   420,   424,   444,   459,   462,   467,   483,
     507,   521,   536,   537,   538,   539,   540,   547,   558,   559,
     560,   563,   564,   566,   583,   631,   643,   645,   648,   651,
     653,   656,   657,   661,   668,   670,   677,   681,   682,   683,
     690,   694,   710,   713,   716,   734,   771,   772,   775,   777,
     778,   779,   780,   782,   783,   835,   836,   984,   986,   987,
     988,   993,   996,  1002,  1003,  1006,   438,   486,   985,   208,
     378,   386,   424,   474,   112,   561,   985,     3,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    31,    32,    33,
      38,    42,    43,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    58,    59,    60,    61,    62,
      63,    66,    67,    68,    69,    70,    72,    73,    74,    75,
      76,    78,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    91,    92,    93,    94,    95,    96,    98,    99,
     100,   101,   102,   103,   104,   105,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   120,   122,   123,
     124,   125,   126,   127,   129,   130,   131,   132,   133,   134,
     137,   138,   139,   140,   141,   142,   143,   145,   146,   147,
     149,   150,   151,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   165,   167,   168,   169,   170,   172,
     174,   175,   177,   178,   179,   180,   181,   182,   184,   185,
     188,   189,   190,   191,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   206,   207,   208,   209,
     210,   211,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   224,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   240,   241,   242,   243,   245,
     246,   247,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   283,   284,   285,   286,   288,   289,
     290,   291,   292,   293,   295,   296,   299,   300,   301,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   334,   335,   336,
     337,   338,   339,   340,   341,   343,   344,   345,   346,   347,
     348,   349,   350,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   422,
     423,   425,   426,   427,   428,   429,   430,   431,   433,   434,
     436,   438,   439,   440,   441,   442,   444,   445,   446,   447,
     448,   449,   450,   451,   454,   455,   456,   457,   458,   459,
     460,   462,   463,   464,   465,   466,   467,   468,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   481,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   634,
     635,   636,   641,   895,   968,   972,   975,     3,   180,   255,
     417,   565,   634,   972,   985,    54,   521,   578,     5,   112,
     182,   247,   302,   340,   378,   428,   430,   447,   453,   456,
     629,   644,   689,   971,     5,    30,   330,   966,   972,   973,
     112,   561,    23,    78,    94,   112,   151,   161,   173,   178,
     208,   254,   258,   324,   340,   341,   375,   378,   386,   389,
     410,   424,   431,   441,   447,   474,   662,   663,   666,   985,
     966,    97,   140,   471,   521,   539,   540,   547,   563,   564,
     566,   583,   631,   645,   648,   651,   653,   656,   657,   661,
     668,   673,   677,   683,   690,   710,   771,   772,   775,   777,
     984,   986,   988,   993,   996,  1002,  1006,   112,    72,   219,
      65,    76,    78,   102,   103,   104,   105,   106,   107,   108,
     163,   186,   238,   248,   249,   288,   298,   309,   325,   374,
     391,   419,   440,   442,   446,   460,   467,   521,   778,   836,
     838,   840,   841,   848,   849,   895,   897,   898,   963,   972,
     973,   112,   711,   971,   972,   711,   972,   966,    30,   433,
     438,   972,   994,   995,  1004,   985,    30,   135,   791,   792,
     182,   247,   378,   390,   433,   997,   998,  1004,   985,   521,
     777,   783,   972,  1005,   848,   972,   424,   788,   963,   177,
     521,   990,   521,   349,   784,   785,   966,   784,     3,    52,
      53,    55,    56,    68,    69,    76,   116,   117,   157,   163,
     169,   180,   188,   189,   215,   221,   222,   224,   255,   274,
     276,   281,   288,   290,   305,   309,   325,   329,   346,   373,
     393,   401,   417,   419,   433,   434,   440,   442,   446,   467,
     468,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   634,   642,   712,   778,   779,     0,   524,   471,
     671,   124,   218,   458,   152,   223,   303,   452,   794,   795,
     778,   780,   782,   525,    30,   433,   438,   777,  1005,   198,
     963,   966,   198,   963,   198,   848,   198,   963,   971,   521,
     519,   523,   947,   949,   777,   963,   198,   963,   428,   430,
     428,   430,   360,   185,   198,   963,   963,   178,   254,   349,
     386,   424,   474,   646,   112,   208,    30,   966,   198,     3,
     260,   441,   111,   424,   424,   474,   185,   381,     3,    48,
      53,    54,    55,    56,    68,    69,    78,    80,    86,    98,
     102,   103,   104,   105,   108,   116,   117,   139,   169,   175,
     177,   181,   198,   200,   214,   221,   222,   224,   227,   228,
     230,   241,   243,   255,   274,   275,   276,   285,   290,   306,
     308,   326,   346,   369,   373,   391,   393,   398,   401,   417,
     426,   433,   434,   446,   452,   460,   468,   471,   634,   637,
     667,   859,   861,   863,   865,   867,   869,   871,   872,   873,
     875,   876,   877,   879,   880,   976,   198,   664,   972,   977,
     198,   964,   966,   198,   966,   521,   669,   302,   673,     3,
      48,    52,    53,    54,    55,    56,    68,    69,    76,    78,
      80,    86,    98,   102,   103,   104,   105,   108,   116,   117,
     157,   163,   169,   175,   177,   180,   181,   188,   189,   200,
     214,   215,   221,   222,   224,   227,   228,   230,   241,   243,
     255,   274,   275,   276,   281,   285,   288,   290,   305,   306,
     308,   309,   325,   326,   329,   346,   369,   373,   391,   393,
     398,   401,   417,   419,   426,   433,   434,   440,   442,   446,
     460,   467,   468,   471,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   634,   638,   674,   676,   677,
     679,   680,   671,   971,   972,   565,   711,   521,   521,   171,
     521,   521,   521,   521,   734,   778,   849,   521,   521,   521,
     521,   963,   521,   521,   176,   521,   521,   521,   521,   778,
     836,   840,   841,    40,   842,   843,   972,   842,   385,   525,
     781,    98,   177,   214,   230,   241,   275,   326,   369,   845,
     843,    40,   842,   844,   972,   507,   853,   514,   949,   971,
     510,   521,   521,   773,   504,   229,   523,   297,     4,     6,
       7,     8,     9,    10,    39,    53,    55,    56,    64,    68,
      69,    80,   116,   117,   119,   157,   164,   169,   188,   189,
     221,   222,   224,   274,   276,   282,   287,   290,   299,   346,
     373,   401,   433,   434,   443,   468,   505,   512,   513,   514,
     519,   521,   527,   528,   533,   534,   778,   825,   864,   867,
     870,   871,   872,   874,   875,   876,   879,   880,   891,   893,
     894,   895,   896,   898,   899,   913,   914,   921,   941,   946,
     953,   954,   955,   968,   969,   970,   971,   972,   952,   954,
     997,   997,   971,   997,   504,   176,   435,   510,   523,   949,
     658,   848,     3,   175,   177,   471,   677,   989,   991,   175,
     992,   891,   925,   926,   972,   784,   525,   521,   979,   525,
     522,   522,   538,   963,   176,   302,   697,   658,    30,   135,
     789,   789,    58,   789,   166,   171,   244,   294,   800,   802,
     803,   828,   830,   831,   832,   794,   795,   521,   504,   229,
     157,    26,    32,   140,   301,   358,   362,   392,   464,   552,
     555,   556,   358,   157,    40,    59,   110,   207,   259,   267,
     279,   311,   358,   364,   386,   392,   408,   541,   544,   555,
     157,   358,   392,   555,   157,   358,   392,   555,    40,   562,
       3,    30,    48,    54,    78,    80,    86,    98,   102,   103,
     104,   105,   108,   135,   175,   177,   180,   181,   200,   214,
     227,   228,   230,   241,   243,   255,   275,   285,   306,   308,
     326,   369,   391,   398,   417,   426,   446,   460,   469,   471,
     514,   522,   634,   639,   891,   928,   929,   974,   980,   891,
     948,     3,    30,    34,    35,    36,    37,    39,    40,    41,
      44,    57,    64,    65,    71,    77,    79,    90,    97,   106,
     107,   119,   121,   128,   135,   136,   144,   148,   152,   164,
     166,   171,   173,   176,   183,   186,   187,   192,   205,   212,
     223,   225,   238,   239,   244,   248,   249,   282,   287,   294,
     297,   298,   302,   303,   322,   333,   342,   351,   366,   385,
     403,   421,   424,   432,   435,   437,   443,   452,   453,   461,
     467,   469,   479,   480,   482,   483,   634,   638,   640,   967,
     981,   947,   522,   521,   618,   282,   176,   112,   629,   963,
     282,   649,    40,   474,   198,   963,   198,   633,   963,   198,
     963,   198,   963,   963,    86,   686,   157,   487,   963,    87,
     132,   314,   429,   470,   878,   878,   878,   521,   866,   866,
     329,   521,   868,   157,   521,    68,    69,   878,   866,   863,
     485,   507,   521,   881,   521,   881,   521,    62,   365,   525,
     665,   521,    39,   862,   521,   113,   114,   195,   196,   261,
     262,   263,   264,   265,   266,   269,   270,   382,   383,   501,
     502,   521,   882,   883,   884,   885,   886,   887,   888,   889,
     890,   866,   157,   525,   665,   523,   978,   157,   525,   665,
     157,   297,   926,   360,   522,   525,     4,   164,   297,   443,
     512,   513,   543,   546,   672,   674,   675,   678,   970,   971,
     673,   521,   573,   577,   435,   891,   926,   521,   970,   970,
       3,   882,   883,   884,   885,   886,   887,   888,   889,   931,
     932,   971,   467,   843,   844,   970,   970,   891,   963,   891,
     933,   512,   513,   892,   893,   914,   921,   935,   521,   891,
     925,   936,   891,    57,   176,   239,   437,   891,   926,   939,
     891,   522,   973,   426,   808,   809,   521,   809,   791,   792,
     840,   225,   786,   230,   306,   846,   840,   846,   230,   845,
     230,   846,   230,   809,   521,   973,   809,   521,   304,   543,
     678,   999,  1001,   928,   861,   930,    40,   242,   972,   521,
     519,   778,   891,   945,   521,   778,   891,   521,   521,   891,
     891,   891,   153,   956,   957,   891,   926,   927,   778,   891,
     925,   915,   916,   917,   973,     9,     3,   983,   949,   521,
     971,   521,   970,   971,     3,     8,    11,    15,    16,    17,
      18,    19,    20,    36,    40,    45,    52,    77,   181,   200,
     205,   227,   228,   243,   282,   285,   299,   302,   398,   505,
     508,   509,   510,   512,   513,   514,   515,   516,   517,   919,
     920,   921,   923,   950,   484,   900,   308,   891,   525,   786,
     521,   971,   950,   523,   949,   786,     3,   119,   247,   543,
     880,   971,  1000,   101,   119,  1001,   119,  1001,   972,    40,
     972,   522,   525,   671,   525,   522,   785,   964,   965,    40,
     257,   979,   658,   199,   360,   225,   392,   780,   780,    30,
     514,   796,   797,   891,    58,   780,   790,   168,   278,   816,
     233,   279,   345,   395,   458,     4,     9,    30,   811,   891,
     512,   513,   812,   813,   891,   893,   828,   829,   803,   802,
     800,   801,   171,   831,   292,   833,   800,   828,   926,   242,
     963,    71,    79,    90,   173,   198,   333,   453,   600,   610,
     625,   972,    79,    90,   776,    90,   776,   521,   435,   521,
     598,   253,   456,   598,    90,   525,   435,   963,   863,   543,
      58,   545,   543,   543,   110,   259,   267,    58,   435,   483,
     507,   542,   272,   378,   542,   544,   848,    90,   435,   776,
     378,   963,   435,   378,   972,   573,   928,   928,   929,   522,
     525,   794,   795,    13,    14,   520,   532,   435,   617,   622,
     972,   483,   576,   157,   971,   963,   349,   424,   474,   646,
     280,   473,   714,   157,    97,   583,   650,   651,   683,  1006,
     149,   861,   963,   282,   541,   652,   282,    40,   521,   618,
     282,   618,   282,   521,   647,   198,   612,   687,   972,     3,
     665,   521,   927,   970,   667,   930,   878,   878,    39,   862,
     433,   433,   970,   970,   858,   972,   861,   858,   519,   519,
     970,   970,   435,   435,   435,   435,   664,   977,   967,   523,
     964,   966,   966,   977,   522,   673,   679,     4,   970,     4,
     970,   575,   582,   981,    54,    99,   125,   146,   150,   172,
     175,   193,   287,   295,   316,   343,   579,   971,    40,   522,
     891,   522,   522,   522,   176,   522,   522,   525,   522,   322,
     934,   522,   892,   892,    11,    15,    18,    19,    20,   205,
     227,   299,   508,   509,   510,   512,   513,   514,   515,   516,
     517,   921,   892,   522,   850,   851,   897,   171,   176,   937,
     938,   525,   522,    40,   939,   926,   939,   939,   176,   522,
      40,   842,   521,     4,     9,   804,   806,   807,   972,   965,
     954,   952,   182,   247,   424,   428,   430,   456,   787,   963,
     480,   854,   840,   297,   461,   847,   840,   230,   840,   840,
     855,   856,   973,   521,   855,   973,   525,   522,   525,   522,
     525,   657,   690,   774,   777,   986,   926,   927,   479,   942,
     943,   514,   971,     8,    15,    18,    19,    20,   508,   509,
     510,   512,   513,   514,   515,   516,   517,   919,   924,   972,
     522,   926,   521,   972,   360,   961,   171,   520,   522,   525,
     525,   529,   532,   926,   891,   890,   890,   861,   891,   891,
     891,   891,   891,   891,   891,     5,   981,   982,   433,    44,
     421,   951,   977,   891,   891,   521,   778,   940,   135,   164,
     282,   287,   292,   443,   454,   891,   287,   521,   891,   435,
      52,   181,   200,   205,   243,   398,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,    30,    37,   403,   918,
     947,   187,   167,   901,   373,   521,   914,   955,   176,   837,
     928,   514,   837,   521,   971,   972,   963,   989,   558,   963,
     891,   525,   522,   521,   712,   740,   744,   745,   461,   660,
     692,   963,   521,   696,   706,   707,   709,   972,    41,   128,
     798,   798,   525,   461,   798,   272,   780,   373,   374,   512,
     513,   813,   815,   893,   395,   233,   298,   321,   321,   525,
     516,     4,   814,   970,   814,   373,   374,   815,   962,   963,
     286,   400,   834,   829,   801,   522,   358,   555,   521,   198,
     610,   966,   233,   282,   233,   461,   521,   603,   860,   861,
     966,   972,   198,   966,   198,   972,    26,   140,   392,   551,
     554,   594,   608,   981,   966,   602,   621,   981,   966,   552,
     966,   358,   392,   541,   555,   543,   977,   966,   543,   977,
     966,   543,   358,   392,   555,   966,   966,   966,   966,   358,
     392,   555,   966,   966,   794,   794,   794,   469,   929,   199,
     363,   793,   891,   891,   891,   948,   338,   572,   522,   525,
     295,   176,   435,   567,   963,   176,   474,   633,   963,   963,
     963,   425,   963,   302,   629,   521,   778,   521,   157,   157,
     156,   777,   243,   600,   610,   613,   616,   626,   628,   972,
     483,   485,   605,   157,   483,   688,   157,   522,   928,    40,
     282,   297,   926,   522,   522,   665,   522,   519,   504,   504,
     522,   522,   522,   525,   861,   522,   970,   520,   970,   522,
     522,   883,   885,   886,   887,   886,   887,   887,   665,   967,
     665,   297,   665,   522,   525,   514,   521,   543,   574,   678,
      40,   571,   971,   571,   282,   287,   343,   571,    58,   571,
     573,   861,   522,   891,   891,   891,   937,   861,   892,   892,
     892,   892,   892,   135,   282,   292,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   522,   525,    40,   852,
     891,   891,   938,   937,   861,   522,   522,   522,   926,   861,
     965,   321,   516,   321,   374,   516,   521,   521,   522,   786,
     428,   430,   428,   430,   963,   788,   788,   788,   891,   187,
     817,   891,   521,   840,   847,   522,   525,   861,   855,   522,
     999,   861,   522,   520,   891,   144,   943,   944,   957,   522,
     522,   523,   522,   965,   521,   891,   958,   972,   891,   915,
     891,   522,   522,   504,   892,   892,   150,   926,   176,   135,
     164,   287,   292,   443,   454,   521,   150,   924,   891,   421,
     951,   891,   940,   891,   435,   521,   778,   521,   521,   160,
     902,   838,   839,   854,   794,   957,   854,   970,   890,   979,
     774,   510,    30,    37,   396,   743,   232,   525,   737,   839,
     480,   659,   119,   310,   521,   691,   777,    40,   702,   709,
     525,   837,   510,   950,   506,   799,   799,   797,   299,   919,
     922,   799,     4,   970,   815,   298,   458,   812,   525,   252,
     435,   891,   282,   625,   521,   157,   521,   603,   208,   622,
     623,   584,    40,   180,   593,   619,   584,    26,   140,   362,
     364,   392,   548,   549,   550,   556,   557,   157,   665,   157,
     665,   594,   608,   594,   522,   525,   587,   971,   522,   525,
     510,   523,   435,   378,    90,   435,   776,   378,   435,   435,
     435,   378,   793,   793,   793,   929,   289,   289,   522,   520,
     411,   412,   581,   971,   617,   572,   176,   971,   963,    40,
     521,   618,   647,   521,   649,   360,   424,   654,   655,   971,
     622,   963,   633,   963,   966,   483,   632,   963,   522,   525,
     295,   598,   295,   297,   597,   963,   598,    40,   963,   522,
     424,   891,   157,   963,   522,   862,   970,   881,   881,   862,
     972,   862,   520,   520,   977,   575,   569,   580,   678,   971,
     971,   287,   622,   514,   622,   971,   514,   622,   971,   522,
     522,   938,   176,   135,   292,   521,   853,   850,   521,   522,
     522,   522,   972,   804,   854,   788,   788,   788,   788,   963,
     963,   963,    58,   192,   826,   965,   856,    77,   857,   522,
     432,   891,   148,   961,   924,   522,   891,   958,   959,   960,
      40,   205,   522,   890,   891,    36,    36,   891,   522,   891,
     176,   521,   930,   891,   522,   150,   892,   892,   150,   150,
     891,   891,   795,   480,   891,   307,   906,   525,   817,   793,
     961,   817,   522,   522,    25,   319,   320,   396,   399,   436,
     478,   738,   741,     9,   396,   742,     9,    16,   508,   513,
     519,   521,   753,   754,   755,   756,   763,   764,   765,   768,
     769,   743,   745,   480,   733,   891,   366,   700,   467,   423,
     460,   701,   695,   705,   972,   297,   698,   972,   522,   525,
     696,   659,   891,   168,   237,   521,   799,   298,   963,   966,
     522,   157,   623,   610,   623,   584,   612,   525,   522,   121,
     212,   279,   282,   609,   521,    33,    58,   630,   619,    71,
      77,    90,   119,   121,   212,   282,   287,   333,   351,   453,
     461,   589,   590,   604,   180,   119,   197,   282,   598,   542,
     111,   119,   180,   282,   410,   413,   544,   598,   392,   550,
     447,   966,   972,   554,   621,     3,    48,    54,    78,    80,
      86,    98,   102,   103,   104,   105,   108,   175,   177,   180,
     181,   200,   214,   227,   228,   230,   241,   243,   255,   275,
     281,   285,   299,   306,   308,   326,   369,   391,   393,   398,
     417,   426,   446,   452,   460,   471,   512,   513,   543,   585,
     624,   634,   640,   861,   922,   971,   974,   981,   966,   966,
     966,   966,   966,   966,   966,   966,   966,   966,   522,   522,
     522,   794,   542,   581,   971,   521,   777,   616,   688,    40,
     723,   728,   963,   629,   198,   963,   522,   525,   522,   652,
      40,   521,   669,   111,   279,   607,   605,   613,    83,   618,
     777,   647,   777,   612,   461,   685,   520,   861,   665,   522,
     525,   622,   892,   176,   521,   930,   855,   522,   525,   522,
     817,   963,   963,   963,   963,    30,   100,   188,   372,   514,
     521,   818,   819,   820,   821,   822,   823,   824,   891,   891,
     482,   903,   522,   977,   891,   522,   525,   522,   972,   891,
     893,   891,   891,   891,   930,   522,   891,    36,    36,   891,
     891,   150,   522,   522,   891,   522,   521,   907,   972,   826,
     522,   826,   971,   738,   741,   738,   738,   738,   741,   741,
     741,   513,   763,   509,   519,   740,   752,   712,   766,   767,
     755,   755,   526,   746,   767,   512,   514,   527,   528,   748,
     282,   505,   512,   513,   770,   893,   914,    80,   953,   466,
     522,   525,   950,    88,   700,   510,   709,   700,   924,   584,
     610,   522,   522,   483,   615,   122,   201,   210,   121,   463,
     891,   119,    40,   521,   977,   966,   892,   122,   201,   121,
     287,   233,   963,   615,    85,   630,   198,   287,   543,   891,
     630,   287,   512,   513,   546,   972,   861,   665,   665,   255,
     417,   974,   978,   510,   435,   435,   793,   573,   461,   568,
     570,   622,   632,   522,    40,   424,   891,   525,   717,   279,
     339,   732,    40,   424,   282,   521,   971,   688,   156,   777,
     616,   632,   111,   154,   206,   597,   124,   140,   332,   688,
     483,  1007,    40,   297,   684,   972,   521,   580,   892,   930,
     522,   522,     9,   359,   810,   826,   521,   394,   521,   522,
     525,   904,   905,   972,   342,   827,   958,   520,   198,   522,
     891,   891,   891,   522,   908,   972,   903,   971,   903,   187,
     190,   739,   519,   741,   520,   227,   532,   761,   762,   522,
     512,   755,   520,     9,   747,   770,   770,   770,   770,    11,
      15,    16,    17,    18,    19,    20,    36,    45,    52,    77,
     181,   200,   205,   227,   228,   243,   282,   285,   302,   398,
     505,   508,   509,   510,   512,   513,   514,   515,   516,   517,
     921,   308,   521,   525,   777,   310,   777,   695,   297,   521,
     693,   891,   522,   351,   615,   521,   606,   584,   522,   197,
     521,   891,   282,   590,   615,   618,   966,    40,   157,   857,
     978,   516,   585,   966,   966,   522,   542,   126,   522,   605,
     777,   777,   723,   522,   339,    38,   521,   726,   731,   234,
     712,   963,   157,    40,   966,   632,   522,    30,    82,    91,
     120,   197,   209,   410,   413,   601,   601,   374,   374,    40,
      63,    71,   247,   424,   891,   963,   521,   699,   708,   897,
     972,   522,   522,   521,   903,   926,   521,   926,   820,   525,
      40,   891,   461,   805,   891,   316,   909,   827,   827,   756,
     748,   733,   521,   531,   712,   760,   526,   513,   763,   525,
     861,   770,   770,   770,   770,   770,   770,   770,   433,   421,
     951,   977,   770,   770,   940,   135,   164,   282,   287,   292,
     443,   454,   770,   287,   770,   435,    52,   200,   205,   243,
     398,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   914,   735,   736,   955,   701,    90,   708,   136,   963,
     584,   611,   614,   981,   414,   476,   591,   592,   521,   586,
     891,   522,   257,   627,   197,   461,   553,   516,   447,   573,
     971,   688,   597,  1007,   717,   142,   355,   715,   712,   727,
     729,    30,   712,   521,   963,   777,   669,   605,   777,    71,
     300,    71,   777,   685,   891,   522,   525,    77,   703,   703,
       9,   827,   522,   819,   522,   905,   907,   376,   520,    58,
     794,   805,   805,   733,    96,   751,   759,   760,   760,   748,
     747,   504,   892,   892,   150,   176,   135,   164,   287,   292,
     443,   454,   521,   150,   770,   421,   951,   770,   940,   770,
     435,   522,   525,   466,   966,   522,   283,   458,   618,   522,
     525,   510,   541,   522,   279,   599,   177,   315,   399,   297,
     595,   596,   620,   586,   891,   447,    40,   425,    40,   522,
     525,    80,   205,   722,   521,  1007,   632,   597,  1007,   300,
     300,   521,   522,   688,   699,   977,   704,   977,   704,   522,
     805,   522,   807,   925,   344,   374,   910,   751,   892,   522,
     526,   530,   529,   770,    36,    36,   770,   770,   176,   521,
     930,   770,   150,   892,   892,   150,   150,   770,   522,   735,
     777,   854,   392,   627,   614,   585,   522,   592,   210,   124,
     458,   297,   620,   297,   595,   777,   521,   712,   727,   152,
     730,   963,   708,   703,   854,   798,   798,    52,   101,   449,
     891,   911,   912,   911,   522,   119,   750,   757,   760,   758,
     760,   770,   770,   770,   930,   522,   770,    36,    36,   770,
     770,   150,   963,   707,   596,    62,   279,   365,   392,   588,
     588,  1007,   725,   728,   521,   521,   522,   704,   799,   799,
     912,   373,   170,   328,   170,   328,     4,     9,   749,   526,
     530,   522,   770,   770,   770,   854,   584,    24,   119,   287,
     525,   724,   404,   729,   712,   721,   688,   798,    36,   757,
     758,   725,   522,   233,   719,   720,   522,   522,   525,   854,
     799,   912,   724,   521,   718,   351,   963,   712,   964,   718,
     522,   130,   720,   963,   718,   732,   234,   712,   722
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   535,   536,   537,   537,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   547,   547,   547,
     547,   547,   547,   547,   547,   548,   548,   549,   549,   550,
     550,   550,   550,   551,   551,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   552,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   552,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   553,   553,   554,   554,   554,   554,
     555,   555,   556,   557,   557,   557,   656,   656,   656,   656,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   776,   776,   690,   691,   691,   691,   691,
     691,   692,   692,   693,   693,   693,   694,   694,   695,   696,
     696,   697,   697,   697,   698,   698,   698,   699,   699,   699,
     700,   700,   701,   701,   702,   702,   703,   703,   704,   704,
     705,   705,   706,   706,   707,   707,   708,   708,   709,   653,
     653,   653,   654,   654,   655,   655,   771,   771,   771,   643,
     643,   643,   643,   643,   643,   643,   644,   651,   651,   652,
     652,   668,   668,   668,   669,   669,   540,   540,   541,   541,
     542,   542,   542,   543,   543,   543,   543,   544,   544,   544,
     544,   544,   544,   544,   544,   544,   544,   544,   544,   544,
     544,   545,   545,   546,   546,   546,   984,   984,   984,   984,
     984,   984,   985,   985,   985,   987,   712,   712,   712,   713,
     714,   714,   715,   715,   716,   717,   717,   718,   719,   720,
     721,   721,   722,   722,   723,   724,   724,   725,   726,   726,
     727,   727,   728,   728,   729,   729,   730,   730,   731,   731,
     732,   732,   732,   733,   733,   734,   735,   736,   736,   737,
     737,   738,   738,   738,   739,   739,   739,   740,   740,   741,
     741,   741,   741,   741,   742,   742,   743,   743,   743,   743,
     743,   743,   744,   744,   745,   746,   746,   747,   747,   748,
     748,   748,   748,   748,   749,   749,   750,   750,   751,   751,
     752,   753,   754,   754,   755,   755,   755,   756,   756,   757,
     757,   758,   758,   759,   759,   759,   760,   760,   760,   761,
     761,   762,   762,   763,   763,   763,   764,   764,   765,   765,
     766,   766,   767,   768,   768,   769,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   583,   583,   583,
     584,   584,   585,   585,   585,   585,   585,   585,   586,   586,
     587,   588,   588,   588,   588,   588,   589,   589,   589,   589,
     590,   590,   590,   590,   590,   590,   590,   590,   591,   591,
     592,   592,   593,   593,   593,   594,   595,   596,   596,   596,
     596,   596,   597,   597,   597,   597,   598,   599,   599,   600,
     600,   601,   601,   601,   601,   601,   601,   601,   601,   602,
     602,   603,   604,   604,   604,   604,   605,   605,   605,   605,
     606,   607,   607,   607,   608,   609,   609,   609,   609,   609,
     609,   610,   610,   611,   611,   612,   613,   613,   613,   614,
     614,   615,   615,   616,   616,   616,   617,   618,   618,   619,
     619,   620,   621,   621,   621,   621,   622,   622,   623,   623,
     624,   624,   624,   625,   625,   625,   625,   625,   625,   626,
     626,   627,   627,   627,   627,   628,   629,   629,   629,   629,
     629,   629,   629,   629,   630,   630,   661,   661,   661,   661,
     661,   661,   661,   661,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   663,   663,   663,   663,   663,   663,   664,   664,
     665,   665,   665,   666,   666,   666,   667,   667,   645,   645,
     645,   645,   645,   645,   646,   646,   647,   647,   986,   566,
     566,   567,   567,   568,   568,   569,   569,   570,   570,   571,
     571,   572,   572,   573,   573,   574,   574,   574,   574,   574,
     575,   576,   576,   577,   577,   578,   578,   579,   579,   579,
     579,   579,   579,   579,   579,   579,   579,   579,   579,   579,
     579,   579,   579,   580,   581,   581,   581,   582,   582,   777,
     777,   778,   778,   779,   779,   779,   779,   779,   779,   779,
     779,   780,   780,   781,   781,   782,   782,   782,   782,   782,
     782,   782,   782,   782,   782,   783,   783,   783,   784,   784,
     785,   786,   786,   787,   787,   787,   787,   787,   787,   787,
     787,   787,   788,   788,   789,   789,   789,   790,   791,   791,
     792,   792,   793,   793,   793,   794,   794,   795,   795,   795,
     796,   796,   797,   797,   798,   798,   798,   799,   799,   799,
     800,   800,   800,   800,   801,   801,   802,   802,   802,   802,
     803,   803,   804,   804,   804,   804,   804,   804,   805,   805,
     806,   806,   807,   807,   807,   807,   808,   809,   809,   810,
     810,   811,   811,   811,   811,   811,   812,   813,   813,   813,
     814,   814,   815,   815,   816,   816,   817,   817,   817,   817,
     818,   818,   819,   819,   820,   820,   820,   820,   820,   821,
     822,   823,   824,   825,   825,   826,   826,   827,   827,   828,
     828,   829,   829,   830,   830,   831,   832,   832,   832,   832,
     833,   833,   834,   834,   834,   835,   835,   836,   836,   837,
     837,   838,   838,   839,   839,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   841,   841,   841,   841,   841,   841,
     841,   842,   842,   842,   842,   843,   843,   844,   844,   844,
     844,   844,   845,   845,   845,   845,   846,   846,   847,   847,
     848,   848,   848,   848,   849,   849,   850,   851,   851,   852,
     852,   853,   853,   854,   854,   855,   855,   856,   857,   857,
     858,   858,   859,   859,   860,   860,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   862,   862,   862,   863,   863,
     863,   863,   863,   863,   863,   864,   864,   864,   864,   865,
     866,   866,   867,   867,   867,   867,   867,   867,   867,   867,
     867,   867,   867,   868,   868,   869,   869,   870,   870,   871,
     872,   873,   873,   874,   874,   875,   876,   877,   877,   877,
     877,   877,   877,   878,   878,   879,   879,   879,   879,   880,
     881,   881,   881,   882,   882,   883,   883,   884,   884,   885,
     885,   886,   886,   887,   887,   888,   888,   889,   889,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   894,   894,   894,   894,   894,   895,   895,   895,
     895,   895,   895,   895,   896,   896,   897,   897,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   899,   899,   900,
     900,   901,   901,   901,   902,   902,   903,   903,   904,   904,
     905,   906,   906,   906,   907,   908,   908,   909,   909,   910,
     910,   910,   911,   911,   912,   912,   912,   912,   912,   913,
     913,   914,   914,   915,   916,   916,   917,   917,   918,   918,
     918,   919,   919,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   921,   921,   922,   922,
     923,   923,   923,   923,   923,   923,   923,   923,   924,   924,
     925,   925,   926,   926,   927,   927,   928,   928,   929,   929,
     929,   930,   930,   931,   931,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   933,   933,   934,   935,   935,
     936,   936,   936,   936,   936,   936,   937,   938,   939,   939,
     939,   940,   940,   941,   942,   942,   943,   944,   944,   945,
     945,   946,   946,   947,   947,   947,   948,   948,   949,   949,
     950,   950,   951,   951,   952,   952,   953,   953,   954,   954,
     955,   955,   955,   955,   955,   956,   956,   957,   957,   958,
     959,   959,   960,   960,   961,   961,   961,   962,   962,   963,
     963,   964,   964,   965,   965,   966,   967,   968,   968,   969,
     969,   969,   969,   969,   969,   969,   969,   969,   969,   969,
     969,   969,   969,   970,   971,   972,   972,   972,   972,   973,
     973,   974,   974,   974,   975,   975,   975,   976,   976,   976,
     977,   977,   978,   978,   979,   979,   980,   981,   981,   981,
     981,   982,   982,   983,   772,   773,   773,   774,   774,   774,
     774,   648,   648,   649,   649,   650,   650,   650,   650,   683,
     683,   684,   685,   685,   686,   686,   687,   687,   688,   688,
     689,   689,   539,   539,   539,   539,   539,   539,   564,   564,
     565,   565,   681,   681,   682,   670,   670,   670,   670,   671,
     671,   672,   672,   672,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   674,   674,   674,   675,   675,   676,
     676,   677,   677,   678,   678,   678,   678,   679,   680,   680,
     996,   996,   996,   996,   997,   997,   997,   997,   998,   998,
     998,   998,   999,   999,  1000,  1000,  1000,  1000,  1000,  1000,
    1000,  1001,  1001,   710,   710,   710,   711,   711,   988,   988,
     988,   988,   988,   989,   989,   989,   989,   989,   990,   990,
     991,   991,   992,   992,   657,   657,   658,   658,   658,   659,
     659,   660,   660,   558,   558,   559,   560,   560,   561,   561,
     562,   562,   993,   994,   994,   995,   995,   995,  1002,  1002,
    1002,  1002,  1002,  1002,  1002,  1002,  1003,  1003,  1004,  1004,
    1005,  1005,   563,  1006,  1006,  1006,  1006,  1006,  1007,  1007,
    1007,  1007,   631,   631,   631,   632,   632,   632,   633,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     8,     1,     4,     4,     7,
       2,     1,     3,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,
       8,     5,     1,     0,     1,     3,     2,     4,     5,     3,
       4,     6,     5,     5,     8,     7,     1,     5,     8,     1,
       0,     3,     9,    12,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     0,     2,     1,     1,     1,     5,
       1,     1,     1,     1,    16,     3,     0,     3,     2,     2,
       1,     3,     5,     0,     5,     3,     0,    13,     1,     0,
       1,     3,     1,     3,     1,     3,     4,     0,     4,     3,
       2,     2,     0,     2,     0,    13,     1,     1,     3,     2,
       0,     1,     1,     0,     1,     1,     0,     2,     0,     2,
       2,     2,     2,     1,     1,     0,     3,     4,     3,     2,
       3,     0,     1,     3,     3,     1,     3,     1,     0,     1,
       1,     1,     5,     0,     1,     1,     2,     0,     3,     0,
       5,     4,     1,     1,     2,     2,     0,     1,     3,     1,
       3,     1,     3,     1,     3,     3,     1,     2,     3,     2,
       0,     1,     1,     1,     2,     1,     2,     3,     2,     1,
       1,     0,     4,     2,     5,     3,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     4,     6,     1,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     8,    11,
      10,     7,    10,     9,     1,     1,     2,     3,     8,    11,
       9,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     0,
       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     1,
       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,
       5,     1,     1,     3,     0,    11,    11,    10,    12,     1,
       2,     5,     4,     4,     4,     2,     2,     3,     1,     3,
       6,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     5,
       1,     3,     4,     3,     1,     1,     0,     2,     2,     0,
       2,     2,     1,     1,     1,     0,     2,     4,     5,     4,
       2,     3,     2,     2,     2,     2,     1,     2,     3,     0,
       1,     0,     5,     1,     4,     6,     2,     1,     0,     4,
       0,     1,     1,     2,     2,     2,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     0,
       1,     3,     1,     2,     1,     1,     1,     1,     1,     2,
       4,     4,     5,     1,     1,     2,     0,     2,     0,     1,
       3,     1,     0,     1,     2,     3,     2,     4,     2,     3,
       2,     0,     1,     2,     0,     4,     5,     1,     2,     2,
       0,     1,     3,     1,     2,     3,     3,     3,     3,     3,
       3,     1,     4,     2,     3,     4,     5,     4,     5,     4,
       4,     5,     2,     4,     1,     1,     0,     1,     4,     5,
       4,     0,     2,     2,     2,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     1,     0,     2,     3,     5,     6,
       2,     3,     5,     5,     5,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     4,     1,     1,     1,     1,     2,
       3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
       2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
       3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     3,     3,     5,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     4,     6,
       1,     6,     4,     1,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     5,     6,     6,     7,     1,     1,     2,
       2,     2,     1,     3,     1,     2,     4,     1,     1,     2,
       2,     4,     1,     1,     3,     3,     1,     3,     6,     7,
       9,     7,     7,     4,     5,     1,     1,     1,     5,     1,
       1,     4,     1,     4,     1,     4,     1,     4,     1,     1,
       1,     1,     1,     1,     6,     6,     4,     4,     4,     4,
       6,     5,     5,     5,     4,     6,     4,     7,     9,     5,
       0,     5,     4,     0,     1,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,
       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,
       3,     1,     5,     3,     1,     3,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     4,
       1,     4,     1,     2,     1,     2,     1,     2,     1,     3,
       1,     3,     1,     2,     1,     0,     1,     3,     1,     3,
       3,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     3,     2,     3,     0,
       3,     3,     2,     2,     1,     0,     2,     2,     3,     2,
       1,     1,     3,     5,     1,     2,     4,     2,     0,     1,
       0,     1,     2,     2,     3,     5,     1,     0,     1,     2,
       0,     2,     1,     0,     1,     0,     1,     3,     1,     2,
       3,     2,     1,     3,     5,     4,     2,     1,     0,     3,
       1,     3,     1,     2,     4,     2,     0,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     1,     1,     2,     1,
       1,     2,     1,     1,     2,     7,     2,     5,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     5,     3,     0,     1,     1,     1,
       1,     4,     7,     2,     0,     1,     1,     1,     1,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,     6,     8,     6,     8,     6,     8,     3,     2,
       1,     0,     4,     6,     3,     2,     4,     3,     5,     1,
       0,     1,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     1,     3,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     3,     2,     2,     3,     1,     1,     4,     5,
       5,     4,     6,     1,     1,     1,     1,     1,     1,     0,
       1,     3,     1,     0,     7,     3,     1,     2,     3,     2,
       0,     2,     0,     2,     4,     5,     3,     5,     1,     0,
       2,     0,     2,     1,     1,     1,     2,     3,     2,     2,
       2,     2,     3,     4,     2,     1,     1,     1,     1,     3,
       1,     3,     2,     9,    12,    11,    12,    14,     3,     4,
       4,     0,     7,    10,     9,     2,     3,     0,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 542 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 17957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 558 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 17973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 570 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 17984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 620 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 17990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 18563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 18572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 18580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 18604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 18845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 18851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-5].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 18864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 18916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 18924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 18933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 18945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_conf_expr: ON CONSTRAINT name  */
#line 82 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 18957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_conf_expr: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 18965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_with_clause: with_clause  */
#line 97 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 18971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_with_clause: %empty  */
#line 98 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 18977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* insert_column_item: ColId opt_indirection  */
#line 104 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 18989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* set_clause: set_target '=' a_expr  */
#line 116 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 18998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_or_action: OR REPLACE  */
#line 146 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* opt_or_action: OR IGNORE_P  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_or_action: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 162 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 172 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_on_conflict: %empty  */
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 188 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 199 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 210 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* returning_clause: RETURNING target_list  */
#line 224 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* returning_clause: %empty  */
#line 225 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* override_kind: USER  */
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* override_kind: SYSTEM_P  */
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* set_target_list: set_target  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* set_target_list: set_target_list ',' set_target  */
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_collate: COLLATE any_name  */
#line 244 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_collate: %empty  */
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_class: any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_class: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* insert_column_list: insert_column_item  */
#line 256 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 258 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* set_clause_list: set_clause  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause_list: set_clause_list ',' set_clause  */
#line 264 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* set_clause_list_opt_comma: set_clause_list  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_params: index_elem  */
#line 272 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_params: index_params ',' index_elem  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* set_target: ColId opt_indirection  */
#line 279 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name  */
#line 10 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* CreateDatabaseStmt: CREATE_P opt_extension_name DATABASE qualified_name  */
#line 16 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
				    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
				    n->extension = (yyvsp[-2].str);
                    n->name = (yyvsp[0].range);
                    (yyval.node) = (PGNode *)n;
				}
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name  */
#line 29 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name FROM Sconst  */
#line 35 "third_party/libpg_query/grammar/statements/create_database.y"
                {
                    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
                    n->name = (yyvsp[-2].range);
                    n->path = (yyvsp[0].str);
                    (yyval.node) = (PGNode *)n;
                }
#line 19406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name FROM Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* opt_extension_name: Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/create_database.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* OptSeqOptList: SeqOptList  */
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* OptSeqOptList: %empty  */
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 19474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 19537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 19579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 19585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 19591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 19597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 19603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 19642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 19650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 19682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 19690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 19707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 19737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 19743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 19749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 19755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 19761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 19782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 19792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 19837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 19843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 19882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 19894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 19900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 19906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 19918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 19947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* Discriminator: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 19958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 133 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 19973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 147 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 19979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* EdgeTableDefinitionList: %empty  */
#line 149 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 19985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 157 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-12].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-10].list);
				n->src_name = (yyvsp[-9].range);
				n->src_pk = (yyvsp[-8].list);
				n->dst_fk = (yyvsp[-6].list);
				n->dst_name = (yyvsp[-5].range);
				n->dst_pk = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 20006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* IdentOptionalAs: PGQ_IDENT  */
#line 182 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 20012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 184 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 20018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* QualifiednameOptionalAs: qualified_name  */
#line 188 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 20024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 190 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 20030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* PropertiesList: IdentOptionalAs  */
#line 194 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* ExceptOptional: %empty  */
#line 204 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 20054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 20063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* PropertiesClause: NO PROPERTIES  */
#line 218 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 221 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* PropertiesClause: %empty  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 20087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 232 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 20093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* GraphTableWhereOptional: %empty  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 20099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* GraphTableStmt: '(' PGQ_IDENT ',' MATCH PathPatternList KeepOptional GraphTableWhereOptional COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-11].str);
				n->paths = (yyvsp[-8].list);
				if ((yyvsp[-7].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-7].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 20125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* ColumnSpec: target_el  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 20131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* ColumnList: ColumnSpec  */
#line 268 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* KeepOptional: KEEP PathPrefix  */
#line 274 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* KeepOptional: %empty  */
#line 276 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 20155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* GroupOrGroupsOptional: GROUP_P  */
#line 284 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* GroupOrGroupsOptional: GROUPS  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* GroupOrGroupsOptional: %empty  */
#line 288 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* PathVariableOptional: PGQ_IDENT '='  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 20179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* PathVariableOptional: %empty  */
#line 294 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 298 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 20191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 300 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 20197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 302 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 20203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 304 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 20209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* PathModeOptional: PathOrPathsOptional  */
#line 306 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* TopKOptional: ICONST  */
#line 310 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* TopKOptional: %empty  */
#line 312 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 317 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 329 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 341 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* PathPrefix: ALL PathModeOptional  */
#line 353 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 365 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 20302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* PathPrefix: %empty  */
#line 377 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* PathPatternList: PathPattern  */
#line 391 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 394 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 20355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* PatternUnion: '|'  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 20361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* PatternUnion: '|' '+' '|'  */
#line 425 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* KleeneQuantifierOptional: ICONST  */
#line 429 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* KleeneQuantifierOptional: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 20379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* KleeneOptional: '*'  */
#line 437 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* KleeneOptional: '+'  */
#line 446 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* KleeneOptional: '?'  */
#line 455 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 464 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* KleeneOptional: %empty  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* CostNum: ICONST  */
#line 483 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* CostNum: FCONST  */
#line 485 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* CostDefault: DEFAULT CostNum  */
#line 489 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* CostDefault: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* CostOptional: COST b_expr CostDefault  */
#line 496 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 20476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* CostOptional: %empty  */
#line 506 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 516 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 528 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 20510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* PathElement: VertexPattern  */
#line 536 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* PathElement: EdgePattern  */
#line 538 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* PathSequence: EnclosedSubPath PathSequence  */
#line 543 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 20548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* PathSequence: PathElement PathSequence  */
#line 565 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 20554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* PathSequence: %empty  */
#line 567 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 20560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* PathConcatenation: PathSequence  */
#line 571 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 574 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* OrLabelExpression: LabelExpression  */
#line 584 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* AndLabelExpression: LabelExpression  */
#line 597 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 600 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ComposedLabelExpression: LabelExpression  */
#line 610 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 613 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 622 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* LabelExpression: PGQ_IDENT  */
#line 633 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 20655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* LabelExpression: '!' LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 20667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 649 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 653 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* LabelExpressionOptional: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ArrowRight: '-'  */
#line 667 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 20691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ArrowRight: '-' '>'  */
#line 669 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 20697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ArrowRight: LAMBDA_ARROW  */
#line 671 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 20703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ArrowLeftBracket: '-' '['  */
#line 675 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 20709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ArrowLeftBracket: '<' '-' '['  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 20715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* AbbreviatedEdge: '<' ArrowRight  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 20724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* AbbreviatedEdge: ArrowRight  */
#line 688 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 20733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* VariableOptional: PGQ_IDENT  */
#line 695 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* VariableOptional: %empty  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 20745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 702 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 729 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* VertexPattern: '(' FullElementSpec ')'  */
#line 756 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* pgq_expr: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 790 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 20841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 792 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 20863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* pgq_expr: '+' pgq_expr  */
#line 815 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* pgq_expr: '-' pgq_expr  */
#line 817 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 819 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 821 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 823 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 825 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 827 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 829 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 831 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 833 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 835 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 837 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 839 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 841 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 843 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 850 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: NOT pgq_expr  */
#line 852 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 20977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: NOT_LA pgq_expr  */
#line 854 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 20983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 856 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 866 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 878 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 897 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 902 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 21084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 918 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 21096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 926 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 21108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 21120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr IS NULL_P  */
#line 952 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr ISNULL  */
#line 960 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 968 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 976 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr NOTNULL  */
#line 984 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 992 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 21192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1000 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 21200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: row OVERLAPS row  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 21220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1052 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1060 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1068 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1076 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1084 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1092 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1100 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 21396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 21422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 21753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 21759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 22145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 22175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* drop_type_any_name: DATABASE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 22745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* drop_type_any_name: SEQUENCE  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* drop_type_any_name: FUNCTION  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* drop_type_any_name: MACRO  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* drop_type_any_name: MACRO TABLE  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 22769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* drop_type_any_name: VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 22775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* drop_type_any_name: INDEX  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 22787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* drop_type_any_name: FOREIGN TABLE  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 22793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* drop_type_any_name: COLLATION  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* drop_type_any_name: CONVERSION_P  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* drop_type_any_name: SCHEMA  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* drop_type_any_name: STATISTICS  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* drop_type_name: ACCESS METHOD  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_name: EVENT TRIGGER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_name: EXTENSION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* drop_type_name: PUBLICATION  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* drop_type_name: SERVER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* any_name_list: any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* any_name_list: any_name_list ',' any_name  */
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_drop_behavior: CASCADE  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_drop_behavior: RESTRICT  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_drop_behavior: %empty  */
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* drop_type_name_on_any_name: POLICY  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* drop_type_name_on_any_name: RULE  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* drop_type_name_on_any_name: TRIGGER  */
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* type_name_list: Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 22931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* type_name_list: type_name_list ',' Typename  */
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 22937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 23037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 23045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 23127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 23181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 23193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 23684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* with_clause: WITH cte_list  */
#line 285 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* with_clause: WITH_LA cte_list  */
#line 292 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* with_clause: WITH RECURSIVE cte_list  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* cte_list: common_table_expr  */
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* cte_list: cte_list ',' common_table_expr  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* into_clause: INTO OptTempTableName  */
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* into_clause: %empty  */
#line 335 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* OptTempTableName: TABLE qualified_name  */
#line 385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* OptTempTableName: qualified_name  */
#line 390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* opt_table: TABLE  */
#line 396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* opt_table: %empty  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* all_or_distinct: ALL  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* all_or_distinct: DISTINCT  */
#line 402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* all_or_distinct: %empty  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* by_name: BY NAME_P  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* distinct_clause: DISTINCT  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_all_clause: ALL  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_all_clause: %empty  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_ignore_nulls: %empty  */
#line 426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* opt_sort_clause: sort_clause  */
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_sort_clause: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* sort_clause: ORDER BY sortby_list  */
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* sort_clause: ORDER BY '*' opt_asc_desc opt_nulls_order  */
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* sortby_list: sortby  */
#line 459 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 24011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* sortby_list: sortby_list ',' sortby  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 24017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 24030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 24043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* opt_asc_desc: ASC_P  */
#line 483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 24049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_asc_desc: DESC_P  */
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 24055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* opt_asc_desc: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 24061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* opt_nulls_order: %empty  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* select_limit: limit_clause offset_clause  */
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 24085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* select_limit: offset_clause limit_clause  */
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* select_limit: limit_clause  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 24097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* select_limit: offset_clause  */
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 24103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* opt_select_limit: select_limit  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* opt_select_limit: %empty  */
#line 502 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 24115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* limit_clause: LIMIT select_limit_value  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* offset_clause: OFFSET select_offset_value  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* sample_count: FCONST '%'  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* sample_count: ICONST '%'  */
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* sample_count: FCONST PERCENT  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* sample_count: ICONST PERCENT  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* sample_count: ICONST  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 24198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* sample_count: ICONST ROWS  */
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 24206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* sample_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_sample_func: ColId  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* opt_sample_func: %empty  */
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* tablesample_entry: sample_count  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_tablesample_clause: tablesample_clause  */
#line 614 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_tablesample_clause: %empty  */
#line 615 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_repeatable_clause: %empty  */
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* select_limit_value: a_expr  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* select_limit_value: ALL  */
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* select_limit_value: a_expr '%'  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* select_limit_value: FCONST PERCENT  */
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* select_limit_value: ICONST PERCENT  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* select_offset_value: a_expr  */
#line 640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* select_fetch_first_value: c_expr  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* select_fetch_first_value: '+' I_or_F_const  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* select_fetch_first_value: '-' I_or_F_const  */
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* I_or_F_const: Iconst  */
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* I_or_F_const: FCONST  */
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* row_or_rows: ROW  */
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* row_or_rows: ROWS  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* first_or_next: FIRST_P  */
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* first_or_next: NEXT  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* group_clause: GROUP_P BY ALL  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* group_clause: GROUP_P BY '*'  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* group_clause: %empty  */
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* group_by_list: group_by_item  */
#line 718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* group_by_list: group_by_list ',' group_by_item  */
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 24433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* group_by_list_opt_comma: group_by_list  */
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* group_by_list_opt_comma: group_by_list ','  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* group_by_item: a_expr  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* group_by_item: empty_grouping_set  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* group_by_item: cube_clause  */
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* group_by_item: rollup_clause  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* group_by_item: grouping_sets_clause  */
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* empty_grouping_set: '(' ')'  */
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 24483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* grouping_or_grouping_id: GROUPING  */
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* grouping_or_grouping_id: GROUPING_ID  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 24519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* having_clause: HAVING a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* having_clause: %empty  */
#line 776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* qualify_clause: QUALIFY a_expr  */
#line 780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* qualify_clause: %empty  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* for_locking_clause: for_locking_items  */
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* for_locking_clause: FOR READ_P ONLY  */
#line 786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* opt_for_locking_clause: for_locking_clause  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* opt_for_locking_clause: %empty  */
#line 791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* for_locking_items: for_locking_item  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* for_locking_items: for_locking_items for_locking_item  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 24591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* for_locking_strength: FOR UPDATE  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 24597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 24603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* for_locking_strength: FOR SHARE  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 24609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* for_locking_strength: FOR KEY SHARE  */
#line 814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* locked_rels_list: OF qualified_name_list  */
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* locked_rels_list: %empty  */
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* opt_nowait_or_skip: NOWAIT  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* opt_nowait_or_skip: %empty  */
#line 826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* values_clause_opt_comma: values_clause  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* values_clause_opt_comma: values_clause ','  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* from_clause: FROM from_list_opt_comma  */
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* from_clause: %empty  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* from_list: table_ref  */
#line 869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* from_list: from_list ',' table_ref  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* from_list_opt_comma: from_list  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* from_list_opt_comma: from_list ','  */
#line 875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* table_ref: joined_table  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* table_ref: '(' joined_table ')' alias_clause  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                                {
                                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                                }
#line 24811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* joined_table: '(' joined_table ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* alias_clause: AS ColIdOrString  */
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* alias_clause: ColId  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* opt_alias_clause: alias_clause  */
#line 1076 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_alias_clause: %empty  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* func_alias_clause: alias_clause  */
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* func_alias_clause: %empty  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* join_type: FULL join_outer  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* join_type: LEFT join_outer  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* join_type: RIGHT join_outer  */
#line 1113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* join_type: INNER_P  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* join_outer: OUTER_P  */
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* join_outer: %empty  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* join_qual: ON a_expr  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* relation_expr: qualified_name  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* relation_expr: qualified_name '*'  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* relation_expr: ONLY qualified_name  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* func_table: func_expr_windowless opt_ordinality  */
#line 1191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 25145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* rowsfrom_list: rowsfrom_item  */
#line 1219 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_col_def_list: %empty  */
#line 1224 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 25175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_ordinality: %empty  */
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* where_clause: WHERE a_expr  */
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* where_clause: %empty  */
#line 1234 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* TableFuncElementList: TableFuncElement  */
#line 1240 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_collate_clause: COLLATE any_name  */
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_collate_clause: %empty  */
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 25249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* colid_type_list: ColId Typename  */
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* opt_Typename: Typename  */
#line 1301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* opt_Typename: %empty  */
#line 1302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 25277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* Typename: SimpleTypename opt_array_bounds  */
#line 1305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 25296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 25305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 25315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* Typename: SimpleTypename ARRAY  */
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 25324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 25334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1338 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 25345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 25356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1350 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 25367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_array_bounds: %empty  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* SimpleTypename: GenericType  */
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* SimpleTypename: Numeric  */
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* SimpleTypename: Bit  */
#line 1370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* SimpleTypename: Character  */
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* SimpleTypename: ConstDatetime  */
#line 1372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* SimpleTypename: ConstInterval opt_interval  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* ConstTypename: Numeric  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* ConstTypename: ConstBit  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* ConstTypename: ConstCharacter  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* ConstTypename: ConstDatetime  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* GenericType: type_name_token opt_type_modifiers  */
#line 1413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* opt_type_modifiers: %empty  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* Numeric: INT_P  */
#line 1434 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* Numeric: INTEGER  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* Numeric: SMALLINT  */
#line 1444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* Numeric: BIGINT  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* Numeric: REAL  */
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* Numeric: FLOAT_P opt_float  */
#line 1459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* Numeric: DOUBLE_P PRECISION  */
#line 1464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* Numeric: DEC opt_type_modifiers  */
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* Numeric: BOOLEAN_P  */
#line 1487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_float: '(' Iconst ')'  */
#line 1494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_float: %empty  */
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* Bit: BitWithLength  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* Bit: BitWithoutLength  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* ConstBit: BitWithLength  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* ConstBit: BitWithoutLength  */
#line 1541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* BitWithoutLength: BIT opt_varying  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* Character: CharacterWithLength  */
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* Character: CharacterWithoutLength  */
#line 1586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* ConstCharacter: CharacterWithLength  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* ConstCharacter: CharacterWithoutLength  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* CharacterWithoutLength: character  */
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* character: CHARACTER opt_varying  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* character: CHAR_P opt_varying  */
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* character: VARCHAR  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* character: NATIONAL CHARACTER opt_varying  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* character: NATIONAL CHAR_P opt_varying  */
#line 1635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* character: NCHAR opt_varying  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* opt_varying: VARYING  */
#line 1641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* opt_varying: %empty  */
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* ConstDatetime: TIME opt_timezone  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* ConstInterval: INTERVAL  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* opt_timezone: %empty  */
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* opt_interval: year_keyword  */
#line 1725 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* opt_interval: month_keyword  */
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* opt_interval: day_keyword  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* opt_interval: hour_keyword  */
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* opt_interval: minute_keyword  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* opt_interval: second_keyword  */
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* opt_interval: millisecond_keyword  */
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* opt_interval: microsecond_keyword  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* opt_interval: year_keyword TO month_keyword  */
#line 1741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* opt_interval: day_keyword TO hour_keyword  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_interval: day_keyword TO minute_keyword  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_interval: day_keyword TO second_keyword  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_interval: hour_keyword TO minute_keyword  */
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_interval: hour_keyword TO second_keyword  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* opt_interval: minute_keyword TO second_keyword  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* opt_interval: %empty  */
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* a_expr: c_expr  */
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* a_expr: a_expr TYPECAST Typename  */
#line 1814 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* a_expr: a_expr COLLATE any_name  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 26020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* a_expr: '+' a_expr  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* a_expr: '-' a_expr  */
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* a_expr: a_expr '+' a_expr  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* a_expr: a_expr '-' a_expr  */
#line 1845 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* a_expr: a_expr '*' a_expr  */
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* a_expr: a_expr '/' a_expr  */
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* a_expr: a_expr '%' a_expr  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* a_expr: a_expr '^' a_expr  */
#line 1853 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* a_expr: a_expr POWER_OF a_expr  */
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* a_expr: a_expr '<' a_expr  */
#line 1857 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* a_expr: a_expr '>' a_expr  */
#line 1859 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* a_expr: a_expr '=' a_expr  */
#line 1861 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 1867 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* a_expr: a_expr qual_Op a_expr  */
#line 1870 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* a_expr: qual_Op a_expr  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* a_expr: a_expr qual_Op  */
#line 1874 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* a_expr: a_expr AND a_expr  */
#line 1877 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* a_expr: a_expr OR a_expr  */
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* a_expr: NOT a_expr  */
#line 1881 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* a_expr: NOT_LA a_expr  */
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* a_expr: a_expr GLOB a_expr  */
#line 1885 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* a_expr: a_expr LIKE a_expr  */
#line 1890 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 1895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 1902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* a_expr: a_expr ILIKE a_expr  */
#line 1914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 26253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 26265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 1955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 26277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 26289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* a_expr: a_expr IS NULL_P  */
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* a_expr: a_expr ISNULL  */
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* a_expr: a_expr IS NOT NULL_P  */
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* a_expr: a_expr NOT NULL_P  */
#line 2005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* a_expr: a_expr NOTNULL  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* a_expr: row OVERLAPS row  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* a_expr: a_expr IS TRUE_P  */
#line 2049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* a_expr: a_expr IS FALSE_P  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: a_expr IS UNKNOWN  */
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2089 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr IN_P in_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: DEFAULT  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: COLUMNS '(' '*' opt_except_list opt_replace_list ')'  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 26648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: COLUMNS '(' Sconst ')'  */
#line 2228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->regex = (yyvsp[-1].str);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 26660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* b_expr: c_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* b_expr: b_expr TYPECAST Typename  */
#line 2249 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* b_expr: '+' b_expr  */
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* b_expr: '-' b_expr  */
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* b_expr: b_expr '+' b_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* b_expr: b_expr '-' b_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* b_expr: b_expr '*' b_expr  */
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* b_expr: b_expr '/' b_expr  */
#line 2261 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* b_expr: b_expr '%' b_expr  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* b_expr: b_expr '^' b_expr  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* b_expr: b_expr POWER_OF b_expr  */
#line 2267 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* b_expr: b_expr '<' b_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* b_expr: b_expr '>' b_expr  */
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* b_expr: b_expr '=' b_expr  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2275 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2277 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* b_expr: b_expr qual_Op b_expr  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* b_expr: qual_Op b_expr  */
#line 2283 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* b_expr: b_expr qual_Op  */
#line 2285 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* c_expr: columnref  */
#line 2312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* c_expr: AexprConst  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* c_expr: '#' ICONST  */
#line 2315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* c_expr: indirection_expr opt_indirection  */
#line 2322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* c_expr: '$' named_param  */
#line 2334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* c_expr: row  */
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* c_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* c_expr: list_comprehension  */
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* c_expr: ARRAY select_with_parens  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* c_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2359 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* c_expr: case_expr  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* c_expr: select_with_parens  */
#line 2367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* c_expr: select_with_parens indirection  */
#line 2378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* c_expr: EXISTS select_with_parens  */
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* c_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 26985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* indirection_expr: '?'  */
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 26993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* indirection_expr: PARAM  */
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* indirection_expr: '(' a_expr ')'  */
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* indirection_expr: func_expr  */
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* func_application: func_name '(' ')'  */
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 27037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 27087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* func_application: func_name '(' '*' ')'  */
#line 2495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 27159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* func_expr: func_expr_common_subexpr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* func_expr_windowless: func_application  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 27187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* func_expr_common_subexpr: CURRENT_DATE  */
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 27195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* func_expr_common_subexpr: CURRENT_TIME  */
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 27203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* func_expr_common_subexpr: CURRENT_TIME '(' Iconst ')'  */
#line 2592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* func_expr_common_subexpr: CURRENT_TIMESTAMP  */
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 27219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* func_expr_common_subexpr: CURRENT_TIMESTAMP '(' Iconst ')'  */
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* func_expr_common_subexpr: LOCALTIME  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 27235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* func_expr_common_subexpr: LOCALTIME '(' Iconst ')'  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* func_expr_common_subexpr: LOCALTIMESTAMP  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 27251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* func_expr_common_subexpr: LOCALTIMESTAMP '(' Iconst ')'  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* func_expr_common_subexpr: CURRENT_ROLE  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 27267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* func_expr_common_subexpr: CURRENT_USER  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 27275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* func_expr_common_subexpr: SESSION_USER  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 27283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* func_expr_common_subexpr: USER  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 27291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* func_expr_common_subexpr: CURRENT_CATALOG  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 27299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_expr_common_subexpr: CURRENT_SCHEMA  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 27307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 27313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 27319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 27379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 27422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 27433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 27446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* within_group_clause: %empty  */
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 2756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* filter_clause: FILTER '(' a_expr ')'  */
#line 2757 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* filter_clause: %empty  */
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* export_clause: EXPORT_STATE  */
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* export_clause: %empty  */
#line 2763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* window_clause: WINDOW window_definition_list  */
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* window_clause: %empty  */
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* window_definition_list: window_definition  */
#line 2775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* window_definition_list: window_definition_list ',' window_definition  */
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* window_definition: ColId AS window_specification  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* over_clause: OVER window_specification  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* over_clause: OVER ColId  */
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* over_clause: %empty  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 2810 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* opt_existing_window_name: ColId  */
#line 2835 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* opt_existing_window_name: %empty  */
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* opt_partition_clause: PARTITION BY expr_list  */
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* opt_partition_clause: %empty  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* opt_frame_clause: RANGE frame_extent  */
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 27622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* opt_frame_clause: ROWS frame_extent  */
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 27632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* opt_frame_clause: %empty  */
#line 2864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* frame_extent: frame_bound  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* frame_bound: UNBOUNDED PRECEDING  */
#line 2936 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* frame_bound: CURRENT_P ROW  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* frame_bound: a_expr PRECEDING  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* frame_bound: a_expr FOLLOWING  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* qualified_row: ROW '(' ')'  */
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* row: qualified_row  */
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* row: '(' expr_list ',' a_expr ')'  */
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* dict_arg: ColIdOrString ':' a_expr  */
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* dict_arguments: dict_arg  */
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* dict_arguments_opt_comma: dict_arguments  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* sub_type: ANY  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* sub_type: SOME  */
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* sub_type: ALL  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* all_Op: Op  */
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* all_Op: MathOp  */
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* MathOp: '+'  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* MathOp: '-'  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* MathOp: '*'  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* MathOp: '/'  */
#line 3029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* MathOp: '%'  */
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* MathOp: '^'  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* MathOp: POWER_OF  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* MathOp: '<'  */
#line 3033 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* MathOp: '>'  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* MathOp: '='  */
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* MathOp: LESS_EQUALS  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* MathOp: GREATER_EQUALS  */
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* MathOp: NOT_EQUALS  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* qual_Op: Op  */
#line 3042 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* qual_all_Op: all_Op  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* subquery_Op: all_Op  */
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3058 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* subquery_Op: LIKE  */
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 27977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* subquery_Op: NOT_LA LIKE  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 27983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* subquery_Op: GLOB  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 27989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* subquery_Op: NOT_LA GLOB  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 27995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* subquery_Op: ILIKE  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 28001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* subquery_Op: NOT_LA ILIKE  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 28007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* any_operator: all_Op  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* any_operator: ColId '.' any_operator  */
#line 3086 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 28019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* expr_list: a_expr  */
#line 3090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* expr_list: expr_list ',' a_expr  */
#line 3094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* expr_list_opt_comma: expr_list  */
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* expr_list_opt_comma: expr_list ','  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* opt_expr_list_opt_comma: %empty  */
#line 3117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 28067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* func_arg_list: func_arg_expr  */
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* func_arg_expr: a_expr  */
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* type_list: Typename  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* type_list: type_list ',' Typename  */
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* extract_list: extract_arg FROM a_expr  */
#line 3165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 28137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* extract_list: %empty  */
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* extract_arg: IDENT  */
#line 3175 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* extract_arg: year_keyword  */
#line 3176 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 28155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* extract_arg: month_keyword  */
#line 3177 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 28161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* extract_arg: day_keyword  */
#line 3178 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 28167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* extract_arg: hour_keyword  */
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 28173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* extract_arg: minute_keyword  */
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 28179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* extract_arg: second_keyword  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 28185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* extract_arg: millisecond_keyword  */
#line 3182 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 28191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* extract_arg: microsecond_keyword  */
#line 3183 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 28197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* extract_arg: Sconst  */
#line 3184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* overlay_placing: PLACING a_expr  */
#line 3206 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* position_list: b_expr IN_P b_expr  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* position_list: %empty  */
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* substr_list: a_expr substr_from substr_for  */
#line 3230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* substr_list: a_expr substr_for substr_from  */
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 28254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* substr_list: a_expr substr_from  */
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* substr_list: a_expr substr_for  */
#line 3243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* substr_list: expr_list  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* substr_list: %empty  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* substr_from: FROM a_expr  */
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* substr_for: FOR a_expr  */
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3272 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* trim_list: FROM expr_list_opt_comma  */
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* trim_list: expr_list_opt_comma  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* in_expr: select_with_parens  */
#line 3278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3284 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* when_clause_list: when_clause  */
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* when_clause_list: when_clause_list when_clause  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3314 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* case_default: ELSE a_expr  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* case_default: %empty  */
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* case_arg: a_expr  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* case_arg: %empty  */
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* columnref: ColId  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* columnref: ColId indirection  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* indirection_el: '.' attr_name  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 28428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* indirection_el: '[' a_expr ']'  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* opt_slice_bound: a_expr  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* opt_slice_bound: %empty  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* indirection: indirection_el  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* indirection: indirection indirection_el  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* opt_indirection: %empty  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_indirection: opt_indirection indirection_el  */
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* opt_target_list_opt_comma: %empty  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* target_list: target_el  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* target_list: target_list ',' target_el  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* target_list_opt_comma: target_list  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* target_list_opt_comma: target_list ','  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* target_el: a_expr AS ColLabelOrString  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* target_el: a_expr IDENT  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* target_el: a_expr  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* target_el: '*' opt_except_list opt_replace_list  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* target_el: ColId '.' '*' opt_except_list opt_replace_list  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 28599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* except_list: EXCLUDE ColId  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* opt_except_list: except_list  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* opt_except_list: %empty  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* replace_list_el: a_expr AS ColId  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* replace_list: replace_list_el  */
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* replace_list: replace_list ',' replace_list_el  */
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* replace_list_opt_comma: replace_list  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* replace_list_opt_comma: replace_list ','  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* opt_replace_list: REPLACE replace_list_el  */
#line 3492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* opt_replace_list: %empty  */
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* qualified_name_list: qualified_name  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* qualified_name: ColIdOrString  */
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 28691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* qualified_name: ColId indirection  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 28721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* name_list: name  */
#line 3548 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* name_list: name_list ',' name  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* name_list_opt_comma: name_list  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* name_list_opt_comma: name_list ','  */
#line 3556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* name: ColIdOrString  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* attr_name: ColLabel  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* func_name: function_name_token  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* func_name: ColId indirection  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* AexprConst: Iconst  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* AexprConst: FCONST  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* AexprConst: Sconst opt_indirection  */
#line 3594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* AexprConst: BCONST  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* AexprConst: XCONST  */
#line 3610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* AexprConst: func_name Sconst  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3626 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* AexprConst: ConstTypename Sconst  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* AexprConst: TRUE_P  */
#line 3680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* AexprConst: FALSE_P  */
#line 3684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* AexprConst: NULL_P  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* Iconst: ICONST  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* Sconst: SCONST  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* ColId: IDENT  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* ColId: pgq_unreserved_keyword  */
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* ColId: unreserved_keyword  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* ColId: col_name_keyword  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* ColIdOrString: ColId  */
#line 3716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* ColIdOrString: SCONST  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* type_function_name: IDENT  */
#line 3723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* type_function_name: unreserved_keyword  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* type_function_name: type_func_name_keyword  */
#line 3725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* function_name_token: IDENT  */
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* function_name_token: unreserved_keyword  */
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* function_name_token: func_name_keyword  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* type_name_token: IDENT  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* type_name_token: unreserved_keyword  */
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* type_name_token: type_name_keyword  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* any_name: ColId  */
#line 3738 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* any_name: ColId attrs  */
#line 3739 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 29048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* attrs: '.' attr_name  */
#line 3743 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* attrs: attrs '.' attr_name  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 3749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* opt_name_list: %empty  */
#line 3750 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* ColLabel: IDENT  */
#line 3761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* ColLabel: other_keyword  */
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* ColLabel: unreserved_keyword  */
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* ColLabel: reserved_keyword  */
#line 3764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* ColLabelOrString: ColLabel  */
#line 3767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* ColLabelOrString: SCONST  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* named_param: IDENT  */
#line 3771 "third_party/libpg_query/grammar/statements/select.y"
                   { (yyval.str) = (yyvsp[0].str); }
#line 29114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 29138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 55 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* OptSchemaEltList: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 29277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 29283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 29301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 29313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 29319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 30085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 30099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 30107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 30118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 30129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 30141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 30153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 30221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 30227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 30239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 30245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 30268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* VariableShowStmt: show_or_describe ALL  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* var_name: ColId  */
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* var_name: var_name '.' ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* table_id: ColId  */
#line 68 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* table_id: table_id '.' ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30621 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
