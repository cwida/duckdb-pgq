/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

#if YYBISON == 1
// explicitly define stack growing support
// yacc cannot handle stack growing by default YYLTYPE is overriden - which the Postgres parser overrides with an `int`
// so we need to copy these definitions here explicitly
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
#endif

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 297 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 70,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 71,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 72,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 73,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 74,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 75,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 76,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 77,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 78,                     /* CLASS  */
  YYSYMBOL_CLOSE = 79,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 80,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 81,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 82,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 83,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 84,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 85,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 86,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 87,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 88,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 89,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 90,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 91,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 92,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 93,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 94,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 95,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 96,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 97,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 98,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 99,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 100,                     /* COPY  */
  YYSYMBOL_COST = 101,                     /* COST  */
  YYSYMBOL_CREATE_P = 102,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 103,                    /* CROSS  */
  YYSYMBOL_CSV = 104,                      /* CSV  */
  YYSYMBOL_CUBE = 105,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 106,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 107,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 108,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 109,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 110,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 111,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 112,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 113,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 114,                      /* DEC  */
  YYSYMBOL_DECADE_P = 115,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 116,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 117,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 118,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 119,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 120,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 121,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 122,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 123,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 124,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 125,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 126,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 127,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 128,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 129,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 130,              /* DESTINATION  */
  YYSYMBOL_DETACH = 131,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 132,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 133,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 134,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 135,                 /* DISTINCT  */
  YYSYMBOL_DO = 136,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 137,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 138,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 139,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 140,                     /* DROP  */
  YYSYMBOL_EACH = 141,                     /* EACH  */
  YYSYMBOL_EDGE = 142,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 143,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 144,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 145,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 146,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 147,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 148,                    /* END_P  */
  YYSYMBOL_ENUM_P = 149,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 150,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 151,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 152,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 153,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 154,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 155,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 156,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 157,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 158,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 159,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 160,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 161,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 162,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 163,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 164,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 165,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 166,                   /* FAMILY  */
  YYSYMBOL_FETCH = 167,                    /* FETCH  */
  YYSYMBOL_FILTER = 168,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 169,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 170,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 171,                /* FOLLOWING  */
  YYSYMBOL_FOR = 172,                      /* FOR  */
  YYSYMBOL_FORCE = 173,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 174,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 175,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 176,                   /* FREEZE  */
  YYSYMBOL_FROM = 177,                     /* FROM  */
  YYSYMBOL_FULL = 178,                     /* FULL  */
  YYSYMBOL_FUNCTION = 179,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 180,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 181,                /* GENERATED  */
  YYSYMBOL_GLOB = 182,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 183,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 184,                    /* GRANT  */
  YYSYMBOL_GRANTED = 185,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 186,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 187,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 188,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 189,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 190,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 191,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 192,                  /* HANDLER  */
  YYSYMBOL_HAVING = 193,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 194,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 195,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 196,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 197,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 198,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 199,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 200,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 201,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 202,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 203,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 204,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 205,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 206,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 207,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 208,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 209,                /* INCREMENT  */
  YYSYMBOL_INDEX = 210,                    /* INDEX  */
  YYSYMBOL_INDEXES = 211,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 212,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 213,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 214,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 215,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 216,                  /* INNER_P  */
  YYSYMBOL_INOUT = 217,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 218,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 219,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 220,                   /* INSERT  */
  YYSYMBOL_INSTALL = 221,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 222,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 223,                    /* INT_P  */
  YYSYMBOL_INTEGER = 224,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 225,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 226,                 /* INTERVAL  */
  YYSYMBOL_INTO = 227,                     /* INTO  */
  YYSYMBOL_INVOKER = 228,                  /* INVOKER  */
  YYSYMBOL_IS = 229,                       /* IS  */
  YYSYMBOL_ISNULL = 230,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 231,                /* ISOLATION  */
  YYSYMBOL_JOIN = 232,                     /* JOIN  */
  YYSYMBOL_JSON = 233,                     /* JSON  */
  YYSYMBOL_KEEP = 234,                     /* KEEP  */
  YYSYMBOL_KEY = 235,                      /* KEY  */
  YYSYMBOL_LABEL = 236,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 237,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 238,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 239,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 240,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 241,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 242,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 243,                     /* LEFT  */
  YYSYMBOL_LEVEL = 244,                    /* LEVEL  */
  YYSYMBOL_LIKE = 245,                     /* LIKE  */
  YYSYMBOL_LIMIT = 246,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 247,                   /* LISTEN  */
  YYSYMBOL_LOAD = 248,                     /* LOAD  */
  YYSYMBOL_LOCAL = 249,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 250,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 251,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 252,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 253,                   /* LOGGED  */
  YYSYMBOL_MACRO = 254,                    /* MACRO  */
  YYSYMBOL_MAP = 255,                      /* MAP  */
  YYSYMBOL_MAPPING = 256,                  /* MAPPING  */
  YYSYMBOL_MATCH = 257,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 258,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 259,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 260,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 261,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 262,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 263,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 264,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 265,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 266,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 267,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 268,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 269,                 /* MINVALUE  */
  YYSYMBOL_MODE = 270,                     /* MODE  */
  YYSYMBOL_MONTH_P = 271,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 272,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 273,                     /* MOVE  */
  YYSYMBOL_NAME_P = 274,                   /* NAME_P  */
  YYSYMBOL_NAMES = 275,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 276,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 277,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 278,                    /* NCHAR  */
  YYSYMBOL_NEW = 279,                      /* NEW  */
  YYSYMBOL_NEXT = 280,                     /* NEXT  */
  YYSYMBOL_NO = 281,                       /* NO  */
  YYSYMBOL_NODE = 282,                     /* NODE  */
  YYSYMBOL_NONE = 283,                     /* NONE  */
  YYSYMBOL_NOT = 284,                      /* NOT  */
  YYSYMBOL_NOTHING = 285,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 286,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 287,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 288,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 289,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 290,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 291,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 292,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 293,                 /* OBJECT_P  */
  YYSYMBOL_OF = 294,                       /* OF  */
  YYSYMBOL_OFF = 295,                      /* OFF  */
  YYSYMBOL_OFFSET = 296,                   /* OFFSET  */
  YYSYMBOL_OIDS = 297,                     /* OIDS  */
  YYSYMBOL_OLD = 298,                      /* OLD  */
  YYSYMBOL_ON = 299,                       /* ON  */
  YYSYMBOL_ONLY = 300,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 301,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 302,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 303,                  /* OPTIONS  */
  YYSYMBOL_OR = 304,                       /* OR  */
  YYSYMBOL_ORDER = 305,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 306,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 307,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 308,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 309,                  /* OUTER_P  */
  YYSYMBOL_OVER = 310,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 311,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 312,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 313,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 314,                    /* OWNED  */
  YYSYMBOL_OWNER = 315,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 316,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 317,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 318,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 319,                /* PARTITION  */
  YYSYMBOL_PASSING = 320,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 321,                 /* PASSWORD  */
  YYSYMBOL_PATH = 322,                     /* PATH  */
  YYSYMBOL_PATHS = 323,                    /* PATHS  */
  YYSYMBOL_PERCENT = 324,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 325,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 326,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 327,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 328,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 329,                  /* PLACING  */
  YYSYMBOL_PLANS = 330,                    /* PLANS  */
  YYSYMBOL_POLICY = 331,                   /* POLICY  */
  YYSYMBOL_POSITION = 332,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 333,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 334,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 335,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 336,                /* PRECISION  */
  YYSYMBOL_PREPARE = 337,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 338,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 339,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 340,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 341,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 342,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 343,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 344,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 345,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 346,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 347,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 348,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 349,                  /* QUALIFY  */
  YYSYMBOL_QUARTER_P = 350,                /* QUARTER_P  */
  YYSYMBOL_QUARTERS_P = 351,               /* QUARTERS_P  */
  YYSYMBOL_QUOTE = 352,                    /* QUOTE  */
  YYSYMBOL_RANGE = 353,                    /* RANGE  */
  YYSYMBOL_READ_P = 354,                   /* READ_P  */
  YYSYMBOL_REAL = 355,                     /* REAL  */
  YYSYMBOL_REASSIGN = 356,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 357,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 358,                /* RECURSIVE  */
  YYSYMBOL_REF = 359,                      /* REF  */
  YYSYMBOL_REFERENCES = 360,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 361,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 362,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 363,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 364,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 365,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 366,                  /* RELEASE  */
  YYSYMBOL_RENAME = 367,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 368,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 369,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 370,                  /* REPLICA  */
  YYSYMBOL_RESET = 371,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 372,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 373,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 374,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 375,                /* RETURNING  */
  YYSYMBOL_RETURNS = 376,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 377,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 378,                    /* RIGHT  */
  YYSYMBOL_ROLE = 379,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 380,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 381,                   /* ROLLUP  */
  YYSYMBOL_ROW = 382,                      /* ROW  */
  YYSYMBOL_ROWS = 383,                     /* ROWS  */
  YYSYMBOL_RULE = 384,                     /* RULE  */
  YYSYMBOL_SAMPLE = 385,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 386,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 387,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 388,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 389,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 390,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 391,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 392,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 393,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 394,                   /* SECRET  */
  YYSYMBOL_SECURITY = 395,                 /* SECURITY  */
  YYSYMBOL_SELECT = 396,                   /* SELECT  */
  YYSYMBOL_SEMI = 397,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 398,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 399,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 400,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 401,                   /* SERVER  */
  YYSYMBOL_SESSION = 402,                  /* SESSION  */
  YYSYMBOL_SET = 403,                      /* SET  */
  YYSYMBOL_SETOF = 404,                    /* SETOF  */
  YYSYMBOL_SETS = 405,                     /* SETS  */
  YYSYMBOL_SHARE = 406,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 407,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 408,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 409,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 410,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 411,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 412,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 413,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 414,                     /* SOME  */
  YYSYMBOL_SOURCE = 415,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 416,                    /* SQL_P  */
  YYSYMBOL_STABLE = 417,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 418,             /* STANDALONE_P  */
  YYSYMBOL_START = 419,                    /* START  */
  YYSYMBOL_STATEMENT = 420,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 421,               /* STATISTICS  */
  YYSYMBOL_STDIN = 422,                    /* STDIN  */
  YYSYMBOL_STDOUT = 423,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 424,                  /* STORAGE  */
  YYSYMBOL_STORED = 425,                   /* STORED  */
  YYSYMBOL_STRICT_P = 426,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 427,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 428,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 429,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 430,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 431,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 432,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 433,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 434,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 435,                    /* TABLE  */
  YYSYMBOL_TABLES = 436,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 437,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 438,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 439,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 440,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 441,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 442,                   /* TEXT_P  */
  YYSYMBOL_THEN = 443,                     /* THEN  */
  YYSYMBOL_TIES = 444,                     /* TIES  */
  YYSYMBOL_TIME = 445,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 446,                /* TIMESTAMP  */
  YYSYMBOL_TO = 447,                       /* TO  */
  YYSYMBOL_TRAIL = 448,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 449,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 450,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 451,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 452,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 453,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 454,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 455,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 456,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 457,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 458,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 459,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 460,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 461,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 462,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 463,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 464,                    /* UNION  */
  YYSYMBOL_UNIQUE = 465,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 466,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 467,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 468,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 469,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 470,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 471,                   /* UPDATE  */
  YYSYMBOL_USE_P = 472,                    /* USE_P  */
  YYSYMBOL_USER = 473,                     /* USER  */
  YYSYMBOL_USING = 474,                    /* USING  */
  YYSYMBOL_VACUUM = 475,                   /* VACUUM  */
  YYSYMBOL_VALID = 476,                    /* VALID  */
  YYSYMBOL_VALIDATE = 477,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 478,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 479,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 480,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 481,                  /* VARCHAR  */
  YYSYMBOL_VARIABLE_P = 482,               /* VARIABLE_P  */
  YYSYMBOL_VARIADIC = 483,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 484,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 485,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 486,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 487,                   /* VERTEX  */
  YYSYMBOL_VIEW = 488,                     /* VIEW  */
  YYSYMBOL_VIEWS = 489,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 490,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 491,                 /* VOLATILE  */
  YYSYMBOL_WALK = 492,                     /* WALK  */
  YYSYMBOL_WEEK_P = 493,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 494,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 495,                     /* WHEN  */
  YYSYMBOL_WHERE = 496,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 497,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 498,                   /* WINDOW  */
  YYSYMBOL_WITH = 499,                     /* WITH  */
  YYSYMBOL_WITHIN = 500,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 501,                  /* WITHOUT  */
  YYSYMBOL_WORK = 502,                     /* WORK  */
  YYSYMBOL_WRAPPER = 503,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 504,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 505,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 506,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 507,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 508,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 509,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 510,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 511,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 512,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 513,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 514,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 515,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 516,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 517,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 518,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 519,                    /* YES_P  */
  YYSYMBOL_ZONE = 520,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 521,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 522,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 523,                  /* WITH_LA  */
  YYSYMBOL_524_ = 524,                     /* '<'  */
  YYSYMBOL_525_ = 525,                     /* '>'  */
  YYSYMBOL_526_ = 526,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 527,                /* POSTFIXOP  */
  YYSYMBOL_528_ = 528,                     /* '+'  */
  YYSYMBOL_529_ = 529,                     /* '-'  */
  YYSYMBOL_530_ = 530,                     /* '*'  */
  YYSYMBOL_531_ = 531,                     /* '/'  */
  YYSYMBOL_532_ = 532,                     /* '%'  */
  YYSYMBOL_533_ = 533,                     /* '^'  */
  YYSYMBOL_UMINUS = 534,                   /* UMINUS  */
  YYSYMBOL_535_ = 535,                     /* '['  */
  YYSYMBOL_536_ = 536,                     /* ']'  */
  YYSYMBOL_537_ = 537,                     /* '('  */
  YYSYMBOL_538_ = 538,                     /* ')'  */
  YYSYMBOL_539_ = 539,                     /* '.'  */
  YYSYMBOL_540_ = 540,                     /* ';'  */
  YYSYMBOL_541_ = 541,                     /* ','  */
  YYSYMBOL_542_ = 542,                     /* '|'  */
  YYSYMBOL_543_ = 543,                     /* '?'  */
  YYSYMBOL_544_ = 544,                     /* '{'  */
  YYSYMBOL_545_ = 545,                     /* '}'  */
  YYSYMBOL_546_ = 546,                     /* '&'  */
  YYSYMBOL_547_ = 547,                     /* '!'  */
  YYSYMBOL_548_ = 548,                     /* ':'  */
  YYSYMBOL_549_ = 549,                     /* '#'  */
  YYSYMBOL_550_ = 550,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 551,                 /* $accept  */
  YYSYMBOL_stmtblock = 552,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 553,                /* stmtmulti  */
  YYSYMBOL_stmt = 554,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 555,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 556,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 557,               /* SeqOptList  */
  YYSYMBOL_opt_with = 558,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 559,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 560,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 561,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 562,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 563,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 564, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 565,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 566, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 567, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 568,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 569,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 570, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 571,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 572,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 573,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 574,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 575,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 576,               /* DetachStmt  */
  YYSYMBOL_opt_database = 577,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 578,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 579,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 580,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 581,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 582,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 583,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 584, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 585,           /* qualified_name  */
  YYSYMBOL_ColId = 586,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 587,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 588,                   /* Sconst  */
  YYSYMBOL_indirection = 589,              /* indirection  */
  YYSYMBOL_indirection_el = 590,           /* indirection_el  */
  YYSYMBOL_attr_name = 591,                /* attr_name  */
  YYSYMBOL_ColLabel = 592,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 593,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 594,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 595,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 596,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 597, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 598,                /* opt_using  */
  YYSYMBOL_opt_as = 599,                   /* opt_as  */
  YYSYMBOL_opt_program = 600,              /* opt_program  */
  YYSYMBOL_copy_options = 601,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 602,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 603,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 604,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 605,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 606,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 607,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 608, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 609,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 610,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 611,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 612,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 613,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 614, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 615,       /* generic_option_arg  */
  YYSYMBOL_key_action = 616,               /* key_action  */
  YYSYMBOL_ColConstraint = 617,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 618,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 619,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 620,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 621,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 622,      /* generic_option_elem  */
  YYSYMBOL_key_update = 623,               /* key_update  */
  YYSYMBOL_key_actions = 624,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 625,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 626,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 627,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 628,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 629,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 630,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 631,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 632,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 633,                  /* OptWith  */
  YYSYMBOL_definition = 634,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 635,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 636,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 637,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 638,                /* columnDef  */
  YYSYMBOL_def_list = 639,                 /* def_list  */
  YYSYMBOL_index_name = 640,               /* index_name  */
  YYSYMBOL_TableElement = 641,             /* TableElement  */
  YYSYMBOL_def_elem = 642,                 /* def_elem  */
  YYSYMBOL_opt_definition = 643,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 644,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 645,               /* columnElem  */
  YYSYMBOL_opt_column_list = 646,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 647,              /* ColQualList  */
  YYSYMBOL_key_delete = 648,               /* key_delete  */
  YYSYMBOL_reloption_elem = 649,           /* reloption_elem  */
  YYSYMBOL_columnList = 650,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 651,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 652,                /* func_type  */
  YYSYMBOL_ConstraintElem = 653,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 654,         /* TableElementList  */
  YYSYMBOL_key_match = 655,                /* key_match  */
  YYSYMBOL_TableLikeClause = 656,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 657,                  /* OptTemp  */
  YYSYMBOL_generated_when = 658,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 659,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 660,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 661,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 662,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 663,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 664,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 665,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 666,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 667,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 668,         /* reserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 669,   /* pgq_unreserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 670,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateFunctionStmt = 671,       /* CreateFunctionStmt  */
  YYSYMBOL_table_macro_definition = 672,   /* table_macro_definition  */
  YYSYMBOL_table_macro_definition_parens = 673, /* table_macro_definition_parens  */
  YYSYMBOL_table_macro_list_internal = 674, /* table_macro_list_internal  */
  YYSYMBOL_table_macro_list = 675,         /* table_macro_list  */
  YYSYMBOL_macro_definition = 676,         /* macro_definition  */
  YYSYMBOL_macro_definition_list = 677,    /* macro_definition_list  */
  YYSYMBOL_macro_alias = 678,              /* macro_alias  */
  YYSYMBOL_param_list = 679,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 680,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 681,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 682,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 683,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 684,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 685,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 686,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 687,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 688,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 689,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 690,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 691,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 692,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 693,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 694,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 695,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 696,             /* using_clause  */
  YYSYMBOL_DropStmt = 697,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 698,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 699,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 700,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 701,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 702, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 703,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 704, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 705,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 706,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 707,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 708,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 709,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 710,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 711,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 712,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 713,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 714, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 715,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 716,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 717,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 718,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 719,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 720,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 721,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 722,                /* IndexStmt  */
  YYSYMBOL_access_method = 723,            /* access_method  */
  YYSYMBOL_access_method_clause = 724,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 725,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 726,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 727,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 728,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 729,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 730,              /* insert_rest  */
  YYSYMBOL_insert_target = 731,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 732,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 733,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 734,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 735,       /* insert_column_item  */
  YYSYMBOL_set_clause = 736,               /* set_clause  */
  YYSYMBOL_opt_or_action = 737,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 738,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 739,               /* index_elem  */
  YYSYMBOL_returning_clause = 740,         /* returning_clause  */
  YYSYMBOL_override_kind = 741,            /* override_kind  */
  YYSYMBOL_set_target_list = 742,          /* set_target_list  */
  YYSYMBOL_opt_collate = 743,              /* opt_collate  */
  YYSYMBOL_opt_class = 744,                /* opt_class  */
  YYSYMBOL_insert_column_list = 745,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 746,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 747, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 748,             /* index_params  */
  YYSYMBOL_set_target = 749,               /* set_target  */
  YYSYMBOL_LoadStmt = 750,                 /* LoadStmt  */
  YYSYMBOL_opt_force = 751,                /* opt_force  */
  YYSYMBOL_file_name = 752,                /* file_name  */
  YYSYMBOL_opt_ext_version = 753,          /* opt_ext_version  */
  YYSYMBOL_PGQ_IDENT = 754,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 755,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 756,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 757,       /* EdgeOrRelationship  */
  YYSYMBOL_EdgeTablesClauseOptional = 758, /* EdgeTablesClauseOptional  */
  YYSYMBOL_CreatePropertyGraphStmt = 759,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 760, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 761,         /* KeySpecification  */
  YYSYMBOL_KeyReference = 762,             /* KeyReference  */
  YYSYMBOL_LabelList = 763,                /* LabelList  */
  YYSYMBOL_LabelOptional = 764,            /* LabelOptional  */
  YYSYMBOL_Discriminator = 765,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 766,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 767,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 768,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 769,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 770,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 771,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 772,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 773,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 774,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 775,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 776,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableNameOptional = 777,   /* GraphTableNameOptional  */
  YYSYMBOL_ColumnsOptional = 778,          /* ColumnsOptional  */
  YYSYMBOL_GraphTableStmt = 779,           /* GraphTableStmt  */
  YYSYMBOL_KeepOptional = 780,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 781,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 782,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 783,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 784,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 785,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 786,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 787,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 788,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 789,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 790, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 791,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 792,                  /* CostNum  */
  YYSYMBOL_CostDefault = 793,              /* CostDefault  */
  YYSYMBOL_CostOptional = 794,             /* CostOptional  */
  YYSYMBOL_SubPath = 795,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 796,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 797,              /* PathElement  */
  YYSYMBOL_PathSequence = 798,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 799,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 800,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 801,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 802,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 803,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 804,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 805,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 806,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 807,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 808,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 809,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 810,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 811,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 812,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 813,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 814,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 815,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 816,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 817,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 818,               /* RenameStmt  */
  YYSYMBOL_opt_column = 819,               /* opt_column  */
  YYSYMBOL_SelectStmt = 820,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 821,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 822,         /* select_no_parens  */
  YYSYMBOL_select_clause = 823,            /* select_clause  */
  YYSYMBOL_opt_select = 824,               /* opt_select  */
  YYSYMBOL_simple_select = 825,            /* simple_select  */
  YYSYMBOL_value_or_values = 826,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 827,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 828,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 829,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 830, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 831,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 832,              /* with_clause  */
  YYSYMBOL_cte_list = 833,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 834,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 835,         /* opt_materialized  */
  YYSYMBOL_into_clause = 836,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 837,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 838,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 839,          /* all_or_distinct  */
  YYSYMBOL_by_name = 840,                  /* by_name  */
  YYSYMBOL_distinct_clause = 841,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 842,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 843,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 844,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 845,              /* sort_clause  */
  YYSYMBOL_sortby_list = 846,              /* sortby_list  */
  YYSYMBOL_sortby = 847,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 848,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 849,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 850,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 851,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 852,             /* limit_clause  */
  YYSYMBOL_offset_clause = 853,            /* offset_clause  */
  YYSYMBOL_sample_count = 854,             /* sample_count  */
  YYSYMBOL_sample_clause = 855,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 856,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 857,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 858,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 859,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 860,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 861,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 862,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 863, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 864,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 865,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 866,            /* first_or_next  */
  YYSYMBOL_group_clause = 867,             /* group_clause  */
  YYSYMBOL_group_by_list = 868,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 869,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 870,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 871,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 872,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 873,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 874,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 875,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 876,            /* having_clause  */
  YYSYMBOL_qualify_clause = 877,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 878,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 879,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 880,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 881,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 882,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 883,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 884,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 885,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 886,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 887,              /* from_clause  */
  YYSYMBOL_from_list = 888,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 889,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 890,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 891,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 892,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 893,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 894,             /* pivot_header  */
  YYSYMBOL_pivot_value = 895,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 896,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 897,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 898,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 899,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 900,             /* joined_table  */
  YYSYMBOL_alias_clause = 901,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 902,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 903,        /* func_alias_clause  */
  YYSYMBOL_join_type = 904,                /* join_type  */
  YYSYMBOL_join_outer = 905,               /* join_outer  */
  YYSYMBOL_join_qual = 906,                /* join_qual  */
  YYSYMBOL_relation_expr = 907,            /* relation_expr  */
  YYSYMBOL_func_table = 908,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 909,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 910,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 911,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 912,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 913,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 914,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 915,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 916,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 917,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 918,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 919,             /* opt_Typename  */
  YYSYMBOL_Typename = 920,                 /* Typename  */
  YYSYMBOL_qualified_typename = 921,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 922,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 923,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 924,            /* ConstTypename  */
  YYSYMBOL_GenericType = 925,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 926,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 927,                  /* Numeric  */
  YYSYMBOL_opt_float = 928,                /* opt_float  */
  YYSYMBOL_Bit = 929,                      /* Bit  */
  YYSYMBOL_ConstBit = 930,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 931,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 932,         /* BitWithoutLength  */
  YYSYMBOL_Character = 933,                /* Character  */
  YYSYMBOL_ConstCharacter = 934,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 935,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 936,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 937,                /* character  */
  YYSYMBOL_opt_varying = 938,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 939,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 940,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 941,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 942,             /* year_keyword  */
  YYSYMBOL_month_keyword = 943,            /* month_keyword  */
  YYSYMBOL_day_keyword = 944,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 945,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 946,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 947,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 948,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 949,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 950,             /* week_keyword  */
  YYSYMBOL_quarter_keyword = 951,          /* quarter_keyword  */
  YYSYMBOL_decade_keyword = 952,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 953,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 954,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 955,             /* opt_interval  */
  YYSYMBOL_a_expr = 956,                   /* a_expr  */
  YYSYMBOL_b_expr = 957,                   /* b_expr  */
  YYSYMBOL_c_expr = 958,                   /* c_expr  */
  YYSYMBOL_d_expr = 959,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 960, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 961,         /* indirection_expr  */
  YYSYMBOL_list_expr = 962,                /* list_expr  */
  YYSYMBOL_struct_expr = 963,              /* struct_expr  */
  YYSYMBOL_map_expr = 964,                 /* map_expr  */
  YYSYMBOL_func_application = 965,         /* func_application  */
  YYSYMBOL_func_expr = 966,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 967,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 968, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension_lhs = 969,   /* list_comprehension_lhs  */
  YYSYMBOL_list_comprehension = 970,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 971,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 972,            /* filter_clause  */
  YYSYMBOL_export_clause = 973,            /* export_clause  */
  YYSYMBOL_window_clause = 974,            /* window_clause  */
  YYSYMBOL_window_definition_list = 975,   /* window_definition_list  */
  YYSYMBOL_window_definition = 976,        /* window_definition  */
  YYSYMBOL_over_clause = 977,              /* over_clause  */
  YYSYMBOL_window_specification = 978,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 979, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 980,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 981,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 982,             /* frame_extent  */
  YYSYMBOL_frame_bound = 983,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 984, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 985,            /* qualified_row  */
  YYSYMBOL_row = 986,                      /* row  */
  YYSYMBOL_dict_arg = 987,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 988,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 989, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 990,                  /* map_arg  */
  YYSYMBOL_map_arguments = 991,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 992,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 993, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 994,                 /* sub_type  */
  YYSYMBOL_all_Op = 995,                   /* all_Op  */
  YYSYMBOL_MathOp = 996,                   /* MathOp  */
  YYSYMBOL_qual_Op = 997,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 998,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 999,              /* subquery_Op  */
  YYSYMBOL_any_operator = 1000,            /* any_operator  */
  YYSYMBOL_c_expr_list = 1001,             /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 1002,   /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 1003,               /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 1004,     /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 1005, /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 1006,           /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 1007,           /* func_arg_expr  */
  YYSYMBOL_type_list = 1008,               /* type_list  */
  YYSYMBOL_extract_list = 1009,            /* extract_list  */
  YYSYMBOL_extract_arg = 1010,             /* extract_arg  */
  YYSYMBOL_overlay_list = 1011,            /* overlay_list  */
  YYSYMBOL_overlay_placing = 1012,         /* overlay_placing  */
  YYSYMBOL_position_list = 1013,           /* position_list  */
  YYSYMBOL_substr_list = 1014,             /* substr_list  */
  YYSYMBOL_substr_from = 1015,             /* substr_from  */
  YYSYMBOL_substr_for = 1016,              /* substr_for  */
  YYSYMBOL_trim_list = 1017,               /* trim_list  */
  YYSYMBOL_in_expr = 1018,                 /* in_expr  */
  YYSYMBOL_case_expr = 1019,               /* case_expr  */
  YYSYMBOL_when_clause_list = 1020,        /* when_clause_list  */
  YYSYMBOL_when_clause = 1021,             /* when_clause  */
  YYSYMBOL_case_default = 1022,            /* case_default  */
  YYSYMBOL_case_arg = 1023,                /* case_arg  */
  YYSYMBOL_columnrefList = 1024,           /* columnrefList  */
  YYSYMBOL_columnref = 1025,               /* columnref  */
  YYSYMBOL_columnref_opt_indirection = 1026, /* columnref_opt_indirection  */
  YYSYMBOL_opt_slice_bound = 1027,         /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 1028,         /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 1029,      /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 1030, /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 1031, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 1032,          /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 1033, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 1034,             /* target_list  */
  YYSYMBOL_target_list_opt_comma = 1035,   /* target_list_opt_comma  */
  YYSYMBOL_target_el = 1036,               /* target_el  */
  YYSYMBOL_except_list = 1037,             /* except_list  */
  YYSYMBOL_opt_except_list = 1038,         /* opt_except_list  */
  YYSYMBOL_replace_list_el = 1039,         /* replace_list_el  */
  YYSYMBOL_replace_list = 1040,            /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 1041,  /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 1042,        /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 1043,     /* qualified_name_list  */
  YYSYMBOL_name_list = 1044,               /* name_list  */
  YYSYMBOL_name_list_opt_comma = 1045,     /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 1046, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 1047,                    /* name  */
  YYSYMBOL_func_name = 1048,               /* func_name  */
  YYSYMBOL_AexprConst = 1049,              /* AexprConst  */
  YYSYMBOL_Iconst = 1050,                  /* Iconst  */
  YYSYMBOL_type_function_name = 1051,      /* type_function_name  */
  YYSYMBOL_function_name_token = 1052,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1053,         /* type_name_token  */
  YYSYMBOL_any_name = 1054,                /* any_name  */
  YYSYMBOL_attrs = 1055,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1056,           /* opt_name_list  */
  YYSYMBOL_param_name = 1057,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1058,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1059,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1060,         /* opt_transaction  */
  YYSYMBOL_opt_transaction_type = 1061,    /* opt_transaction_type  */
  YYSYMBOL_UpdateStmt = 1062,              /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 1063,    /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 1064,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1065,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1066,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1067,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1068,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1069,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1070,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1071,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1072,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1073,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1074,                /* set_rest  */
  YYSYMBOL_generic_set = 1075,             /* generic_set  */
  YYSYMBOL_var_value = 1076,               /* var_value  */
  YYSYMBOL_zone_value = 1077,              /* zone_value  */
  YYSYMBOL_var_list = 1078,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1079,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1080,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1081,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1082,              /* opt_tables  */
  YYSYMBOL_var_name = 1083,                /* var_name  */
  YYSYMBOL_table_id = 1084,                /* table_id  */
  YYSYMBOL_ViewStmt = 1085,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1086         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  959
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   82501

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  551
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  536
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2428
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  4039

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   780


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   547,     2,   549,   550,   532,   546,     2,
     537,   538,   530,   528,   541,   529,   539,   531,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   548,   540,
     524,   526,   525,   543,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   535,     2,   536,   533,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   544,   542,   545,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   527,
     534
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   569,   569,   585,   597,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   651,
       9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
      93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
     157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
     253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
     358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
     428,   433,   438,   446,   447,   452,   456,   457,   458,     7,
      13,    19,    25,     9,    13,    44,    45,    46,    47,    51,
      52,    56,    60,    61,    65,    71,    76,    77,    78,    79,
      80,     6,    15,    25,    35,    45,    55,    65,    75,    85,
      95,   106,   117,   127,   140,   141,     9,    23,    29,    36,
      42,    49,    59,    63,    71,    72,    73,    77,    86,    95,
     102,   103,   108,   120,   125,   150,   155,   160,   166,   176,
     186,   192,   203,   214,   229,   230,   236,   237,   242,   243,
     249,   250,   254,   255,   260,   262,   268,   269,   273,   274,
     277,   278,   283,     7,    16,    25,    46,    47,    50,    54,
       7,    14,    22,     9,    19,    29,    42,    43,     7,    17,
      27,    40,    41,    45,    46,    47,    51,    52,     7,     7,
      14,    31,    51,    55,    65,    69,    75,    76,     9,    17,
      29,    30,    34,    35,    36,    41,    42,    43,    48,    52,
      56,    60,    64,    68,    72,    76,    80,    84,    88,    92,
      97,   101,   105,   112,   113,   117,   118,   119,     7,    16,
      28,    29,     2,    10,    17,    24,    32,    40,    51,    52,
      53,    57,    58,    59,     2,    40,    41,    42,    50,    59,
      74,    76,    80,    82,    86,    88,    92,   105,   120,   123,
     127,   131,   141,   153,   154,   158,   159,   163,   172,   182,
     196,   199,   203,   228,   229,   234,   236,   240,   242,   246,
     248,   253,   256,   260,   266,   270,   272,   275,   284,   286,
     290,   292,   296,   299,   307,   344,   346,   350,   350,   350,
     354,   356,   358,   362,   364,   368,   370,   372,   374,   376,
     380,   382,   386,   398,   410,   422,   434,   447,   461,   463,
     468,   504,   506,   510,   512,   517,   526,   535,   544,   554,
     564,   566,   570,   572,   576,   587,   596,   608,   617,   619,
     623,   646,   648,   652,   654,   665,   667,   678,   680,   691,
     693,   702,   713,   721,   730,   734,   736,   740,   742,   748,
     750,   752,   756,   758,   762,   768,   776,   778,   782,   793,
     809,   834,   887,   920,   921,   923,   931,   946,   948,   950,
     952,   954,   956,   958,   960,   962,   964,   966,   968,   970,
     972,   974,   977,   979,   981,   983,   985,   987,   992,   997,
    1004,  1009,  1016,  1021,  1028,  1033,  1041,  1049,  1057,  1065,
    1083,  1091,  1099,  1107,  1115,  1123,  1131,  1135,  1151,  1159,
    1167,  1175,  1183,  1191,  1199,  1203,  1207,  1211,  1215,  1223,
    1231,  1239,  1247,  1267,     7,    21,    36,    56,    57,    84,
      85,    86,    87,    88,    89,    93,    94,    99,   104,   105,
     106,   107,   108,   113,   120,   121,   122,   139,   146,   153,
     163,   173,   185,   193,   202,   220,   221,   225,   226,   230,
     239,   262,   276,   283,   288,   290,   292,   294,   297,   300,
     301,   302,   303,   308,   312,   313,   318,   325,   330,   331,
     332,   333,   334,   335,   336,   337,   343,   344,   348,   353,
     360,   367,   374,   386,   387,   388,   389,   393,   398,   399,
     400,   405,   410,   411,   412,   413,   414,   415,   420,   440,
     469,   470,   474,   478,   479,   480,   484,   488,   496,   497,
     502,   503,   504,   508,   516,   517,   522,   523,   527,   532,
     536,   540,   545,   553,   554,   558,   559,   563,   564,   570,
     581,   594,   608,   622,   636,   650,   673,   677,   684,   688,
     696,   701,   708,   718,   719,   720,   721,   722,   729,   736,
     737,   742,   743,     9,    19,    29,    39,    49,    59,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    95,    96,    97,
      98,    99,   100,   105,   106,   111,   112,   113,   118,   119,
     120,     8,    18,    29,    39,    49,    59,    71,    81,    91,
      95,   102,   106,   110,   119,   123,   130,   131,   135,   139,
       7,     1,    30,    49,    61,    62,    63,    67,    68,    73,
      77,    82,    86,    94,    95,    99,   100,   105,   106,   110,
     111,   116,   117,   118,   119,   120,   121,   122,   123,   128,
     136,   140,   145,   146,   151,   155,   160,   164,   168,   172,
     176,   180,   184,   188,   192,   196,   200,   204,   208,   212,
     216,   220,   228,   233,   234,   235,   236,   237,   243,   247,
      47,    48,    52,    53,    54,    72,    73,    80,    88,    96,
     104,   112,   120,   131,   132,   159,   164,   172,   188,   205,
     223,   241,   242,   261,   265,   269,   273,   277,   287,   298,
     308,   317,   328,   339,   351,   366,   384,   384,   388,   388,
     392,   392,   396,   402,   409,   413,   414,   418,   419,   433,
     440,   447,   457,   458,   461,   474,   475,   476,   480,   491,
     499,   504,   509,   514,   519,   527,   535,   540,   545,   552,
     553,   557,   558,   559,   563,   570,   571,   575,   576,   580,
     581,   582,   586,   587,   591,   592,   608,   609,   612,   621,
     632,   633,   634,   637,   638,   639,   643,   644,   645,   646,
     650,   651,   655,   657,   673,   675,   680,   683,   691,   695,
     699,   703,   707,   711,   718,   723,   730,   731,   735,   740,
     744,   748,   756,   763,   764,   769,   770,   774,   775,   780,
     782,   784,   789,   809,   810,   812,   817,   818,   822,   823,
     826,   827,   852,   853,   858,   862,   863,   867,   868,   872,
     873,   874,   875,   876,   880,   893,   900,   907,   914,   915,
     919,   920,   924,   925,   929,   930,   934,   935,   939,   940,
     944,   955,   956,   957,   958,   962,   963,   968,   969,   970,
     979,   985,   994,   995,  1008,  1009,  1013,  1014,  1018,  1019,
    1025,  1031,  1039,  1048,  1056,  1065,  1074,  1078,  1083,  1087,
    1098,  1112,  1113,  1116,  1117,  1118,  1121,  1129,  1138,  1139,
    1140,  1141,  1144,  1152,  1161,  1165,  1172,  1173,  1177,  1186,
    1190,  1215,  1219,  1232,  1246,  1261,  1273,  1286,  1300,  1314,
    1327,  1342,  1361,  1367,  1372,  1378,  1385,  1386,  1394,  1398,
    1402,  1408,  1415,  1420,  1421,  1422,  1423,  1424,  1425,  1429,
    1430,  1442,  1443,  1448,  1455,  1462,  1469,  1501,  1512,  1525,
    1530,  1531,  1534,  1535,  1538,  1539,  1544,  1545,  1550,  1554,
    1560,  1581,  1589,  1602,  1605,  1609,  1609,  1612,  1613,  1615,
    1620,  1627,  1632,  1638,  1643,  1649,  1653,  1660,  1667,  1677,
    1678,  1682,  1684,  1687,  1691,  1692,  1693,  1694,  1695,  1696,
    1701,  1721,  1722,  1723,  1724,  1735,  1749,  1750,  1756,  1761,
    1766,  1771,  1776,  1781,  1786,  1791,  1797,  1803,  1809,  1816,
    1838,  1847,  1851,  1859,  1863,  1871,  1883,  1904,  1908,  1914,
    1918,  1931,  1939,  1949,  1951,  1953,  1955,  1957,  1959,  1964,
    1965,  1972,  1981,  1989,  1998,  2009,  2017,  2018,  2019,  2023,
    2023,  2026,  2026,  2029,  2029,  2032,  2032,  2035,  2035,  2038,
    2038,  2041,  2041,  2044,  2044,  2047,  2047,  2050,  2050,  2053,
    2053,  2056,  2056,  2059,  2059,  2062,  2064,  2066,  2068,  2070,
    2072,  2074,  2076,  2078,  2080,  2082,  2084,  2086,  2088,  2093,
    2098,  2104,  2111,  2116,  2122,  2128,  2159,  2161,  2163,  2171,
    2186,  2188,  2190,  2192,  2194,  2196,  2198,  2200,  2202,  2204,
    2206,  2208,  2210,  2212,  2214,  2216,  2219,  2221,  2223,  2226,
    2228,  2230,  2232,  2234,  2239,  2244,  2251,  2256,  2263,  2268,
    2275,  2280,  2288,  2296,  2304,  2312,  2330,  2338,  2346,  2354,
    2362,  2370,  2378,  2382,  2398,  2406,  2414,  2422,  2430,  2438,
    2446,  2450,  2454,  2458,  2462,  2470,  2478,  2486,  2494,  2514,
    2536,  2547,  2554,  2568,  2577,  2585,  2593,  2613,  2615,  2617,
    2619,  2621,  2623,  2625,  2627,  2629,  2631,  2633,  2635,  2637,
    2639,  2641,  2643,  2645,  2647,  2649,  2651,  2653,  2655,  2659,
    2663,  2667,  2681,  2682,  2696,  2697,  2698,  2709,  2733,  2744,
    2754,  2758,  2762,  2769,  2773,  2780,  2784,  2788,  2792,  2794,
    2797,  2800,  2811,  2816,  2823,  2829,  2835,  2842,  2862,  2866,
    2873,  2881,  2889,  2900,  2920,  2956,  2967,  2968,  2975,  2981,
    2983,  2985,  2989,  2998,  3003,  3010,  3025,  3032,  3036,  3040,
    3044,  3048,  3058,  3066,  3075,  3097,  3098,  3102,  3103,  3104,
    3108,  3109,  3116,  3117,  3121,  3122,  3127,  3135,  3137,  3151,
    3154,  3181,  3182,  3185,  3186,  3194,  3202,  3210,  3219,  3229,
    3247,  3293,  3302,  3311,  3320,  3329,  3341,  3342,  3343,  3344,
    3345,  3359,  3360,  3363,  3364,  3369,  3379,  3380,  3384,  3385,
    3389,  3396,  3397,  3402,  3403,  3408,  3409,  3412,  3413,  3414,
    3417,  3418,  3421,  3422,  3423,  3424,  3425,  3426,  3427,  3428,
    3429,  3430,  3431,  3432,  3433,  3434,  3437,  3439,  3444,  3446,
    3451,  3453,  3455,  3457,  3459,  3461,  3463,  3465,  3479,  3481,
    3486,  3490,  3497,  3502,  3508,  3512,  3519,  3524,  3531,  3536,
    3544,  3548,  3554,  3558,  3567,  3578,  3579,  3583,  3587,  3594,
    3595,  3596,  3597,  3598,  3599,  3600,  3601,  3602,  3603,  3604,
    3605,  3606,  3607,  3608,  3618,  3622,  3629,  3636,  3637,  3653,
    3657,  3662,  3666,  3681,  3686,  3690,  3693,  3696,  3697,  3698,
    3701,  3708,  3709,  3710,  3720,  3734,  3735,  3739,  3750,  3751,
    3754,  3755,  3759,  3760,  3763,  3769,  3773,  3780,  3788,  3796,
    3804,  3814,  3815,  3820,  3821,  3825,  3826,  3827,  3831,  3840,
    3848,  3856,  3865,  3880,  3881,  3886,  3887,  3897,  3898,  3902,
    3903,  3907,  3908,  3911,  3927,  3935,  3945,  3946,  3949,  3950,
    3953,  3957,  3958,  3962,  3963,  3966,  3967,  3968,  3978,  3979,
    3983,  3985,  3991,  3992,  3996,  3997,  4000,  4011,  4014,  4025,
    4029,  4033,  4045,  4049,  4058,  4065,  4103,  4107,  4111,  4115,
    4119,  4123,  4127,  4133,  4150,  4151,  4152,  4153,  4157,  4158,
    4159,  4160,  4164,  4165,  4166,  4167,  4171,  4172,  4175,  4177,
    4182,  4183,  4186,  4190,  4191,     7,    18,    19,    23,    24,
      25,    26,    27,    28,     7,    26,    50,    73,    80,    85,
      86,    87,    88,     8,    33,    62,    66,    67,    72,    73,
      78,    79,    83,    84,    89,    90,     7,    16,    25,    34,
      43,    52,     5,    12,    22,    23,     7,    15,    26,    27,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
       7,    19,    33,     9,    16,    26,    33,    44,    45,    50,
      51,    52,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    91,    92,    93,    94,    99,   100,   105,
     109,   117,   118,   123,   124,   125,   131,   136,   144,   145,
      10,    16,    22,    28,    34,    44,    45,    53,    64,    76,
      84,    95,   101,   105,   109,   124,   131,   132,   133,   137,
     138,     7,    17,    26,    35,    46,    47,    49,    50,    53,
      54,    55,     8,    22,    36,    48,    56,    70,    71,    72,
      73,    74,    87,    88,    93,    94,    98,    99,     7,    18,
      31,    35,    42,    53,    54,    60,    61,     9,    19,     7,
      16,    28,    35,    42,    51,    52,    56,    57,     2,     7,
      12,    17,    22,    31,    38,    48,    49,    56,     3,    10,
      17,    24,    31,    38,    45,    52,    59,    68,    68,    70,
      70,    72,    72,    74,    75,    79,    80,     6,     8,    21,
      34,    47,    65,    87,    88,    89,    90,    11,    24,    37,
      54,    55,    56,    61,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION",
  "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT",
  "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST",
  "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXPORT_STATE", "EXTENSION", "EXTENSIONS", "EXTERNAL", "EXTRACT",
  "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID",
  "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE",
  "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
  "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
  "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "JSON", "KEEP", "KEY",
  "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
  "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLENNIA_P", "MILLENNIUM_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NODE", "NONE", "NOT", "NOTHING", "NOTIFY",
  "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PATH", "PATHS", "PERCENT", "PERSISTENT", "PIVOT",
  "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION",
  "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY", "PUBLICATION",
  "QUALIFY", "QUARTER_P", "QUARTERS_P", "QUOTE", "RANGE", "READ_P", "REAL",
  "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING",
  "REFRESH", "REINDEX", "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME",
  "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART",
  "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH", "SECOND_P",
  "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETOF", "SETS",
  "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT",
  "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE", "STANDALONE_P", "START",
  "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED",
  "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIABLE_P", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P",
  "VERTEX", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WEEK_P",
  "WEEKS_P", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN",
  "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES",
  "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES",
  "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P",
  "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'",
  "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'",
  "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'",
  "'{'", "'}'", "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock",
  "stmtmulti", "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt",
  "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
  "SignedIconst", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CommentOnStmt", "comment_value",
  "comment_on_type_any_name", "qualified_name", "ColId", "ColIdOrString",
  "Sconst", "indirection", "indirection_el", "attr_name", "ColLabel",
  "CopyStmt", "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_unreserved_keyword", "pgq_col_name_keyword", "CreateFunctionStmt",
  "table_macro_definition", "table_macro_definition_parens",
  "table_macro_list_internal", "table_macro_list", "macro_definition",
  "macro_definition_list", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "opt_persist", "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "DropSecretStmt", "opt_storage_drop_specifier", "ExecuteStmt",
  "execute_param_expr", "execute_param_list", "execute_param_clause",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "opt_force", "file_name",
  "opt_ext_version", "PGQ_IDENT", "DropPropertyGraphStmt", "VertexOrNode",
  "EdgeOrRelationship", "EdgeTablesClauseOptional",
  "CreatePropertyGraphStmt", "VertexTableDefinitionList",
  "KeySpecification", "KeyReference", "LabelList", "LabelOptional",
  "Discriminator", "VertexTableDefinition", "EdgeTableDefinitionList",
  "EdgeTableDefinition", "AreOptional", "IdentOptionalAs",
  "QualifiednameOptionalAs", "PropertiesList", "ExceptOptional",
  "PropertiesSpec", "PropertiesClause", "GraphTableWhereOptional",
  "GraphTableNameOptional", "ColumnsOptional", "GraphTableStmt",
  "KeepOptional", "PathOrPathsOptional", "GroupOrGroupsOptional",
  "PathVariableOptional", "PathModeOptional", "TopKOptional", "PathPrefix",
  "PathPatternList", "PathPattern", "PatternUnion",
  "KleeneQuantifierOptional", "KleeneOptional", "CostNum", "CostDefault",
  "CostOptional", "SubPath", "EnclosedSubPath", "PathElement",
  "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "value_or_values", "pivot_keyword",
  "unpivot_keyword", "pivot_column_entry", "pivot_column_list_internal",
  "pivot_column_list", "with_clause", "cte_list", "common_table_expr",
  "opt_materialized", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "quarter_keyword", "decade_keyword", "century_keyword",
  "millennium_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr_or_a_expr", "indirection_expr", "list_expr",
  "struct_expr", "map_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension_lhs", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnrefList", "columnref",
  "columnref_opt_indirection", "opt_slice_bound", "opt_indirection",
  "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "opt_transaction_type",
  "UpdateStmt", "UpdateExtensionsStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "describe_or_desc", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3498)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2279)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7224,    -8,   108, -3498, -3498,   322,    -8, 56658, 73737,   538,
      -8,   128,  2222, 58730, -3498, -3498, 53032, 10008,    -8, 62356,
   81946,   645,   782, 38122,   815, 62874, -3498, -3498, -3498, 73737,
   62356, 63392,    -8,   413, 74255, -3498,    -8, 40712, 59248,   504,
   -3498, 62356,    87,   407, 63910, 62356, 45893,   972,   510, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,   629, -3498, -3498, -3498, -3498,   196, -3498,
     916, -3498, -3498, -3498, -3498, -3498, -3498, -3498,   174, -3498,
     235,   186, 38122, 38122,   122,   614, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, 40194, -3498, -3498, -3498,
   -3498, 64428, 62356, 64946, 59766, 65464, -3498,   890,  1176,   883,
     191, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,   211, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498,   666, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498,   221, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498,   827,   222, -3498, -3498,   223, -3498,   750, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1262, -3498,
   -3498,  1161,  1775, 62356,   960,  1084,   941, -3498,  1118, 65982,
   -3498,   949, 62356, -3498, -3498,  1075,   984,  1160, -3498, -3498,
   60284, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, 53550, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1130, -3498,
   -3498,   947, -3498,   198, -3498, -3498,   982,   956, -3498,  1264,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1078, -3498,
   -3498, -3498,  1104, 74773, 66500, 67018, -3498,   969,  1826,  8205,
   81964, 37603, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,   629,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, 62874, 73737,   987,  1015,  1394,
    1039,  1061, 38640,  1067, 41231,  1081,  1097,  1462,  1135,  1154,
    1179,  1193,   407, 37085,  1137,   827, -3498, 67536, 67536,    66,
    4463, -3498, 67536, 68054, -3498,  1239, -3498,  1176, -3498, -3498,
   -3498, -3498,   -67,  1233, -3498, 68572, 68572, 68572,  1289,  1574,
   68572, -3498, -3498, -3498,  1272, -3498, -3498,  1528, 24626, 24626,
   75291, 75291,  1176, 75291,  1323, 75291, -3498, -3498,    77,   883,
    3158, -3498, -3498,   122,  1293,   827, -3498, -3498, 59248, -3498,
   -3498,   287,  1699, 24626, 62356,  1350, -3498,  1358,  1350, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
     407, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498,  1657,  1384,  1390,  1403, -3498,
    7224, -3498, 62356,  1772,  1649, 60802, 62874,   423,   423,  1896,
     423,  1292,  1412,  2190,  3218, -3498,   185, -3498,  1424,  1539,
    1795,  1467,  1771, -3498,  1293,  1849,  1012,  1647,  1853,  6256,
    1859,  1200,  1869,  1593,  1871,  1995,    96, -3498, 24626, 54068,
     827, -3498, 15310, 24626, -3498, -3498, -3498,  1617, -3498, -3498,
   -3498, -3498, -3498, 62356, 73737,  1517,  1520, -3498, -3498, -3498,
   -3498,  2259, 62356,  1782, -3498,  2017, -3498, -3498,  1581, 69090,
   69608, 70126, 70644, 75809,  1980, -3498, -3498,  1916, -3498, -3498,
   -3498,  1584, -3498, -3498, -3498, 71162,   495, 76327,  1937,  1565,
     152, -3498,  1963,   215, -3498,  1969,  1830, 19146, -3498,  1777,
   -3498, -3498, -3498,   407, -3498, -3498, -3498, -3498,   927, -3498,
   -3498, 49982, 81964,  1693,  1616, -3498, 24626, 24626,  1621,  9137,
   81447, -3498, 67536, 68054, 24626, 62356, -3498, 24626, 30106,  1622,
   24626, 24626, 16406, 24626, 36049, 67536,  4463,  1624, -3498,  1086,
   62356,  1623, -3498,  1717,  1717,   413, 38122,  1936, -3498,   892,
    1932,  1856, -3498, 38122,  1856,  1116,  1630,  1938,  1856, -3498,
     810,  1940,  1717, 41749,  1631, -3498,  1717,  1870, -3498, -3498,
   24626, 19146, 78917,  2133, -3498, -3498, -3498, -3498,  1933, -3498,
   73737,  1641, -3498, -3498, -3498, -3498, -3498, -3498,   814,  2176,
     166,  2178, 24626,   166,   166,  1656,   225,   225, -3498,  1848,
    1659, -3498,   226,  1661,  1662,  2189,  2195,   188,   183,   403,
     166, 24626, -3498,   225,  1666,  2201,  1670,  2204,   167,   195,
   -3498,   227, 24626, 24626, 24626,   852, 24626, 14214, -3498, 62356,
    2203, 54068,  1020, -3498,   827,  1678,  1176, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  1679, -3498,   199,  8157, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498,  1723, -3498, -3498, -3498, -3498,
    1914, 24626, -3498, -3498,  1685,  1936, -3498,   236, -3498, -3498,
    1936, -3498, -3498, -3498, -3498, -3498,   293, -3498,  2121, 24626,
   24626, -3498, 73737,   827, -3498, 76845, -3498, -3498, -3498, -3498,
   -3498, -3498,   942, -3498,   629, 51644,  1689,  1694,  1350, 62356,
   62356,  2191, 81447, -3498, -3498, -3498, -3498,  1358, 59248,   237,
    2004,   176,  1833,   132, -3498, -3498,   122,   122, 19694,  1219,
     259,   932, 20242, 25174,  2066,  1943,   291,  1045,  2068, -3498,
    1947,  2181, 30106, 24626, 24626,  1292,  1412, 24626, -3498, -3498,
   73737, -3498,  2002, 62356, 57176,   428,   952,  1712,  1804,  1715,
      62,  2158, -3498,  1713, -3498,  1809, 62356, 80944,   255, -3498,
    2196,   255,   255,   910,  2197,  1812,   315,  1989,   766,   -43,
    3988, -3498,  1713, 59248,   179,   824,  1713, 62356,  1814,   888,
    1713,  2154, 73737,  1616, -3498, -3498, 11971,  1721, -3498, -3498,
   -3498,   208, 19146, -3498,  1232,  1309,  1440,   902,   168,  1461,
    1523, 19146,  1643,  1671,   210,  1692,  1790,  1803,  1851,  1886,
    1919,  1926,  1987,   178,  1991,  1999,  2005,  2009,  2011,  2035,
   -3498,  2037,   220,  2048,   239, 19146,  2051, -3498,   224, -3498,
     234, 51644,     3, -3498, -3498,  2065, 51695, -3498,  2042,  1825,
    1829, 73737,  1774,  2091, 62356,  1099,  1884,   121,  2124,  2182,
   79420, 62356,  2003,  3988,  2006,  1746,  2244,  2008,  1520,  2012,
    1752,  2019, -3498,  2104, -3498, 77363, 54068, -3498,  2156,   256,
   -3498, -3498, -3498, -3498,  2157,  2134, 73737, 54068,  1779, -3498,
   -3498, 73737, -3498, 62356, 62356, -3498, 62356, 73737, -3498,   958,
   51644,  2306,   967, 81964, 55622, -3498, -3498, -3498, -3498,  1356,
    1380, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
    1176, 54068, -3498,  2041, 50625,  1786, 24626, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1787,  2143,
   -3498, -3498, -3498,  7620,  1793, 50675,  1797, 30106, 30106,   827,
    2636, -3498, -3498, 30106,  1798, 56140, 50538,  1792,  1799, 50935,
   20790, 24626, 20790, 20790, 51077, -3498,  1801, 51209, 67536,  1805,
   62356, 61320, -3498, -3498, -3498, 24626, 24626,  4463, 61838,  1827,
   -3498, 38122, -3498,  2102, 38122, -3498, -3498,  2616, -3498, 38122,
    2108, 24626, 38122, -3498,  2053,  2057,  1813, 38122, -3498, 62356,
    1815, 62356, -3498, -3498, 51644, -3498,  1817,   976,  1816, -3498,
   -3498, -3498, -3498, -3498,  1872, -3498,  1872,  1872, -3498, -3498,
   -3498, -3498,  1822,  1822,  1824, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1834,   403,
   -3498,  1872, -3498,  1822, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, 80944, -3498, -3498, -3498, -3498,   740,   844, -3498,  1835,
   -3498, -3498, -3498, -3498, -3498,  1839, -3498,  1823,  2312, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  7697,  1044,
    1822,  3900, -3498, -3498, 24626, 24626, -3498, -3498,  1840, 51644,
    1868, -3498, -3498, 24626, 24626, -3498, -3498, -3498, -3498,  2345,
   -3498, 24626,  1872,  1872, -3498,  8942, -3498, 46935, 21338,  1921,
    1922,  2345, -3498,  2345, -3498,  8942,  2353,  2353,  1843, 44339,
   -3498,  2001, 51310, -3498,  1845,  1983,  8787,  1842,  1836, -3498,
    1846,  1844, -3498, -3498, 48428,   207,   827,   827, 24626, -3498,
    2345, 24626,  9785,  9785, -3498,   231, 78917, 24626, 24626, 24626,
   24626, 24626, 24626, 24626, 24626, 52514,  1930,   202, 73737, 24626,
   24626, 34471,  1027, -3498, 24626,  2099, -3498,  1854, 24626,  1949,
     751, 24626, 24626, 24626, 24626, 24626, 24626, 24626, 24626, 24626,
   -3498, -3498, 33942,   252,  1060,  2202,  2226,    29,   379, 24626,
    2220, 15310, -3498,  2220, -3498, -3498, -3498, -3498, -3498,   240,
   -3498, -3498,  1817,  1817, -3498, 73737, -3498, 62356,   287, 58212,
   24626, -3498, -3498,  1858,  1862,   567,  1875,   378,    97, -3498,
   -3498,  1928, -3498, -3498, 62356, -3498, 44857, 62874, 62874, -3498,
    2179, -3498,   387,  1866, -3498, 50497,  2129,  2179,   122, -3498,
   -3498, 31202,  2007,  2173,  2109, -3498, -3498,  2086,  2088, -3498,
    1873, 51745, 25722, 25722, -3498,   715, 51644,  1708, -3498, -3498,
   -3498, -3498, -3498, -3498,  1024, -3498, 62356,   169, 42267, -3498,
    1874,   323, -3498,  3226,  2228,  2192,  2066,  1045,  1879, -3498,
   -3498,  1696,  1881, 77881, 62356,  2186,  2142,  2193,   -50, 78917,
   -3498, -3498, -3498, -3498, 62356, 73737, 71680, 78399, 54586, 62356,
   54068, -3498, -3498, -3498, -3498, 62356,   500, 62356,  7511, -3498,
   -3498, -3498, -3498,   255, -3498, -3498, -3498, -3498, -3498, 73737,
   62356, -3498, -3498,   255, 73737, 62356,   255, -3498,  1705, 62356,
   62356, 62356, 62356,  1785, 62356, 62356,  1176, -3498, -3498, -3498,
   26270,    36,    36,  2122, 16954,   213, -3498, 24626, 24626,   214,
     299, 73737,  2084, -3498, -3498,  1055,  2137,   352, 62356, -3498,
    1942, 62356, 62356, 62356, 62356, 73737, -3498, -3498,  2010, 62356,
    1142, -3498, -3498, -3498, -3498, -3498,  1898, -3498,  1901,  2282,
    3988, -3498,  2283, 57694,  1146,  3096,  2284,  1945,  2291, 17502,
   -3498, -3498,  1911, -3498, -3498,  1920,  2407,  2298,  2460,  1931,
    2194, -3498, -3498,  2166, -3498, 62356, -3498, 73737,  2470, -3498,
     152, -3498, 54068, -3498,   215, -3498,  2175,   256, -3498, 19146,
   24626, -3498, -3498, -3498, -3498, -3498, -3498,  1616, 35526, -3498,
    1095, -3498, -3498,  2434,  1176,  2434,   930, -3498, -3498,  2434,
   -3498,  2416,  2434, -3498, 78917, -3498,  9557, -3498, 24626, 24626,
   -3498, 24626,  2303, -3498,  2471,  2471, 78917, 30106, 30106, 30106,
   30106, 30106, 30106,   886,  1666, 30106, 30106, 30106, 30106, 30106,
   30106, 30106, 30106, 30106, 31750,   369, -3498, -3498,  1105,  2441,
   24626, 24626,  2314,  2303, 24626, -3498, 78917,  1946, -3498,  1950,
    1955, 24626, -3498, 78917, -3498, 62356,  1956,    35,     9, -3498,
    1958,  1959, -3498,  1936, -3498,  1257,  1305, 62356,  5789,  6174,
    6231, -3498, -3498, 24626,  2309,  2616, 38122, -3498, 24626,  1961,
   -3498, -3498, 38122,  2327, -3498, -3498, -3498, 42785,  2616, 78917,
    1114, -3498, 62356, 78917,  1133, 24626, -3498, 19146,  2497, 78917,
    2463, 73737, 73737,  2498,  1970,  1971,  2345,  2060, -3498,  2063,
    2072,  2073, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, 78917, -3498, -3498, -3498, -3498,   294, -3498, -3498,
   -3498, -3498,  1974,  1977, 24626, 24626,   148, -3498,  9683,  1986,
    1990,  5243, -3498,  1984, -3498,  1982, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,  1993, -3498,  1992, -3498,  1996,  2013,  2016,
    2000,  2014, 24626, 62356, -3498, 26818, -3498, 73737, -3498, -3498,
   24626, 24626, 62356, -3498,  2386, -3498,  2015,  2020, 10299, -3498,
   -3498, -3498,   268,   913,  5308,   379,  2808,  2808,  2808,  8942,
   -3498, -3498, -3498,  2021, -3498, 30106, 30106, -3498,  1553,  1776,
   14214, -3498, -3498, -3498, -3498,  2363, -3498,  1286, -3498,  2018,
   -3498, -3498,  2770, -3498, 46935, 51796, 24626,   203, -3498, 24626,
   34471, 24626,  2095,  2808,  2808,  2808,   359,   359,   268,   268,
     268,   913,   379, -3498, -3498, -3498,  2022, 24626, 54068, -3498,
    2023,  2024,  2383,  1670, 24626, -3498, -3498, 38122,  1827,     3,
    1827,  2345,  9785, -3498,  1358, -3498, -3498,  1358, 51644, 62356,
   -3498, -3498,  2286,  2025, -3498,   194,   205,  2536,   258,   378,
   81447,  2052, 38122,  2054,  2507,  2490, 73737, -3498, -3498,  2029,
    2220,  2028,  2071,  2071, -3498, -3498, -3498, -3498,  2043, 24626,
    2615,  2043, -3498,  2179,    61,  2271,  1383,  1383,   715,  2272,
   -3498, -3498,  2106, -3498, -3498, -3498, 24626, 18050,  1710, -3498,
    1714, -3498, -3498, -3498, -3498, -3498,  2032, -3498,  2328, -3498,
   62356, -3498, -3498, 30106,  2518, 24626, 43303,  2520,  2308, -3498,
   -3498, -3498,  2141,  1713, 24626,  2305, -3498,   182,  2056,  2437,
      10,  2381, 73737, -3498,   747,   938, -3498,   754,  2438,   256,
    2439,   256, 54068, 54068, 54068,  1138, -3498, -3498, -3498,  1176,
   -3498,   494,  1174, -3498, -3498, -3498, -3498,  2150,   912,  3988,
    1713, -3498, -3498, -3498, -3498, -3498, -3498, -3498,   217,  1011,
    1713,  2151, -3498,  2152, -3498,  2160,  1074,  1713, -3498, -3498,
    1995, 21886, 51644,   707,   213,   213,   213, 19146, -3498,  2313,
    2319,  2067, 51644, 51644,   177, -3498, -3498, -3498, -3498,  2074,
   -3498,   206, -3498, 73737, -3498, -3498, -3498,  2084,   121,  2182,
   62356,  3988,  2077,  2573,  1520,  1752,  2104,  2080, -3498,  2249,
     849,  1314, -3498, 73737, 62356, 62356, 62356, 72198, -3498, -3498,
   -3498,  2081,  2079, -3498,    46,  2324,  2323, 62356,  2125, 62356,
    1715,  2583, 62356, -3498,  1187,  1752,  1752, 22434, 73737, -3498,
   54068,  2472, 62356,   256,  2134, -3498, -3498, -3498, -3498, 73737,
   -3498, -3498, 51644, -3498,  2083, -3498, 24626, 55104, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, 54068, -3498,  1176, -3498,  1176,
    2339, 73737, 48946,  1176, 49464,  1176,  2094, -3498, 51644, 10349,
   51644,  2314, -3498,   271,  2471,  5388,  5388,  5388,  6666,  2461,
     758,  2103,  5388,  5388,  5388,   324,   324,   271,   271,   271,
    2471,   369,  1239, 56140,  2111, -3498, 51644, 51644, -3498, -3498,
    2101, -3498, -3498, -3498, -3498,  2105,  2107, -3498, -3498, -3498,
   -3498, -3498, -3498, 73737,  1398,  1827,   504,   504,   504,   504,
   -3498, 62356, 62356, 62356, 51644,  2580,  2456, -3498,  2616, 51644,
   62356, -3498, 32846, 62356, -3498,  2478, -3498,  2576, -3498, 62356,
    1222, -3498, -3498, -3498,  1223,  2135,  1971, 78917,  1230,  1234,
   -3498,  2345,   197,  2130,  1838,  1469,   158,  1720, -3498, 59248,
   -3498, -3498,  2131, 51335, 24626, -3498,  2523, -3498, -3498, -3498,
   24626, 24626, -3498, 46935, -3498, -3498, -3498, -3498,   545,   545,
   10753,  2138, 14214, 51387, -3498, -3498,  2466,  2136, -3498, 11473,
   51644, -3498,  2001, -3498, -3498,  9785, 24626,  4045,  4222, 24626,
    2140, 24626,  2502, -3498, -3498,  2145, -3498, -3498, 78917, 24626,
    2147,  2969, 30106, 30106,  3542, -3498,  3842, 24626, 14214, -3498,
   47579,  2132,  2155,  2122, 22982, -3498,  2376,  2148, -3498,  2309,
     213,  2309,  2159, -3498, -3498, -3498, -3498,  3900,  1796, -3498,
   -3498,   850,  1796,  1796,  1796, -3498, -3498, -3498,   850,   850,
     850, -3498, -3498,   162,   685, 81447, 81447,   258,   258,  2161,
   -3498, -3498, 81447,  1316, -3498, -3498, -3498, -3498, 29558,  2608,
   -3498, 24626,  2326, 73737,   734,   821,  1236, -3498,   827, 44857,
    2054, 24626, -3498, -3498,   253, -3498, -3498,  2162, -3498,  2043,
   -3498, -3498, -3498,  2394, -3498, -3498, -3498, 62356, -3498,  2168,
   -3498, 42267,  2516, 14762, -3498, 42267, 62356, 62356, 11650,  2551,
   -3498, 73737, 73737, 73737, -3498, 73737,  2169,  2174,   753,  2177,
     430, -3498,  1908,   753,  2530,  1085,  1715,   315,  1369,    80,
   -3498, -3498, -3498,  2257, 62356, -3498, 73737, -3498, -3498, -3498,
   -3498, -3498, 54586, -3498, -3498, 46416, 54068, -3498, 54068, 62356,
   62356, 62356, 62356, 62356, 62356, 62356, 62356, 62356, 62356,  1616,
   24626, -3498, 24626,  2185,  2200,  2206,  2122, -3498, -3498, -3498,
     218, -3498,  2207, -3498, -3498, -3498,   -43, -3498,   206,  2288,
    2183, -3498, 57694,  1775,  1945, -3498,  1920,  2198, 62356,  2182,
     153, 72701, -3498,  2209,  2187,  1248,  3988,  2205,  2687, -3498,
    1146, 57694, -3498, -3498, -3498,  2643, -3498,   969,   314, -3498,
    1520, -3498,  1775,  1752, -3498, -3498,  2692, -3498,  2699,  1775,
   51644,  2104,  1285, 73737,  2274, -3498, -3498,   256,  1287, -3498,
   -3498, -3498, -3498, -3498, 73737,  2211, -3498,  2211, -3498, -3498,
    2211, -3498, -3498, -3498, -3498, 30106,  2568,  2218, 78917, -3498,
   -3498, 62356, -3498, -3498, -3498,  1312,  2219,  2309, 62356, 62356,
   62356, 62356, -3498, -3498, -3498, 23530, 24626,  2258, -3498,  2223,
   15858,  2556, -3498, 32298, -3498, -3498,  2225, 42785, 73737, -3498,
   -3498, -3498, -3498,  2345, -3498, -3498, 73737, -3498,  2231, -3498,
    2234, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   24626, 51644, -3498, 51644, -3498, -3498, -3498, -3498, -3498, -3498,
    8248, -3498,  2230,  2235, 73737, 24626, 73737, -3498, -3498, -3498,
     456, 24626, 24626,  1553, -3498, 12113, 24626, 78917,  1325,  1553,
     286, 24626,  4382,  5093, 24626, 24626,  3953, 12020, -3498, 27366,
   18598, -3498,  2236, 24626, 12960, 45375, -3498, 38122,  2456,  2238,
    2456,  1176,  2239, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
    1317,   744, -3498, -3498, -3498,   850,  2243, -3498,   105,  2242,
   -3498, -3498,  2254,   258,  2247, -3498, -3498, -3498,  2763, -3498,
   29558, 29558, 29558, 29558, 10685, -3498,  2473,  2251,  2252, 51644,
   24626, -3498, -3498, -3498, -3498,  2315,   648, 39676,  2493, -3498,
    2270, 73737, -3498,  2326, 51644, -3498, -3498, 46935, -3498, -3498,
   -3498, -3498, -3498,  2736,  2149,  2260,  2262, -3498,  1645, -3498,
   -3498, 73737,  2263, -3498,  2275,   753, -3498, 73737,  2316, -3498,
     318,  2600,   134, -3498, 24626, -3498,  2695,  2775,  1908,  2285,
   73737, 62356, 30106, -3498,   333,   279, -3498,  2585, 62356,  2316,
    2731, -3498, -3498, -3498,   430, -3498,  2627,  2541, -3498,   255,
   -3498, 24626,   430,  2542,   305, 73737, -3498, -3498,  2691, -3498,
   78917,   256,   256, -3498,  1816,  2294,  2295,  2297,  2300,  2301,
    2307,  2311,  2318,  2329,  2330, -3498,  2331,  2332,  2334,  2335,
    2336,  2338,  2340,  2342,  1834,  2346, -3498,  2347,  2162,  2349,
    2352,  2356,  2360,  2362, 79923,  2364,  2369,  2370,  2378,  1835,
    2379,  1356,  1380, -3498, -3498, -3498, -3498,  2380, -3498,  2382,
   -3498, -3498,  1565,  2341, -3498, -3498, -3498,  2390, -3498,  2398,
   -3498, -3498, -3498, -3498, -3498, -3498,  2322,  2348, -3498, -3498,
   -3498,   213,  2354,  2384, 73737,  1616,   180,  2387, 73737,  2389,
    2125,  2824, 54068,  2836,  2388,   529,   997,  2641,  2391, -3498,
    1176,  1945, -3498, 57694,  4289,   915,  2323, -3498,   275,  2125,
   -3498,  2823,  1945,  2436, -3498,  1920,  2501, 24626,   170, -3498,
    2396, -3498,  2639, 73737,  2403, -3498, -3498, 55104,  2211,  6974,
   30106, 78917,  1335,  1341, -3498,  2934,  2577,  2456, -3498, -3498,
   -3498, -3498, -3498,  2410,   -12,  2411, 13666,  2412, -3498, -3498,
   -3498, -3498, -3498, -3498, 51644, 51644, 73737,  2595, -3498, -3498,
    2413,  2417, 43821,  2890,  2418, -3498, -3498,  2751, -3498, 36567,
   -3498,  1971,  2422,  1971, 78917,  1971, -3498, -3498, 51644, 24626,
   -3498, -3498, 47604,  2760, -3498,  1553,  1553, 12113,  1343, -3498,
    1553, 24626, 24626,  1553,  1553, 24626, -3498, 24078,   759, -3498,
    1347, -3498, 13037, -3498, 80426, -3498, -3498,  2258,  1176,  2258,
   -3498, -3498, -3498, -3498, -3498, -3498,   258,  1316, -3498, -3498,
    2052, 35000, -3498,  2419, -3498,   250, -3498,  2423, 47655, 47655,
    2955,  2955, 78917, 29558, 29558, 29558, 29558, 29558, 29558, 29558,
    2525,   238, 73737, 29558, 29558, 34471,  1182, -3498, 29558,  2684,
   -3498, 29558,  2527,   768, 29558, 29558, 29558, 29558, 29558, 29558,
   29558, 29558, 29558, 29558,    29, 24626, 62356,  2440, -3498, -3498,
   -3498,  2496, -3498, -3498,  1382,  2885,  2326, 24626, -3498, -3498,
    2449, 42267, -3498, -3498, -3498, -3498, 42267,   753, -3498,  2619,
    2316,  2451, -3498, -3498, -3498, -3498, -3498, -3498, 47461, -3498,
     160, 24626, -3498,   973,  6666, -3498, -3498, -3498, -3498,  2316,
    1520, -3498, 62356,  2947,  2835, -3498, -3498, 51644, -3498, -3498,
    2345,  2345, -3498, -3498,  2576, -3498, -3498,  2454, -3498, -3498,
    1565,   604, 46416, 62356, 62356, -3498, -3498,  2457, -3498, -3498,
   -3498, -3498, -3498,   -43,  2870, 62356,  1389,  1146, -3498,  1775,
    1407, 81447, 62356,  2459,  2655,   147,  2766, 62356,  2846, 57694,
   -3498,  2962,  2468, 62356,  2125,  1453,  1453, -3498,  2624, -3498,
    2625, -3498, -3498,  2968,   786, -3498,  1659, 54068, 62356, -3498,
   -3498, 39158, -3498,  6974,  1409, -3498, -3498,  2474,  2481, -3498,
    2258, 24626,  2482, 24626, -3498, 27914,  2978,  2480, -3498, 24626,
    2537, 33394, -3498, 24626, -3498, 62356, 67536,  2488, 67536, -3498,
   -3498, -3498, -3498, -3498, 24626, -3498,  1553,  1553,  1553, 24626,
   -3498, 24626, -3498, -3498, -3498,  2707,  2595, -3498,  2595,  2052,
   -3498,  2926, 35000, 35000, -3498, -3498, -3498,  2504,  1316,  2763,
   -3498,  1408, 51952,   390,  2886,  2886,  2886, 47655,  2511, 30106,
   30106, -3498,  3636,  2975, -3498,  2860, -3498,  1374, -3498,  2505,
   -3498, -3498,  4205, -3498, 52002, 29558,   263, 29558, 34471, 29558,
    2594,  2886,  2886,  2886,   418,   418,   278,   278,   278,  1408,
     390, -3498,  2517, -3498, -3498, 24626,  1775,   827,  2786, 73737,
      49, -3498, 51644, -3498, -3498, -3498, 62356, -3498, 54068, -3498,
     753,   488,  2506, 24626, 47486,  2756, -3498, -3498,  2792, -3498,
    2858, -3498,  2584,   624,  2604, -3498, -3498, -3498, -3498,  1616,
    1176,  2388,  1945,  2323,  2436, -3498, -3498,  2388,   212, -3498,
   -3498, 81447,  3028, -3498, 81447,  2859,  2529, 62356,  1775,  1146,
     969, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  1775,  2991,  2767,  2996, -3498,  1413,
    2274, 24626,   116, -3498,  1425,  2993, -3498, -3498,  3064,  2595,
    2538, 27914,  2539, -3498,  2544, 73737, 51644,  2693, -3498, -3498,
    2545, -3498, -3498, 24626, -3498, 47913,  2543,  2546,  3023,  2122,
    2537,  2537,  2926, 30106, -3498,  2548,   881, -3498, -3498,  2552,
   29558,  5207,  6193, 29558, 29558,  2914, -3498, -3498,  2559, -3498,
   -3498, 78917, 29558,  4622, 30106, 30106,  4837, -3498,  4965, 29558,
   -3498, -3498,   648, -3498, -3498,  3003, 39158,  2966,  1520,   753,
    2578,  1427, -3498, -3498, -3498, -3498, -3498,  3988, -3498, 47511,
    2822,   187,  2807,  2506, 24626, -3498,  2648, -3498, -3498, -3498,
    2582,  3073, -3498, -3498, -3498, -3498, -3498,  2688, -3498,  3085,
   -3498,  1429,  3043, -3498, 62356, -3498, 57694,  2597,  2436,  2323,
    2125,  2436,  2830, -3498,  2833, -3498,  2612, 47554, 73737, 73737,
    1945, 39158, 73737,  2614,  2537, -3498,  2617, -3498, -3498, -3498,
   61320, -3498,  2618, -3498, -3498, -3498, 24626,   607, -3498, -3498,
   -3498,  5176, -3498, 35000, 35000, -3498,   463, 29558, 29558,  3636,
   51884, 29558, 78917,  1431,  3636, 29558,  6576,  6810, 29558, 29558,
    5976,  2671, 62356,  1433,    81,  2792, 46416, -3498, 54068,  1847,
     488,  2941, -3498, -3498, -3498, -3498,   189,  2855, -3498,  2864,
   -3498, 51644, -3498,   212,  1775,  2635, 81447, -3498, 81447,  3021,
    2637, 57694, -3498, -3498, -3498, -3498, -3498, -3498, 39158,  2993,
   -3498,   387, -3498,  1827, -3498,   387, -3498, -3498, -3498, -3498,
   -3498,  1792, 28462, 28462, 28462,  2640,  1405, -3498, -3498,  2638,
   -3498,  2631,  3636,  3636, 51884,  1438, -3498,  3636, 29558, 29558,
    3636,  3636, 29558,  1775, -3498,  1827, -3498,  2780,  2807, -3498,
   -3498, -3498, -3498, -3498,   216,   216,  3060, -3498,  2715, -3498,
   -3498,  2436, 62356, -3498, -3498,  2651, -3498, 81447,  1445, 73737,
    2043, -3498,  2043, 30654,  2809,   336, 50579,  3036, -3498,  3036,
    3036, -3498, -3498, -3498, -3498, 35000, 35000, -3498,  3636,  3636,
    3636, -3498, -3498, 44857, -3498, -3498,  3165, -3498,   270, -3498,
   -3498, -3498,  2652,  2777, 81447, -3498,  1447,  1945,   387, -3498,
   -3498,  3157, -3498, -3498, -3498, -3498, -3498,   376, -3498, -3498,
   -3498, -3498, -3498,  1827,   753, -3498, -3498, -3498, 62356,  2657,
   73219,  1451, -3498, 81447,  1827,  2043, 29010,  2814, -3498,  2892,
   -3498, -3498,  2652, -3498,  2663, -3498,  3072, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, 62356,  2848, 73219,  1456, 62356,
     529, -3498,  2672,  2766, 62356,  2859,  1457, -3498, -3498
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     161,   270,     0,  1612,  1611,  1685,   270,     0,  1545,     0,
     270,   695,   600,     0,  1708,  1707,     0,   213,   270,     0,
     161,     0,  1646,     0,     0,     0,   758,   761,   759,     0,
       0,     0,   270,   798,     0,  1709,   270,     0,     0,   790,
     760,     0,  1663,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    24,    10,    11,    12,    13,
      20,    14,    15,    17,    18,    19,    21,    22,    23,    27,
      26,    28,    29,  1568,    30,    32,    33,    34,     0,    35,
       0,    25,    16,    31,    36,    37,    38,    39,   734,   720,
     803,   733,     0,     0,   160,   902,   741,    40,    42,    41,
      43,    44,    45,    46,    47,  1710,  1705,    48,   269,   268,
     262,     0,     0,     0,     0,     0,  1684,     0,     0,   273,
     115,  1734,  1735,  1736,  1737,  2355,  1738,  1739,  1740,  1741,
    1742,  1743,  1744,  2356,  2109,  1745,  1746,  1747,  1748,  1749,
    2110,  1750,  1751,  1752,  2055,  2056,  2111,  2057,  2058,  1753,
    1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  2059,
    2060,  1763,  1764,  1765,  1766,  1767,  2061,  2112,  2062,  1768,
    1769,  1770,  1771,  1772,  2113,  1773,  1774,  1775,  1776,  1777,
    1778,  1779,  1780,  2357,  2114,  1781,  1782,  1783,  1784,  1785,
    1786,  1787,  1788,  1789,  1790,  2063,  1791,  1792,  2064,  1793,
    1794,  1795,  1796,  1797,  1798,  1799,  1800,  2358,  1801,  1802,
    1803,  1804,  1805,  1806,  1807,  1808,  1809,  2359,  2360,  1810,
    1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,  1819,  2065,
    1820,  1821,  1822,  1823,  1824,  1825,  2066,  1826,  1827,  1828,
    2067,  1829,  1830,  1831,  2115,  2116,  1832,  1833,  2068,  2118,
    1834,  1835,  2361,  2069,  2070,  2362,  1836,  1837,  1838,  1839,
    1840,  1841,  1842,  1843,  2119,  1844,  1845,  1846,  1847,  1848,
    1849,  1850,  1851,  1852,  1853,  1854,  1855,  2120,  2071,  1856,
    1857,  1858,  1859,  1860,  2072,  2073,  2074,  1861,  2121,  2122,
    1862,  2123,  1863,  2363,  1864,  1865,  1866,  1867,  1868,  1869,
    2124,  1870,  2125,  1871,  1872,  1873,  1874,  1875,  1876,  1877,
    1878,  2075,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,
    1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  1898,  2076,  2127,  2077,  1899,  1900,  1901,  2364,  2078,
    1902,  1903,  2128,  1904,  2079,  1905,  2080,  1906,  1907,  1908,
    1909,  1910,  1911,  1912,  1913,  1914,  1915,  2081,  2129,  1916,
    2130,  2082,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,
    1925,  2365,  2366,  1926,  1927,  1928,  1929,  2083,  2131,  1930,
    1931,  2084,  1932,  1933,  1934,  1935,  1936,  1937,  1938,  1939,
    2367,  2368,  1940,  1941,  1942,  1943,  1944,  1945,  2085,  1946,
    1947,  1948,  1949,  1950,  1951,  1952,  2369,  1953,  1954,  1955,
    1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,  2132,
    1965,  1966,  1967,  2086,  1968,  1969,  1970,  1971,  1972,  1973,
    1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
    1984,  1985,  1986,  2087,  1987,  1988,  2370,  2133,  2371,  1989,
    2088,  1990,  2372,  1991,  1992,  1993,  1994,  1995,  1996,  1997,
    1998,  1999,  2000,  2001,  2002,  2089,  2003,  2090,  2004,  2005,
    2006,  2135,  2007,  2008,  2009,  2010,  2011,  2012,  2091,  2092,
    2373,  2013,  2014,  2093,  2015,  2094,  2016,  2017,  2095,  2018,
    2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,  2028,
    2029,  2030,  2031,  2032,  2033,  2034,  2096,  2097,  2035,  2036,
    2136,  2037,  2374,  2038,  2039,  2040,  2041,  2375,  2042,  2043,
    2044,  2045,  2046,  2047,  2048,  2049,  2050,  2098,  2099,  2100,
    2101,  2102,  2103,  2104,  2105,  2106,  2107,  2108,  2051,  2052,
    2053,  2054,     0,   116,   117,  1490,   118,  1717,     0,  1467,
     115,  2068,  2075,  2089,  1543,  1544,   116,   118,     0,   265,
     694,     0,     0,     0,     0,     0,     0,   215,     0,     0,
     594,   593,     0,  1534,   599,     0,     0,     0,   120,   111,
    1932,   119,  1466,   109,   126,  2279,  2280,  2281,  2282,  2166,
    2283,  2284,  2285,  2286,  2167,  2287,  2168,  2169,  2170,  2171,
    2172,  2173,  2288,  2289,  2290,  2175,  2174,  2291,  2176,  2292,
    2177,  2293,  2178,  2179,  2294,  2295,  2180,  1787,  2181,  2182,
    2296,  2297,  2298,  2299,  2300,  2301,  2302,  2303,  2304,  2183,
    2184,  2305,  2306,  2185,  2307,  2308,  2186,  2309,  2187,  2188,
    2189,  2310,  2311,  2312,  2190,  2191,  2313,  2192,  2314,  2315,
    2193,  2194,  2197,  2195,  2316,  2196,  2317,  2198,  2199,  2200,
    2318,  2319,  2201,  2202,  2320,  2203,  2204,  2205,  2206,  2207,
    2321,  2208,  2322,  2209,  2210,  2323,  2324,  2325,  2326,  2327,
    2212,  2211,  2213,  2214,  2328,  2329,  2330,  2331,  2215,  2216,
    2217,  2332,  2333,  2218,  2334,  2335,  2219,  2220,  2336,  2221,
    2222,  2337,  2223,  2224,  2338,  2225,  2226,  2339,  2340,  2341,
    2227,  2342,  2228,  2229,  2343,  2344,  2230,  2231,  2345,  2232,
    2346,  2347,  2348,  2349,  2233,  2234,  2350,  2235,  2351,  2352,
    2353,  2354,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2243,
    2244,  2245,  2246,  1681,   128,   127,   129,   130,     0,   618,
     619,     0,   629,     0,   611,   616,   612,     0,   638,     0,
     631,   639,   620,   610,   632,   621,   609,   214,     0,   640,
     626,   614,     0,     0,     0,     0,   266,   227,   600,     0,
     161,     0,  1572,  1573,  1574,  1575,  1576,  1577,  1582,  1578,
    1579,  1580,  1581,  1583,  1584,  1585,  1586,  1587,  1563,  1568,
    1588,  1589,  1590,  1591,  1592,  1593,  1594,  1595,  1596,  1597,
    1598,  1599,  1600,  1601,  1602,     0,  1545,     0,  2061,  2112,
    2066,     0,     0,  2079,     0,  2082,  2083,  1968,  2090,  2093,
    2094,  2095,  2096,     0,   973,   119,   113,   957,     0,   736,
     906,   916,   957,   962,  1246,   985,  1247,     0,   121,  1648,
    1647,  1641,   200,  1507,  1694,  1834,  1873,  1985,  2091,  2013,
    2035,  1713,  1695,  1688,  1693,   267,   797,   795,     0,  1438,
    1834,  1873,  1972,  1985,  2091,  2035,  1620,  1625,     0,   273,
       0,  1715,  1699,     0,  1700,   119,   742,   789,     0,   274,
    1662,     0,  1667,     0,  1948,   769,   772,  1501,   770,   275,
    2376,  2377,  2378,  2379,  2380,  2381,  2382,  2383,  2384,  2385,
    2386,  2387,  2388,  2389,  2390,  2391,  2392,  2393,  2394,  2395,
    2396,  2397,  2398,  2399,  2400,  2401,  2402,  2403,  2404,  2405,
    2406,  2407,  2408,  2409,  2410,  2411,  2412,  2413,  2414,  2415,
    2416,  2417,  2418,  2419,  2420,  2421,  2422,  2423,  2424,  2425,
    2426,  2427,  2428,   276,   277,     0,   734,     0,     0,     1,
     161,  1567,  1677,     0,   167,     0,     0,   793,   793,     0,
     793,     0,   726,     0,     0,   734,   729,   733,   903,  1712,
    2368,  2091,  2013,  1698,  1701,  1842,     0,     0,  1842,     0,
    1842,     0,  1842,     0,     0,  1687,     0,   263,  1422,     0,
    1468,   122,     0,     0,  1556,  1552,  1557,  1553,  1558,  1551,
    1550,  1559,  1555,     0,     0,     0,   565,   598,   597,   596,
     595,   600,     0,  1842,  1518,     0,   656,   657,     0,     0,
       0,     0,     0,   211,  1529,   112,   110,  1842,  1682,   627,
     628,     0,   617,   613,   615,     0,     0,     0,  1842,  1496,
     637,   633,  1842,   637,  1460,  1842,     0,     0,   219,     0,
     593,  1565,  1603,  2233,  1604,  1605,  1606,  1618,     0,  1619,
    1609,  1571,   161,     0,   693,  1542,     0,     0,     0,  1368,
       0,   918,   957,   962,     0,     0,   975,     0,  1388,     0,
    1394,     0,     0,     0,   957,   741,     0,   916,   974,   114,
       0,   955,   956,   844,   844,   798,     0,   779,   967,     0,
       0,   970,   968,     0,   970,     0,     0,     0,   970,   966,
     925,     0,   844,     0,   955,   958,   844,     0,   977,  1562,
       0,     0,     0,     0,  1691,  1689,  1690,  1696,     0,  1692,
       0,     0,  1470,  1472,  1473,  1336,  1483,  1224,     0,  2056,
    2057,  2058,  1411,  2059,  2060,  2062,  2063,  2064,  1182,  1807,
    2065,  1481,  2067,  2069,  2070,  2072,  2073,  2074,  2075,  2076,
    2077,     0,  1482,  2080,  1911,  2085,  2086,  2088,  2091,  2092,
    1480,  2097,     0,     0,     0,  1449,  1359,     0,  1223,     0,
       0,     0,  1415,  1423,  1216,     0,     0,  1021,  1022,  1043,
    1044,  1023,  1049,  1050,  1052,  1024,     0,  1445,  1116,  1212,
    1433,  1221,  1229,  1225,  1226,  1266,  1227,  1245,  1230,  1303,
    1222,     0,  1228,  1214,  1441,   779,  1439,     0,  1215,  1469,
     779,  1437,  1623,  1621,  1628,  1622,     0,  1624,     0,     0,
       0,   264,     0,   114,  1669,  1670,  1661,  1659,  1660,  1658,
    1657,  1664,     0,  1666,  1568,  1354,  1356,     0,   771,     0,
       0,     0,   334,   723,   722,   724,     3,  1501,     0,     0,
       0,  1824,     0,  1649,   791,   792,     0,     0,     0,     0,
       0,     0,     0,     0,   887,   818,   819,   821,   884,   888,
     896,     0,     0,     0,     0,     0,   730,     0,  1711,  1704,
       0,  1702,     0,     0,     0,   145,   145,     0,     0,     0,
       0,     0,   103,    52,    96,     0,     0,     0,     0,   241,
     254,     0,     0,     0,     0,     0,   251,     0,     0,   234,
     228,   230,    54,     0,   145,     0,    50,     0,     0,     0,
      56,  1685,     0,   693,   271,   272,  1421,     0,   124,   125,
     123,   115,     0,  2247,  2109,  2110,  2111,  2112,  2062,  2113,
    2114,     0,  2115,  2116,  2068,  2118,  2119,  2120,  2121,  2122,
    2123,  2124,  2125,  2075,  2127,  2128,  2129,  2130,  2131,  2132,
    2273,  2133,  2089,  2135,  2095,     0,  2136,  1238,   116,  1486,
     118,  1362,   803,  1360,  1502,     0,     0,  1554,     0,     0,
       0,     0,   691,     0,     0,     0,     0,     0,     0,  1514,
       0,     0,  1842,   207,  1842,   565,     0,  1842,   565,  1842,
       0,  1842,   212,   216,  1528,  1531,     0,   630,  1842,   637,
     625,   623,   622,   624,  1842,   260,     0,     0,  1497,   635,
     636,     0,   604,     0,     0,   606,     0,     0,   224,     0,
     222,     0,   600,   161,     0,   235,  1614,  1615,  1613,     0,
       0,  1570,   238,  1608,  1617,  1607,  1616,  1569,   255,  1564,
       0,     0,  1560,   679,     0,     0,     0,  1369,  1092,  1091,
    1073,  1074,  1089,  1090,  1075,  1076,  1083,  1084,  1094,  1093,
    1081,  1082,  1077,  1078,  1071,  1072,  1087,  1088,  1079,  1080,
    1085,  1086,  1069,  1070,  1383,  1370,  1371,  1372,  1373,  1374,
    1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,     0,     0,
    2416,   915,   913,     0,     0,     0,     0,     0,     0,  1415,
       0,  1187,  1222,     0,     0,     0,  1354,  1393,     0,     0,
       0,     0,     0,     0,  1354,  1399,     0,     0,   941,   953,
       0,   837,   843,   914,   912,     0,  1438,   907,     0,   987,
     967,     0,   966,     0,     0,   969,   963,     0,   964,     0,
       0,     0,     0,   965,     0,     0,     0,     0,   910,     0,
     953,     0,   911,   984,  1631,  1639,   201,     0,  1492,  2137,
    2138,  2139,  1031,  2140,  1060,  1038,  1060,  1060,  2141,  2142,
    2143,  2144,  1027,  1027,  1040,  2145,  2146,  2147,  2148,  2149,
    1028,  1029,  1065,  2150,  2151,  2152,  2153,  2154,     0,     0,
    2155,  1060,  2156,  1027,  2157,  2158,  2159,  1032,  2160,   995,
    2161,     0,  2162,  1030,   996,  2163,  1068,  1068,  2164,     0,
    1055,  2165,  1493,  1494,  1495,     0,  1365,  1005,  1013,  1014,
    1015,  1016,  1041,  1042,  1017,  1047,  1048,  1018,  1115,     0,
    1027,   161,  1697,  1714,     0,  1359,  1231,  1059,  1046,  1410,
       0,  1054,  1053,     0,  1359,  1036,  1035,  1034,  1218,     0,
    1033,  1316,  1060,  1060,  1058,  1141,  1037,     0,     0,     0,
       0,     0,  1064,     0,  1062,  1142,  1120,  1121,     0,     0,
    1448,  1457,  1354,  1358,     0,  1216,  1354,     0,     0,  1306,
    1308,     0,  1233,  1234,     0,  1416,  1471,  1217,     0,  1476,
       0,     0,  1115,  1115,  1444,  1336,     0,  1326,  1329,     0,
       0,  1333,  1334,  1335,     0,     0,     0,  1436,     0,  1344,
    1346,     0,     0,  1157,  1342,     0,  1160,     0,     0,     0,
       0,  1330,  1331,  1332,  1322,  1323,  1324,  1325,  1327,  1328,
    1340,  1321,  1138,     0,  1213,     0,  1269,     0,  1137,  1442,
     905,     0,  1474,   905,  1633,  1637,  1638,  1636,  1632,     0,
    1627,  1626,  1629,  1630,  1716,     0,  1671,  1655,     0,  1652,
    1357,   900,   773,  1462,     0,   777,     0,   347,   326,   348,
    1678,  1676,   166,   165,     0,   218,     0,     0,     0,  1642,
     746,   745,   812,   804,   806,   812,     0,   744,     0,   860,
     861,     0,     0,     0,     0,   893,   891,  1470,  1483,   848,
     822,   847,     0,     0,   826,     0,   852,  1116,   886,   728,
     816,   817,   820,   727,     0,   889,     0,   899,     0,   765,
     767,   750,   764,   762,   747,   755,   887,   821,     0,  1706,
    1703,     0,     0,     0,     0,     0,  1842,     0,     0,   998,
      87,    68,   517,   144,     0,     0,     0,     0,     0,     0,
       0,    95,    92,    93,    94,     0,     0,     0,     0,  1492,
     239,   240,   253,     0,   244,   245,   242,   246,   247,     0,
       0,   232,   233,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1686,  1679,  1417,
    1422,   803,   803,   803,     0,   801,   802,     0,     0,     0,
       0,     0,   678,   563,   573,     0,     0,     0,     0,  1518,
       0,     0,     0,     0,     0,   211,   281,   280,     0,     0,
     600,  1519,  1517,  1521,  1520,  1522,  1813,   195,     0,     0,
     206,   203,     0,   562,   536,     0,     0,  1533,     0,     0,
     651,   649,   652,   641,   654,   644,     0,     0,     0,     0,
    1842,   552,  1530,     0,  1683,     0,   278,     0,     0,   258,
     637,  1498,     0,   634,   637,  1461,     0,   637,   226,     0,
       0,  1566,  1610,   236,   256,   237,   257,   693,   688,   718,
       0,   696,   701,   676,     0,   676,     0,   698,   702,   676,
     697,     0,   676,   692,     0,  1261,     0,  1251,     0,     0,
     976,     0,     0,  1252,  1189,  1190,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1207,  1206,  1253,   980,     0,   983,
       0,     0,  1391,  1392,     0,  1254,     0,     0,  1398,     0,
       0,     0,  1259,     0,   917,     0,     0,     0,   832,   836,
     839,     0,   842,   779,   735,  1834,  1873,     0,   790,   790,
     790,   788,   778,     0,   864,     0,     0,   942,     0,     0,
     944,   946,     0,     0,   949,   924,   923,     0,     0,     0,
       0,   988,     0,  1466,     0,     0,   202,     0,     0,     0,
    1013,     0,     0,     0,  1003,   999,     0,  1095,  1096,  1097,
    1098,  1099,  1100,  1101,  1102,  1103,  1104,  1105,  1106,  1107,
    1019,  1506,     0,  1025,  1511,  1512,  1509,     0,  1505,  1508,
    1510,  1513,     0,     0,     0,     0,  1409,  1405,     0,     0,
       0,     0,  1311,  1313,  1315,     0,  1057,  1056,  1320,  1326,
    1329,  1333,  1334,  1335,  1330,  1331,  1332,  1322,  1323,  1324,
    1325,  1327,  1328,     0,  1348,     0,  1302,     0,     0,     0,
       0,     0,     0,     0,  1447,     0,  1185,     0,  1235,  1220,
       0,     0,  1309,  1236,  1449,  1424,     0,     0,     0,  1479,
    1478,  1117,  1126,  1129,  1161,  1162,  1133,  1134,  1135,  1139,
    1504,  1503,  1443,     0,  1435,     0,     0,  1118,  1143,  1148,
       0,  1400,  1403,  1178,  1402,     0,  1166,     0,  1156,     0,
    1164,  1168,  1144,  1159,     0,  1140,     0,  1436,  1345,  1347,
       0,  1343,     0,  1130,  1131,  1132,  1122,  1123,  1124,  1125,
    1127,  1128,  1136,  1319,  1317,  1318,     0,  1422,     0,  1434,
       0,     0,  1271,     0,     0,  1163,  1440,     0,   987,   803,
     987,     0,  1115,  1672,  1501,  1665,  1654,  1501,  1355,  1463,
    1500,   775,     0,     0,   333,   329,   341,     0,   372,   347,
     334,   319,     0,  1674,   152,   156,     0,  1423,   186,   188,
     905,     0,  1649,  1649,  1651,  1650,   810,   811,   815,     0,
       0,   815,   794,   743,  2086,  1968,     0,     0,     0,     0,
     853,   894,     0,   885,   850,   851,     0,   849,  1470,   854,
    1469,   855,   858,   859,   827,  1458,   895,   897,     0,   890,
       0,  1464,   749,   768,     0,     0,     0,     0,     0,   732,
     731,   901,     0,    53,     0,  1842,    70,     0,     0,     0,
       0,     0,     0,   467,     0,   567,   467,   108,  1842,   637,
    1842,   637,  1738,  1808,  1986,     0,    66,   541,    99,     0,
     138,   570,     0,   526,    89,   104,   131,     0,     0,   229,
      55,   243,   248,   134,   252,   249,  1538,   250,   145,     0,
      51,     0,   132,     0,  1536,     0,     0,    57,   136,  1540,
    1687,     0,  1421,     0,   801,   801,   801,     0,  1361,     0,
       0,     0,  1363,  1364,  1156,  1547,  1548,  1549,  1546,   664,
     677,     0,   564,     0,   690,   667,   668,   678,     0,  1516,
       0,   207,   565,     0,   565,     0,   216,     0,  1518,     0,
       0,   197,   193,     0,     0,     0,     0,   563,   555,   553,
     586,     0,   560,   554,     0,     0,   512,     0,  1732,     0,
       0,     0,     0,   658,     0,     0,     0,     0,   211,   217,
       0,     0,     0,   637,   260,   261,   603,  1499,   605,     0,
     607,   225,   223,  1561,  2203,   684,  1359,     0,   682,   689,
     681,   683,   686,   687,   680,     0,   675,     0,   711,     0,
       0,     0,     0,     0,     0,     0,     0,  1248,  1367,     0,
    1386,  1385,  1188,  1195,  1198,  1202,  1203,  1204,  1387,     0,
       0,     0,  1199,  1200,  1201,  1191,  1192,  1193,  1194,  1196,
    1197,  1205,   985,     0,     0,   979,  1396,  1395,  1389,  1390,
       0,  1256,  1257,  1258,  1397,     0,     0,   954,   830,   828,
     831,   833,   829,     0,     0,   987,   790,   790,   790,   790,
     787,     0,     0,     0,   986,     0,   881,   948,     0,   972,
       0,   945,   928,     0,   936,     0,   943,   992,   959,     0,
       0,   961,  1640,  1009,     0,  1004,  1000,     0,     0,     0,
    1010,     0,     0,     0,     0,     0,     0,     0,  1366,     0,
     796,  1232,     0,     0,     0,  1406,     0,  1184,  1026,  1039,
       0,  1314,  1237,     0,  1337,  1301,  1067,  1066,  1068,  1068,
       0,     0,     0,     0,  1456,  1414,     0,  1262,  1412,  1355,
    1305,  1307,  1457,  1219,  1051,  1115,     0,     0,     0,     0,
       0,     0,     0,  1167,  1158,     0,  1165,  1169,     0,     0,
       0,  1152,     0,     0,  1150,  1179,  1146,     0,     0,  1180,
    1421,     0,  1425,     0,     0,  1270,  1279,   908,   904,   864,
     801,   864,     0,  1634,  1656,  1653,   776,   161,   329,   327,
     328,   329,   329,   329,   329,   339,   345,   340,   329,   329,
     329,   401,   391,     0,   389,   334,   397,   372,   372,   373,
     350,   395,   397,   359,   369,   368,   325,   349,     0,   323,
    1675,     0,   175,     0,     0,     0,     0,   178,   192,   189,
    1674,     0,  1643,  1644,     0,   805,   807,     0,  1338,   815,
     809,   857,   856,     0,   825,   892,   823,     0,   898,     0,
     766,     0,   752,     0,   927,     0,     0,     0,     0,     0,
     516,     0,     0,     0,   467,     0,   575,     0,   582,     0,
       0,   567,   548,    88,     0,     0,     0,    62,   107,    80,
      72,    58,    86,     0,     0,    91,     0,    84,   101,   102,
     100,   105,     0,   477,   502,     0,     0,   513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   693,
    1422,  1418,  1422,     0,     0,     0,   803,   799,   800,  1239,
       0,   663,   717,   714,   715,   713,   234,   574,     0,     0,
       0,   205,   562,     0,  1533,   643,   646,     0,     0,  1515,
     600,     0,   198,     0,   196,     0,   207,   565,     0,   540,
     536,   561,   534,   533,   535,     0,  1733,   227,     0,  1727,
     565,  1532,     0,     0,   659,   650,     0,   655,     0,     0,
     653,   216,     0,     0,  1527,   279,   259,   637,     0,   671,
     712,   719,   699,   704,     0,   710,   706,   705,   700,   708,
     707,   703,  1249,  1260,  1384,     0,     0,     0,     0,   978,
     981,     0,  1255,  1250,   952,     0,     0,   864,     0,     0,
       0,     0,   781,   780,   786,     0,     0,  1273,   947,     0,
       0,     0,   934,   922,   929,   930,     0,     0,     0,   990,
     989,   960,  1013,     0,   993,  1013,     0,  1013,     0,  1011,
       0,  1020,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1045,
       0,  1408,  1404,  1310,  1312,  1349,  1063,  1061,  1183,  1446,
    1354,  1451,  1453,     0,     0,     0,     0,  1304,  1186,  1477,
    1119,     0,     0,  1149,  1401,  1170,     0,     0,     0,  1145,
    1337,     0,     0,     0,     0,     0,  1154,     0,  1429,  1422,
       0,  1428,     0,     0,     0,     0,  1244,   909,   881,     0,
     881,     0,     0,   338,   344,   337,   336,   335,   342,   346,
     332,   389,   394,   390,   392,   329,     0,   396,   386,     0,
     370,   371,   351,   372,     0,   356,   355,   357,   354,   399,
       0,     0,     0,     0,   318,   403,  1222,     0,     0,  1673,
       0,  1668,   153,   154,   155,     0,     0,     0,   170,   147,
       0,     0,   187,   175,   163,   813,   814,     0,   808,   824,
    1459,  1465,   751,     0,  1216,     0,     0,   748,     0,   139,
     467,     0,     0,    69,     0,   584,   528,   576,   559,   543,
       0,     0,     0,   468,     0,   601,     0,     0,   549,     0,
       0,     0,     0,   529,     0,     0,   488,     0,     0,   559,
       0,   566,   484,   485,     0,    61,    81,     0,    77,     0,
     106,     0,     0,     0,     0,     0,    64,    76,     0,    59,
       0,   637,   637,    67,  1492,  2137,  2138,  2139,  2140,  2141,
    2142,  2143,  2144,  2145,  2146,  2257,  2147,  2148,  2149,  2150,
    2151,  2152,  2153,  2154,  2266,  2155,   474,  2156,  1911,  2157,
    2158,  2159,  2160,  2161,     0,  2162,   996,  2163,  2164,  2346,
    2165,  1322,  1323,   472,   473,   569,   469,  1493,   470,  1495,
     577,   471,     0,   572,   527,   135,  1539,     0,   133,     0,
    1537,   142,   140,   137,  1541,  1680,     0,     0,  1242,  1243,
    1240,   801,     0,     0,     0,   693,   670,     0,     0,     0,
    1732,     0,     0,   307,   289,   317,     0,  1842,     0,   194,
       0,  1533,   204,   562,     0,   592,   512,   587,     0,  1732,
    1730,     0,  1533,  1726,   642,   645,     0,     0,   734,   647,
       0,   208,     0,     0,     0,   608,   685,     0,   709,  1208,
       0,     0,     0,     0,   840,     0,   846,   881,   785,   784,
     783,   782,   863,  1782,  2069,  1967,     0,   867,   862,   865,
     870,   872,   871,   873,   869,   880,     0,   883,   971,  1350,
    1352,     0,     0,     0,     0,   935,   937,     0,   939,     0,
     991,  1007,     0,  1008,     0,  1006,  1001,  1012,  1407,  1454,
    1455,  1450,     0,  1116,  1413,  1176,  1174,  1171,     0,  1172,
    1153,     0,     0,  1151,  1147,     0,  1181,     0,     0,  1426,
       0,  1265,     0,  1268,  1282,  1278,  1277,  1273,  1239,  1273,
    1635,   774,   330,   331,   343,   393,   372,   359,   387,   388,
     319,     0,   402,     0,   374,     0,   353,     0,   425,   426,
     407,   408,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1436,     0,     0,     0,     0,     0,   441,     0,     0,
     444,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   174,   151,   177,
     176,     0,  1423,   184,     0,     0,   175,     0,   179,   660,
       0,     0,   763,   926,   756,   757,     0,   580,    71,     0,
     559,     0,   467,   545,   544,   547,   542,   546,     0,   602,
       0,     0,   486,     0,   493,   531,   532,   530,   487,   559,
     565,   489,     0,     0,     0,    73,    63,    60,    65,    74,
       0,     0,    75,    78,   992,    90,    83,  1492,  2266,  2275,
       0,     0,     0,     0,     0,  1420,  1419,     0,   666,   665,
     716,   662,   673,   234,     0,     0,     0,   536,  1729,     0,
       0,     0,     0,     0,     0,   304,   296,     0,     0,   562,
     199,     0,     0,     0,  1732,     0,     0,   464,     0,   509,
       0,   220,  1731,     0,     0,  1718,     0,     0,     0,  1525,
    1526,     0,   672,  1209,     0,  1210,   982,     0,     0,   838,
    1273,     0,     0,     0,   874,   868,     0,  1272,  1274,     0,
     835,  1353,   931,     0,   933,     0,   957,     0,   957,   940,
    1002,   994,  1452,  1263,     0,  1173,  1177,  1175,  1155,  1422,
    1430,  1422,  1427,  1267,  1281,  1284,   883,  1475,   883,   319,
     367,   365,     0,     0,   382,   385,   352,   389,   359,   354,
     404,   415,   445,   446,   419,   420,   421,   423,     0,     0,
       0,   405,   427,   432,   462,     0,   450,     0,   440,     0,
     448,   452,   428,   443,   424,     0,  1436,     0,     0,     0,
       0,   416,   417,   418,   409,   410,   411,   412,   413,   414,
     422,   447,     0,   320,   324,     0,     0,   162,     0,     0,
     159,   146,   164,  1339,   753,   754,     0,   467,     0,   558,
     581,   498,   476,     0,     0,     0,   483,   490,   591,   492,
       0,    82,    98,     0,     0,   571,   143,   141,  1241,   693,
       0,   289,  1533,   512,  1726,   210,   308,   289,   285,   315,
     303,     0,     0,   316,     0,   298,     0,     0,     0,   536,
     227,  1728,   525,   518,   519,   520,   521,   522,   523,   524,
     539,   538,   510,   511,     0,     0,     0,     0,   648,     0,
    1527,     0,   181,   190,     0,   181,  1211,   841,     0,   883,
       0,     0,     0,   866,     0,     0,   882,     0,   739,  1351,
       0,   921,   919,     0,   920,     0,     0,     0,     0,   803,
     835,   835,   365,     0,   398,     0,   379,   383,   400,     0,
       0,     0,     0,     0,     0,     0,   451,   442,     0,   449,
     453,     0,     0,   436,     0,     0,   434,   463,   430,     0,
     322,   148,     0,   149,   185,     0,     0,     0,   565,   583,
     557,     0,   550,   496,   495,   497,   501,     0,   499,     0,
     515,     0,   508,   476,     0,    85,     0,   578,   661,   669,
       0,     0,   466,  1720,   288,   282,   283,     0,   286,   305,
     309,     0,     0,   295,     0,   299,   562,     0,  1726,   512,
    1732,  1726,     0,  1723,     0,   209,     0,     0,     0,   183,
    1533,     0,   183,     0,   835,   876,     0,   875,  1276,  1275,
     837,   932,     0,  1264,  1432,  1431,     0,  1288,   738,   737,
     366,   363,   384,     0,     0,   358,   406,     0,     0,   433,
     454,     0,     0,     0,   429,     0,     0,     0,     0,     0,
     438,     0,     0,     0,     0,   591,     0,   537,     0,     0,
     498,     0,   491,   588,   589,   590,     0,   504,   494,   505,
      79,    97,   579,   285,     0,     0,     0,   314,     0,   312,
       0,   562,  1721,   465,   221,  1719,  1724,  1725,     0,   181,
     180,   812,   182,   987,   191,   812,   845,   740,   877,   834,
     938,  1283,     0,     0,     0,     0,     0,   364,   380,   375,
     381,   377,   460,   458,   455,     0,   456,   437,     0,     0,
     435,   431,     0,     0,   158,   987,   169,     0,   508,   556,
     551,   475,   500,   514,     0,     0,     0,   506,     0,   507,
     287,  1726,     0,   306,   310,     0,   313,     0,     0,   183,
     815,  1523,   815,  2055,  1783,  2020,     0,  1300,  1289,  1300,
    1300,  1280,   361,   360,   362,     0,     0,   457,   461,   459,
     439,   150,   157,     0,   467,   480,     0,   479,     0,   568,
     503,  1722,   301,     0,     0,   293,     0,  1533,   812,   171,
     172,     0,  1293,  1292,  1291,  1295,  1294,     0,  1287,  1285,
    1286,   376,   378,   987,   585,   478,   482,   481,     0,     0,
       0,     0,   297,     0,   987,   815,     0,     0,  1297,     0,
    1298,   168,   301,   284,  1864,   292,     0,   311,   294,  1524,
     173,  1290,  1296,  1299,   300,     0,     0,     0,     0,     0,
     317,   290,     0,   296,     0,   298,     0,   302,   291
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3498, -3498, -3498,  2250,   101,   102,  -982, -1283, -1061, -1286,
   -3498,    88,   103, -3498, -3498,   422, -3498,  1327, -3498,   416,
    -749,   838, -3498,  1430, -3498, -3498,  1882,   802,   112,   113,
    2408, -3498,  1296, -3498,  4317,    -7,  1899,   521,  -540,  -965,
   -1284,    41,    28, -3498, -3498, -3498, -3498, -3498,  -504,   780,
   -1288, -3498,   713, -3498, -3498, -3498, -3498,   -18,   392, -2394,
       4, -2305, -3209,  -532, -3498,  -687, -3498,  -184, -3498,  -606,
   -3498,  -658,  -619,  -670, -3059, -1230, -3498,  1953,  -237, -3498,
     880, -3498, -2714, -3498, -3498,   868, -3498, -1243, -3498, -2370,
     397,  -589, -2204, -2727, -2291,  -999,   479,  -596,   457, -2192,
   -1018, -3498,   897, -3498,  -578, -3498,  -963, -2066,   119, -3051,
   -1696,  3092, -3498, -3498, -3498,  -760, -3498, -2718,  6131, -3498,
     120, -3498,   783, -3498, -2260,   785, -2237,  1867,  -354,   123,
   -1704, -3498, -3498, -1779,    94, -2249,    11, -2241,   125, -3498,
   -3498,   126,    40,  -637,   534, -3498,   129, -3498, -3498,  1841,
    -993, -3498, -3498,   784,   130,  1280, -3498, -2724, -3498,  -610,
   -3498,  -629,  -627, -3498, -3498,    47,  -955,  1850, -3498, -3498,
   -3498,    13, -3498,  -400, -3498, -3498, -2746, -3498,    42, -3498,
   -3498, -3498, -3498, -1567,  -328,   544, -3498, -3498,  -517, -2735,
    -454, -3498, -3316, -2973, -3498, -3498,  -674, -3342, -2182,   131,
   -3498,  2344,  -179,   -20, -3498,   842, -3498,  -571, -3498, -2341,
   -3498,  -734, -3498,  -739,  -738, -2101,  -716,  -693, -3498,  -562,
   -3497,  -667, -3498, -3498,  -722, -2989, -3498, -3498,  2491, -3498,
    -984, -3498,   596, -2346, -3498,  1014, -3498,  1016, -3498,  -245,
   -2984, -3498, -3498,  -397, -3498, -3498, -3498, -2239,   -17,  -635,
    -638, -3498, -3176, -3498, -3498, -2555, -3498, -3498, -3498,   600,
   -3498, -3498,   935,   135,   136, -3498,   627,   140, -1224,     8,
    6836,   -41,   -11, -3498,    -3, -3498, -3498, -3498,   974, -3498,
   -3498,    33,    82,  2069, -3498, -1097, -3498, -1535,   811, -3498,
    2248,  2255, -2269,  -940,   -81, -3498,  1006, -1774, -2247,  -678,
    1473,  2045,  2059,   788, -2682, -3498,  -456, -3498,   114, -3498,
   -3498,  1029,  1542, -1649, -1636, -3498, -2308, -3498,  -325,  -138,
   -3498, -3498, -3498, -3498, -3498, -2664, -2760,  -633,  1524, -3498,
    2093, -3498, -3498, -3498, -3498,    45, -1604,  3359,  1083,   -42,
   -3498, -3498, -3498, -3498,   450, -3498,  1279,    98, -3498,  2555,
    -675,  -813,  2310,   193,  -536, -1905,   -19,  2567,   839, -3498,
   -3498,   843, -2208, -1501,   792,   -47,  1276, -3498, -3498, -1335,
   -3498, -1915, -1253, -3498, -3498,  -669,  -661, -3498, -3498, -3498,
    2402,  2476, -3498, -3498,  3061,  3954, -3498,  -756,  4401,  -785,
   -1106,  2321, -1023,  2325, -1010, -1003,  -986,  2350,  2351,  2357,
    2358,  2359,  2361,  2365, -1561,  8265,  -852,  9375, -2292, -3498,
   -1675,  1393,  1395,  1397,    55, -3498, -1486,   109, -3498, -3498,
   -3498, -3498, -3498, -2941, -3498,  -293, -3498,  -288, -3498, -3498,
   -3498, -1757, -2888, -1807, -3498,  9796,  1206, -3498, -3498,   778,
   -3498, -3498, -3498, -3498, -1622, -3498,  9091,  1093, -3498, -2105,
   -3498, -3498, -1065,  -804,  -444, -1084, -1301, -2022, -3498, -3498,
   -3498, -3498, -3498, -3498, -1564, -1868,   -80, -2160, -3498, -3498,
    1265, -3498, -3498, -3498,   444, -1678, -1828, -2226, -3498, -3498,
   -3498, -2170,  1877,   377,  -848, -1715, -3498,  1224, -2497, -3498,
   -3498,   774, -3498,  -771, -1208, -2601,  1789,    25, -3498,  -950,
   -2717, -3498, -3498,  -759, -2879, -1167,  -948, -3498,   141,  1733,
    2560,    43,   142, -3498,   144,  1653, -3498, -3498, -3498,   149,
   -3498,   992,   150,   353, -3498,  1320, -3498,   909,    39, -3498,
   -3498, -3498,   139,  3325,    15, -2613
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    47,    48,    49,   782,   783,  1960,  1903,  3173,  1331,
    1893,  1462,   784,  2789,  2790,  2791,  2385,  1312,  3765,  2386,
    1313,  1314,  2793,    53,    54,    55,   118,  1343,   785,   786,
     554,    58,  2435,  1013,   834,  1192,   836,  1193,  1717,  1001,
    1348,  1349,   787,  2831,  2447,  3463,  2888,  3464,  2517,  2441,
    1472,  2509,  2009,  1937,  1473,   563,  2023,  2889,  2836,  2010,
     788,  2778,  3175,  3758,  2804,  3969,  3111,  3112,  3755,  3756,
    2781,  2388,  3857,  3858,  2866,  1884,  3852,  2468,  3670,  2392,
    2373,  3113,  2476,  3619,  3225,  2389,  3093,  2469,  3751,  1982,
    2470,  3752,  3412,  2471,  1934,  1964,  2782,  3859,  2393,  1935,
    2777,  3176,  1872,  2472,  3762,  2473,   575,  3097,   789,  2869,
    1416,   543,   544,   545,  1643,   745,  1389,   746,   546,   954,
     790,  1970,  1971,  1972,  1973,  1974,  1975,  1032,  1976,   791,
    1409,  1952,    64,  1423,   576,  1979,   792,  1961,   793,  2853,
    2854,   794,   795,  1272,  2732,  2303,   796,   773,   774,  1050,
    1442,   775,    70,  1989,   797,  1448,  1449,  1058,    72,   962,
    1464,   798,  1465,  1466,  1068,    73,  2890,  1070,  1071,    74,
      75,   800,  3500,  3244,  1425,  1983,  2481,   577,   801,  3058,
    2305,  2735,  3747,    78,  3393,  2308,  1270,  3396,  3683,  3051,
    3391,  2736,  3799,  3881,  3394,  2309,  2310,  3684,  2311,   802,
      80,   851,  1809,  3554,    81,  1948,  3777,  3778,    82,  3473,
    4026,  4016,  3976,  3655,  3785,  3214,  3999,  3972,  3652,  3780,
    3215,  3781,  3936,  3653,  3476,  2729,  3604,  3048,    83,  2301,
    2705,  3334,  1797,  2706,  2709,  2298,  1798,  1799,  3033,  3347,
    3039,  3954,  3897,  3714,  3026,  2717,  2718,  2719,  2720,  3898,
    3900,  3715,  3899,  3340,  3341,  2721,  2722,  2723,  3028,  3029,
    2724,  2725,  3044,   803,   804,  1133,  2148,   805,  1875,   806,
    1194,    89,    90,  1107,    91,  3406,    92,    93,  1849,  1850,
    1851,   883,   895,   896,  2293,  1559,  2092,   888,  1276,  1818,
     868,   869,  2431,   971,  1926,  1813,  1814,  2318,  2745,  1842,
    1843,  1285,  1286,  2080,  3698,  2081,  2082,  1552,  1553,  3509,
    1830,  1834,  1835,  2339,  2329,  1821,  2586,  3267,  3268,  3269,
    3270,  3271,  3272,  3273,  1195,  2927,  3520,  1838,  1839,  1288,
    1289,  1290,  1847,  2349,    95,    96,  2278,  2687,  2688,   840,
    3284,  1576,  1852,  2931,  2932,  2933,  3287,  3288,  3289,   841,
    1102,  1103,  1126,  1121,  1566,  2100,   842,   843,  2057,  2058,
    2555,  1128,  2094,  2110,  2111,  2939,  2608,  1645,  2374,  1646,
    1647,  2125,  1648,  1196,  1649,  1675,  1197,  1680,  1651,  1198,
    1199,  1200,  1654,  1201,  1202,  1203,  1204,  1668,  1205,  1206,
    1692,  2127,  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,
    2136,  2137,  2138,  2139,  2140,  1255,  1853,  1208,  1209,  1210,
    1211,  1212,  1213,  1214,  1215,  1216,   845,  1217,  2646,  1218,
    1766,  2272,  2686,  3277,  3517,  3518,  3006,  3326,  3545,  3709,
    3895,  3947,  3948,  3988,  1219,  1220,  1709,  1710,  1711,  2162,
    2163,  2164,  2165,  2266,  1760,  1761,  1221,  3181,  1763,  2185,
    3280,  3281,  1256,  1545,  1704,  1392,  1393,  1659,  1518,  1519,
    1526,  2032,  1534,  1538,  2062,  2063,  1546,  2233,  1222,  2156,
    2157,  2626,  1670,  2647,  2648,  1223,  1347,  1716,  3001,  2269,
    1764,  2226,  1230,  1224,  1231,  1226,  1700,  1701,  2644,  2972,
    2973,  2196,  2346,  1793,  2351,  2352,  1054,  1227,  1228,  1229,
    1394,   549,  1660,  3882,  1438,  1261,  1395,  2222,   807,   110,
     997,   808,   809,   100,   810,  1251,   892,  1252,  1254,   811,
     862,   863,   812,   876,   877,  1585,  1780,  1586,   958,   105,
     106,  1299,   864,   884,   814,  3495
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     542,   555,  1000,  1053,    60,   957,   581,  1330,    87,   972,
    1461,    65,   581,    76,  1051,   107,   835,  1402,   849,   886,
    1225,  1065,   852,   581,   861,  1537,   955,   861,    59,  1122,
     881,   885,   548,    94,   885,  1350,  1295,   581,   581,   104,
      68,  2321,    77,    98,  1907,   882,  1906,  1587,   548,  2059,
     973,   974,  1794,    94,  2276,  1918,  1506,   743,  1405,   813,
    1445,  1871,   547,  2234,  1890,  2184,  2232,   799,   838,  1508,
    2689,  2783,  2691,  1694,  2750,  1957,  1509,  2673,   844,  1881,
    2114,  2738,  1877,   976,  1923,   835,   835,  3178,  3182,  1257,
    2675,   977,  2423,  1510,  2147,   991,  2882,  2604,  3211,   881,
    1800,    50,    51,    52,   885,   581,   885,   885,   885,  1451,
    1911,   772,    56,    57,   983,  3209,  1467,   548,   548,    61,
      62,  1468,  1707,    63,  2737,    66,    67,   898,  1770,    69,
      71,    79,   846,  1773,  1350,    84,    85,   838,   838,  2670,
      86,    97,    99,  3229,   101,  2971,  3226,   844,   844,   102,
     103,  1061,  2837,  1991,  1067,  2823,  2824,  2825,  3022,  3468,
    3072,  2209,  2210,  1104,  3077,  3555,  2456,  3487,  1125,  2280,
    -648, -1060, -1068,   878,  -721,  1777,  -565, -1549,  3491,  2712,
    2776, -2252, -2252, -2126,  2341,   560,  -725,  3650, -2126,  1072,
    2587, -2266, -2266, -1065,  2558,  2845, -1488, -1065,  3798,  2344,
   -1068,   846,   846,  2596,   848,  2606,  1146,  2847,  1146,  2832,
    2841,   848, -1468, -1488,  2707, -2117, -2117,  1439,  2846,   848,
    2698, -1484, -1484, -2257, -2257, -2134, -2134, -1489, -1491, -1489,
   -1027, -1040, -1055, -2275, -2275,  2449,  1530, -1485, -1485, -1491,
    1332,   848,  1336,  3635,  1340,   848,  2453, -1487, -1487,  2224,
    2224,  1244, -2277, -2277,  1238,  3416,  1723,  1891,  1862,  1455,
    1894,  1895, -1320,  1873,  1146,   890,  2711,  2712,  1921,  1521,
   -1320,  2855,  1805,  1475,  1909,  2712,  -721,  1922,  1350,  1726,
    1439,  3965,  2036,  2263,  1728,  2224,  1468,  2038,  -725,  3352,
    1246,  2264,  2624,  1284,  3353,  1099,  1774,  1455,   848,    23,
    2934,  1873,  1146,  3451,   848,   561,  -674,  1041,   969,  1807,
    2224,  1065,  2811,  3924,  1146,  1882,  1736, -1341,   111,  -234,
     963,  1439,     3,     4,  -234, -1341,  3360,  3202,  3399,  2895,
    2897,  2299,  2900,  2570,  3338,  2036,   564,   967,  1287,  2037,
    2038,   969,  2076,  2862,  3327,  1243,  3329,  1658,  3745,  2235,
    1738,  3551,  -803,  3550,  3775,  3014,  1865,  -803,  3622,  2568,
    3362,  -858,  3018,  3019,  3020,  3853,  3916,  2917,  1468,  3802,
    1726,  1468,  1468,  2076,  1727,  1728,  3716,  3717,  2120,  2236,
    2036,  3008,  1703,  3010,  2037,  2038,  3546,   967,  3548,  3996,
    1726,  2211,  2571,  3512,  1727,  1728,  1344,  1671,  1672,  3488,
    3427,  3352,   565,  1946,  3843,  3086,  3353,  1736,  1125,  2295,
     968,  2273,  1775,  2429,  1684,  3489,   964,  2296,   963,  1967,
    1104,  3009,  3065,  3230,  2371,  1492,  1493,  1736,  1819,  3352,
    2316,  -803,   116,  3661,  3353,  3973,  1986,  1802,  3360,  2681,
    3413,  1738,   108,  1469,   866,  1854,  1855,  3450,    26,    27,
      28,  1779,  1925,  2787,  1274,  3425,  1901,  2347,  1280,  1130,
     968,  1738,  1105,  1247,  3095,  1248,  3360,  1726,  2531,  3085,
    1131,  1650,  3362,  -721,  3352,  3481,  1682,  1683,  3030,  3031,
    1902,  -803,  4007,  3128,  2371,  -725,  3493,  2372,  1676,  1405,
     969,  3096,  3066,  1858,   109,   112,  3482,  3966,  2237,  2559,
    3362,  3973,  3068,  2434,  1686,  3854,   113,  3983,  2239,  2004,
    2006,  2354,  1873,  3242,   964,  2317,  2699,  2700,    33,  1612,
    3414,   117,  1867,  1874,  1239,  -878,  1440,  1304,  2965,  2445,
    1883,  1694,  1658,  1305,  2375,  3426,  3938,  1282,  1738,  1820,
     969,  2572,  1776,   114,  1924,  3362,   850,  2773,   867,  -721,
    1498,  1499,  3917,  2581,  2582,  2583,   885,    38,  1275,  3997,
    3712,  -725,   885,  3939,  4008,   885,  2274,  2569,  3428,  3689,
    1015,  3633,  2234,   581,  3718,  2232,  3776,  2117,  1568,  2776,
    2348,  2776,  1573,  1880,  3772,  2430,  3746,  1430,  2437,  1440,
    3967,    40,   570,  3510,  1060,  3231,   115,  3855,  1688,  1880,
    1345,  2701,    43,  1240,  2702,  3203,  1803,  1106,  1947,  3257,
    3417,  2600,  2708,  3234,  3490,  3222,  1140,  1856,  1808,  3968,
    2366,   574,  2184,  2428,   891,  1658,  1910,  1431,  2833,  2834,
    1440,  1801,  3240,  1042,  2225,  2672,  3235,  3919,  2300,   995,
    1306,  2934,  2703,  2155,  1789, -1320,  2988,  1868,  3901,   970,
    1667,   998,  1715,  3339,  3462,   999,  1650,  4009,  1038,   880,
    3925,  3611,  1857,  2904,  2812,   562,  2265,   965,  1689,  2240,
    3569,  3984,  1994,  -721,  1907,  2034,  2035,  1051,  2341,  3336,
    2241,  2055,  1993,  2928,  3651,  -725,  2704,  2279,  1997,  2526,
    1690,  3021,  2753,  1441,  1065,  3734,  1689,  3623,  2748,   970,
   -1341,  2532,  3248, -1060,  1691,  1673,  2740,  2083,  2497,  2881,
    -648,  -648,  -721,  1401,  -721, -2126,  -565, -1549,  1690,  2503,
   -2126,  2693,  1681,  2103,  -725, -1065,  -725,  1681, -1488,  2160,
    3873,  2560,  1693,  2949,  3178,  3182,  1721,  2068,  2565,  3874,
     957,  2190,   998,  2191, -1468, -1488,   999, -2117, -2117,  1650,
    1350,  2205,  1350,  3643,  2849,   815,  1444, -2134, -2134, -1489,
   -1491, -1489,  1674,  1679, -1055,  2619,  1049,   581,   581,  2858,
    2207, -1491,  1249,  1771,  2597,  3407,  1093,  2281,  2597,  3557,
    3901,  2784,  2713,  1459,  1460,  2297,  3710,  2714,  3711,  2779,
    3558,  1096,   957,  2715,  3344,  2716,  2837,  2355,  3892,  2446,
    3614,  1759,  3532,  1307,  2053,  3615,  2247,  2618,  1073,   555,
    3474,  3382,  1432,    94,  1901,   542,  2428,   885,  3470,   813,
    4010,  1459,  1460,  3586,  2001,  2291,   835,  1067,  1069,  3885,
    1101,  1101,  2401,  3440,  3441,  1101,  1124,   558,  1902,   957,
    1671,  1672,  2404,  -234,  -234,  2407,  1658,   548,   861,   861,
     861,  2292,  3675,   861,  2050,  2051,  2052,  2053,   548,   816,
    2152,  1703,  3676,   861,   861,  1684,   861,  2566,   861,  1245,
    1703,  1309,   976,  2074,  3089,  3475,  2698,   844,  1095,  3398,
     977,   885,  2340,  2340,  2187,  2484,  3252,   581,   844,  1756,
    1757,  1758,  1759,  2906,  2785,  1296,  3771,  2048,  2049,  2050,
    2051,  2052,  2053,  1310,  2566,  3431,  2399,  1754,  1755,  1756,
    1757,  1758,  1759,  3753,  2206, -2251, -2251,  2935,  3377,  3378,
    3379,  3380,  3381,  3382,  1726,   847,  2166,  2167,  2780,  3804,
    1560,   846,  3457,  2248,  1676,  1433,  3790,  1698,  1250,   887,
    3055,  1658,   846,  1468,   893,  3789,  1245,  2508,  3379,  3380,
    3381,  3382,  2249,  1468,  1686,   885,  1468,  2250,   885,   849,
    3893,  1736,  3400,  1574,    60,  3308,  3978,  3090,    87,  3587,
    1650,    65,   959,    76,  3588,   107,  1258,  1311,  3754,  2227,
    -997,  2424,  2425,  2426,  2682,  2641,  2575,  2460,    59,  1715,
    3894,  2143,  3196,    94,  3197,  1738,  2251,  2496,    23,   104,
      68,  2498,    77,    98,  2500,  1699,   885,  1399,  3053,   878,
     878,  2184,   878,  3589,   878,   885,  3466,  1575,  1896,  1882,
    2805,  2539,   885,   885,   885,   885,  1422,  3291,  3818,  3819,
    3293,  3773,  3295,  2806,  3091,  3677,  1873,  3092,   885,  1304,
    1435,  2918,  2919,  2920,  2921,  1305,  1689,  1876,  3433,  3099,
     960,  1451,  2907,  2510,  3883,  3981,  3438,  1307,  1468,  3209,
     955,    50,    51,    52,  1557,  1650,  3054,  2059,  1690,  3485,
    1111,  1567,    56,    57,  1078,  1101,  1124,  1882,   885,    61,
      62,  1529,  3389,    63,  1658,    66,    67,  1101,  1101,    69,
      71,    79,  3102,   581,  2979,    84,    85,  2342,  2343,   835,
      86,    97,    99,  3679,   101,    94,   835,  3620,  1112,   102,
     103,   813,  2363,  1907,   961,  1406,   581,  2694,  4021,  -997,
    2695,  3390,  3887,  3486,  1561,  2786,  2826,  2787,  3178,  3182,
    2147,   548,  2375,  1663,  3056,  1114,  3634,   966,   548,  2400,
    2402,  1882,  2759,  1992,  3482,  2405,   957,    26,    27,    28,
     564,   838,  1306,  1905,  1560,   978,  3766,  2788,   838,  2410,
    2252,   844,  2235,  1992,  2417,  1882,  3607,  1822,   844,  1897,
    2540,  3318,  2699,  2700,   994,  3872,  2613,  3590,  3875,  1898,
    2541,   848,   581,  2748,  2813,  2533,  2534,  2535,  2536,  2537,
    2538,  3570,  2236,  2542,  2543,  2544,  2545,  2546,  2547,  2548,
    2549,  2550,  2551, -2126,  3115,  3574,  3617,  1028,  1650,  1707,
    3023,  1912,  1280,  1823,  2520,   846,   565,    33,  1554,  2521,
    3024,  2153,   846,  1232,  1233,  3627,  1235,  1304,  1237,  3504,
    2159,  4004,  1713,  1305,  1883,  1784,  1578,   996,  1786,  1658,
    1582,  1689,  1796,  2821,  2863, -2248, -2248,  1029,  1065,  1245,
    2871,  1658,   581,   581,  1026,  2822,    38,  3625,  2935,  1822,
    2702,   885,  3106,  1690,  1882,  1810,  1811,  2564,  1817,  3023,
    1118,  1014,  2944,   977,   977,  1915,   977,  1691,  1026,  3335,
    1816,  1658,  2522,  3116,  2851,  1529,  1824,  1002,  1658,  1562,
      40,  1282,  1883,  1859,  1111,  3540,   885,  1869,  2703,  2810,
    3770,    43,  1563,  1880,  1022,  1823,  3774,  3541,  1570,   885,
    1021,  2237,  3749,  3107,  1908,  1307,  2238,  3575,  3971,   848,
      44,  2239, -2249, -2249,  1658,   564,   885,  1882,  1658,  1027,
     885,  2692,  1112,  3108,  1658,  1917,  1074,  1031,  1825,  2690,
    1306,  1283,  2704,  -214,    45,  1689,  1003,  3576,  1569,  1665,
    2622,   880, -1535,  1027,  1404,  1940,  1883,  1658,  3057,  1114,
    2003,  1880,   998,  1650,  3641,  1146,   999,  1690,  1129,  3117,
    1034,  3647,  1004,  2657,  2658,  1650,  2752,  2752,  1033,  1308,
    1883,  1693,  2929,  1309,  2005,  2936,  2795,  2751,  2797,  1146,
    1039,   565,  1146,  1234,  1933,  1941,    23,   885,  2814,  1017,
    1040,  1018,  2077,  1826,   885,  1650,   570,  2078,  1060,  3952,
    3253,  1317,  1650,  1951,  3953,  1310,  3735,  1043,  1981,  3352,
    1953,  2662,  1954,  3823,  1955,  1880,  2660,  3824,  3737,  1049,
    1825,  1318,  3477,  1028,  1049,   574,   581,   581,  3109,   581,
    1049,  1005,    14,    15,  1044,  2184,  2459,  3110,  1650,  1880,
    1045,  2663,  1650, -2250, -2250,  2844,  3360,  1940,  1650,  1280,
    2067,  2818,  2069,  2070,  1281,  1453,  3577,  1984,  1454,  1046,
    3180,  3578,  1006,  1029, -2253, -2253,  3579,  1319,  3120,  1883,
    1787,  1650,  2240,  1788,  3662,  1943,    94,   850,  3121,  1311,
    3362,    23,   813,  2241,  1118,  1826,  1998,  1941,  1047,  1999,
    2885,  1069,  3126,  1307,  3119,  3332,  1057,  2762,  3333,  3725,
    1030,  2519,  2008,  1562,  2116,  2523,  1007,  2117,  2525,  2095,
    1529,  1529,  2097,  1019,  1076,  1020,  1529,  2101,   542,  3083,
    2104,  3195,  2966,  2967,  1942,  2108, -2254, -2254,  1282,  3726,
    3663,  1101,  1883,   581,  2079,    26,    27,    28,  1880,  3664,
    3122,   885,  1077,  3205,   835,   998,  3118,   835,  3127,  1714,
     548,  1725,   835,  1031,  1726,   835,  1078,  1334,  1727,  1728,
     835,  1309,   581,  3665,   581,  2664,  1079,  1707,  1320,  -802,
    2665,   570,  2141,  1060,  -802,  2142,   548,  1943,  1283,   548,
     844,  2952,  1463,  2442,   548,  2267,  2443,   548,  1080,  2268,
    1504,  1736,   548,  1335,  1084,  2953,   838,   573, -2279,   838,
     574,  1880,  2954,  2956,   838,    33,   844,   838,  1087,   844,
    1304,   998,   838, -1468,   844,   999,  1305,   844,  1321,  2955,
    2957,  2958,   844,  2514,  1088,  1738,  2515,  3580,  1322,  1089,
      26,    27,    28,  2552,   846,  2474,  2553,  2475,  3581,  1008,
    1323,  3666,  2598,  3123,    38,  2599, -2255, -2255,  -802,  3994,
    1009,  2948,  2950,  3727,  3667,  1484,  1485,  1098,  3728,  2149,
     846,  2601,  1090,   846,  2599,  3941,  2801,  1311,   846,  2802,
    2183,   846,  1658,  1324, -2256, -2256,   846,  2234,    40,  2144,
    2232,  1091,  2194,  3979,    94,  3980,  2576,  1010,  2577,    43,
    2151,  2145,  1703,  2146,  2150, -2258, -2258,  3962,  -802,  3833,
      33,  3706,  2807,  3707,  3013,  2808,  1092,  1719,  3015,  3016,
    3017,  1011,    35,  1304,  2798,  2874,  2800,  1722,  2117,  1305,
    1093,  1049,  1304,  1306,  1529, -2279,  1492,  1493,  1305,   119,
    2887,  2666,  1326,   559,  2578,    37,  2579,  1065,  1772,    38,
    1012,   776,  2667,  3082, -2279,  3084,   880,  1778,  4020, -2279,
    2941,  2942,  1127,  2599,  2142,   865,   548,  1327,  2945,   879,
    1132,  2946,  2947,  2205,  3060,  2946,  2221,  3061,  2283,  1277,
     885,  1279,   885,    40,  1725,  4011,  3221,  1726,  1329,  2443,
    3124,  1727,  1728,  3125,    43,  3444,  4019,   885, -2279,  2307,
    2312,  2314,   583, -2259, -2259,  1138,  1650,  2323,   777,  1137,
    3905,  1140,  1304,    44,  1529,   977, -2260, -2260,  1305,   853,
    2992,  2993,  1658,  3241,  1736,  3246,  2515,  1141,  3247,  3729,
    2748, -2279,  1242,   897,   897,  1250,  1306,    45,  3408,   885,
    3730,   581,  3126,  1236,  3035,  1306,  3036,  1134,  1135,  1136,
    3254,   880,  1139,  3255,  1747,  1468,  1869,   581,  1738,  3037,
    3038,  1498,  1499,  3309, -2261, -2261,  2142,   581,  2377,   581,
    2381,  3232,   581,  3505,  3668,  1253,  2142,  3669,   581,  3506,
     581,  3535,  2599,  1658,  2142,  3542,  3201,  3216,  2117,  1317,
    2276,  1259,  1049,   581,  3245,  1260,  1307,  1049,   581, -2262,
   -2262,   987,   581,   581,   581,   581,  1880,   581,   581,  1318,
    2234,  2120,   582,  2232,  1262,  3076,  3320,  3461,   582,  2387,
    3608,  2391,  1263,  3609,  2439,  1306,  2659,  3642,  1264,   582,
    2443,   885, -2263, -2263,   885,   885,   885,   885,  1422, -2264,
   -2264,  1265,   885,   582,   582,  3645,  1650,  3686,  2515,  1268,
    2142,  3795,    23,  1269,  2515,  1319,  2467,  1278, -2279,  3531,
    1338,  1297, -2279,  3800,  1309,  3847,  3801,  3867,  3848,  3906,
    3868,  3915,  2142,  2478,  3801,  1298,  3957, -2279,   885,  2142,
    2494,  1300, -2279,  3977,  3099,  4002,  3801,  1301,  4003,  4017,
    3100,  2007,  3868,  3292,  4031,  4038,  1339,  1444,  1444,  1307,
   -2265, -2265,  1302,  3101, -2267, -2267,  1303,  1650,  1307,   564,
    1316,   582, -2268, -2268,  1315,  3685,  1333,  3560, -2269, -2269,
    1658, -2279, -2270, -2270, -2271, -2271,  1337,  3102,  1341,  3103,
    1529,  1529,  1529,  1529,  1529,  1529, -1535,  1342,  1529,  1529,
    1529,  1529,  1529,  1529,  1529,  1529,  1529,  1529, -2272, -2272,
   -2274, -2274,  1397,  3249,  2588,  1400,  1320,  1401,  3436,  1410,
    2591, -2276, -2276,  2362, -2278, -2278,  1408,  1309,   581,  1411,
    1311,  1424,  2408,  1426, -2279,   565,  1309,  1747,  1927,  1928,
     885,  1754,  1755,  1756,  1757,  1758,  1759,  1427,  1307,   835,
    -853,  -853,  -857,  -857,  1436,   835,  -856,  -856,  2011,  1310,
     581,    26,    27,    28,  1437,   581,  1321,  3940,  2409,  1494,
    1495,  3942,  1498,  1499,  2607,  2607,  1322,  3180,  2699,  2700,
    1443,   548,  3104,  1658,  3404,  3405,  1446,   548,  1323,  1447,
    1059,  2876,  2878,  2742,  2743,  -734,  3949,  3950,  3445,  3446,
    1470,   838,  3989,  3990,  1650,  2012,  1452,   838,  1782,  1783,
    -734,   844,  2415,  1471,  1551,  -734,  1309,   844,  1476,  1535,
    1550,  1324,  1548,  1558,  1564,  1565,  2013,  1571,  1581,  1468,
    1572,    33,  1577,  1311,  1468,  1661,  1583,  1662,  1664,  3290,
    3639, -1031,  1311, -1038,  1677, -2279,   581,  2014,  2416,   957,
    2645,  2015,  3105,  1673, -1028,   581,   880,  3106,  -878,  -879,
   -1029,  1707,  1658,  1687,  4005,   846, -1032,  1688,  -734, -1030,
      38,   846,  1712,   569,  2016,  1718,  1720,  2017,  1529,  1529,
    1326,  2004,  2006,  1765,  2748,  1767,  1769,  1781,  1108,  -734,
    1790,  1804,  1791,  1795,  1109,  2018,  1806,  2183,  1281,  1283,
    1844,  1846,  1848,  1529,    40,  1327,  1860,  1650,  3107,  1878,
    3424,  1879,  1880,  1885,  1886,    43,  1887,  1892,  1899,  1900,
    3685,  1914,  1311,  1904,   116,   570,  1329,  1060,  3108,  1920,
     835,  1930,  1931,  1936,    44,   548,  1932,  1938,  1945,  -734,
    1796,  1949,   581,  1963,  1950,   572,  1965,  1959,  -734,  1969,
    1962,   573,  1966,  1110,   574,   835,  1968, -2279,    45,  2307,
    2282,  -734,   548,  1977,  1754,  1755,  1756,  1757,  1758,  1759,
    1978,  1988,   880,  1985,  1987,  3685,  -734,  3701,  1992,  2000,
    2028,  -734,   838,  2093,  2025,  2027,  1650,   548,  2313,  2315,
    2019,  2030,   844,  2064,  2096,  2033,  2056,  2065,  2020,  2072,
    2102,  3422,  2075,   581,  2105,  1658,  1529,   838,  2106,   581,
    2107,  3768,  2112,  2124,  1146,  2118,  1667,   844,  2115,  1674,
    2021,  1679,  2123,  2155,  1726,  1933,  2188,  2189,  1111,  1036,
    2195,  2119,  2121,  3109,  -734,  2223,  2122,  2154,  1291,  1658,
    2192,  2198,  3110,  2200,  2201,  3921,   846,  2202,  2243,  2203,
    2270,  2244,  3685,  2022,  2271,  -734,  2246,  2277,  3503,  2289,
    2290,  2294,  2302,  2322,   968,   564,  1112,  2319,  2332,  2333,
    2334,   846,  2335,  2331,  2336,  2353,  2357,  2361,  2364,  2358,
     957,  2368,  1113,  2387,  2387,  2387,  2369,   969,  2370,  2440,
    2450,  3628, -1535,  1114,  2444,  2461,  1933,  2420,  2463,  2464,
    2465,  2479,   564,   885,  2480,  -734,  2457,  -734,  2482,  2487,
    2436,  2436,  2485,  1951,  -734,  2488,  1933,   885,   885,   885,
    1953,  2486,  1954,  2489,  1955,  2492,  1658,  1115,  2490,  1650,
     581,   565,   885,  2495,  2499,   885,  2516,  2524,  2491,   582,
    2061,  1422,  2036,  2554,  2561,   885,  2060,  1065,  2562,  1292,
    2004,  2006,  1049,  2563,  2567,  2573,  2574,  2585,  2590,  2592,
    2603,  2610,  1468,  1650,  2605,  2611,  2612,  2614,   565,  1658,
    2615,  3180,  2620,  2621,  1933,  1933,  1116,  1933,   998,  2616,
    2617,  1263,   999,  1117,  2628,  2631,   566,  2632,  2629,  1463,
    2634,  2008,  2633,  2636,  2635,  2518,  2637,  3602,  2638,  1699,
    2661,  2656,  2677,  2685,  2696,  2710,   542,   567,  2728,  2733,
    2731,  2734,  2639,  2653,  2741,  2668,  2008,  1808,  2654,  2678,
    2683,  2684,  2697,  1907,  1056,  2744,  2915,  1658,  1118,   568,
    2739,  -859,  2754,  2757,   885,   885,   885,  2755,   548,  2761,
    2758,  2765,  2766,   581,   567,  1529,   581,  1119,  2767,  2769,
    1650,  2775,   581,  2771,  2772,  2794,  2796,  2809,  2815,  2816,
    1245,   957,  3002,  3571,  2827,  2829,  1403,  2817,   844,   569,
    2828,  2830,   885,  -734,  2842,  2843,  -213,  2848,  2850,  2860,
    2861,  2864,  2865,  2168,  2868,  2872,  2183,  1681,  2894,  2883,
    2169,  2170,  2902,  1650,  2171,  2172,  2173,   957,  2905,  2912,
    2908,  2925,  2205,  2913,  1145,  2914,  1404,  2036,  2911,  2926,
    2937,  2037,  2038,  -213,  1108,  2039,  2040,  2041,  2938,  1120,
    1109,   570,   846,   571,  1293,  1529,  1529,  1658,  2951,  2959,
    2943,  2962,  2975,   582,   582,  3700,  2969,  2976,  2984,  2986,
    2999,   572,  2987,   897,   998,  2990,  3005,   573,   999,  3007,
     574,  1650,  3000,  3047,  3069,  1796,  3027,  3011,   570,  3067,
     571,  3050,  3027,  3032,  3073,  2149,  3071,  3690,  3081,  3692,
    3087,  3114,  3088,  3702,  3094,  3704,  3130,  3721,  3722,  1110,
    3208,  1529,  3075,  3198,  3207,  2144,  3052,   574,  3220,  3224,
      94,  3228,  2307,  1317,  3236,  3212,  2151,  2145,  3199,  2146,
    2150,  3237,  3223,  3059,  3200,  3250,  3204,  3219,  3243,  3845,
     885,  3891,  2443,  1318,   581,  3251,  3276,  3256,   581,   581,
     581,  3278,  3282,  3286,  1933,  1869,  1933,  3296,  1981,  3817,
    3297,  3299,  3346,  3300,  3321,  3849,  3328,  3331,  1725,  3337,
    3342,  1726,  3343,  3345,  3384,  1727,  1728,   581,  3385,  3132,
    3386,  1650,  3395,   582,  1111,  3388,  3397,  3401,  3402,  1319,
    3403,  3409,   581,   581,   581,   581,   581,   581,   581,   581,
     581,   581,  3415,  3410,  3419,  3411,  1725,  3420,  1736,  1726,
    3429,  3432,  3421,  1727,  1728, -2279,  3434, -2279, -2279, -2279,
    3435,  3439,  1112, -2247, -2248,  2467, -2249,  3453,  3239, -2250,
   -2251,   885,  2042,  2387,   885,  3454, -2252,  3183,  1113,  2391,
   -2253,  3210,  1738,  1951,  1869,  3812,  1736, -2254,  3455,  1114,
    1953,  3821,  1954,  1737,  1955,  2043,  3469,  3452, -2255, -2256,
   -2258, -2259,  3122, -2260, -2261, -2262,  1981, -2263,  3471, -2264,
    3233, -2265,  3836,  3837,  3456, -2267, -2268,  1933, -2269,   957,
    1738, -2270,  3458,  1115,  1145, -2271,  1468,  3352,  1529, -2272,
    1320, -2273,  3353, -2274,   581, -2279, -2279, -2279, -2275, -2276,
    2803,   885,   885,   885,   885,  2098,  2747, -2277, -2278, -1485,
    2669, -1487,  3459,  1529,  3465,  3478,  1529,  3467,  3479,  3472,
     581,  1049,  3492,  3497,  3360,  3494,  3496,  2044,  3498,  3294,
    3501,  3361,  1116,  3507,  3519,  3508,  1658,  3511,  3513,  1117,
    1321,  3525, -2279,  3515,  3521,  3522,  3526,  3527,  3530,  3534,
    1322,  3556,  2835,    23,  3559,  1557,  3352,  3301,  3362,  2645,
    3568, -2279,  1323,  3583,  3585,  3606, -2279,  1725,  3610,  3616,
    1726,  3605,  2852,  1145,  1727,  1728,  3352,  3613,  3618,  3630,
    1739,  3353,  3631, -1484,  1118,  3638,  3640,  3648,  3325,  1549,
     835,  3649,  3654,  3657,  3658,  1324,  3659,  3672,  3673,  1740,
    3674,  3697,  3687,  1119,  1741, -2279,   957,  1736,  3688,  3691,
    3694,  3695,  1580,  3360, -2279,  3703,  3708,  3713,  1463,  3023,
   -2279,  3720,   548,  1529,  1529,  1529,  1529,  3724,  2892,  3880,
    2893,  3739,  3731,  3757,  2898,  3428,  2901,  1658,   897,  3761,
    3392,  1738,   838,  1744,  2307,  3740,  3763,  3362,  3764,  3782,
    2183,  1658,   844,  3767,  1326,  3784,  3786,  3792,  3363,  3793,
    1650,  1747,  3794,  3803,  1869,  3798,  3805,  3807,  3810,  3814,
    1933,  3324,  3815,  3811,  3816,  1120,  3822,  3364,  1708,  1327,
    2099,  3831,  3365,  1049,   581,  1529,  3832,  3825,  3842,  3742,
     556,   885,  3844,  3851,  3846,   556,  3856,  3862,   744,  1747,
    1329,   556,    26,    27,    28,  3864,   846,   556,  3443,  2991,
    3863,   556,   556,   556,  3865,  3723,   556,  3866,  3869,   556,
     556,  3368,  3876,   556,  3871,  3877,   556,   556,   953,  2174,
    2175,  2176,  1000,  2177,  2178,  2179,  2180,  2181,  2182,  3878,
    3913, -2279,  3886,  3923,  3926,  3888,  3890, -2279,   582,   582,
    2045,  2046,  2047,  3928,  2048,  2049,  2050,  2051,  2052,  2053,
   -2279,  1650,  3932,  3935,  3937, -2279, -2279,  3956,  3951, -2279,
    3955, -2279,    33,  3963,  3924,  1650,  3925,  2044,  3974,  3987,
    3995,  3982,  4000,  3998,  4006,  4013,  4022,  3460,   556,  4023,
    4025,  1933,  4027,   556,   556,   556,   556,   556,  4029,  4034,
    1266,  3129,  3442,  2395, -2279,  2792,  2467,  1749,  3133,  2286,
   -2279,    38,  2819,  1916,  1075,   957,  2438,  2838,  2891,  3502,
    3206,  3860,  3484,  1995,  1145,  1996,  3499,  2036,  3970,  3626,
    3929,  2037,  2038,  1529,  3922,  2039,  2040,  2041,  3964,  3671,
    2774,  2799,  2477,  2008,  4028,    40,  1108,  1870,  3227,  3920,
    3098,  3927,  1109,  4036,  2770,  3184,    43,  3918,  2875,  3516,
    1747,  2877,  1944,    23,  3063,   581,  2044,  1990,  2886,  2501,
    3796,  3744,   581,  3062,  3884,    44,    14,    15,  3841,  3993,
    2839, -2279,  3930,  4030,  4035,  3372,  4024,  4037,  1754,  1755,
    1756,  1757,  1758,  1759,  2002,  4012,  3934,  4001,  4033,    45,
    1273,  3025,  1081,  2726,  3719,  3820,  2727,  3544,  3992,  3549,
    3991,  1110,  3034,   880,  3012,  2746,  3174,  2760,  1792,  1750,
    2360,  1841, -2279, -2279, -2279,    23,  1754,  1755,  1756,  1757,
    1758,  1759,   582,   582,  1840,   582,  1529,  1529,  1529,  1529,
    1529,  1529,  1529,  1555,  3889,  1049,  1529,  1529,  1529,  2835,
    1556,  1529,  2916,  2328,  1529,  2756,  3806,  1529,  1529,  1529,
    1529,  1529,  1529,  1529,  1529,  1529,  1529,  3693, -2279,   885,
    2359,  1845,   839,  3285, -2279,  2730,  2595,  3529,  1097,  1083,
     548,  2940,  2910,  1522,   581,  2909,  1111,  3632,  2609,   581,
    1505,  2511,  3809,  2512,  1507,  2513,  3808,  3373,  2651,  2964,
   -2279, -2279, -2279,  2749,  3377,  3378,  3379,  3380,  3381,  3382,
    3304,  2625,    26,    27,    28,   581,  2978,  3387,  2652,  1511,
    1512,   984,  2356,  2084,  1112,  2602,  1513,  1514,  1515,  1241,
    1516,  2285,     0,     0,  1517,     0,   581,   581,     0,   582,
    1113,  3646,     0,     0,     0,  2043,     0,     0,   885,     0,
       0,  1114,     0,     0,     0,   885,     0,     0,     0,     0,
     885,     0,  1869,     0,     0,     0,   581,  3644,  2109,     0,
    2113,     0,     0,     0,    26,    27,    28,     0,     0,     0,
   -2279,   885,    33,     0,  3682,  1115, -2279,  1754,  1755,  1756,
    1757,  1758,  1759,  3377,  3378,  3379,  3380,  3381,  3382,     0,
       0,     0,     0,     0,  1529,     0,     0,  1294,   581,  1101,
       0,  1101,     0,     0,     0,     0,   548,  2044,     0,     0,
       0,    38,  3330,     0,  1652,     0,     0,     0,  2008,     0,
       0,     0,     0,     0,  1116,     0,     0,     0,     0,     0,
    1725,  1117,     0,  1726,    33,     0,   844,  1727,  1728,     0,
       0,     0,  1529,  1529,     0,    40,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,  1529,     0,
    1529,  1529,  1529,     0,     0,     0,     0,     0,     0,    37,
    1736,     0,     0,    38,     0,    44,  1118, -2279,     0,     0,
       0,     0,  3392,     0,     0,     0,     0,     0,  1653,   885,
     846,     0,     0,   548,  3741,  1119,  3743,     0,     0,    45,
       0,     0,     0,     0,  1738,     0,     0,    40,     0,     0,
       0,  3779,     0,   880,  3783,     0,     0,     0,    43,     0,
       0,     0,     0,     0,  1145,     0,     0,  3352,     0,     0,
     885,     0,  3353,  2367,     0,   556,     0,    44,     0,  3750,
       0,   556,     0,  2376,   556,  2379,  3788,     0,  2390,     0,
       0,     0,   556,     0,  2394,     0,  2396,     0,     0,     0,
       0,    45,  3791,     0,  3360,     0,     0,  1120,  3516,  2403,
       0, -2279,  2994,     0,  2406,   880,     0,     0,  2411,  2412,
    2413,  2414,     0,  2418,  2419,     0,  1529,     0,     0,   744,
       0,     0,     0,  1529,     0,     0,  1529,  1529,  3362,  1652,
       0,     0,     0,     0, -2279,  1529,     0,  1529,  1529,     0,
       0,     0,  1529,     0,     0,     0,     0,     0,     0,  3682,
       0,  3480,     0, -2279,     0,     0,     0,   582, -2279,     0,
    2045,  2046,  2047,     0,  2048,  2049,  2050,  2051,  2052,  2053,
       0,     0,     0,   582,     0,     0,     0,     0,  1463,     0,
       0,   548,     0,   582,     0,   582,     0,   885,   582,  1869,
       0,     0,     0,     0,   582,     0,   582, -2279,     0,     0,
       0,  1049,  1049,  1653,  3682,  1049,     0,     0,     0,   582,
       0,   844,     0,  2079,   582,     0,     0,     0,   582,   582,
     582,   582,  1652,   582,   582,     0,     0,     0, -2279,     0,
    1529,  1529,     0,     0,  1529,     0,   548,     0,  1529,     0,
       0,  1529,  1529,     0,     0,   581,     0, -2279,     0,     0,
       0,     0, -2279,  1747,     0,     0,  3933,     0,  3779,  3547,
    1725,     0,     0,  1726,     0,   846,   844,  1727,  1728,     0,
       0,     0,     0,     0,  1869,   556,   556,   556,     0,     0,
       0,  3682,  3931,  1064,     0,     0,     0,     0,     0,     0,
       0, -2279,     0,     0,     0,     0,  1653,     0,     0,  3750,
    1736,     0,     0,     0,     0,     0,     0, -2279,     0,     0,
       0,  1529,  1529,   548,     0,  1529,     0,   556,   556,     0,
     846,     0,     0,     0,     0,     0,   556,  3975,     0,     0,
       0,  3961,     0,     0,  1738,   885,     0,     0,     0,   556,
     556,     0,  1049,   844,   556,   556,     0,  2044,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   556,   556,   556,
       0, -2279,   556,     0,  3779,     0,  2307,     0,     0,     0,
       0,  1725,   556,   556,  1726,   556,     0,   556,  1727,  1728,
       0,     0,     0,  3174,   582,  3348,  3349,  3350,  3351,     0,
     556,     0,     0,  4018,     0,     0,   556,   846,     0,     0,
       0,   885,  2995,   885,     0,     0,     0,     0,     0,     0,
      11,  1736,     0,     0,     0,     0,  2594,     0, -2279,     0,
       0,  2113,     0,     0,     0,     0,     0,     0,   581,     0,
     885,     0,   885,     0, -2279,     0,     0,   581,    14,    15,
    1317,     0,     0,  1652,     0,  1738,     0,     0,     0,     0,
       0,     0,     0, -2279,     0, -2279,     0,     0, -2279,     0,
    1318,     0,     0,  1145,   556,     0,  2036,   556,   556,     0,
    2037,  2038,     0, -2279,  2039,  2040,  2041,     0,     0,     0,
    1754,  1755,  1756,  1757,  1758,  1759,     0,    23,  1995,     0,
       0,     0,  2981,     0,     0,     0,     0, -2279,     0,     0,
       0,   744,   582,     0,  1388,     0,  1319,     0,     0,     0,
       0,  1708,     0,  3315,     0,   556,   556,  1653,     0,     0,
       0,     0,     0,     0,   556,     0,     0,     0,     0,     0,
       0,   556,   556,   556,   556,   556,     0,     0,  1652,     0,
       0,     0,     0,     0,     0, -2279,     0,   556,     0,   556,
       0,     0,     0,  1747,     0,     0,     0,     0,     0,  1388,
       0,     0,     0,     0, -2279,     0,     0, -2279,     0, -2279,
       0,  3769,     0,  1064,  3377,  3378,  3379,  3380,  3381,  3382,
       0,     0,   953,     0,   556,   556,     0,   556,     0,     0,
       0,     0,     0,     0,     0,     0,   556,   556,   582,     0,
       0,     0,   556,  1655,     0,     0,     0,  1320, -2279,     0,
       0,     0,  1653,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1145,     0,   556,  3352,     0,     0,     0,
       0,  3353,     0,  1388,  1642,     0,    26,    27,    28,     0,
    1145,     0,   556,  2036,     0,     0,     0,  2037,  2038,     0,
       0,  2039,  2040,  2041,     0,     0,     0,  1321,     0,   582,
       0, -2279,     0,  3360,  1747,  2764,     0,  1322,     0,  2982,
   -2279,     0,     0,     0,     0,     0,  2867,     0,     0,  1323,
       0,  1652,     0,     0,  2043,     0,     0,     0,     0,     0,
       0,   556,     0,   744,     0,     0,     0,  3362,  3561,  3562,
    3563,  3564,  3565,  3566,  3567,     0,    33,     0,  3572,  3573,
       0,     0,  1324,  3582,     0,     0,  3584,     0,    35,  3591,
    3592,  3593,  3594,  3595,  3596,  3597,  3598,  3599,  3600,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,   556,    38,     0,   556,     0,     0,
       0,     0,     0,     0,     0,  1653,  2044,     0,     0,     0,
       0,   556,   556,     0,   953,  3732,    39,     0,   889,     0,
     556,  1326, -2279, -2279,     0,     0,     0,  3174,     0,    40,
    1754,  1755,  1756,  1757,  1758,  1759,   582,     0,  1655,     0,
      43,     0,     0,     0,     0,     0,  1327, -2279,     0,     0,
    1145,     0,   556,  2036,     0,   556,   556,  2037,  2038,    44,
       0,  2039,  2040,  2041,     0,     0, -2279,  1329,   556,  1642,
       0, -2279,     0,     0,     0,     0,     0,     0,     0,  3311,
       0,     0,     0,    45,     0,   556,  1652,     0,   986,   556,
     989,     0,   993,     0,   556,     0,     0,   880,  1652,     0,
       0,     0,     0,     0,  1388,  3483,     0,     0,     0,     0,
   -2279,  2043,     0,  1388,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,     0,  1652,     0,
       0,  1655,     0,     0, -2279,  1652,     0,  1388,     0,     0,
       0,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,   582,
       0,     0,   582,   556,     0,     0,   556,     0,  2109,     0,
    1653,  1108,  1642,   556,     0,     0,  2044,  1109,     0,     0,
       0,  1652,  1653,     0,     0,  1652,     0,   556,   744,     0,
    3733,  1652,  3736,  2044,  3738,     0,     0,     0,   556,   744,
       0,     0,     0,   556,     0,   556,   556,     0,   556,   556,
       0,     0,  1653,     0,  1652,     0,  1064,     0,     0,  1653,
       0,     0,     0,     0,     0,  3078,  3079,     0,     0,     0,
       0,     0,     0,   744,     0,     0,  1110,     0,     0,  2045,
    2046,  2047,     0,  2048,  2049,  2050,  2051,  2052,  2053,     0,
       0,     0,     0,  3131,     0,  1653,     0,     0,     0,  1653,
       0,     0,     0,     0,     0,  1653,     0,     0,  3185,  3186,
    3187,  3188,  3189,  3190,  3191,  3192,  3193,  3194,     0,     0,
       0,  2043,     0,     0, -2279,    26,    27,    28,  1653,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1145,     0,     0,  3352,     0,     0,     0,     0,  3353,     0,
     556,  1111,   556,   556,     0,     0,     0,     0,     0,     0,
     556,     0,     0,     0,     0,  3826,     0,     0,  3829,  3830,
     582,     0,     0,     0,   582,   582,   582,  3834,     0,     0,
    3360,   556,     0,   556,  3840,     0,     0, -2279,     0,  1112,
       0,     0,     0,  2044,     0,    33,     0,     0,     0,     0,
       0,     0,  1655,   582,     0,  1113,     0,     0,     0,     0,
       0,     0,     0,     0,  3362,     0,  1114,     0,   582,   582,
     582,   582,   582,   582,   582,   582,   582,   582,     0,     0,
       0,     0,     0,  1642,    38,     0, -2279,     0,     0,     0,
       0,     0,     0,  3377,  3378,  3379,  3380,  3381,  3382,     0,
    1115,     0,     0,     0,     0,     0,  2045,  2046,  2047,     0,
    2048,  2049,  2050,  2051,  2052,  2053,     0,     0,    40,     0,
       0,     0,  3902,  3903,     0,     0,  3904,     0,     0,    43,
    3907,     0,  3835,  3910,  3911,     0,     0,     0,     0,   556,
       0,     0,     0,     0,     0,     0,     0,  1655,    44,  1116,
       0,   556,     0,     0,     0,     0,  1117,     0,     0,     0,
       0,     0,     0,     0, -2279,     0,   744,     0,     0,     0,
    2109,     0,    45,     0,     0,     0,     0,     0,  1642,     0,
       0,     0,     0, -2279,     0,     0,   880,   744, -2279,     0,
     556,     0,     0,     0,     0,     0,  2594,     0,     0,     0,
       0,  1118,     0,  3958,  3959,  1145,     0,  3960,  3352,     0,
       0,     0,     0,  3353,     0,     0,     0,     0,     0,     0,
    1119,     0,     0,  1388,     0,     0,     0, -2279,     0,  1652,
       0,     0,     0,     0,     0,     0,     0,   556,     0,   556,
    1016,   556,     0,     0,     0,  3360,  1024,     0,     0,  1025,
    3423,     0, -2279,     0,     0,     0,   556,     0,   556,   556,
     556,     0,     0,     0,     0,     0,  2045,  2046,  2047,     0,
    2048,  2049,  2050,  2051,  2052,  2053,     0,     0,     0,  3362,
       0,     0,     0,  2044,     0,     0,     0,     0,     0,     0,
    1655,     0,  1120,     0,     0,     0,     0,     0,   556,     0,
     556,     0,     0,  1653,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   556,   556,     0,     0,     0,
       0,  1642,     0,     0,     0,     0,   556,   556,   556,   556,
     744,   556,   744,  1145,     0,     0,  3352,   556,     0,   556,
       0,  3353,     0,     0,     0,     0,     0,  3838,     0,     0,
       0,   556,   556,     0,     0,     0,   556,   556,     0,     0,
     582,   556,   556,   556,   556,     0,   556,   556,     0,  1652,
       0,     0,     0,  3360,     0,     0,  1388,     0,     0, -2279,
   -2279,     0,     0,   556,     0,     0,     0,     0,     0,     0,
     556, -2279,     0,   556,   556,   556,   556,   556, -2279,     0,
       0,   556,     0, -2279,     0,     0,     0,  3362,     0,     0,
       0,     0,     0,     0,     0,   556,     0,     0,     0,     0,
       0,  1388,     0,     0,     0,     0,     0,     0,     0,     0,
    1652,     0,     0,     0,     0,     0,     0,   556,     0,   556,
       0,     0, -2279,  1653,   744,  1655,  1656,     0,     0,     0,
       0,  1388,     0,     0,     0,     0,     0,  1655,     0,     0,
    1064,  1145,     0,     0,  2036,     0,     0,     0,  2037,  2038,
       0,     0,  2039,  2040,  2041,  3839,  1642,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1655,  1642,     0,
    3312,     0,     0,     0,  1655,     0,     0,     0,  2044,     0,
       0,  1086,     0, -2279,  1653,     0,     0, -2279,     0,     0,
    3377,  3378,  3379,  3380,  3381,  3382,     0,     0,  1642,     0,
       0,     0,     0,     0,     0,  1642, -2279,   556,     0,     0,
    1655, -2279,     0,     0,  1655,     0,     0,     0,     0,   556,
    1655,  3524,     0,     0,  1145,     0,     0,  2036,  2594,     0,
       0,  2037,  2038,     0,     0,  2039,  2040,  2041,     0,   556,
       0,  1642,     0,  1655,   556,  1642,     0,  1652,     0,  1388,
   -2279,  1642,     0,   556,   556,  1145,     0,     0,  2036,     0,
       0,  3629,  2037,  2038,     0,     0,  2039,  2040,  2041,     0,
       0,     0,     0,     0,  1642,     0,     0,     0,     0,     0,
       0,     0,  3636,  3637,  3827,     0, -2279,     0,     0,     0,
       0,  1725,     0,     0,  1726,     0,     0,     0,  1727,  1728,
    1729,  1730,  1731,  1732,  1733,     0,  2044,     0,     0,     0,
       0,  1656,  3660,     0,     0,     0,     0,     0,     0,  1267,
    1734,  1653,     0,     0,     0,   556,     0,     0,     0,   556,
       0,  1736,     0,     0,   556,  3896,     0,     0,  1737,     0,
     582,     0,     0,     0,     0,   582,     0,     0,     0,     0,
    1652,     0,     0,     0,     0,     0,  1725,     0,     0,  1726,
       0,     0,  2043,  1727,  1728,  1738,     0,  1731,  1732,  1733,
    1398,   582,     0,     0,     0,     0,   556,     0,     0,  1407,
       0,     0,     0,     0,     0,  1734,  1413,  1415,  1418,  1420,
       0,     0,   582,   582,     0,     0,  1736,     0, -2279,     0,
     744,     0,  1429,  1737,  1656,  3377,  3378,  3379,  3380,  3381,
    3382,     0,     0,     0, -2279,     0,     0,     0,     0,     0,
       0,   556,   582,     0,  1653,     0,     0,     0,     0,  1652,
    1738,     0,   953,     0,  2044,     0,  1145,     0,   556,  2036,
       0,     0,  1524,  2037,  2038,  2043,     0, -2279, -2279, -2279,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   582,  1739,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2043,     0,     0,     0,
       0,     0,   556,     0,  1740,     0,     0,     0,   556,  1741,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1653,   556,     0,     0,     0,     0,     0,
       0,     0,  1742,  1743,   744,   744,   744,  2044,     0,     0,
       0,     0,     0,     0,     0,     0, -2279,     0,  1744,     0,
    1739,     0,     0,  3377,  3378,  3379,  3380,  3381,  3382,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2044,  1740,
       0,     0,     0,     0,  1741,     0,     0,     0,     0,  1388,
       0,     0,     0,     0,     0,     0,     0,  1745,  1655,     0,
    1746,     0,  1652,  1657,     0,   556,     0,  1742,  1743,     0,
       0,     0,   556,     0,  1747,     0,     0,  1748,     0,     0,
       0,     0,     0,  1744,     0,   556,   556,   556,   556,  1642,
       0,     0,     0,     0,     0,     0,  1652,     0,     0,   556,
       0,   556,     0,     0,   556,     0,     0,     0,     0,     0,
     556,     0,   744,     0,   556,  1656,     0,     0,     0,     0,
       0,   556,  1745,     0,     0,  1746,     0,     0,     0,  1064,
       0,     0,     0,     0,     0,     0,  1653,   744,     0,  1747,
       0,     0,  1748,   556,   556,     0,   556,  2045,  2046,  2047,
    1861,  2048,  2049,  2050,  2051,  2052,  2053,     0,     0,     0,
       0,  3914,     0,  1888,     0,     0,     0,     0,     0,     0,
    1653,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1749,  1652,  1913,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   556,     0,     0,  1655,     0,
       0,     0,     0,   556,   556,   556,     0,     0,     0,     0,
    1656,     0,   556,     0,     0,   556,     0,     0,     0,  2044,
       0,   556,     0,     0,     0,     0,  1652,     0,     0,  1642,
    2045,  2046,  2047,     0,  2048,  2049,  2050,  2051,  2052,  2053,
       0,   556,     0,     0,     0,     0,     0,  1749,  1657,     0,
       0,  1939,     0,     0,     0,   556,     0,  1653,  1958,  1655,
       0,  2045,  2046,  2047,     0,  2048,  2049,  2050,  2051,  2052,
    2053,   582,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1652,     0,     0,     0,     0,     0,
    1642,     0,     0,     0,  1750,     0,     0,  1751,  1752,  1753,
    1653,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2008,
       0,  2630,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   953,   953,     0,
       0,  1657,     0,     0,   953,     0,     0,     0,     0,     0,
       0,     0,     0,  1656,     0,   556,     0,     0,  1653,  1750,
       0,   556,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,
    1758,  1759,     0,     0,     0,     0,     0,     0,     0,   556,
       0,     0,     0,   556,  1652,     0,     0,   556,   556,   556,
       0,     0,     0,   556,   556,   556,  1655,   556,     0,     0,
       0,     0,     0,     0,     0,  2091,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   556,     0,   556,     0,
       0, -2008,     0,     0,   744,     0,     0,  3177,   744,     0,
     744,   556,   556,   556,   556,   556,   556,   556,   556,   556,
     556,     0, -2279, -2279, -2279,     0,  2048,  2049,  2050,  2051,
    2052,  2053,     0,     0,   582,     0,     0,     0,  1653,     0,
       0,     0,     0,   582,   556,     0,     0,     0,     0,     0,
     556, -2008,     0,   556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   556,     0,     0, -2008,     0,     0,     0,
       0, -2008,     0,     0,     0,     0, -2008,     0,     0,  1655,
       0,     0,     0,     0,     0,   556,     0, -2008,  1656,     0,
       0,     0, -2008,     0,  1145,     0,   556,  3352,     0,     0,
    1656,     0,  3353,     0,     0,     0,     0,     0,     0,     0,
    1642,     0,     0,   556,     0,     0,     0,     0,     0,     0,
     556,   556,   556,   556, -2008,     0,     0,     0,     0,     0,
    1656,     0,     0,     0,  3360,     0,     0,  1656,     0,   556,
     556, -2279,  1657,     0,     0, -2008,     0,     0,   556,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1655,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3362,     0,
       0,     0,     0,  1656,     0,     0,   556,  1656,   556,     0,
       0,     0,     0,  1656,     0,     0,     0,     0,     0,  1642,
       0,     0,     0,     0,     0, -2008,     0,     0, -2008,     0,
       0,     0,  1388,     0, -2008,     0,  1656,   556,     0,     0,
       0,     0,     0,     0,  2284,     0,  2287,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2304,     0,     0,     0,     0,  3912,  1657,     0,     0,
       0,     0,     0,  1652,     0,     0,     0,     0, -2008,   557,
       0,     0,     0,     0,   557,     0,     0,   747,     0,   556,
     557,     0,     0,   556,     0,     0,   557,     0, -2279,   556,
     557,   557,   557,  2345, -2008,   557,     0,     0,   557,   557,
       0,     0,   557,   556, -2010,   557,   557, -2279,     0,   556,
       0,     0, -2279,     0,     0,     0,     0,     0,     0,     0,
       0,  1655,   556,   556,     0,     0,     0,     0,     0,     0,
     556,  1145,     0,     0,  2036,     0,     0,  1653,  2037,  2038,
       0,     0,  2039,  2040,  2041,     0,     0,   556,     0,     0,
       0, -2279,  1642,     0,   887,  1655,     0,     0,     0,     0,
    3828, -2025,     0,     0,  1652,     0,     0,   557,     0,     0,
       0,     0,   557,   557,   557,   557,   557,     0,  1652,     0,
       0,     0,     0, -2008,     0,  2448,  3177,     0,  2451,  2452,
    2454,  2455,     0, -2008,     0,     0,  2458,     0,     0,     0,
    1657,     0,     0,     0,     0,     0, -2010,  2044,     0,     0,
       0,     0,     0,  1304,     0, -2008,     0, -2008, -2008,  1305,
       0,     0,     0,     0,     0,     0,   556,     0,  1317,     0,
     556,     0,  2493,     0,   744,     0,     0,     0,  1653,     0,
       0,     0,  1655,     0,     0,   556,     0,     0,  1318,     0,
       0,     0,  1653,     0, -2008,     0, -2010, -2008, -2008, -2008,
       0,     0,     0, -2025,     0,   556,     0,     0,     0,  1064,
       0, -2010,     0,  1642,     0,     0, -2010,     0,     0,     0,
       0, -2010,     0,     0,     0,  1655,     0,     0,     0,     0,
       0,     0, -2010,     0,  1319,     0,     0, -2010,   556,     0,
       0,     0,     0,     0,   556,     0,     0,     0,     0,     0,
       0,   556,     0, -2025,     0, -2279,  1642,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1306,     0, -2025, -2010,
       0,     0,     0, -2025,  2580,     0,     0,     0, -2025,     0,
       0,     0,     0,  1655,     0,     0,   556,     0,     0, -2025,
   -2010,  1656,  2043,     0, -2025,  1657,     0,     0,     0,     0,
       0,     0,     0,   953,     0,     0,     0,  1657,     0,     0,
       0,     0,     0,     0,  1642,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   556,     0, -2025,     0,     0,     0,
       0,     0,     0,     0,     0,  1320,     0,  1657,     0,     0,
   -2010,     0,     0, -2010,  1657,     0,     0, -2025,   556, -2010,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   556,  2044,     0,     0, -2279,   556,     0,
       0,     0,     0,     0,  3377,  3378,  3379,  3380,  3381,  3382,
    1657,     0,     0,  1655,  1657,  1321,     0,     0,     0,     0,
    1657,     0,     0, -2010,   556,  1322,     0, -2025,     0,     0,
   -2025,     0,     0,     0,     0,     0, -2025,  1323,     0,     0,
       0,     0,     0,  1657,  3177,   556,   556,     0,     0, -2010,
       0,     0,     0,     0,     0,     0,     0,   556,     0,  1307,
       0,  1656,     0,   953,   556,     0,     0,     0,     0,   556,
    1324,   556,     0,     0,     0,   556,     0,     0,     0,     0,
   -2025,     0,     0,     0,  1145,     0,     0,  2036,     0,   744,
     556,  2037,  2038,     0,     0,  2039,  2040,  2041,     0,     0,
       0,     0,     0,     0,     0,     0, -2025,     0,     0,   887,
       0,     0,     0,  3908,     0,     0,     0,   556,   556,     0,
     556,     0,  1656,  1325,     0,     0,     0,  1309,     0,  1326,
       0,     0,     0,     0,     0,     0,     0,     0, -2010,     0,
       0,     0,     0,     0,   953,   953,     0,     0, -2010,     0,
       0,     0,     0,     0,  1327,     0,     0,     0,     0,  1328,
       0,     0,     0,     0,     0,     0,   887,     0,     0,     0,
   -2010,     0, -2010, -2010,  1145,  1329,     0,  2036,     0,     0,
       0,  2037,  2038,     0,     0,  2039,  2040,  2041,     0,     0,
       0,     0,     0,     0,   557, -2025,     0,     0,     0,     0,
     557,   556,     0,   557,     0, -2025,     0,     0,   556, -2010,
     744,   557, -2010, -2010, -2010,     0,     0,  2045,  2046,  2047,
       0,  2048,  2049,  2050,  2051,  2052,  2053, -2025,     0, -2025,
   -2025,     0,     0,  1311,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   953,     0,     0,   953,     0,   747,   556,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0, -2025,  2840,     0, -2025,
   -2025, -2025,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2856,  2857,  2859,     0,     0,     0,   556,     0,     0,
       0,     0,  1655,     0,     0,     0,  2870,     0,     0,  2873,
       0,     0,     0,     0,     0,  2043,     0,     0,     0,  2884,
       0,     0,     0,     0,     0,     0,     0,     0,  1145,     0,
       0,  2036,     0,  1642,     0,  2037,  2038,     0,     0,  2039,
    2040,  2041,     0,     0,     0,     0,    88,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3909,     0,     0,
       0,     0,     0,     0,     0,     0,    88,     0,     0,   837,
       0,     0,  1656,     0,     0,     0,     0,     0,  1657,     0,
       0,     0,     0,    88,     0,     0,   556,  2044,   556,     0,
       0,     0,   956,     0,     0,     0,     0,     0,     0,     0,
     556,   556,     0,  1655,   556,  2043,     0,     0,  2922,  2923,
    2924,     0,   556,     0,   557,   557,   557,  1655,     0,     0,
       0,     0,  1066,     0,     0,   953,   953,     0,     0,     0,
       0,     0,     0,     0,  1642,     0,     0,     0,   837,   837,
     975,     0,     0,     0,   556,     0,     0,     0,  3177,     0,
     744,  1656,    88,     0,     0,     0,   557,   557,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,   953,     0,
     953,     0,     0,   556,     0,     0,     0,  2044,   557,   557,
       0,     0,     0,   557,   557,     0,     0,     0,     0,     0,
       0,     0,  1145,     0,     0,  2036,   557,   557,   557,  2037,
    2038,   557,     0,  2039,  2040,  2041,     0,     0,     0,     0,
       0,   557,   557,     0,   557,     0,   557,     0,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   557,
       0,     0,     0,     0,   556,   557,     0,     0,     0,   953,
       0,   556,     0,     0,     0,     0,     0,     0,     0,  2043,
       0,     0,     0,     0,     0,     0,     0,   953,   953,     0,
       0,     0,     0,     0,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   953,     0,     0,  1657,
       0,     0,     0,     0,  3070,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1656,     0,     0,     0,     0,     0,
     556,     0,   556,   557,     0,   953,   557,   557,     0,     0,
    2045,  2046,  2047,     0,  2048,  2049,  2050,  2051,  2052,  2053,
       0,  2044,     0,     0,     0,     0,     0,   556,  1656,   556,
       0,   556,     0,     0,     0,     0,   556,     0,     0,     0,
     747,     0,     0,  1390,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,   557,     0,     0,     0,     0,
       0,     0,     0,   557,     0,     0,     0,     0,     0,     0,
     557,   557,   557,   557,   557,  3213,     0,     0,  3218,     0,
       0,     0,     0,     0,     0,     0,   557,     0,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1390,     0,
    2045,  2046,  2047,     0,  2048,  2049,  2050,  2051,  2052,  2053,
       0,     0,  1066, -2279,     0,  1656,  1657,     0,     0,     0,
       0,     0,     0,   557,   557,     0,   557,     0,     0,     0,
       0,     0,     0,     0,   -49,   557,   557,     0,     0,     0,
       0,   557,     0,     0,     0,  3258,  3259,  3260,  3261,     0,
       0,     0,     0,     0,     0,     0,     1,     0,  1656,     0,
       0,     0,     0,     0,   557,     0,     0,     2,     0,     3,
       4,     0,  1390,  1644,     0,     0,     0,     0,     0,     0,
       0,   557,     0,     5,     0,  2044,     0,     0,     6,     0,
       0,     0,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,  1656,     0,     0,  1657,
       9,     0,    10,     0,     0,     0,     0,     0,     0,     0,
     557,     0,   747,     0,    11,     0,    12,     0,     0,     0,
       0,     0,     0,     0,  2045,  2046,  2047,    13,  2048,  2049,
    2050,  2051,  2052,  2053,     0,     0,     0,     0,     0,     0,
       0,     0,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    17,     0,     0,     0,     0,     0,
       0,     0,    18,   557,     0,     0,   557,     0,     0,     0,
      19,     0,    20,    21,     0,     0,     0,     0,  1657,     0,
     557,   557,     0,     0,     0,     0,     0,    22,    88,   557,
       0,    23,     0,     0,     0,     0,  1656,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3430,     0,     0,     0,    24,
       0,   557,     0,     0,   557,   557,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1645,     0,   557,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,     0,     0,     0,   557,     0,
       0,     0,    25,   557,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1390,     0,     0,     0,     0,     0,     0,
       0,     0,  1390,     0,     0,     0,     0,     0,  2045,  2046,
    2047,     0,  2048,  2049,  2050,  2051,  2052,  2053,     0,     0,
       0,     0,     0,     0,     0,     0,  1390,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1657,   557,     0,     0,   557,     0,     0,  1304,     0,
       0,  1644,   557,     0,  1305,     0,     0,     0,     0,     0,
      26,    27,    28,  1317,     0,     0,   557,   747,    29,     0,
       0,    30,     0,     0,     0,  1657,     0,   557,   747,     0,
       0,     0,   557,  1318,   557,   557,     0,   557,   557,     0,
       0,     0,     0,     0,     0,  1066,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,   747,     0,    32,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    88,   956,     0,  1319,
      33,     0,     0,     0,     0,     0,     0,    34,  1725,     0,
       0,  1726,    35,     0,     0,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,     0,    36,     0,     0,     0,     0,     0,     0,
       0,  1306,  1657,     0,     0,    37,     0,  1734,  1082,    38,
       0,     0,     0,     0,     0,     0,     0,     0,  1736,  1094,
       0,     0,     0,     0,     0,  1737,     0,     0,     0,   557,
      39,   557,   557,     0,     0,  1656,     0,     0,     0,   557,
       0,     0,     0,    40,     0,  1657,    41,     0,     0,    42,
       0,     0,  1738,  3603,    43,     0,     0,     0,     0,     0,
     557,     0,   557,     0,     0,     0,   956,     0,     0,   975,
    1320,     0,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
       0,     0,     0,  1657,     0,     0,     0,     0,     0,     0,
       0,    46,  1644,     0,   -49,     0,     0,  1478,  1479,     0,
    1321,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1322,     0,  3213,     0,     0,     0,  1656,     0,     0,  3213,
       0,     0,  1323,     0,  3656,     0,    88,     0,     0,     0,
    1656,     0,  1739,     0,     0,     0,     0,     0,  1480,  1481,
       0,     0,  1482,  1483,  1307,  3680,     0,     0,   557,     0,
       0,  1740,     0,     0,     0,  1324,  1741,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   747,     0,     0,     0,  1742,
    1743,     0,     0,  1657,     0,     0,     0,  1644,     0,     0,
       0,     0,     0,     0,     0,  1744,   747,     0,     0,   557,
       0,     0,     0,     0,     0,     0,     0,     0,  2397,     0,
       0,     0,  1309,     0,  1326,     0,     0,     0,     0,     0,
       0,     0,     0,  1484,  1485,     0,     0,     0,     0,     0,
       0,     0,  1390,     0,  1745,     0,     0,  1746,    88,  1327,
       0,     0,     0,     0,  2398,     0,   557,     0,   557,     0,
     557,  1747,     0,     0,  1748,     0,     0,     0,     0,     0,
    1329,     0,     0,  3748,     0,   557,     0,   557,   557,   557,
       0,     0,   837,     0,     0,     0,     0,     0,     0,   837,
       0,     0,     0,     0,     0,     0,     0,     0,  1486,  1487,
    1488,  1489,  1490,  1491,  1492,  1493,     0,     0,  1494,  1495,
       0,     0,     0,     0,  3787,     0,     0,   557,     0,   557,
       0,     0,     0,     0,  1666,     0,     0,     0,  1311,     0,
       0,     0,     0,     0,   557,   557,  1678,     0,     0,     0,
    1644,     0,     0,     0,     0,   557,   557,   557,   557,   747,
     557,   747,     0,     0,     0,     0,   557,     0,   557,     0,
       0,     0,     0,  1705,     0,     0,     0,     0,     0,  1749,
     557,   557,     0,     0,     0,   557,   557,     0,     0,     0,
     557,   557,   557,   557,     0,   557,   557,  1496,  1497,     0,
       0,     0,     0,     0,     0,  1390,     0,     0,     0,     0,
       0,     0,   557,     0,     0,     0,     0,     0,     0,   557,
       0,     0,   557,   557,   557,   557,   557,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,     0,  1498,
    1499,     0,     0,     0,   557,     0,     0,     0,     0,     0,
    1390,  3870,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   975,   975,     0,   975,   557,     0,   557,     0,
       0,     0,     0,   747,     0,     0,     0,     0,     0,     0,
    1390,     0,  1657,     0,     0,     0,     0,     0,     0,  1066,
       0,  1750,     0,     0,  1751,  1752,  1753,     0,  1754,  1755,
    1756,  1757,  1758,  1759,     0,  1644,     0,     0,     0,     0,
    1724,  2029,     0,     0,     0,  1725,     0,  1644,  1726,     0,
       0,     0,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1500,  1501,     0,     0,  1734,     0,     0,  1644,     0,  1735,
       0,     0,     0,     0,  1644,  1736,   557,     0,     0,     0,
       0,     0,  1737,     0,  1502,  1503,     0,     0,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   748,
       0,     0,     0,  1657,  2126,     0,     0,     0,   557,  1738,
    1644,     0,     0,   557,  1644,     0,     0,  1657,  1390,  3213,
    1644,     0,   557,   557,     0,     0,  1725,     0,     0,  1726,
       0,     0,     0,  1727,  1728,  1729,  1730,  1731,  1732,  1733,
       0,     0,     0,  1644,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1734,     0,     0,   749,    88,
    2974,     0,     0,     0,     0,     0,  1736,     0,     0,     0,
       0,     0,     0,  1737,   750,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3213,     0,  4015,     0,     0,
       0,     0,     0,     0,   557,     0,     0,     0,   557,     0,
    1738,     0,     0,   557,     0,     0,     0,     0,     0,  1739,
       0,     0,     0,     0,  4015,     0,  4032,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   751,     0,  1740,     0,
       0,     0,     0,  1741,     0,     0,   752,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,     0,   753,
       0,     0,     0,     0,   754,     0,  1742,  1743,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   837,     0,   747,
     837,     0,  1744,     0,     0,   837,     0,     0,   837,     0,
       0,     0,     0,   837,     0,   755,     0,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1739,     0,     0,     0,     0,     0,     0,   557,     0,     0,
       0,  1745,     0,     0,  1746,     0,     0,     0,     0,  1740,
       0,     0,     0,     0,  1741,     0,     0,     0,  1747,   756,
       0,  1748,     0,   757,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1742,  1743,     0,
       0,   557,     0,     0,     0,     0,     0,   557,     0,     0,
       0,     0,     0,  1744,     0,     0,     0,    88,     0,     0,
       0,     0,     0,   557,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   747,   747,   747,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1745,     0,     0,  1746,   758,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1747,
       0,     0,  1748,   760,     0,     0,     0,     0,  1390,     0,
       0,     0,     0,     0,     0,     0,  1749,     0,     0,     0,
       0,     0,     0,     0,   557,     0,     0,  2231,     0,     0,
       0,   557,     0,     0,     0,     0,     0,     0,     0,   761,
       0,     0,   762,     0,   557,   557,   557,   557,  1644,     0,
       0,     0,     0,   763,     0,     0,   764,     0,   557,     0,
     557,     0,     0,   557,     0,     0,     0,     0,     0,   557,
       0,   747,     0,   557,     0,     0,   765,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,  1066,     0,
     766,     0,     0,     0,     0,     0,   747,   768,     0,     0,
       0,     0,   557,   557,   975,   557,     0,  1749,   769,     0,
       0,     0,     0,     0,   770,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1750,     0,
       0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,
    1759,     0,     0,   771,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,     0,     0,     0,     0,     0,
       0,     0,   557,   557,   557,     0,     0,     0,     0,     0,
       0,   557,     0,     0,   557,     0,     0,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,     0,     0,     0,     0,  1750,
       0,     0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,
    1758,  1759,     0,     0,     0,     0,  2199,     0,     0,     0,
       0,     0,  2462,     0,     0,  1725,     0,     0,  1726,  1644,
       0,    88,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1734,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1736,     0,     0,     0,     0,
       0,     0,  1737,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,     0,     0,     0,     0,  1738,
     557,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   557,     0,
       0,     0,   557,     0,     0,     0,   557,   557,   557,     0,
       0,     0,   557,   557,   557,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,   557,     0,     0,
       0,     0,   837,   747,     0,     0,  3179,   747,   837,   747,
     557,   557,   557,   557,   557,   557,   557,   557,   557,   557,
    1725,     0,     0,  1726,     0,     0,     0,  1727,  1728,     0,
       0,  1731,  1732,  1733,     0,     0,     0,     0,     0,  1739,
       0,     0,     0,   557,     0,     0,     0,     0,     0,   557,
       0,     0,   557,     0,     0,     0,     0,     0,  1740,     0,
    1736,     0,   557,  1741,     0,     0,     0,  1737,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,     0,  1742,  1743,     0,     0,
       0,     0,     0,     0,  1738,   557,     0,     0,     0,     0,
       0,     0,  1744,     0,     0,     0,     0,     0,     0,  1644,
       0,     0,   557,     0,     0,     0,     0,     0,     0,   557,
     557,   557,   557,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1705,     0,   557,   557,
       0,  1745,     0,     0,  1746,     0,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,  2231,     0,  1747,     0,
       0,  1748,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2679,     0,     0,   557,     0,   557,     0,     0,
       0,     0,     0,   837,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,  1739,     0,     0,     0,     0,     0,
       0,  1390,     0,  1207,  1207,     0,   557,     0,   837,     0,
    1477,     0,   848,  1740,     0,     0,     0,     0,  1741,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1742,  1743,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1744,   557,     0,
       0,     0,   557,     0,     0,     0,  1749,     0,   557,     0,
       0,     0,     0,     0,     0,     0,     0,  1478,  1479,     0,
       0,     0,   557,     0,     0,     0,     0,     0,   557,     0,
       0,     0,     0,     0,     0,     0,  1745,     0,     0,  1746,
       0,   557,   557,     0,     0,     0,     0,     0,     0,   557,
       0,     0,     0,  1747,     0,     0,     0,     0,  1480,  1481,
       0,     0,  1482,  1483,     0,     0,   557,     0,     0,     0,
       0,  1644,     0,  1346,     0,     0,     0,  1391,  1396,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3179,     0,   956,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1750,     0,
       0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,
    1759,     0,  1450,     0,     0,  2199,     0,     0,     0,     0,
       0,     0,     0,  1484,  1485,   557,     0,     0,     0,   557,
       0,  1474,     0,   747,     0,     0,     0,     0,     0,  1523,
       0,  1749,  1525,     0,   557,  1536,  1539,  1544,  1547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,     0,     0,     0,  1066,     0,
       0,     0,  1644,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1584,  1391,     0,  1486,  1487,
    1488,  1489,  1490,  1491,  1492,  1493,     0,   557,  1494,  1495,
       0,     0,     0,   557,     0,     0,     0,  1669,     0,     0,
     557,     0,     0,     0,     0,  1644,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1685,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1695,  1696,  1697,
       0,  1702,  1706,     0,     0,   557,     0,     0,     0,     0,
       0,     0,     0,  1750,     0,     0,  1751,  1752,  1753,     0,
    1754,  1755,  1756,  1757,  1758,  1759,     0,     0,  1705,     0,
       0,     0,     0,  1644,     0,     0,  1768,  1496,  1497,     0,
       0,     0,     0,   557,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1584,  1584,     0,     0,     0,     0,
       0,     0,     0,     0,  1705,     0,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1498,
    1499,     0,   557,    88,     0,     0,     0,   557,     0,     0,
       0,     0,     0,  1815,     0,     0,     0,  1831,  1836,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1207,  1207,
       0,     0,     0,   557,     0,  1725,     0,     0,  1726,     0,
       0,    88,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,
       0,     0,     0,  3179,   557,   557,     0,     0,     0,     0,
       0,     0,     0,     0,  1734,     0,   557,     0,     0,  3074,
       0,     0,     0,   557,     0,  1736,     0,     0,   557,     0,
     557,     0,  1737,     0,   557,     0,     0,  1391,     0,     0,
       0,     0,     0,     0,     0,     0,  1391,     0,   747,   557,
    1500,  1501,     0,     0,     0,     0,     0,     0,     0,  1738,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1391,     0,     0,     0,  1502,  1503,   557,   557,     0,   557,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1725,     0,     0,  1726,     0,     0,     0,  1727,  1728,
    1729,  1730,  1731,  1732,  1733,     0,     0,     0,    88,     0,
       0,     0,     0,     0,     0,  3238,     0,     0,     0,     0,
    1734,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1736,     0,     0,     0,     0,     0,     0,  1737,  1739,
     557,  2026,     0,     0,     0,     0,     0,   557,     0,   747,
       0,     0,     0,     0,     0,     0,     0,     0,  1740,     0,
       0,     0,     0,  1741,     0,  1738,  1705,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1742,  1743,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1744,     0,     0,  1544,     0,  1544,  1544,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1207,  1207,     0,     0,     0,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1207,     0,     0,     0,
       0,  1745,     0,   837,  1746,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1478,  1479,     0,  1747,     0,
       0,  1748,  1644,     0,     0,  1739,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1740,     0,     0,     0,     0,  1741,
       0,     0,     0,   956,     0,     0,  1480,  1481,     0,     0,
    1482,  1483,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1742,  1743,     0,   557,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1744,   557,
     557,     0,     0,   557,     0,     0,     0,     0,  2158,     0,
       0,   557,     0,     0,     0,     0,  2161,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1644,     0,     0,  1749,  1745,     0,     0,
    1746,     0,     0,   557,     0,     0,     0,  3179,     0,   747,
       0,  1484,  1485,     0,  1747,     0,  2208,  1748,     0,     0,
       0,     0,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,
       0,     0,   557,     0,  2228,  2229,     0,     0,     0,  2242,
       0,     0,     0,  2245,     0,     0,  2253,  2254,  2255,  2256,
    2257,  2258,  2259,  2260,  2261,     0,     0,  2262,     0,     0,
       0,     0,   748,     0,  1207,     0,  1391,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1486,  1487,  1488,  1489,
    1490,  1491,  1492,  1493,     0,  2288,  1494,  1495,     0,     0,
      88,     0,     0,   557,     0,     0,     0,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,  1750,     0,
       0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,
    1759,   749,  1749,     0,   557,  2527,     0,  1696,  1697,     0,
       0,     0,  1705,     0,     0,     0,     0,   750,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   557,
       0,   557,     0,     0,     0,  1496,  1497,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   557,     0,   557,   751,
     557,     0,     0,     0,     0,   557,     0,     0,     0,   752,
       0,     0,     0,     0,     0,     0,     0,  1498,  1499,  1533,
       0,     0,   753,     0,     0,  2422,     0,   754,     0,  1391,
       0,     0,  2432,  2433,     0,     0,     0,     0,     0,     0,
       0,  2231,     0,     0,  1750,     0,     0,  1751,  1752,  1753,
       0,  1754,  1755,  1756,  1757,  1758,  1759,     0,   755,     0,
       0,  2627,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1391,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   756,     0,  1450,  2502,   757,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1500,  1501,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2528,  2529,     0,  2530,     0,  1762,     0,
       0,     0,  1502,  1503,     0,    88,     0,  1725,     0,     0,
    1726,     0,     0,     0,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,     0,     0,     0,     0,  2556,  2557,     0,     0,  2288,
       0,     0,  3678,   567,     0,     0,  1734,     0,     0,   758,
       0,     0,     0,     0,     0,     0,  1762,  1736,     0,     0,
       0,     0,     0,     0,  1737,   759,   760,  1725,  2584,     0,
    1726,     0,     0,  2589,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1584,  1738,  1391,  1533,     0,     0,  1734,     0,     0,     0,
       0,     0,   761,     0,     0,   762,     0,  1736,     0,     0,
       0,     0,     0,     0,  1737,     0,   763,     0,     0,   764,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2623,     0,     0,     0,  2231,     0,     0,     0,     0,   765,
       0,  1738,     0,     0,     0,     0,     0,  1762,     0,     0,
       0,     0,    88,   766,    88,     0,     0,     0,     0,   767,
     768,     0,     0,     0,     0,     0,     0,  2640,     0,     0,
    2643,   769,     0,  1531,     0,  2649,  2650,   770,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1739,  1762,     0,     0,     0,     0,  1762,     0,     0,
       0,     0,     0,     0,    88,     0,   771,     0,     0,     0,
    1740,     0,     0,     0,     0,  1741,     0,     0,     0,     0,
      88,  2671,     0,     0,  2674,     0,  2676,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1742,  1743,
       0,  1739,  2680,     0,     0,     0,     0,     0,     0,     0,
       0,  1762,     0,     0,  1744,     0,     0,     0,     0,     0,
    1740,     0,     0,     0,     0,  1741,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1762,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1742,  1743,
       0,     0,     0,  1745,  1815,     0,  1746,     0,     0,     0,
       0,     0,     0,     0,  1744,     0,     0,     0,     0,     0,
    1747,  1836,  2260,  1748,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1762,     0,  1762,     0,  1533,  1533,
    1207,  2054,     0,     0,  1533,     0,     0,  1762,     0,  2768,
    1762,     0,     0,  1745,     0,  1762,  1746,     0,  1762,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1747,     0,     0,  1748,     0,     0,     0,     0,  1837,     0,
       0,     0,     0,     0,     0,     0,     0,  1531,     0,     0,
       0,     0,     0,     0,     0,  1762,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1697,     0,     0,     0,
       0,     0,  1391,  1145,     0,     0,  3352,     0,     0,     0,
      88,  3353,  3354,  3355,  3356,  3357,  3358,     0,  1749,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3359,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3360,     0,     0,     0,     0,     0,     0,
    3361,     0,     0,     0,     0,     0,     0,     0,     0,    88,
       0,     0,  2880,     0,     0,     0,     0,     0,  1749,     0,
    1762,  1725,     0,     0,  1726,     0,     0,  3362,  1727,  1728,
    1729,  1730,  1731,  1732,  1733,     0,  1762,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1762,  1762,  1762,     0,
    1734,     0,     0,  1762,     0,     0,     0,  1762,     0,     0,
       0,  1736,     0,     0,     0,     0,     0,     0,  1737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1750,     0,     0,  1751,  1752,  1753,     0,  1754,  1755,  1756,
    1757,  1758,  1759,     0,     0,  1738,     0,  2655,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1762,
       0,     0,     0,     0,     0,     0,     0,  3363,     0,     0,
    1750,     0,     0,  1751,  1752,  1753,     0,  1754,  1755,  1756,
    1757,  1758,  1759,     0,  1532,     0,  3364,  2903,     0,  2961,
       0,  3365,     0,     0,     0,  2963,  2161,     0,     0,     0,
       0,     0,  1531,  1531,     0,     0,  1762,  2970,  1531,     0,
       0,     0,     0,     0,  3366,  3367,     0,     0,     0,     0,
       0,  2980,  1762,     0,  2983,     0,  2985,  1762,     0,     0,
    3368,     0,     0,     0,  2989,  1739,     0,     0,     0,     0,
       0,     0,  2996,  2997,  2054,     0,     0,     0,     0,  3004,
       0,     0,     0,     0,  1740,     0,     0,     0,     0,  1741,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3369,
       0,     0,  3370,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1742,  1743,     0,     0,  2044,     0,     0,  3371,
       0,     0,     0,     0,     0,     0,  3049,     0,  1744,     0,
       0,     0,     0,     0,     0,     0,  3064,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1207,     0,
       0,     0,     0,     0,     0,     0,     0,  1745,     0,     0,
    1746,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1747,     0,     0,  1748,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2422,     0,  2422,  1532,     0,
       0,     0,     0,     0,  3372,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1762,     0,     0,
       0,     0,     0,     0,     0,  2054,  2054,     0,  1533,  1533,
    1533,  1533,  1533,  1533,     0,     0,  1533,  1533,  1533,  1533,
    1533,  1533,  1533,  1533,  1533,  1533,  2054,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1749,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3274,  3275,     0,     0,     0,     0,  2330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3373,     0,     0,  3374,
    3375,  3376,     0,  3377,  3378,  3379,  3380,  3381,  3382,     0,
       0,     0,     0,     0,     0,  3298,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3302,     0,     0,     0,     0,     0,  3305,  3306,     0,  1762,
       0,  3307,  1762,     0,     0,     0,  3310,     0,     0,  3313,
    3314,     0,     0,     0,  2422,  1391,     0,     0,  3322,     0,
       0,     0,     0,     0,  1750,     0,     0,  1751,  1752,  1753,
       0,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,     0,
       0,  2968,     0,     0,     0,     0,     0,     0,     0,  1762,
       0,     0,     0,  1762,  1762,  1762,  1762,  1762,  1762,  1762,
    1762,     0,     0,     0,     0,  1207,  1533,  1533,     0,  1762,
    1762,     0,     0,  1532,  1532,     0,     0,     0,     0,  1532,
       0,     0,     0,  1762,     0,     0,  1762,     0,     0,     0,
       0,     0,     0,     0,  1762,  1762,  1762,  1762,  1762,  1762,
    1762,  1762,  1762,  1762,     0,     0,     0,     0,     0,  3418,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1762,
       0,     0,     0,     0,     0,     0,  3437,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1531,  1531,  1531,  1531,  1531,  1531,     0,     0,
    1531,  1531,  1531,  1531,  1531,  1531,  1531,  1531,  1531,  1531,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1533,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1725,     0,     0,  1726,     0,     0,     0,  1727,  1728,
    1729,  1730,  1731,  1732,  1733,     0,     0,     0,     0,     0,
       0,     0,  2880,     0,     0,     0,     0,     0,     0,     0,
    1734,     0,     0,  1762,     0,     0,     0,     0,     0,     0,
       0,  1736,     0,  1762,  1762,     0,     0,     0,  1737,     0,
       0,  1706,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1738,     0,     0,     0,     0,
       0,     0,     0,  2275,  2643,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3536,  3537,     0,     0,
    3538,     0,  1697,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1762,     0,     0,     0,     0,     0,     0,
    1531,  1531,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1532,     0,  1762,
    1762,  1762,     0,     0,  2054,  2054,  2054,  2054,  2054,  2054,
       0,     0,     0,  2054,  2054,  2054,  2054,  2054,  2054,  2054,
    2054,  2054,  2054,     0,     0,     0,     0,  1762,  1762,     0,
    1207,     0,     0,     0,     0,  1739,     0,     0,  1725,     0,
       0,  1726,  3612,     0,     0,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,     0,     0,  1740,  1762,     0,     0,     0,  1741,
    1762,     0,     0,     0,     0,     0,  3624,  1734,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1736,     0,
       0,     0,  1742,  1743,     0,  1737,     0,     0,     0,     0,
       0,     0,     0,     0,  1762,     0,     0,     0,  1744,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1531,     0,
       0,  1762,  1738,     0,  1762,     0,     0,     0,     0,     0,
    1762,  1762,     0,     0,     0,     0,     0,     0,  2054,  2054,
       0,     0,     0,     0,     0,     0,     0,  1745,     0,     0,
    1746,     0,  1762,  1533,  1533,  1762,     0,  1762,     0,     0,
       0,  1762,     0,     0,  1747,     0,     0,  1748,     0,     0,
    3274,     0,     0,     0,  3696,     0,     0,     0,  1207,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3705,
       0,     0,     0,     0,  2422,     0,  2422,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1739,  1532,  1532,  1532,  1532,  1532,  1532,     0,
       0,  1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,
    1532,  1740,     0,     0,     0,     0,  1741,     0,     0,  1762,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1207,     0,     0,     0,     0,     0,     0,     0,     0,  1742,
    1743,     0,  1749,     0,     0,     0,     0,     0,  3759,     0,
       0,     0,     0,     0,     0,  1744,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1745,     0,     0,  1746,     0,     0,
       0,     0,     0,     0,     0,     0,  3797,     0,     0,     0,
       0,  1747,     0,     0,  1748,     0,  3274,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1207,     0,
       0,  1762,     0,     0,     0,     0,     0,     0,     0,  1725,
       0,     0,  1726,     0,     0,     0,  1727,  1728,  1729,  1730,
    1731,  1732,  1733,     0,  1750,     0,  1533,  1751,  1752,  1753,
       0,  1754,  1755,  1756,  1757,  1758,  1759,     0,  1734,     0,
       0,  2977,     0,     0,     0,     0,     0,     0,     0,  1736,
       0,  1532,  1532,     0,     0,     0,  1737,     0,  1725,  3861,
       0,  1726,     0,     0,     0,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,     0,     0,     0,     0,     0,  1531,  1531,     0,
       0,     0,  1762,  1738,  1762,     0,     0,  1734,     0,  1749,
       0,  1762,     0,     0,     0,     0,     0,     0,  1736,     0,
       0,  1762,     0,     0,  1762,  1737,  1762,     0,     0,     0,
    1762,     0,     0,  2054,  2054,     0,     0,  1762,  1762,     0,
       0,     0,     0,     0,     0,  1762,     0,     0,     0,     0,
       0,     0,  1738,  3045,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1725,     0,     0,  1726,     0,     0,     0,  1727,  1728,
       0,     0,  1731,  1732,  1733,  3383,     0,     0,     0,     0,
    1762,     0,     0,     0,     0,     0,     0,     0,     0,  1532,
       0,     0,     0,  1739,     0,  1762,     0,  3946,  3946,  3946,
       0,  1736,     0,     0,     0,     0,     0,     0,  1737,     0,
       0,  1750,  1740,     0,  1751,  1752,  1753,  1741,  1754,  1755,
    1756,  1757,  1758,  1759,     0,     0,     0,     0,  3080,     0,
       0,     0,     0,  1533,     0,  1738,     0,     0,     0,     0,
    1742,  1743,  1739,     0,     0,     0,     0,     0,  3946,     0,
       0,     0,     0,     0,     0,     0,  1744,     0,     0,     0,
       0,  1740,     0,     0,     0,     0,  1741,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1742,
    1743,     0,     0,     0,     0,  1745,     0,     0,  1746,     0,
       0,     0,     0,     0,     0,  1744,     0,     0,     0,     0,
       0,  3946,  1747,     0,     0,  1748,     0,     0,     0,     0,
    1531,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1739,     0,     0,     0,     0,
       0,     0,     0,     0,  1745,  3279,     0,  1746,     0,     0,
       0,     0,     0,     0,  1740,     0,     0,     0,     0,  1741,
       0,  1747,     0,     0,  1748,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2054,  1533, -2279, -2279,     0,     0,     0,     0,     0,     0,
    3303,     0,     0,     0,     0,     0,     0,     0,  1744,     0,
       0,     0,     0,     0,     0,  1762,  1762,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1749,     0,     0,     0,     0,     0,     0,     0,     0,  1762,
       0,     0,     0,  1762,     0,     0,  1762,  1762,  1762,     0,
   -2279,  1762,     0,     0,  1762,  1762,     0,     0,     0,     0,
       0,     0,     0,  1762,  1747,  3045,  3045,  3045,  3045,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1749,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3383,
    3383,  3383,  3383,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1532,  1532,
       0,     0,     0,     0,     0,     0,     0,  1531,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1750,     0,     0,  1751,  1752,  1753,     0,  1754,
    1755,  1756,  1757,  1758,  1759,     0,     0,  1919,     0,  1762,
       0,     0,     0,     0,     0,  2054,     0,     0,     0,     0,
       0,     0,  1749,     0,  3046,     0,     0,     0,  1762,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1750,     0,     0,  1751,  1752,  1753,     0,  1754,  1755,
    1756,  1757,  1758,  1759,     0,     0,     0,     0,  3316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2054,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1531,     0,  1762,  1762,  1762,
       0,     0,     0,     0,  1750,     0,     0,  1751,  1752,  1753,
       0,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,     0,
       0,     0,  3383,  3383,  3383,  3383,  3383,  3383,  3383,     0,
    1533,  1533,     0,  3383,  3383,     0,     0,     0,     0,     0,
       0,     0,     0,  3383,     0,  3383,     0,     0,     0,     0,
       0,     0,  3383,  3383,  3383,  3383,  3383,  3383,  3383,  3383,
    3383,  3383,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1532,     0,  1762,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1762,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1532,     0,  3045,  3045,
    3045,  3045,  3045,  3045,  3045,     0,     0,     0,  3045,  3045,
       0,     0,     0,  3045,     0,     0,  3045,     0,     0,  3045,
    3045,  3045,  3045,  3045,  3045,  3045,  3045,  3045,  3045,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1762,     0,     0,
       0,     0,     0,     0,     0,     0,  1762,     0,     0,     0,
       0,     0,     0,     0,  1533,     0,     0,     0,     0,     0,
       0,     0,  2054,  2054,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3383,  1533,  1533,  3383,     0,  3383,
       0,     0,     0,     0,     0,     0,  3046,  3046,  3046,  3046,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1762,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1762,     0,
       0,     0,     0,     0,     0,     0,  3699,     0,  1532,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2054,     0,     0,     0,     0,  3383,     0,     0,
    3383,  3383,     0,     0,     0,  3383,     0,  2054,  2054,     0,
       0,  3383,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1531,  1531,     0,     0,     0,     0,
       0,     0,  1762,     0,     0,     0,     0,     0,     0,     0,
    3045,     0,  3045,     0,  3045,     0,     0,     0,  1725,     0,
       0,  1726,     0,     0,     0,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3383,  3383,  3383,     0,  1734,  3383,     0,
       0,  3383,  3383,     0,     0,     0,     0,     0,  1736,     0,
       0,     0,     0,     0,     0,  1737,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1762,     0,     0,
       0,     0,  1738,     0,     0,  1725,  1532,     0,  1726,  3383,
    3383,  3383,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1734,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1736,     0,     0,  1531,     0,
       0,     0,  1737,     0,     0,  3045,     0,     0,  3045,  3045,
       0,     0,     0,     0,     0,     0,     0,  3045,     0,  1531,
    1531,     0,     0,     0,  3045,     0,     0,     0,     0,  1738,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1739,     0,     0,     0,     0,     0,     0,  3046,
    3046,  3046,  3046,  3046,  3046,  3046,     0,     0,     0,  3046,
    3046,  1740,     0,     0,  3046,     0,  1741,  3046,     0,     0,
    3046,  3046,  3046,  3046,  3046,  3046,  3046,  3046,  3046,  3046,
    3601,     0,     0,     0,     0,     0,     0,     0,     0,  1742,
    1743,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3045,  3045,     0,  1744,  3045,     0,     0,     0,
    3045,     0,     0,  3045,  3045,     0,     0,     0,     0,  1739,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1740,     0,
       0,     0,     0,  1741,  1745,     0,     0,  1746,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1747,     0,     0,  1748,     0,  1742,  1743,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1744,  3045,  3045,     0,     0,  3045,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1532,     0,     0,
       0,  1745,     0,     0,  1746,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1747,     0,
       0,  1748,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1532,  1532,     0,     0,  1749,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3046,     0,  3046,     0,  3046,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1749,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1750,     0,     0,  1751,  1752,  1753,     0,  1754,  1755,
    1756,  1757,  1758,  1759,     0,     0,     0,     0,  3323,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1532,
       0,     0,     0,     0,     0,     0,  3046,     0,     0,  3046,
    3046,     0,     0,     0,     0,     0,     0,     0,  3046,     0,
    1532,  1532,     0,     0,     0,  3046,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1750,     0,
       0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,
    1759,     0,     0,     0,     0,  3543,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3046,  3046,     0,     0,  3046,     0,     0,
       0,  3046,     0,     0,  3046,  3046,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
    1142,   848,  1143,  1144,  1145,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,  3046,  3046,   133,  1148,  3046,     0,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
     143,   144,  1149,   146,  1150,  1151,     0,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,   819,
       0,  1155,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,  1158,   200,     0,   201,   202,
     203,   204,   205,   206,    14,    15,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,   244,    23,   245,   246,   247,   248,   249,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,   300,
     301,   302,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1168,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,   333,  1170,   335,   336,   337,   338,   339,
    1171,   340,   341,   342,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,  1174,   353,   354,
       0,     0,   355,   356,   357,   358,   359,   360,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    26,    27,    28,     0,   375,   376,   826,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,  1176,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    33,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    35,   447,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   828,    37,     0,   468,
     469,    38,   470,   471,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,     0,   481,   482,   829,   484,
     830,  1180,   486,   487,   831,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,    40,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   832,  1181,   508,     0,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,    44,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,  1182,     0,    45,
       0,     0,     0,     0,  1183,  1184,  1185,     0,     0,     0,
       0,  1186,     0,  1187,  3514,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,     0,  1190,  1191,   120,  1142,   848,
    1143,  1144,  1145,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,  1148,     0,     0,   134,   135,
     136,     0,   137,   138,   139,   140,   141,   142,   143,   144,
    1149,   146,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,   819,     0,  1155,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,  1158,   200,     0,   201,   202,   203,   204,
     205,   206,    14,    15,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
     244,    23,   245,   246,   247,   248,   249,   250,     0,   251,
     252,     0,     0,  1163,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   300,   301,   302,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1168,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,   333,  1170,   335,   336,   337,   338,   339,  1171,   340,
     341,   342,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,  1174,   353,   354,     0,     0,
     355,   356,   357,   358,   359,   360,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      26,    27,    28,     0,   375,   376,   826,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      33,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    35,   447,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   828,    37,     0,   468,   469,    38,
     470,   471,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,   831,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,    40,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   832,  1181,   508,     0,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,    44,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,  1182,     0,    45,     0,     0,
       0,     0,  1183,  1184,  1185,     0,     0,     0,     0,  1186,
       0,  1187,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,   120,  1142,   848,  1143,  1144,
    1145,  1146,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,  1148,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,   144,  1149,   146,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,  1155,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,  1158,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,   244,    23,
     245,   246,   247,   248,   249,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   300,   301,   302,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1168,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,   333,
    1170,   335,   336,   337,   338,   339,  1171,   340,   341,   342,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,  1174,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    26,    27,
      28,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,  1176,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    33,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,    38,   470,   471,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
     831,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,    40,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   832,  1181,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,    44,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,  1182,     0,    45,     0,     0,     0,     0,
    1183,  1184,  1185,     0,     0,     0,     0,  1186,     0,  1187,
       0,     0,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,  1351,  1142,   848,  1143,  1144,  1145,  1146,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,  1352,   130,   131,   132,     0,     0,     0,  1353,     0,
     133,  1148,     0,     0,  1354,   135,   136,     0,   137,   138,
     139,  1355,   141,   142,   143,   144,  1149,  1356,  1150,  1151,
       0,   149,   150,   151,   152,   153,   154,  1152,   817,   155,
     156,   157,   158,  1153,  1154,   161,     0,   162,   163,   164,
     165,   818,     0,  1357,     0,  1358,   169,   170,   171,   172,
     173,  1359,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,  1360,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,  1156,   196,   197,  1157,   199,  1158,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,  1361,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,  1160,   230,   231,
     232,   233,   234,   235,   820,  1161,   237,     0,   238,   239,
    1162,   241,     0,   242,     0,   243,  1362,     0,  1363,   246,
     247,  1364,  1365,   250,     0,   251,   252,     0,     0,  1163,
    1164,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,  1366,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,  1367,   278,   279,   280,
     281,   282,   283,  1165,  1166,     0,  1167,     0,   287,  1368,
    1369,   290,  1370,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,  1371,   301,  1372,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1373,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1169,  1374,  1170,   335,
     336,   337,   338,   339,  1171,   340,   341,  1375,   343,  1172,
     823,   345,  1173,   347,   348,   349,     0,   350,   351,     0,
       0,  1174,   353,   354,     0,     0,   355,   356,   357,  1376,
     359,  1377,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,  1378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1175,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,  1379,   420,
     421,   422,  1176,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,  1380,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,  1381,
     448,   449,  1177,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,  1382,   466,
     828,     0,     0,   468,   469,     0,   470,  1383,   472,   473,
     474,   475,   476,     0,   477,  1178,  1179,     0,   480,     0,
     481,   482,   829,   484,   830,  1180,   486,   487,  1384,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,  1181,   508,  1385,   509,  1386,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,  1182,     0,     0,     0,     0,     0,     0,  1183,  1184,
    1185,     0,     0,     0,     0,  1186,     0,  1187,  1387,     0,
       0,     0,     0,  1188,  1189,     0,     0,     0,     0,  1190,
    1191,   120,  1142,   848,  1143,  1144,     0,  1146,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,  1148,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,  1149,   146,  1150,  1151,     0,   149,
     150,   151,   152,   153,   154,  1152,   817,   155,   156,   157,
     158,  1153,  1154,   161,     0,   162,   163,   164,   165,   818,
       0,   819,     0,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1156,   196,   197,  1157,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,    14,    15,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,  1160,   230,   231,   232,   233,
     234,   235,   820,  1161,   237,     0,   238,   239,  1162,   241,
       0,   242,     0,   243,   244,    23,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,     0,  1163,  1164,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,  1165,  1166,     0,  1167,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1168,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1169,   333,  1170,   335,   336,   337,
     338,   339,     0,   340,   341,   342,   343,  1172,   823,   345,
    1173,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    26,    27,    28,     0,   375,   376,
     826,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1175,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
    1176,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    33,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    35,   447,   448,   449,
    1177,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   828,    37,
       0,   468,   469,    38,   470,   471,   472,   473,   474,   475,
     476,     0,   477,  1178,  1179,     0,   480,     0,   481,   482,
     829,   484,   830,  1180,   486,   487,   831,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,    40,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   832,  1181,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,    44,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,     0,
       0,    45,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1186,     0,  1187,     0,     0,     0,     0,
       0,  1188,  1189,     0,     0,     0,     0,  1190,  1191,   120,
    1142,   848,  1143,  1144,  1145,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,  1148,     0,     0,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
     143,   144,  1149,   146,  1150,  1151,  1540,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,   819,
       0,  1155,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,  1158,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,   244,  1541,   245,   246,   247,   248,   249,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,  1542,   299,   300,
     301,   302,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1168,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,   333,  1170,   335,   336,   337,   338,   339,
    1171,   340,   341,   342,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,  1174,   353,   354,
       0,     0,   355,   356,   357,   358,   359,   360,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   826,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,  1176,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,   447,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   828,     0,     0,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,  1543,   481,   482,   829,   484,
     830,  1180,   486,   487,   831,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,  1181,   508,     0,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,  1182,     0,     0,
       0,     0,     0,     0,  1183,  1184,  1185,     0,     0,     0,
       0,  1186,     0,  1187,     0,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,     0,  1190,  1191,  1351,  1142,   848,
    1143,  1144,  1145,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,  1353,     0,   133,  1148,     0,     0,  1354,   135,
     136,     0,   137,   138,   139,  1355,   141,   142,   143,   144,
    1149,  1356,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,  1357,     0,  1358,
     169,   170,   171,   172,   173,  1359,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,  1360,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,  1158,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
    1362,     0,  1363,   246,   247,  1364,  1365,   250,     0,   251,
     252,     0,     0,  1163,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,  1366,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
    1367,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,  1368,  1369,   290,  1370,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,  1371,   301,  1372,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1373,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,  1374,  1170,   335,   336,   337,   338,   339,  1171,   340,
     341,  1375,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,  1174,   353,   354,     0,     0,
     355,   356,   357,  1376,   359,  1377,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   826,  1378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,  1379,   420,   421,   422,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,  1380,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,  1381,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,  1382,   466,   828,     0,     0,   468,   469,     0,
     470,  1383,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,  1384,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,  1181,   508,  2427,   509,  1386,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,  1182,     0,     0,     0,     0,
       0,     0,  1183,  1184,  1185,     0,     0,     0,     0,  1186,
       0,  1187,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,  1351,  1142,   848,  1143,  1144,
    1145,  1146,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
    1353,     0,   133,  1148,     0,     0,  1354,   135,   136,     0,
     137,   138,   139,  1355,   141,   142,   143,   144,  1149,  1356,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,  1357,     0,  1358,   169,   170,
     171,   172,   173,  1359,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,  1360,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,  1158,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,  1362,     0,
    1363,   246,   247,  1364,  1365,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,  1366,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,  1367,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,  1368,  1369,   290,  1370,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,  1371,   301,  1372,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1373,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,  1374,
    1170,   335,   336,   337,   338,   339,  1171,   340,   341,  1375,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,  1174,   353,   354,     0,     0,   355,   356,
     357,  1376,   359,  1377,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,  1378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
    1379,   420,   421,   422,  1176,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,  1380,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,  1381,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
    1382,   466,   828,     0,     0,   468,   469,     0,   470,  1383,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
    1384,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,  1181,   508,     0,   509,  1386,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,  1182,     0,     0,     0,     0,     0,     0,
    1183,  1184,  1185,     0,     0,     0,     0,  1186,     0,  1187,
    2483,     0,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,   120,  1142,   848,  1143,  1144,  1145,  1146,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129, -1327,   130,   131,   132,     0,     0,     0,     0, -1327,
     133,  1148,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,  1149,   146,  1150,  1151,
       0,   149,   150,   151,   152,   153,   154,  1152,   817,   155,
     156,   157,   158,  1153,  1154,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,  1155,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,  1156,   196,   197,  1157,   199,  1158,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,  1160,   230,   231,
     232,   233,   234,   235,   820,  1161,   237,     0,   238,   239,
    1162,   241,     0,   242,     0,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,  1163,
    1164,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,  1165,  1166,     0,  1167,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1168,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1169,   333,  1170,   335,
     336,   337,   338,   339,  1171,   340,   341,   342,   343,  1172,
     823,   345,  1173,   347,   348,   349,     0,   350,   351,     0,
       0,  1174,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1175,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,  1176,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,  1177,   451, -1327,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,  1178,  1179,     0,   480,     0,
     481,   482,   829,   484,   830,  1180,   486,   487,   831,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,  1181,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,  1182,     0,     0,     0,     0,     0,     0,  1183,  1184,
    1185,     0,     0,     0,     0,  1186,     0,  1187,     0,     0,
       0,     0,     0,  1188,  1189,     0,     0,     0,     0,  1190,
    1191,  1351,  1142,   848,  1143,  1144,  1145,  1146,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,  1353,     0,   133,  1148,
       0,     0,  1354,   135,   136,     0,   137,   138,   139,  1355,
     141,   142,   143,   144,  1149,  1356,  1150,  1151,     0,   149,
     150,   151,   152,   153,   154,  1152,   817,   155,   156,   157,
     158,  1153,  1154,   161,     0,   162,   163,   164,   165,   818,
       0,  1357,     0,  1358,   169,   170,   171,   172,   173,  1359,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,  1360,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1156,   196,   197,  1157,   199,  1158,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,  1160,   230,   231,   232,   233,
     234,   235,   820,  1161,   237,     0,   238,   239,  1162,   241,
       0,   242,     0,   243,  1362,     0,  1363,   246,   247,  1364,
    1365,   250,     0,   251,   252,     0,     0,  1163,  1164,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,  1366,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,  1367,   278,   279,   280,   281,   282,
     283,  1165,  1166,     0,  1167,     0,   287,  1368,  1369,   290,
    1370,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,  1371,   301,  1372,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1373,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1169,  1374,  1170,   335,   336,   337,
     338,   339,  1171,   340,   341,  1375,   343,  1172,   823,   345,
    1173,   347,   348,   349,     0,   350,   351,     0,     0,  1174,
     353,   354,     0,     0,   355,   356,   357,  1376,   359,  1377,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     826,  1378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1175,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,  1379,   420,   421,   422,
    1176,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,  1380,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,  1381,   448,   449,
    1177,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,  1382,   466,   828,     0,
       0,   468,   469,     0,   470,  1383,   472,   473,   474,   475,
     476,     0,   477,  1178,  1179,     0,   480,     0,   481,   482,
     829,   484,   830,  1180,   486,   487,  1384,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,  1181,
     508,     0,   509,  1386,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,  1182,
       0,     0,     0,     0,     0,     0,  1183,  1184,  1185,     0,
       0,     0,     0,  1186,     0,  1187,  3319,     0,     0,     0,
       0,  1188,  1189,     0,     0,     0,     0,  1190,  1191,  1351,
    1142,   848,  1143,  1144,  1145,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,  1353,     0,   133,  1148,     0,     0,
    1354,   135,   136,     0,   137,   138,   139,  1355,   141,   142,
     143,   144,  1149,  1356,  1150,  1151,     0,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,  1357,
       0,  1358,   169,   170,   171,   172,   173,  1359,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,  1360,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,  1158,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,  1362,     0,  1363,   246,   247,  1364,  1365,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,  1366,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,  1367,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,  1368,  1369,   290,  1370,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,  1371,
     301,  1372,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1373,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,  1374,  1170,   335,   336,   337,   338,   339,
    1171,   340,   341,  1375,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,  1174,   353,   354,
       0,     0,   355,   356,   357,  1376,   359,  1377,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   826,  1378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,  1379,   420,   421,   422,  1176,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,  1380,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,  1381,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,  1382,   466,   828,     0,     0,   468,
     469,     0,   470,  1383,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,     0,   481,   482,   829,   484,
     830,  1180,   486,   487,  1384,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,  1181,   508,     0,
     509,  1386,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,  1182,     0,     0,
       0,     0,     0,     0,  1183,  1184,  1185,     0,     0,     0,
       0,  1186,     0,  1187,     0,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,     0,  1190,  1191,   120,  1142,   848,
    1143,  1144,  1145,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,  1812,   130,   131,   132,     0,
       0,     0,     0,     0,   133,  1148,     0,     0,   134,   135,
     136,     0,   137,   138,   139,   140,   141,   142,   143,   144,
    1149,   146,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,   819,     0,  1155,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,  1158,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
     252,     0,     0,  1163,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   300,   301,   302,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1168,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,   333,  1170,   335,   336,   337,   338,   339,  1171,   340,
     341,   342,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,  1174,   353,   354,     0,     0,
     355,   356,   357,   358,   359,   360,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   826,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,   447,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   828,     0,     0,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,   831,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,  1181,   508,     0,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,  1182,     0,     0,     0,     0,
       0,     0,  1183,  1184,  1185,     0,     0,     0,     0,  1186,
       0,  1187,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,   120,  1827,   848,  1143,  1144,
    1145,  1828,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,  1829,   130,   131,   132,     0,     0,     0,
       0,     0,   133,  1148,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,   144,  1149,   146,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,  1155,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,  1158,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   300,   301,   302,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1168,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,   333,
    1170,   335,   336,   337,   338,   339,  1171,   340,   341,   342,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,  1174,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,  1176,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
     831,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,  1181,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,  1182,     0,     0,     0,     0,     0,     0,
    1183,  1184,  1185,     0,     0,     0,     0,  1186,     0,  1187,
       0,     0,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,   120,  1142,   848,  1143,  1144,  1145,  1146,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,  1148,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,  1149,   146,  1150,  1151,
       0,   149,   150,   151,   152,   153,   154,  1152,   817,   155,
     156,   157,   158,  1153,  1154,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,  1155,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,  1156,   196,   197,  1157,   199,  1158,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,  1160,   230,   231,
     232,   233,   234,   235,   820,  1161,   237,     0,   238,   239,
    1162,   241,     0,   242,     0,   243,   244,  1541,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,  1163,
    1164,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,  1165,  1166,     0,  1167,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1168,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1169,   333,  1170,   335,
     336,   337,   338,   339,  1171,   340,   341,   342,   343,  1172,
     823,   345,  1173,   347,   348,   349,     0,   350,   351,     0,
       0,  1174,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1175,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,  1176,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,  1177,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,  1178,  1179,     0,   480,     0,
     481,   482,   829,   484,   830,  1180,   486,   487,   831,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,  1181,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,  1182,     0,     0,     0,     0,     0,     0,  1183,  1184,
    1185,     0,     0,     0,     0,  1186,     0,  1187,     0,     0,
       0,     0,     0,  1188,  1189,     0,     0,     0,     0,  1190,
    1191,   120,  1142,   848,  1143,  1144,  1145,  1146,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,  1148,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,  1149,   146,  1150,  1151,     0,   149,
     150,   151,   152,   153,   154,  1152,   817,   155,   156,   157,
     158,  1153,  1154,   161,     0,   162,   163,   164,   165,   818,
       0,   819,     0,  1155,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1156,   196,   197,  1157,   199,  1158,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,  1160,   230,   231,   232,   233,
     234,   235,   820,  1161,   237,     0,   238,   239,  1162,   241,
       0,   242,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,     0,  1163,  1164,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,  1165,  1166,     0,  1167,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1168,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1169,   333,  1170,   335,   336,   337,
     338,   339,  1171,   340,   341,   342,   343,  1172,   823,   345,
    1173,   347,   348,   349,     0,   350,   351,     0,     0,  1174,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     826,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1175,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
    1176,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
    1177,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   828,     0,
       0,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,  1178,  1179,     0,   480,     0,   481,   482,
     829,   484,   830,  1180,   486,   487,   831,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,  1181,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,  1182,
       0,     0,     0,     0,     0,     0,  1183,  1184,  1185,     0,
       0,     0,     0,  1186,     0,  1187,  2186,     0,     0,     0,
       0,  1188,  1189,     0,     0,     0,     0,  1190,  1191,   120,
    1142,   848,  1143,  1144,  1145,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,  1148,     0,     0,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
     143,   144,  1149,   146,  1150,  1151,     0,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,   819,
       0,  1155,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,  1158,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,   300,
     301,   302,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1168,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,   333,  1170,   335,   336,   337,   338,   339,
    1171,   340,   341,   342,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,  1174,   353,   354,
       0,     0,   355,   356,   357,   358,   359,   360,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   826,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,  1176,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,   447,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   828,     0,     0,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,     0,   481,   482,   829,   484,
     830,  1180,   486,   487,   831,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,  1181,   508,     0,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,  1182,     0,     0,
       0,     0,     0,     0,  1183,  1184,  1185,     0,     0,     0,
       0,  1186,     0,  1187,     0,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,  2820,  1190,  1191,   120,  1142,   848,
    1143,  1144,  1145,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,  1148,     0,     0,   134,   135,
     136,     0,   137,   138,   139,   140,   141,   142,   143,   144,
    1149,   146,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,   819,     0,  1155,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,  1158,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
     252,     0,     0,  1163,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   300,   301,   302,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1168,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,   333,  1170,   335,   336,   337,   338,   339,  1171,   340,
     341,   342,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,  1174,   353,   354,     0,     0,
     355,   356,   357,   358,   359,   360,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   826,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,   447,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   828,     0,     0,   468,   469,  2879,
     470,   471,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,   831,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,  1181,   508,     0,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,  1182,     0,     0,     0,     0,
       0,     0,  1183,  1184,  1185,     0,     0,     0,     0,  1186,
       0,  1187,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,   120,  1142,   848,  1143,  1144,
    1145,  1146,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,  1148,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,   144,  1149,   146,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,  1155,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,  1158,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   300,   301,   302,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1168,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,   333,
    1170,   335,   336,   337,   338,   339,  1171,   340,   341,   342,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,  1174,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,  1176,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
     831,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,  1181,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,  3003,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,  1182,     0,     0,     0,     0,     0,     0,
    1183,  1184,  1185,     0,     0,     0,     0,  1186,     0,  1187,
       0,     0,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,   120,  1142,   848,  1143,  1144,  1145,  1146,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,  3262,   130,   131,   132,     0,     0,     0,     0,     0,
     133,  1148,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,  1149,   146,  1150,  1151,
       0,   149,   150,   151,   152,   153,   154,  1152,   817,   155,
     156,   157,   158,  1153,  1154,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,  1155,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,  3263,   187,   188,   189,   190,
     191,   192,   193,   194,  1156,   196,   197,  1157,   199,  1158,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,  1160,   230,   231,
     232,   233,   234,   235,   820,  1161,   237,     0,   238,   239,
    1162,   241,     0,   242,     0,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,  3264,
    1164,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,  1165,  1166,     0,  1167,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1168,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1169,   333,  1170,   335,
     336,   337,   338,   339,  1171,   340,   341,   342,   343,  1172,
     823,   345,  1173,   347,   348,   349,     0,   350,   351,     0,
       0,  1174,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1175,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,  3265,  1176,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,  1177,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,  1178,  1179,     0,   480,     0,
     481,   482,   829,   484,   830,  1180,   486,   487,   831,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,  1181,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,  1182,     0,     0,     0,     0,     0,     0,  1183,  1184,
    1185,     0,     0,     0,     0,  1186,     0,  3266,     0,     0,
       0,     0,     0,  1188,  1189,     0,     0,     0,     0,  1190,
    1191,   120,  1142,   848,  1143,  1144,  1145,  1146,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,  1148,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,  1149,   146,  1150,  1151,     0,   149,
     150,   151,   152,   153,   154,  1152,   817,   155,   156,   157,
     158,  1153,  1154,   161,     0,   162,   163,   164,   165,   818,
       0,   819,     0,  1155,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1156,   196,   197,  1157,   199,  1158,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,  1160,   230,   231,   232,   233,
     234,   235,   820,  1161,   237,     0,   238,   239,  1162,   241,
       0,   242,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,     0,  1163,  1164,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,  1165,  1166,     0,  1167,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1168,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1169,   333,  1170,   335,   336,   337,
     338,   339,  1171,   340,   341,   342,   343,  1172,   823,   345,
    1173,   347,   348,   349,     0,   350,   351,     0,     0,  1174,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     826,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1175,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
    1176,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
    1177,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   828,     0,
       0,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,  1178,  1179,     0,   480,     0,   481,   482,
     829,   484,   830,  1180,   486,   487,   831,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,  1181,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,  1182,
       0,     0,     0,     0,     0,     0,  1183,  1184,  1185,     0,
       0,     0,     0,  1186,     0,  1187,     0,     0,     0,     0,
       0,  1188,  1189,     0,     0,     0,  3539,  1190,  1191,   120,
    1142,   848,  1143,  1144,  1145,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,  1148,     0,     0,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
     143,   144,  1149,   146,  1150,  1151,     0,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,   819,
       0,  1155,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,  1158,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,   300,
     301,   302,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1168,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,   333,  1170,   335,   336,   337,   338,   339,
    1171,   340,   341,   342,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,  1174,   353,   354,
       0,     0,   355,   356,   357,   358,   359,   360,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   826,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,  1176,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,   447,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   828,     0,     0,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,     0,   481,   482,   829,   484,
     830,  1180,   486,   487,   831,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,  1181,   508,     0,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,  1182,     0,     0,
       0,     0,     0,     0,  1183,  1184,  1185,     0,     0,     0,
       0,  1186,     0,  1187,     0,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,     0,  1190,  1191,   120,  1142,   848,
    1143,  1144,  1145,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,  1148,     0,     0,   134,   135,
     136,     0,   137,   138,   139,   140,   141,   142,   143,   144,
    1149,   146,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,   819,     0,  1155,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,  1158,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
     252,     0,     0,  1163,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   300,   301,   302,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1168,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,   333,  1170,   335,   336,   337,   338,   339,  1171,   340,
     341,   342,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,  1174,   353,   354,     0,     0,
     355,   356,   357,   358,   359,   360,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   826,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,   447,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   828,     0,     0,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,   831,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,  1181,   508,     0,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,  1182,     0,     0,     0,     0,
       0,     0,  1832,  1833,  1185,     0,     0,     0,     0,  1186,
       0,  1187,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,   120,  2338,   848,  1143,  1144,
    1145,  1146,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,  1148,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,   144,  1149,   146,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,  1155,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,  1158,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   300,   301,   302,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1168,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,   333,
    1170,   335,   336,   337,   338,   339,  1171,   340,   341,   342,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,  1174,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,  1176,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
     831,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,  1181,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,  1182,     0,     0,     0,     0,     0,     0,
    1183,  1184,  1185,     0,     0,     0,     0,  1186,     0,  1187,
       0,     0,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,   120,  1142,   848,  1143,  1144,  1145,  1146,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,  1148,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,  1149,   146,  1150,  1151,
       0,   149,   150,   151,   152,   153,   154,  1152,   817,   155,
     156,   157,   158,  1153,  1154,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,  1155,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,  1156,   196,   197,  1157,   199,  1158,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,  1160,   230,   231,
     232,   233,   234,   235,   820,  1161,   237,     0,   238,   239,
    1162,   241,     0,   242,     0,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,  1163,
    1164,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,  1165,  1166,     0,  1167,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1168,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1169,   333,  1170,   335,
     336,   337,   338,   339,  1171,   340,   341,   342,   343,  1172,
     823,   345,  1173,   347,   348,   349,     0,   350,   351,     0,
       0,  1174,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1175,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,  1176,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,  1177,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,  1178,  1179,     0,   480,     0,
     481,   482,   829,   484,   830,  1180,   486,   487,   831,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,  1181,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,  1182,     0,     0,     0,     0,     0,     0,  1183,  2421,
    1185,     0,     0,     0,     0,  1186,     0,  1187,     0,     0,
       0,     0,     0,  1188,  1189,     0,     0,     0,     0,  1190,
    1191,   120,  1142,   848,  1143,  1144,  1145,  1146,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,  1148,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,  1149,   146,  1150,  1151,     0,   149,
     150,   151,   152,   153,   154,  1152,   817,   155,   156,   157,
     158,  1153,  1154,   161,     0,   162,   163,   164,   165,   818,
       0,   819,     0,  1155,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1156,   196,   197,  1157,   199,  1158,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,  1160,   230,   231,   232,   233,
     234,   235,   820,  1161,   237,     0,   238,   239,  1162,   241,
       0,   242,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,     0,  1163,  1164,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,  1165,  1166,     0,  1167,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1168,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1169,   333,  1170,   335,   336,   337,
     338,   339,  1171,   340,   341,   342,   343,  1172,   823,   345,
    1173,   347,   348,   349,     0,   350,   351,     0,     0,  1174,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     826,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1175,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
    1176,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
    1177,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   828,     0,
       0,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,  1178,  1179,     0,   480,     0,   481,   482,
     829,   484,   830,  1180,   486,   487,   831,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,  1181,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,  1182,
       0,     0,     0,     0,     0,     0,  1183,  1184,  1185,     0,
       0,     0,     0,  1186,     0,  2642,     0,     0,     0,     0,
       0,  1188,  1189,     0,     0,     0,     0,  1190,  1191,   120,
    1142,   848,  1143,  1144,  1145,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,  1148,     0,     0,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
     143,   144,  1149,   146,  1150,  1151,     0,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,   819,
       0,  1155,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,  1158,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,   300,
     301,   302,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1168,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,   333,  1170,   335,   336,   337,   338,   339,
    1171,   340,   341,   342,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,  1174,   353,   354,
       0,     0,   355,   356,   357,   358,   359,   360,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   826,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,  1176,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,   447,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   828,     0,     0,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,     0,   481,   482,   829,   484,
     830,  1180,   486,   487,   831,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,  1181,   508,     0,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,  1182,     0,     0,
       0,     0,     0,     0,  1183,  3317,  1185,     0,     0,     0,
       0,  1186,     0,  1187,     0,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,     0,  1190,  1191,   120,  1142,   848,
    1143,  1144,  1145,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,  1148,     0,     0,   134,   135,
     136,     0,   137,   138,   139,   140,   141,   142,   143,   144,
    1149,   146,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,   819,     0,  1155,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,  3263,
     187,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,  1158,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
     252,     0,     0,  3264,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   300,   301,   302,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1168,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,   333,  1170,   335,   336,   337,   338,   339,  1171,   340,
     341,   342,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,  1174,   353,   354,     0,     0,
     355,   356,   357,   358,   359,   360,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   826,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,  3265,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,   447,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   828,     0,     0,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,   831,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,  1181,   508,     0,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,  1182,     0,     0,     0,     0,
       0,     0,  1183,  1184,  1185,     0,     0,     0,     0,  1186,
       0,  3266,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,   120,  1142,   848,  1143,  1144,
    1145,  1146,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,  1148,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,  3943,  1149,   146,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,  1155,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,  3944,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,  1158,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   300,   301,   302,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1168,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,   333,
    1170,   335,   336,   337,   338,   339,  1171,   340,   341,   342,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,  1174,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,  1176,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
     831,   489,   490,  3945,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,  1181,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,  1182,     0,     0,     0,     0,     0,     0,
    1183,  1184,  1185,     0,     0,     0,     0,  1186,     0,  1187,
       0,     0,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,   120,  1142,   848,  1143,  1144,  1145,  1146,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,  1148,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,  1149,   146,  1150,  1151,
       0,   149,   150,   151,   152,   153,   154,  1152,   817,   155,
     156,   157,   158,  1153,  1154,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,  1155,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,  3944,   188,   189,   190,
     191,   192,   193,   194,  1156,   196,   197,  1157,   199,  1158,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,  1160,   230,   231,
     232,   233,   234,   235,   820,  1161,   237,     0,   238,   239,
    1162,   241,     0,   242,     0,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,  1163,
    1164,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,  1165,  1166,     0,  1167,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1168,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1169,   333,  1170,   335,
     336,   337,   338,   339,  1171,   340,   341,   342,   343,  1172,
     823,   345,  1173,   347,   348,   349,     0,   350,   351,     0,
       0,  1174,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1175,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,  1176,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,  1177,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,  1178,  1179,     0,   480,     0,
     481,   482,   829,   484,   830,  1180,   486,   487,   831,   489,
     490,  3945,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,  1181,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,  1182,     0,     0,     0,     0,     0,     0,  1183,  1184,
    1185,     0,     0,     0,     0,  1186,     0,  1187,     0,     0,
       0,     0,     0,  1188,  1189,     0,     0,     0,     0,  1190,
    1191,   120,  1142,   848,  1143,  1144,     0,  1146,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,  1148,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,  1149,   146,  1150,  1151,     0,   149,
     150,   151,   152,   153,   154,  1152,   817,   155,   156,   157,
     158,  1153,  1154,   161,     0,   162,   163,   164,   165,   818,
       0,   819,     0,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1156,   196,   197,  1157,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,  1160,   230,   231,   232,   233,
     234,   235,   820,  1161,   237,     0,   238,   239,  1162,   241,
       0,   242,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,     0,  1163,  1164,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,  1165,  1166,     0,  1167,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1168,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1169,   333,  1170,   335,   336,   337,
     338,   339,  3040,   340,   341,   342,   343,  1172,   823,   345,
    1173,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     826,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1175,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
    1176,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
    1177,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   828,     0,
       0,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,  1178,  1179,     0,   480,     0,   481,   482,
     829,   484,   830,  1180,   486,   487,   831,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,  1181,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,  3041,
       0,     0,     0,     0,     0,     0,  3042,  3043,     0,     0,
       0,     0,     0,  1186,     0,  1187,     0,     0,     0,     0,
       0,  1188,  1189,     0,     0,     0,     0,  1190,  1191,   120,
    1142,   848,  1143,  1144,  1145,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,  1148,     0,     0,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
     143,   144,  1149,   146,  1150,  1151,     0,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,   819,
       0,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,   300,
     301,   302,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1168,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,   333,  1170,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,  1174,   353,   354,
       0,     0,   355,   356,   357,   358,   359,   360,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   826,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,  1176,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,   447,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   828,     0,     0,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,     0,   481,   482,   829,   484,
     830,  1180,   486,   487,   831,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,  1181,   508,     0,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,     0,     0,     0,
       0,     0,     0,     0,  1527,  1528,     0,     0,     0,     0,
       0,  1186,     0,  1187,     0,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,     0,  1190,  1191,   120,  1142,   848,
    1143,  1144,  1145,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,  1148,     0,     0,   134,   135,
     136,     0,   137,   138,   139,   140,   141,   142,   143, -2279,
    1149,   146,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,   819,     0,  1155,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
    3944,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,  1158,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
     244,     0,   245,   246,   247,   248, -2279,   250,     0,   251,
     252,     0,     0,  1163,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263, -2279,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   300,   301, -2279,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1168,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,   333,  1170,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,  1174,   353,   354,     0,     0,
     355,   356,   357,   358,   359,   360,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   826,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0, -2279,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   828,     0,     0,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,   831,   489,   490,  3945,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,  1181,   508,     0,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541, -2279,     0,     0,     0,     0,
       0,     0,  1183,  1184,  1185,     0,     0,     0,     0,  1186,
       0,  1187,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,   120,  1142,   848,  1143,  1144,
       0,  1146,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,  1148,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,   144,  1149,   146,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   300,   301,   302,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1168,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,   333,
    1170,   335,   336,   337,   338,   339,     0,   340,   341,   342,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,  2324,  2325,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
     831,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,  1181,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,     0,     0,     0,     0,     0,     0,     0,
    2326,  2327,     0,     0,     0,     0,     0,  1186,     0,  1187,
       0,     0,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,   120,  1142,   848,  1143,  1144,  1145,  1146,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,  1148,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,  1149,   146,  1150,  1151,
       0,   149,   150,   151,   152,   153,   154,  1152,   817,   155,
     156,   157,   158,  1153,  1154,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,  1156,   196,   197,  1157,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,  1160,   230,   231,
     232,   233,   234,   235,   820,  1161,   237,     0,   238,   239,
    1162,   241,     0,   242,     0,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,  1163,
    1164,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,  1165,  1166,     0,  1167,     0,   287,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1168,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1169,   333,  1170,   335,
     336,   337,   338,   339,     0,   340,   341,   342,   343,  1172,
     823,   345,  1173,   347,   348,   349,     0,   350,   351,     0,
       0,  1174,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1175,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,  1176,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,  1177,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,  1178,  1179,     0,   480,     0,
     481,   482,   829,   484,   830,  1180,   486,   487,   831,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,  1181,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,     0,     0,     0,     0,     0,     0,     0,  1527,  1528,
       0,     0,     0,     0,     0,  1186,     0,  1187,     0,     0,
       0,     0,     0,  1188,  1189,     0,     0,     0,     0,  1190,
    1191,   120,  1142,   848,  1143,  1144,     0,  1146,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,  1148,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,  1149,   146,  1150,  1151,     0,   149,
     150,   151,   152,   153,   154,  1152,   817,   155,   156,   157,
     158,  1153,  1154,   161,     0,   162,   163,   164,   165,   818,
       0,   819,     0,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1156,   196,   197,  1157,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,  1160,   230,   231,   232,   233,
     234,   235,   820,  1161,   237,     0,   238,   239,  1162,   241,
       0,   242,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,  3283,  1163,  1164,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,  -928,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,  1165,  1166,     0,  1167,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1168,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1169,   333,  1170,   335,   336,   337,
     338,   339,     0,   340,   341,   342,   343,  1172,   823,   345,
    1173,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     826,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1175,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
    1177,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   828,     0,
       0,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,  1178,  1179,     0,   480,     0,   481,   482,
     829,   484,   830,  1180,   486,   487,   831,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,  1181,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1186,     0,  2930,     0,     0,     0,     0,
       0,  1188,  1189,     0,     0,     0,     0,  1190,  1191,   120,
    1142,   848,  1143,  1144,     0,  1146,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,  1148,     0,     0,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
     143,   144,  1149,   146,  1150,  1151,     0,   149,   150,   151,
     152,   153,   154,  1152,   817,   155,   156,   157,   158,  1153,
    1154,   161,     0,   162,   163,   164,   165,   818,     0,   819,
       0,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1156,   196,   197,  1157,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,  1159,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,  1160,   230,   231,   232,   233,   234,   235,
     820,  1161,   237,     0,   238,   239,  1162,   241,     0,   242,
       0,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,   252,     0,     0,  1163,  1164,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,  1165,
    1166,     0,  1167,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,   300,
     301,   302,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  1168,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1169,   333,  1170,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,  1172,   823,   345,  1173,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,   358,   359,   360,   825,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   826,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,  1175,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,   447,   448,   449,  1177,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   828,     0,     0,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,  1178,  1179,     0,   480,     0,   481,   482,   829,   484,
     830,  1180,   486,   487,   831,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,  1181,   508,     0,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1186,     0,  2930,     0,     0,     0,     0,     0,  1188,
    1189,     0,     0,     0,     0,  1190,  1191,   120,  1142,   848,
    1143,  1144,     0,  1146,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,  1148,     0,     0,   134,   135,
     136,     0,   137,   138,   139,   140,   141,   142,   143,   144,
    1149,   146,  1150,  1151,     0,   149,   150,   151,   152,   153,
     154,  1152,   817,   155,   156,   157,   158,  1153,  1154,   161,
       0,   162,   163,   164,   165,   818,     0,   819,     0,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,  1156,   196,
     197,  1157,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,  1160,   230,   231,   232,   233,   234,   235,   820,  1161,
     237,     0,   238,   239,  1162,   241,     0,   242,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
     252,     0,     0,  1163,  1164,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,  1165,  1166,     0,
    1167,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   300,   301,   302,
       0,   303,   304,   305,   306,   307,   308,   309,   310,  1168,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1169,   333,  1170,   335,   336,   337,   338,   339,     0,   340,
     341,   342,   343,  1172,   823,   345,  1173,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,   358,   359,   360,   825,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   826,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1175,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,  1176,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,   447,   448,   449,  1177,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   828,     0,     0,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,  1178,
    1179,     0,   480,     0,   481,   482,   829,   484,   830,  1180,
     486,   487,   831,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,  1181,   508,     0,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1186,
       0,  1187,     0,     0,     0,     0,     0,  1188,  1189,     0,
       0,     0,     0,  1190,  1191,   120,  1142,   848,  1143,  1144,
    1145,  1146,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,  1148,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,     0,  1149,   146,
    1150,  1151,     0,   149,   150,   151,   152,   153,   154,  1152,
     817,   155,   156,   157,   158,  1153,  1154,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,  1155,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,  1156,   196,   197,  1157,
     199,  1158,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,  1159,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,     0,   224,     0,   225,   226,   227,   228,  1160,
     230,   231,   232,   233,   234,   235,   820,  1161,   237,     0,
     238,   239,  1162,   241,     0,   242,     0,   243,   244,     0,
     245,   246,   247,   248,     0,   250,     0,   251,   252,     0,
       0,  1163,  1164,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  1165,  1166,     0,  1167,     0,
     287,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   300,   301,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,  1168,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1169,   333,
    1170,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,  1172,   823,   345,  1173,   347,   348,   349,     0,   350,
     351,     0,     0,  1174,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,  1175,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,  1176,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   448,   449,  1177,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,  1178,  1179,     0,
     480,     0,   481,   482,   829,   484,   830,  1180,   486,   487,
     831,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,  1181,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,     0,     0,     0,     0,     0,     0,     0,
    1183,  1184,  1185,     0,   120,     0,     0,  1186,     0,  1187,
       0,  1147,     0,     0,     0,  1188,  1189,     0,     0,     0,
       0,  1190,  1191,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,   133,  1148,     0,     0,   134,   135,   136,     0,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,   154,  1152,   817,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   818,     0,   819,     0,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,     0,   212,   213,
     214,   215,   216,   217,   218,     0,   219,   220,   221,     0,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   820,     0,   237,     0,   238,
     239,   240,   241,     0,   242,     0,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   252,     0,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,     0,   299,   300,   301,   302,     0,   303,   304,
     305,   306,   307,   308,   309,   310,  1168,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
       0,   823,   345,   346,   347,   348,   349,     0,   350,   351,
       0,     0,   352,   353,   354,     0,     0,   355,   356,   357,
     358,   359,   360,   825,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,     0,     0,     0,
       0,   375,   376,   826,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,     0,
     447,   448,   449,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   828,     0,     0,   468,   469,     0,   470,   471,   472,
     473,   474,   475,   476,     0,   477,   478,   479,     0,   480,
       0,   481,   482,   829,   484,   830,     0,   486,   487,   831,
     489,   490,   491,   492,   493,     0,     0,   494,   495,   496,
       0,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,     0,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,   520,     0,
       0,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   899,     0,     0,  1186,     0,  2230,     0,
       0,     0,     0,     0,  1188,  1189,     0,     0,     0,     0,
    1190,  1191,   121,   122,   123,   124,     0,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   135,   136,     0,   137,   138,
     139,     0,   141,   142,   143,   900,   901,     0,   902,   903,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,   904,   905,   161,     0,   162,   163,   164,
     165,   906,     0,     0,     0,     0,   169,   170,   171,   172,
     173,     0,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   907,   196,   197,   908,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
       0,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,     0,     0,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   909,   230,   231,
     232,   233,   234,   235,   910,     0,   237,     0,   238,   239,
     911,   241,     0,   242,     0,   243,     0,     0,     0,   246,
     247,   912,     0,   250,     0,   251,     0,     0,     0,   913,
     914,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,     0,   915,   279,   280,
     281,   282,   283,   916,   917,     0,   918,     0,   287,     0,
       0,   290,     0,   292,     0,   294,   295,   296,   297,   298,
       0,     0,   299,     0,   301,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   919,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   920,     0,   921,   335,
     336,   337,     0,   922,     0,   340,   341,     0,   343,     0,
     923,   345,   924,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   925,     0,
     359,     0,   926,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,   373,   374,     0,     0,     0,     0,
     375,   376,   927,     0,   379,   380,   928,   382,   383,   384,
       0,   385,   386,   387,   388,   389,     0,     0,   392,     0,
     393,   394,   395,   396,   397,   929,   399,   400,   401,   402,
       0,   403,   404,   405,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,     0,   420,
     421,   422,   930,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   931,   444,   445,     0,     0,     0,
       0,   449,   932,   451,     0,     0,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   933,   466,
     934,     0,     0,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,   477,   935,   936,     0,     0,     0,
     481,   482,   937,   484,   938,     0,   486,   487,   939,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
    1520,   941,   508,     0,   509,     0,   511,     0,   513,   514,
     515,   516,     0,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   942,   943,   944,   945,
     946,   947,   948,   949,   950,   951,   952,   538,   539,   540,
     541,     0,     0,     0,     0,     0,     0,     0,     0,  1062,
    1455,   848,     0,     0,     0,  1146,     0,  3552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3553,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,   589,     0,   133,     0,     0,     0,
     594,   135,   136,     0,   137,   138,   139,   596,   141,   142,
     143,   597,   598,   599,   600,   601,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   605,
     606,   161,     0,   162,   163,   164,   165,   608,     0,   610,
       0,   612,   169,   170,   171,   172,   173,   613,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,   616,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     618,   196,   197,   619,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   629,   230,   231,   232,   233,   234,   235,
     630,  1456,   237,     0,   238,   239,   633,   241,     0,   242,
       0,   243,   636,     0,   638,   246,   247,   639,   640,   250,
       0,   251,   252,     0,     0,   644,   645,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   647,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   650,   651,   279,   280,   281,   282,   283,   652,
     653,     0,   655,     0,   287,   657,   658,   290,   659,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,   662,
     301,   663,     0,   303,   304,   305,   306,   307,   308,   309,
     310,  2504,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   666,   667,   668,   335,   336,   337,   338,   669,
       0,   340,   341,   671,   343,     0,   673,   345,   674,   347,
     348,   349,     0,   350,   351,  1457,     0,   352,   353,   354,
       0,     0,   355,   356,   680,   681,   359,   682,   683,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   688,   689,
     379,   380,   690,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   693,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   696,   420,   421,   422,   697,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,   699,   437,   438,   439,   440,   441,   442,
     700,   444,   445,   446,     0,   702,   448,   449,   703,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   705,   466,   706,     0,     0,   468,
     469,     0,   470,   710,   472,   473,   474,   475,   476,     0,
     477,   712,   713,     0,   480,     0,   481,   482,   716,   484,
     717,  1458,   486,   487,   719,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   724,   725,   508,     0,
     509,   727,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   732,   733,   734,   735,   736,   737,   738,   739,
     740,   741,   742,   538,   539,   540,   541,     0,     0,     0,
       0,     0,   550,     0,  1459,  1460,  2505,     0,     0,     0,
       0,  2506,     0,  2507,     0,     0,     0,     0,     0,     0,
    1189,   121,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,   133,
       0,  1100,     0,     0,   135,   136,     0,   137,   138,   139,
       0,   141,   142,   143,   144,   145,     0,   147,   148,     0,
     149,   150,   151,   152,   153,   154,     0,     0,   155,   156,
     157,   158,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,     0,     0,   168,   169,   170,   171,   172,   173,
       0,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,     0,     0,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,     0,   212,   213,   214,   215,
     216,   217,   218,     0,   219,   220,   221,     0,   222,   223,
     224,  -734,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,     0,   237,  -734,   238,   239,   240,
     241,  -734,   242,     0,   243,     0,     0,     0,   246,   247,
     551,     0,   250,     0,   251,   252,     0,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,   285,  -734,   286,     0,   287,     0,     0,
     290,     0,   292,   293,   294,   295,   296,   297,   298,     0,
       0,   299,     0,   301,     0,  -734,   303,   304,   305,   306,
     307,   308,   309,   310,   552,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   334,   335,   336,
     337,   338,   339,     0,   340,   341,     0,   343,     0,   344,
     345,   346,   347,   348,   349,  -734,   350,   351,     0,     0,
     352,   353,   354,     0,  -734,   355,   356,   357,     0,   359,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,     0,     0,     0,     0,   375,
     376,   377,     0,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   417,   418,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   553,   466,   467,
       0,     0,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,   477,   478,   479,     0,   480,     0,   481,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,  -734,     0,   494,   495,   496,     0,   497,
     498,   499,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,     0,   509,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,   520,     0,     0,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     550,     0,   578,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1263,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,   133,     0,     0,
       0,     0,   135,   136,     0,   137,   138,   139,     0,   141,
     142,   143,   144,   145,     0,   147,   148,     0,   149,   150,
     151,   152,   153,   154,     0,     0,   155,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
       0,     0,   168,   169,   170,   171,   172,   173,     0,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,     0,
       0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,     0,   212,   213,   214,   215,   216,   217,
     218,     0,   219,   220,   221,     0,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,     0,   237,     0,   238,   239,   240,   241,     0,
     242,     0,   243,     0,     0,     0,   246,   247,   551,     0,
     250,     0,   251,   252,     0,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,     0,   287,     0,     0,   290,     0,
     292,   293,   294,   295,   296,   297,   298,     0,     0,   299,
       0,   301,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   552,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   334,   335,   336,   337,   338,
     339,     0,   340,   341,     0,   343,     0,   344,   345,   346,
     347,   348,   349,     0,   350,   351,     0,     0,   352,   353,
     354,     0,     0,   355,   356,   357,     0,   359,     0,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,     0,     0,     0,     0,   375,   376,   377,
       0,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   553,   466,   467,     0,     0,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,   477,   478,   479,     0,   480,     0,   481,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,   495,   496,     0,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
       0,   509,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,   520,     0,     0,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   120,     0,
     578,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2593,  3528,     0,   121,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,   133,     0,     0,     0,   134,
     135,   136,     0,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,   154,     0,   817,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   818,     0,   819,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,   205,   206,    14,    15,   207,   208,   209,   210,   211,
       0,     0,   212,   213,   214,   215,   216,   217,   218,     0,
     219,   220,   221,     0,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   820,
       0,   237,     0,   238,   239,   240,   241,     0,   242,     0,
     243,   244,    23,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   821,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,     0,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   822,     0,   299,   300,   301,
     302,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,     0,   823,   345,   346,   347,   348,
     349,     0,   350,   351,     0,   824,   352,   353,   354,     0,
       0,   355,   356,   357,   358,   359,   360,   825,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    26,    27,    28,     0,   375,   376,   826,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   827,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    33,     0,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,    35,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   828,    37,     0,   468,   469,
      38,   470,   471,   472,   473,   474,   475,   476,     0,   477,
     478,   479,     0,   480,     0,   481,   482,   829,   484,   830,
       0,   486,   487,   831,   489,   490,   491,   492,   493,     0,
       0,   494,   495,   496,    40,   497,   498,   499,   500,     0,
     501,   502,   503,   504,   505,   832,   507,   508,     0,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,   520,     0,    44,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,  1062,     0,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   833,     0,     0,   121,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     3,     4,
       0,   589,     0,   133,     0,     0,     0,   594,   135,   136,
       0,   137,   138,   139,   596,   141,   142,   143,   597,   598,
     599,   600,   601,     0,   149,   150,   151,   152,   153,   154,
       0,     0,   155,   156,   157,   158,   605,   606,   161,     0,
     162,   163,   164,   165,   608,     0,   610,     0,   612,   169,
     170,   171,   172,   173,   613,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,     0,   616,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   618,   196,   197,
     619,   199,     0,   200,     0,   201,   202,   203,   204,   205,
     206,    14,    15,   207,   208,   209,   210,   211,     0,     0,
     212,   213,   214,   215,   216,   217,   218,     0,   219,   220,
     221,     0,   222,   223,   224,     0,   225,   226,   227,   228,
     629,   230,   231,   232,   233,   234,   235,   630,     0,   237,
       0,   238,   239,   633,   241,     0,   242,     0,   243,   636,
      23,   638,   246,   247,   639,   640,   250,     0,   251,   252,
       0,     0,   644,   645,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   647,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,     0,   276,   650,
     651,   279,   280,   281,   282,   283,   652,   653,     0,   655,
       0,   287,   657,   658,   290,   659,   292,   293,   294,   295,
     296,   297,   298,     0,     0,   299,   662,   301,   663,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   665,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   666,
     667,   668,   335,   336,   337,   338,   669,     0,   340,   341,
     671,   343,     0,   673,   345,   674,   347,   348,   349,     0,
     350,   351,     0,     0,   352,   353,   354,     0,     0,   355,
     356,   680,   681,   359,   682,   683,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    26,
      27,    28,     0,   375,   376,   688,   689,   379,   380,   690,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,   693,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   417,
     418,   696,   420,   421,   422,   697,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    33,
     699,   437,   438,   439,   440,   441,   442,   700,   444,   445,
     446,    35,   702,   448,   449,   703,   451,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   705,   466,   706,    37,     0,   468,   469,    38,   470,
     710,   472,   473,   474,   475,   476,     0,   477,   712,   713,
       0,   480,     0,   481,   482,   716,   484,   717,     0,   486,
     487,   719,   489,   490,   491,   492,   493,     0,     0,   494,
     495,   496,    40,   497,   498,   499,   500,     0,   501,   502,
     503,   504,   505,  1063,   725,   508,     0,   509,   727,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
     520,     0,    44,   521,   522,   523,   524,   525,   526,   732,
     733,   734,   735,   736,   737,   738,   739,   740,   741,   742,
     538,   539,   540,   541,     0,   120,    45,   578,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     880,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,     0,     0,     0,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
     817,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   818,     0,   819,     0,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   820,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   821,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   822,     0,   299,   300,   301,   302,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
     343,     0,   823,   345,   346,   347,   348,   349,     0,   350,
     351,     0,   824,   352,   353,   354,     0,     0,   355,   356,
     357,   358,   359,   360,   825,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   826,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   827,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   828,     0,     0,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,   478,   479,     0,
     480,     0,   481,   482,   829,   484,   830,     0,   486,   487,
     831,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   832,   507,   508,     0,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   833,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,   817,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   820,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,   343,     0,
     823,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   827,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   829,   484,   830,     0,   486,   487,   831,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   880,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,     0,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,   154,     0,   817,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   818,
       0,   819,     0,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,   214,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   820,     0,   237,     0,   238,   239,   240,   241,
       0,   242,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,   343,     0,   823,   345,
     346,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     825,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     826,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   828,     0,
       0,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,   478,   479,     0,   480,     0,   481,   482,
     829,   484,   830,     0,   486,   487,   831,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3681,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,    14,    15,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,    23,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    26,    27,    28,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    33,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    35,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,    37,     0,   468,
     469,    38,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,    40,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   832,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,    44,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,    45,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   880,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   979,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,     0,   243,
       0,    23,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      26,    27,    28,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   980,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      33,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,    38,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   981,
     479,     0,   480,     0,   982,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,    40,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   832,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,    44,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   550,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   880,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,     0,     0,     0,     0,   135,   136,     0,
     137,   138,   139,     0,   141,   142,   143,   144,   145,     0,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   168,   169,   170,
     171,   172,   173,     0,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,     0,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,     0,    23,
       0,   246,   247,   551,     0,   250,     0,   251,   252,     0,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,     0,     0,   290,     0,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,     0,   301,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   552,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     334,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,     0,   344,   345,   346,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     357,     0,   359,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    26,    27,
      28,     0,   375,   376,   377,     0,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    33,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     553,   466,   467,     0,     0,   468,   469,    38,   470,     0,
     472,   473,   474,   475,   476,     0,   477,   478,   479,     0,
     480,     0,   481,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,    40,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   832,   507,   508,     0,   509,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,    44,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,     0,   550,    45,   578,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   880,
       0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,   133,     0,     0,     0,     0,   135,   136,     0,   137,
     138,   139,     0,   141,   142,   143,   144,   145,     0,   147,
     148,     0,   149,   150,   151,   152,   153,   154,     0,     0,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,     0,     0,   168,   169,   170,   171,
     172,   173,     0,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,     0,     0,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,     0,   212,   213,
     214,   215,   216,   217,   218,     0,   219,   220,   221,     0,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,     0,   237,     0,   238,
     239,   240,   241,     0,   242,     0,   243,     0,     0,     0,
     246,   247,   551,     0,   250,     0,   251,   252,     0,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,     0,   287,
       0,     0,   290,     0,   292,   293,   294,   295,   296,   297,
     298,     0,     0,   299,     0,   301,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   552,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   334,
     335,   336,   337,   338,   339,     0,   340,   341,     0,   343,
       0,   344,   345,   346,   347,   348,   349,     0,   350,   351,
       0,     0,   352,   353,   354,     0,     0,   355,   356,   357,
       0,   359,     0,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,     0,     0,     0,
       0,   375,   376,   377,     0,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   417,   418,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   553,
     466,   467,     0,     0,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,   477,   478,   479,     0,   480,
       0,   481,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,   495,   496,
       0,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,     0,   509,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,   520,     0,
       0,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   550,     0,   578,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1085,     0,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,   133,
       0,     0,     0,     0,   135,   136,     0,   137,   138,   139,
       0,   141,   142,   143,   144,   145,     0,   147,   148,     0,
     149,   150,   151,   152,   153,   154,     0,     0,   155,   156,
     157,   158,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,     0,     0,   168,   169,   170,   171,   172,   173,
       0,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,     0,     0,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,     0,   212,   213,   214,   215,
     216,   217,   218,     0,   219,   220,   221,     0,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,     0,   237,     0,   238,   239,   240,
     241,     0,   242,     0,   243,     0,     0,     0,   246,   247,
     551,     0,   250,     0,   251,   252,     0,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,     0,   287,     0,     0,
     290,     0,   292,   293,   294,   295,   296,   297,   298,     0,
       0,   299,     0,   301,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   552,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   334,   335,   336,
     337,   338,   339,     0,   340,   341,     0,   343,     0,   344,
     345,   346,   347,   348,   349,     0,   350,   351,     0,     0,
     352,   353,   354,     0,     0,   355,   356,   357,     0,   359,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,     0,     0,     0,     0,   375,
     376,   377,     0,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   417,   418,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   553,   466,   467,
       0,     0,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,   477,   478,   479,     0,   480,     0,   481,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,     0,   494,   495,   496,     0,   497,
     498,   499,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,     0,   509,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,   520,     0,     0,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     550,     0,   578,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1579,     0,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,   133,     0,     0,
       0,     0,   135,   136,     0,   137,   138,   139,     0,   141,
     142,   143,   144,   145,     0,   147,   148,     0,   149,   150,
     151,   152,   153,   154,     0,     0,   155,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
       0,     0,   168,   169,   170,   171,   172,   173,     0,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,     0,
       0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,     0,   212,   213,   214,   215,   216,   217,
     218,     0,   219,   220,   221,     0,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,     0,   237,     0,   238,   239,   240,   241,     0,
     242,     0,   243,     0,     0,     0,   246,   247,   551,     0,
     250,     0,   251,   252,     0,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,     0,   287,     0,     0,   290,     0,
     292,   293,   294,   295,   296,   297,   298,     0,     0,   299,
       0,   301,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   552,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   334,   335,   336,   337,   338,
     339,     0,   340,   341,     0,   343,     0,   344,   345,   346,
     347,   348,   349,     0,   350,   351,     0,     0,   352,   353,
     354,     0,     0,   355,   356,   357,     0,   359,     0,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,     0,     0,     0,     0,   375,   376,   377,
       0,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   553,   466,   467,     0,     0,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,   477,   478,   479,     0,   480,     0,   481,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,   495,   496,     0,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
       0,   509,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,   520,     0,     0,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   550,     0,
     578,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2350,     0,     0,   121,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
     135,   136,     0,   137,   138,   139,     0,   141,   142,   143,
     144,   145,     0,   147,   148,     0,   149,   150,   151,   152,
     153,   154,     0,     0,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,     0,
     168,   169,   170,   171,   172,   173,     0,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,     0,     0,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,     0,   212,   213,   214,   215,   216,   217,   218,     0,
     219,   220,   221,     0,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
       0,   237,     0,   238,   239,   240,   241,     0,   242,     0,
     243,     0,     0,     0,   246,   247,   551,     0,   250,     0,
     251,   252,     0,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,     0,   287,     0,     0,   290,     0,   292,   293,
     294,   295,   296,   297,   298,     0,     0,   299,     0,   301,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     552,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   334,   335,   336,   337,   338,   339,     0,
     340,   341,     0,   343,     0,   344,   345,   346,   347,   348,
     349,     0,   350,   351,     0,     0,   352,   353,   354,     0,
       0,   355,   356,   357,     0,   359,     0,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,     0,     0,     0,     0,   375,   376,   377,     0,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   417,   418,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   553,   466,   467,     0,     0,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,   477,
     478,   479,     0,   480,     0,   481,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,   495,   496,     0,   497,   498,   499,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,     0,   509,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,   520,     0,     0,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   550,     0,   578,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2593,     0,     0,   121,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,   133,     0,     0,     0,     0,   135,   136,
       0,   137,   138,   139,     0,   141,   142,   143,   144,   145,
       0,   147,   148,     0,   149,   150,   151,   152,   153,   154,
       0,     0,   155,   156,   157,   158,   159,   160,   161,     0,
     162,   163,   164,   165,   166,     0,     0,     0,   168,   169,
     170,   171,   172,   173,     0,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,     0,     0,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,     0,   200,     0,   201,   202,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,     0,
     212,   213,   214,   215,   216,   217,   218,     0,   219,   220,
     221,     0,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,     0,   237,
       0,   238,   239,   240,   241,     0,   242,     0,   243,     0,
       0,     0,   246,   247,   551,     0,   250,     0,   251,   252,
       0,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
       0,   287,     0,     0,   290,     0,   292,   293,   294,   295,
     296,   297,   298,     0,     0,   299,     0,   301,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   552,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,   334,   335,   336,   337,   338,   339,     0,   340,   341,
       0,   343,     0,   344,   345,   346,   347,   348,   349,     0,
     350,   351,     0,     0,   352,   353,   354,     0,     0,   355,
     356,   357,     0,   359,     0,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,     0,
       0,     0,     0,   375,   376,   377,     0,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   417,
     418,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   553,   466,   467,     0,     0,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,   477,   478,   479,
       0,   480,     0,   481,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,     0,   494,
     495,   496,     0,   497,   498,   499,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,     0,   509,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
     520,     0,     0,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   550,     0,   578,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2763,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,   133,     0,     0,     0,     0,   135,   136,     0,   137,
     138,   139,     0,   141,   142,   143,   144,   145,     0,   147,
     148,     0,   149,   150,   151,   152,   153,   154,     0,     0,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,     0,     0,   168,   169,   170,   171,
     172,   173,     0,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,     0,     0,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,     0,   212,   213,
     214,   215,   216,   217,   218,     0,   219,   220,   221,     0,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,     0,   237,     0,   238,
     239,   240,   241,     0,   242,     0,   243,     0,     0,     0,
     246,   247,   551,     0,   250,     0,   251,   252,     0,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,     0,   287,
       0,     0,   290,     0,   292,   293,   294,   295,   296,   297,
     298,     0,     0,   299,     0,   301,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   552,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   334,
     335,   336,   337,   338,   339,     0,   340,   341,     0,   343,
       0,   344,   345,   346,   347,   348,   349,     0,   350,   351,
       0,     0,   352,   353,   354,     0,     0,   355,   356,   357,
       0,   359,     0,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,     0,     0,     0,
       0,   375,   376,   377,     0,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   417,   418,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   553,
     466,   467,     0,     0,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,   477,   478,   479,     0,   480,
       0,   481,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,   495,   496,
       0,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,     0,   509,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,   520,     0,
       0,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   550,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3523,     0,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,   133,
       0,     0,     0,     0,   135,   136,     0,   137,   138,   139,
       0,   141,   142,   143,   144,   145,     0,   147,   148,     0,
     149,   150,   151,   152,   153,   154,     0,     0,   155,   156,
     157,   158,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,     0,     0,   168,   169,   170,   171,   172,   173,
       0,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,     0,     0,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,     0,   212,   213,   214,   215,
     216,   217,   218,     0,   219,   220,   221,     0,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,     0,   237,     0,   238,   239,   240,
     241,     0,   242,     0,   243,     0,     0,     0,   246,   247,
     551,     0,   250,     0,   251,   252,     0,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,     0,   287,     0,     0,
     290,     0,   292,   293,   294,   295,   296,   297,   298,     0,
       0,   299,     0,   301,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   552,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   334,   335,   336,
     337,   338,   339,     0,   340,   341,     0,   343,     0,   344,
     345,   346,   347,   348,   349,     0,   350,   351,     0,     0,
     352,   353,   354,     0,     0,   355,   356,   357,     0,   359,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,     0,     0,     0,     0,   375,
     376,   377,     0,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   417,   418,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   553,   466,   467,
       0,     0,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,   477,   478,   479,     0,   480,     0,   481,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,     0,   494,   495,   496,     0,   497,
     498,   499,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,     0,   509,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,   520,     0,     0,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     550,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2193,     0,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,   133,     0,     0,
       0,     0,   135,   136,     0,   137,   138,   139,     0,   141,
     142,   143,   144,   145,     0,   147,   148,     0,   149,   150,
     151,   152,   153,   154,     0,     0,   155,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
       0,     0,   168,   169,   170,   171,   172,   173,     0,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,     0,
       0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,     0,   212,   213,   214,   215,   216,   217,
     218,     0,   219,   220,   221,     0,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,     0,   237,     0,   238,   239,   240,   241,     0,
     242,     0,   243,     0,     0,     0,   246,   247,   551,     0,
     250,     0,   251,   252,     0,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,     0,   287,     0,     0,   290,     0,
     292,   293,   294,   295,   296,   297,   298,     0,     0,   299,
       0,   301,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   552,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   334,   335,   336,   337,   338,
     339,     0,   340,   341,     0,   343,     0,   344,   345,   346,
     347,   348,   349,     0,   350,   351,     0,     0,   352,   353,
     354,     0,     0,   355,   356,   357,     0,   359,     0,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,     0,     0,     0,     0,   375,   376,   377,
       0,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   553,   466,   467,     0,     0,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,   477,   478,   479,     0,   480,     0,   481,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,   495,   496,     0,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
       0,   509,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,   520,     0,     0,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   550,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2306,     0,     0,   121,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
     135,   136,     0,   137,   138,   139,     0,   141,   142,   143,
     144,   145,     0,   147,   148,     0,   149,   150,   151,   152,
     153,   154,     0,     0,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,     0,
     168,   169,   170,   171,   172,   173,     0,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,     0,     0,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,     0,   212,   213,   214,   215,   216,   217,   218,     0,
     219,   220,   221,     0,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
       0,   237,     0,   238,   239,   240,   241,     0,   242,     0,
     243,     0,     0,     0,   246,   247,   551,     0,   250,     0,
     251,   252,     0,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,     0,   287,     0,     0,   290,     0,   292,   293,
     294,   295,   296,   297,   298,     0,     0,   299,     0,   301,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     552,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   334,   335,   336,   337,   338,   339,     0,
     340,   341,     0,   343,     0,   344,   345,   346,   347,   348,
     349,     0,   350,   351,     0,     0,   352,   353,   354,     0,
       0,   355,   356,   357,     0,   359,     0,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,     0,     0,     0,     0,   375,   376,   377,     0,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   417,   418,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   553,   466,   467,     0,     0,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,   477,
     478,   479,     0,   480,     0,   481,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,   495,   496,     0,   497,   498,   499,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,     0,   509,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,   520,     0,     0,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   899,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3324,     0,     0,   121,   122,   123,   124,     0,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
       0,   137,   138,   139,     0,   141,   142,   143,   900,   901,
       0,   902,   903,     0,   149,   150,   151,   152,   153,   154,
       0,     0,   155,   156,   157,   158,   904,   905,   161,     0,
     162,   163,   164,   165,   906,     0,     0,     0,     0,   169,
     170,   171,   172,   173,     0,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,     0,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   907,   196,   197,
     908,   199,     0,   200,     0,   201,   202,   203,   204,   205,
     206,    14,    15,     0,   208,   209,   210,   211,     0,     0,
     212,   213,   214,   215,   216,     0,     0,     0,   219,   220,
     221,     0,   222,   223,   224,     0,   225,   226,   227,   228,
     909,   230,   231,   232,   233,   234,   235,   910,     0,   237,
       0,   238,   239,   911,   241,     0,   242,     0,   243,     0,
      23,     0,   246,   247,   912,     0,   250,     0,   251,     0,
       0,     0,   913,   914,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,     0,   276,     0,
     915,   279,   280,   281,   282,   283,   916,   917,     0,   918,
       0,   287,     0,     0,   290,     0,   292,     0,   294,   295,
     296,   297,   298,     0,     0,   299,     0,   301,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   919,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   920,
       0,   921,   335,   336,   337,     0,   922,     0,   340,   341,
       0,   343,     0,   923,   345,   924,   347,   348,   349,     0,
     350,   351,     0,     0,   352,   353,   354,     0,     0,   355,
     356,   925,     0,   359,     0,   926,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,   373,   374,    26,
      27,    28,     0,   375,   376,   927,     0,   379,   380,   928,
     382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
       0,   392,     0,   393,   394,   395,   396,   397,   929,   399,
     400,   401,   402,     0,   403,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   417,
     418,     0,   420,   421,   422,   930,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    33,
       0,   437,   438,   439,   440,   441,   442,   931,   444,   445,
       0,    35,     0,     0,   449,   932,   451,     0,     0,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   933,   466,   934,    37,     0,   468,   469,    38,   470,
       0,   472,   473,   474,   475,   476,     0,   477,   935,   936,
       0,     0,     0,   481,   482,   937,   484,   938,     0,   486,
     487,   939,   489,   490,   491,   492,   493,     0,     0,   494,
     495,   496,    40,   497,   498,   499,   500,     0,   501,   502,
     503,   504,   505,   940,   941,   508,     0,   509,     0,   511,
       0,   513,   514,   515,   516,     0,   518,   519,     0,     0,
     520,     0,    44,   521,   522,   523,   524,   525,   526,   942,
     943,   944,   945,   946,   947,   948,   949,   950,   951,   952,
     538,   539,   540,   541,     0,     0,    45,     0,     0,  3134,
    1455,   848,     0,     0,  2168,  1146,     0,     0,     0,     0,
     880,  2169,  2170,     0,     0,  2171,  2172,  2173,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   585,   130,   131,
     132,   586,   587,   588,  3135,   590,   133,   591,   592,   593,
    3136,   135,   136,   595,   137,   138,   139,  3137,   141,   142,
     143,     0,  1592,  3138,  1594,  1595,   602,   149,   150,   151,
     152,   153,   154,   603,   604,   155,   156,   157,   158,  1596,
    1597,   161,   607,   162,   163,   164,   165,     0,   609,  3139,
     611,  3140,   169,   170,   171,   172,   173,  3141,   175,   176,
     177,   614,   178,   179,   180,   181,   182,   183,   615,  3142,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    1602,   196,   197,  1603,   199,   620,   200,   621,   201,   202,
     203,   204,   205,   206,   622,   623,   207,   208,   209,   210,
     211,   624,   625,   212,   213,  1159,   215,   216,   217,   218,
     626,   219,   220,   221,   627,   222,   223,   224,   628,   225,
     226,   227,   228,     0,   230,   231,   232,   233,   234,   235,
       0,   631,   237,   632,   238,   239,  1604,   241,   634,   242,
     635,   243,  3143,   637,  3144,   246,   247,  3145,  3146,   250,
     641,   251,   252,   642,   643,     0,     0,   255,   256,   646,
     257,   258,   259,   260,   261,   262,   263,  3147,   265,   266,
     267,   268,   648,   269,   270,   271,   272,   273,   274,   275,
     649,   276,  3148,     0,   279,   280,   281,   282,   283,  1610,
    1611,   654,  1612,   656,   287,  3149,  3150,   290,  3151,   292,
     293,   294,   295,   296,   297,   298,   660,   661,   299,  3152,
     301,  3153,   664,   303,   304,   305,   306,   307,   308,   309,
     310,  3154,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1619,  3155,  1621,   335,   336,   337,   338,  3156,
     670,   340,   341,  3157,   343,   672,     0,   345,  1623,   347,
     348,   349,   675,   350,   351,   676,   677,  3158,   353,   354,
     678,   679,   355,   356,     0,  3159,   359,  3160,     0,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   684,   685,   686,   687,   375,   376,     0,  3161,
     379,   380,     0,   382,   383,   384,   691,   385,   386,   387,
     388,   389,   390,   391,   392,   692,   393,   394,   395,   396,
     397,  1627,   399,   400,   401,   402,   694,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   695,   417,   418,  3162,   420,   421,   422,  1629,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   698,  3163,   437,   438,   439,   440,   441,   442,
    3164,   444,   445,   446,   701,  3165,   448,   449,  1633,   451,
     704,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,  3166,   466,     0,   707,   708,   468,
     469,   709,   470,  3167,   472,   473,   474,   475,   476,   711,
     477,  1636,  1637,   714,   480,   715,   481,   482,     0,   484,
       0,   718,   486,   487,  3168,   489,   490,   491,   492,   493,
    3169,   721,   494,   495,   496,   722,   497,   498,   499,   500,
     723,   501,   502,   503,   504,   505,     0,  1640,   508,   726,
     509,  3170,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   728,   729,   520,   730,   731,   521,   522,   523,   524,
     525,   526,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   538,   539,   540,   541,     0,   550,     0,
    2174,  2175,  2176,  2168,  3171,  3172,  2179,  2180,  2181,  2182,
    2169,  2170,     0,     0,  2171,  2172,  2173,   121,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
     135,   136,     0,   137,   138,   139,     0,   141,   142,   143,
     144,   145,     0,   147,   148,     0,   149,   150,   151,   152,
     153,   154,     0,     0,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,     0,
     168,   169,   170,   171,   172,   173,     0,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,     0,     0,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,     0,   212,   213,   214,   215,   216,   217,   218,     0,
     219,   220,   221,     0,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
       0,   237,     0,   238,   239,   240,   241,     0,   242,     0,
     243,     0,     0,     0,   246,   247,   551,     0,   250,     0,
     251,   252,     0,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,     0,   287,     0,     0,   290,     0,   292,   293,
     294,   295,   296,   297,   298,     0,     0,   299,     0,   301,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     552,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   334,   335,   336,   337,   338,   339,     0,
     340,   341,     0,   343,     0,   344,   345,   346,   347,   348,
     349,     0,   350,   351,     0,     0,   352,   353,   354,     0,
       0,   355,   356,   357,     0,   359,     0,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,     0,     0,     0,     0,   375,   376,   377,     0,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   417,   418,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   553,   466,   467,     0,     0,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,   477,
     478,   479,     0,   480,     0,   481,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,   495,   496,     0,   497,   498,   499,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,     0,   509,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,   520,     0,     0,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,     0,     0,     0,  2174,
    2175,  2176,     0,  2177,  2178,  2179,  2180,  2181,  2182,  1725,
       0,     0,  1726,     0,     0,     0,  1727,  1728,  1729,  1730,
    1731,  1732,  1733,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1725,     0,     0,  1726,  1734,     0,
       0,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,  1736,
       0,     0,     0,     0,     0,     0,  1737,     0,     0,  1725,
       0,     0,  1726,  1734,     0,     0,  1727,  1728,  1729,  1730,
    1731,  1732,  1733,     0,  1736,     0,     0,     0,     0,     0,
       0,  1737,     0,  1738,     0,     0,     0,     0,  1734,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1736,
       0,     0,  1725,     0,     0,  1726,  1737,     0,  1738,  1727,
    1728,  1729,  1730,  1731,  1732,  1733,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1725,     0,     0,
    1726,  1734,     0,  1738,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,     0,  1736,     0,     0,     0,     0,     0,     0,  1737,
       0,     0,  1725,     0,     0,  1726,  1734,     0,     0,  1727,
    1728,  1729,  1730,  1731,  1732,  1733,     0,  1736,     0,     0,
       0,     0,     0,     0,  1737,     0,  1738,     0,     0,     0,
       0,  1734,     0,  1739,     0,     0,     0,     0,     0,     0,
       0,     0,  1736,     0,     0,     0,     0,     0,     0,  1737,
       0,  1738,  1740,  1145,     0,     0,  3352,  1741,  1739,     0,
       0,  3353,     0,     0,  3356,  3357,  3358,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1738,  1740,     0,     0,
    1742,  1743,  1741,  1739,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3360,     0,     0,  1744,     0,     0,     0,
    3361,     0,  1740,     0,     0,  1742,  1743,  1741,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1744,     0,     0,     0,     0,  1739,  3362,     0,     0,
    1742,  1743,     0,     0,     0,  1745,     0,     0,  1746,     0,
       0,     0,     0,     0,     0,  1740,  1744,     0,     0,     0,
    1741,  1739,  1747,     0,     0,  1748,     0,     0,     0,     0,
    1745,     0,     0,  1746,     0,     0,     0,     0,     0,     0,
    1740,     0,     0,  1742,  1743,  1741,  1739,  1747,     0,     0,
    1748,     0,     0,     0,     0,  1745,     0,     0,  1746,  1744,
       0,     0,     0,     0,     0,  1740,     0,     0,  1742,  1743,
    1741,     0,  1747,     0,     0,  1748,     0,     0,     0,     0,
       0,     0,     0,     0,  1744,     0,     0,     0,     0,     0,
       0,     0,     0,  1742,  1743,     0,     0,  3363,  1745,     0,
       0,  1746,     0,     0,     0,     0,     0,     0,     0,  1744,
       0,     0,     0,     0,     0,  1747,  3364,     0,  1748,     0,
       0,  3365,     0,  1745,     0,     0,  1746,     0,     0,     0,
    1749,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1747,     0,     0,  1748,  3366,  3367,     0,     0,  1745,     0,
       0,  1746,     0,     0,     0,  1749,     0,     0,     0,     0,
    3368,     0,     0,     0,     0,  1747,     0,     0,  1748,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1749,  1725,     0,     0,  1726,     0,     0,     0,  1727,  1728,
    1729,  1730,  1731,  1732,  1733,     0,     0,     0,     0,  3369,
       0,     0,  3370,     0,     0,     0,     0,     0,     0,     0,
    1734,     0,     0,     0,     0,     0,  2044,     0,     0,     0,
       0,  1736,     0,  1749,     0,     0,     0,     0,  1737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1750,     0,     0,  1751,  1752,  1753,  1749,  1754,
    1755,  1756,  1757,  1758,  1759,  1738,     0,     0,     0,  3621,
       0,     0,     0,     0,     0,     0,     0,  1750,     0,     0,
    1751,  1752,  1753,  1749,  1754,  1755,  1756,  1757,  1758,  1759,
       0,     0,     0,     0,  3760,     0,     0,     0,     0,     0,
       0,     0,  1750,     0,     0,  1751,  1752,  1753,     0,  1754,
    1755,  1756,  1757,  1758,  1759,     0,     0,     0,     0,  3850,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3372,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1750,     0,     0,  1751,  1752,
    1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,
       0,     0,  3879,     0,     0,  1739,     0,     0,     0,     0,
    1750,     0,     0,  1751,  1752,  1753,     0,  1754,  1755,  1756,
    1757,  1758,  1759,     0,  1740,  2998,     0,     0,     0,  1741,
       0,     0,     0,     0,     0,  1750,     0,     0,  1751,  1752,
    1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,
    3533,     0,  1742,  1743,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1744,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3373,     0,     0,  3374,
    3375,  3376,     0,  3377,  3378,  3379,  3380,  3381,  3382,     0,
       0,     0,     0,     0,     0,     0,     0,  1745,     0,     0,
    1746,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1747,     0,     0,  1748,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1749,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   584,     0,     0,  1750,     0,     0,  1751,  1752,  1753,
       0,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,  3813,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   585,
     130,   131,   132,   586,   587,   588,   589,   590,   133,   591,
     592,   593,   594,   135,   136,   595,   137,   138,   139,   596,
     141,   142,   143,   597,   598,   599,   600,   601,   602,   149,
     150,   151,   152,   153,   154,   603,   604,   155,   156,   157,
     158,   605,   606,   161,   607,   162,   163,   164,   165,   608,
     609,   610,   611,   612,   169,   170,   171,   172,   173,   613,
     175,   176,   177,   614,   178,   179,   180,   181,   182,   183,
     615,   616,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   618,   196,   197,   619,   199,   620,   200,   621,
     201,   202,   203,   204,   205,   206,   622,   623,   207,   208,
     209,   210,   211,   624,   625,   212,   213,   214,   215,   216,
     217,   218,   626,   219,   220,   221,   627,   222,   223,   224,
     628,   225,   226,   227,   228,   629,   230,   231,   232,   233,
     234,   235,   630,   631,   237,   632,   238,   239,   633,   241,
     634,   242,   635,   243,   636,   637,   638,   246,   247,   639,
     640,   250,   641,   251,   252,   642,   643,   644,   645,   255,
     256,   646,   257,   258,   259,   260,   261,   262,   263,   647,
     265,   266,   267,   268,   648,   269,   270,   271,   272,   273,
     274,   275,   649,   276,   650,   651,   279,   280,   281,   282,
     283,   652,   653,   654,   655,   656,   287,   657,   658,   290,
     659,   292,   293,   294,   295,   296,   297,   298,   660,   661,
     299,   662,   301,   663,   664,   303,   304,   305,   306,   307,
     308,   309,   310,   665,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   666,   667,   668,   335,   336,   337,
     338,   669,   670,   340,   341,   671,   343,   672,   673,   345,
     674,   347,   348,   349,   675,   350,   351,   676,   677,   352,
     353,   354,   678,   679,   355,   356,   680,   681,   359,   682,
     683,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   684,   685,   686,   687,   375,   376,
     688,   689,   379,   380,   690,   382,   383,   384,   691,   385,
     386,   387,   388,   389,   390,   391,   392,   692,   393,   394,
     395,   396,   397,   693,   399,   400,   401,   402,   694,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   695,   417,   418,   696,   420,   421,   422,
     697,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   698,   699,   437,   438,   439,   440,
     441,   442,   700,   444,   445,   446,   701,   702,   448,   449,
     703,   451,   704,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   705,   466,   706,   707,
     708,   468,   469,   709,   470,   710,   472,   473,   474,   475,
     476,   711,   477,   712,   713,   714,   480,   715,   481,   482,
     716,   484,   717,   718,   486,   487,   719,   489,   490,   491,
     492,   493,   720,   721,   494,   495,   496,   722,   497,   498,
     499,   500,   723,   501,   502,   503,   504,   505,   724,   725,
     508,   726,   509,   727,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   728,   729,   520,   730,   731,   521,   522,
     523,   524,   525,   526,   732,   733,   734,   735,   736,   737,
     738,   739,   740,   741,   742,   538,   539,   540,   541,   550,
       0,     0,     0,     0,     0,     0,     0,     0,  2204,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,     0,
       0,     0,     0,     0,     0,     0,  2896,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,     0,   243,
       0,     0,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   478,
     479,     0,   480,     0,   481,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,  1062,  1455,   848,     0,     0,
       0,  1146,     0,     0,  2899,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
     589,     0,   133,     0,     0,     0,   594,   135,   136,     0,
     137,   138,   139,   596,   141,   142,   143,   597,   598,   599,
     600,   601,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   605,   606,   161,     0,   162,
     163,   164,   165,   608,     0,   610,     0,   612,   169,   170,
     171,   172,   173,   613,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   616,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   618,   196,   197,   619,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   629,
     230,   231,   232,   233,   234,   235,   630,  1456,   237,     0,
     238,   239,   633,   241,     0,   242,     0,   243,   636,     0,
     638,   246,   247,   639,   640,   250,     0,   251,   252,     0,
       0,   644,   645,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   647,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   650,   651,
     279,   280,   281,   282,   283,   652,   653,     0,   655,     0,
     287,   657,   658,   290,   659,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   662,   301,   663,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   665,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   666,   667,
     668,   335,   336,   337,   338,   669,     0,   340,   341,   671,
     343,     0,   673,   345,   674,   347,   348,   349,     0,   350,
     351,  1457,     0,   352,   353,   354,     0,     0,   355,   356,
     680,   681,   359,   682,   683,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   688,   689,   379,   380,   690,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   693,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     696,   420,   421,   422,   697,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,   699,
     437,   438,   439,   440,   441,   442,   700,   444,   445,   446,
       0,   702,   448,   449,   703,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     705,   466,   706,     0,     0,   468,   469,     0,   470,   710,
     472,   473,   474,   475,   476,     0,   477,   712,   713,     0,
     480,     0,   481,   482,   716,   484,   717,  1458,   486,   487,
     719,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   724,   725,   508,     0,   509,   727,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   732,   733,
     734,   735,   736,   737,   738,   739,   740,   741,   742,   538,
     539,   540,   541,     0,     0,  1725,     0,     0,  1726,     0,
    1459,  1460,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1734,     0,     0,     0,     0,     0,
    2316,     0,     0,     0,     0,  1736,  1725,     0,     0,  1726,
       0,     0,  1737,  1727,  1728,  1729,  1730,  1731,  1732,  1733,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1734,     0,     0,     0,  1738,
       0,     0,     0,     0,     0,     0,  1736,  1725,     0,     0,
    1726,     0,     0,  1737,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1734,     0,     0,     0,
    1738,     0,     0,     0,     0,  2317,     0,  1736,     0,     0,
       0,     0,     0,  1725,  1737,     0,  1726,     0,     0,     0,
    1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1738,  1734,     0,     0,     0,     0,  2024,     0,     0,
       0,     0,     0,  1736,     0,     0,     0,     0,     0,  1739,
    1737,     0,     0,  1725,     0,     0,  1726,     0,     0,     0,
    1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,  1740,     0,
       0,     0,     0,  1741,     0,     0,     0,  1738,     0,     0,
    2060,     0,  1734,     0,     0,  2061,     0,     0,     0,     0,
    1739,     0,     0,  1736,     0,     0,  1742,  1743,     0,     0,
    1737,     0,     0,     0,     0,     0,     0,     0,     0,  1740,
       0,     0,  1744,     0,  1741,     0,     0,     0,     0,     0,
    3985,     0,     0,     0,     0,     0,     0,  1738,     0,     0,
       0,  1739,     0,     0,     0,     0,     0,  1742,  1743,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1740,  1745,     0,  1744,  1746,  1741,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1747,     0,
       0,  1748,     0,     0,     0,     0,     0,  1739,  1742,  1743,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1745,     0,  1744,  1746,  1740,     0,     0,     0,
       0,  1741,     0,     0,     0,     0,     0,     0,     0,  1747,
       0,     0,  1748,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1742,  1743,     0,  1739,     0,     0,
       0,     0,     0,  1745,     0,     0,  1746,     0,     0,     0,
    1744,     0,     0,     0,     0,     0,  1740,     0,     0,     0,
    1747,  1741,     0,  1748,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1742,  1743,  1749,     0,     0,  1745,
       0,     0,  1746,     0,  3986,     0,     0,     0,     0,     0,
    1744,     0,     0,     0,     0,     0,  1747,     0,     0,  1748,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1725,     0,     0,  1726,  1749,     0,     0,
    1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,     0,  1745,
       0,     0,  1746,     0,     0,     0,     0,     0,     0,     0,
       0,  2320,  1734,     0,     0,     0,  1747,  2066,     0,  1748,
       0,     0,     0,  1736,     0,     0,     0,     0,  1749,     0,
    1737,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2031,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1738,  1750,     0,
       0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,
    1759,     0,     0,     0,  1749,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1750,
       0,     0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,
    1758,  1759,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1749,  1725,     0,     0,  1726,     0,
       0,     0,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,
    1750,     0,     0,  1751,  1752,  1753,     0,  1754,  1755,  1756,
    1757,  1758,  1759,     0,  1734,     0,     0,  1739,     0,     0,
       0,     0,     0,     0,     0,  1736,     0,     0,     0,     0,
       0,     0,  1737,     0,     0,     0,  1740,     0,     0,     0,
       0,  1741,     0,     0,     0,     0,  1750,     0,     0,  1751,
    1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,  1738,
       0,     0,     0,     0,  1742,  1743,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1744,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1750,     0,     0,  1751,
    1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,     0,
       0,     0,     0,     0,     0,     0,     0,  1725,     0,  1745,
    1726,     0,  1746,     0,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,     0,     0,     0,     0,     0,  1747,     0,     0,  1748,
       0,     0,     0,     0,     0,     0,  1734,     0,     0,     0,
       0,  2073,     0,     0,  2071,     0,     0,  1736,     0,  1739,
       0,     0,     0,     0,  1737,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1740,     0,
       0,     0,     0,  1741,     0,     0,     0,     0,     0,     0,
       0,  1738,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1742,  1743,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1725,     0,
       0,  1726,  1744,     0,     0,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1725,  1749,     0,  1726,  1734,     0,     0,
    1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,  1736,     0,
       0,  1745,     0,     0,  1746,  1737,     0,     0,     0,     0,
       0,     0,  1734,     0,     0,     0,     0,     0,  1747,     0,
       0,  1748,     0,  1736,     0,     0,     0,     0,     0,     0,
    1737,  1739,  1738,     0,     0,  1725,     0,     0,  1726,     0,
       0,     0,  1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,
    1740,     0,     0,     0,     0,  1741,     0,  1738,     0,     0,
       0,     0,     0,     0,  1734,     0,     0,     0,     0,  2974,
       0,     0,     0,     0,     0,  1736,     0,     0,  1742,  1743,
       0,     0,  1737,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1744,     0,  1750,     0,     0,  1751,
    1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,  1738,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2197,     0,     0,     0,  1749,     0,     0,     0,
       0,     0,  1739,  1745,     0,     0,  1746,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1747,  1740,     0,  1748,     0,     0,  1741,  1739,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1740,     0,     0,  1742,
    1743,  1741,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1744,     0,     0,     0,     0,
       0,     0,     0,     0,  1742,  1743,     0,     0,     0,  1739,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1744,     0,     0,     0,     0,     0,     0,     0,  1740,     0,
       0,     0,     0,  1741,  1745,     0,     0,  1746,  1750,     0,
       0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,
    1759,  1747,     0,     0,  1748,     0,  1742,  1743,  1749,  1745,
       0,     0,  1746,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1744,     0,     0,     0,  1747,     0,     0,  1748,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1725,     0,     0,  1726,     0,     0,     0,  1727,
    1728,  1729,  1730,  1731,  1732,  1733,     0,     0,     0,     0,
       0,  1745,     0,     0,  1746,     0,     0,     0,     0,     0,
       0,  1734,     0,     0,     0,     0,     0,     0,  1747,     0,
       0,  1748,  1736,     0,     0,     0,     0,     0,     0,  1737,
       0,     0,     0,  1725,     0,     0,  1726,     0,     0,     0,
    1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,     0,  1749,
       0,     0,     0,     0,     0,     0,  1738,     0,     0,     0,
    1750,     0,  1734,  1751,  1752,  1753,     0,  1754,  1755,  1756,
    1757,  1758,  1759,  1736,  1749,     0,     0,     0,     0,     0,
    1737,     0,     0,  1725,     0,     0,  1726,     0,     0,     0,
    1727,  1728,  1729,  1730,  1731,  1732,  1733,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1738,  2960,     0,
       0,     0,  1734,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1736,     0,     0,  1749,     0,     0,     0,
    1737,     0,     0,     0,  1725,     0,     0,  1726,     0,     0,
       0,  1727,  1728,     0,     0,  1731,  1732,  1733,     0,     0,
       0,     0,     0,     0,     0,     0,  1739,  1738,     0,     0,
       0,  1750,     0,  1734,  1751,  1752,  1753,     0,  1754,  1755,
    1756,  1757,  1758,  1759,  1736,  1740,     0,     0,     0,     0,
    1741,  1737,     0,     0,     0,     0,  1750,     0,     0,  1751,
    1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,     0,
       0,     0,     0,  1742,  1743,     0,     0,  1739,  1738,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1744,
       0,     0,  1145,     0,     0,  3352,  1740,     0,     0,     0,
    3353,  1741,     0,  3356,  3357,  3358,     0,     0,  1750,     0,
       0,  1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,
    1759,     0,     0,     0,  1929,  1743,     0,  1739,  1745,     0,
       0,  1746,  3360,     0,     0,     0,     0,     0,     0,  3361,
    1744,     0,     0,     0,     0,  1747,  1740,     0,  1748,     0,
       0,  1741,     0,     0,     0,     0,     0,     0,     0,     0,
    1145,     0,     0,  3352,     0,     0,  3362,     0,  3353,     0,
       0,  3356,  3357,  3358,  1742,  1743,     0,     0,  1739,  1745,
       0,     0,  1746,     0,     0,     0,     0,     0,     0,  3359,
    1744,     0,     0,     0,     0,     0,  1747,  1740,     0,  1748,
    3360,     0,  1741,     0,     0,     0,     0,  3361,     0,     0,
    1145,     0,     0,  3352,     0,     0,     0,     0,  3353,     0,
       0,  3356,  3357,  3358,     0,  1742,  1743,     0,     0,  1745,
       0,     0,  1746,     0,  3362,     0,     0,     0,     0,  3359,
       0,  1744,     0,     0,     0,     0,  1747,     0,     0,  1748,
    3360,     0,     0,  1749,     0,     0,     0,  3361,     0,     0,
       0,     0,     0,     0,     0,     0,  3363,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1745,     0,     0,  1746,  3362,  3364,     0,     0,     0,     0,
    3365,     0,     0,     0,     0,     0,     0,  1747,     0,     0,
       0,     0,     0,     0,  1749,     0,     0,     0,     0,     0,
       0,     0,     0, -2279, -2279,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3368,
       0,     0,     0,     0,  3363,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3364,  1749,     0,     0,     0,  3365,     0,
       0,     0,     0,     0,     0,  1750,     0,     0,  1751,  1752,
    1753, -2279,  1754,  1755,  1756,  1757,  1758,  1759,     0,     0,
       0,  3366,  3367,     0,  3363,  2044,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3368,     0,     0,
       0,     0,     0,  3364,     0,  1749,     0,     0,  3365,     0,
       0,     0,     0,     0,     0,     0,  1750,     0,     0,  1751,
    1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,     0,
       0,  3366,  3367,     0,     0,     0,  3369,     0,     0,  3370,
       0,     0,     0,     0,     0,     0,     0,  3368,     0,     0,
       0,     0,     0,  2044,     0,     0,  3371,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1750,     0,     0,  1751,
    1752,  1753,     0,  1754,  1755,  1756,  1757,  2337,  1759,     0,
       0,     0,     0,     0,     0,     0,  3369,     0,     0,  3370,
       0,     0,     0,  3372,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2044,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1750,     0,     0,
    1751,  1752,  1753,     0,  1754,  1755,  1756,  1757,  1758,  1759,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3372,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3373,     0,     0,  3374,  3375,
    3376,  3372,  3377,  3378,  3379,  3380,  3381,  3382,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3373,     0,     0,  3374,  3375,  3376,     0,
    3377,  3378,  3379,  3380,  3381,  3382,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   584,     0,  2220,
       0,     0,     0,  3373,     0,     0,  3374,  3375,  3376,     0,
    3377,  3378,  3379,  3380,  3381,  3382,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   585,   130,   131,   132,   586,
     587,   588,   589,   590,   133,   591,   592,   593,   594,   135,
     136,   595,   137,   138,   139,   596,   141,   142,   143,   597,
     598,   599,   600,   601,   602,   149,   150,   151,   152,   153,
     154,   603,   604,   155,   156,   157,   158,   605,   606,   161,
     607,   162,   163,   164,   165,   608,   609,   610,   611,   612,
     169,   170,   171,   172,   173,   613,   175,   176,   177,   614,
     178,   179,   180,   181,   182,   183,   615,   616,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   618,   196,
     197,   619,   199,   620,   200,   621,   201,   202,   203,   204,
     205,   206,   622,   623,   207,   208,   209,   210,   211,   624,
     625,   212,   213,   214,   215,   216,   217,   218,   626,   219,
     220,   221,   627,   222,   223,   224,   628,   225,   226,   227,
     228,   629,   230,   231,   232,   233,   234,   235,   630,   631,
     237,   632,   238,   239,   633,   241,   634,   242,   635,   243,
     636,   637,   638,   246,   247,   639,   640,   250,   641,   251,
     252,   642,   643,   644,   645,   255,   256,   646,   257,   258,
     259,   260,   261,   262,   263,   647,   265,   266,   267,   268,
     648,   269,   270,   271,   272,   273,   274,   275,   649,   276,
     650,   651,   279,   280,   281,   282,   283,   652,   653,   654,
     655,   656,   287,   657,   658,   290,   659,   292,   293,   294,
     295,   296,   297,   298,   660,   661,   299,   662,   301,   663,
     664,   303,   304,   305,   306,   307,   308,   309,   310,   665,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     666,   667,   668,   335,   336,   337,   338,   669,   670,   340,
     341,   671,   343,   672,   673,   345,   674,   347,   348,   349,
     675,   350,   351,   676,   677,   352,   353,   354,   678,   679,
     355,   356,   680,   681,   359,   682,   683,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     684,   685,   686,   687,   375,   376,   688,   689,   379,   380,
     690,   382,   383,   384,   691,   385,   386,   387,   388,   389,
     390,   391,   392,   692,   393,   394,   395,   396,   397,   693,
     399,   400,   401,   402,   694,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   695,
     417,   418,   696,   420,   421,   422,   697,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     698,   699,   437,   438,   439,   440,   441,   442,   700,   444,
     445,   446,   701,   702,   448,   449,   703,   451,   704,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   705,   466,   706,   707,   708,   468,   469,   709,
     470,   710,   472,   473,   474,   475,   476,   711,   477,   712,
     713,   714,   480,   715,   481,   482,   716,   484,   717,   718,
     486,   487,   719,   489,   490,   491,   492,   493,   720,   721,
     494,   495,   496,   722,   497,   498,   499,   500,   723,   501,
     502,   503,   504,   505,   724,   725,   508,   726,   509,   727,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   728,
     729,   520,   730,   731,   521,   522,   523,   524,   525,   526,
     732,   733,   734,   735,   736,   737,   738,   739,   740,   741,
     742,   538,   539,   540,   541,   584,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   585,   130,   131,   132,   586,   587,   588,
     589,   590,   133,   591,   592,   593,   594,   135,   136,   595,
     137,   138,   139,   596,   141,   142,   143,   597,   598,   599,
     600,   601,   602,   149,   150,   151,   152,   153,   154,   603,
     604,   155,   156,   157,   158,   605,   606,   161,   607,   162,
     163,   164,   165,   608,   609,   610,   611,   612,   169,   170,
     171,   172,   173,   613,   175,   176,   177,   614,   178,   179,
     180,   181,   182,   183,   615,   616,   185,   186,   187,   188,
     189,   190,   617,   192,   193,   194,   618,   196,   197,   619,
     199,   620,   200,   621,   201,   202,   203,   204,   205,   206,
     622,   623,   207,   208,   209,   210,   211,   624,   625,   212,
     213,   214,   215,   216,   217,   218,   626,   219,   220,   221,
     627,   222,   223,   224,   628,   225,   226,   227,   228,   629,
     230,   231,   232,   233,   234,   235,   630,   631,   237,   632,
     238,   239,   633,   241,   634,   242,   635,   243,   636,   637,
     638,   246,   247,   639,   640,   250,   641,   251,   252,   642,
     643,   644,   645,   255,   256,   646,   257,   258,   259,   260,
     261,   262,   263,   647,   265,   266,   267,   268,   648,   269,
     270,   271,   272,   273,   274,   275,   649,   276,   650,   651,
     279,   280,   281,   282,   283,   652,   653,   654,   655,   656,
     287,   657,   658,   290,   659,   292,   293,   294,   295,   296,
     297,   298,   660,   661,   299,   662,   301,   663,   664,   303,
     304,   305,   306,   307,   308,   309,   310,   665,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   666,   667,
     668,   335,   336,   337,   338,   669,   670,   340,   341,   671,
     343,   672,   673,   345,   674,   347,   348,   349,   675,   350,
     351,   676,   677,   352,   353,   354,   678,   679,   355,   356,
     680,   681,   359,   682,   683,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   684,   685,
     686,   687,   375,   376,   688,   689,   379,   380,   690,   382,
     383,   384,   691,   385,   386,   387,   388,   389,   390,   391,
     392,   692,   393,   394,   395,   396,   397,   693,   399,   400,
     401,   402,   694,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   695,   417,   418,
     696,   420,   421,   422,   697,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   698,   699,
     437,   438,   439,   440,   441,   442,   700,   444,   445,   446,
     701,   702,   448,   449,   703,   451,   704,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     705,   466,   706,   707,   708,   468,   469,   709,   470,   710,
     472,   473,   474,   475,   476,   711,   477,   712,   713,   714,
     480,   715,   481,   482,   716,   484,   717,   718,   486,   487,
     719,   489,   490,   491,   492,   493,   720,   721,   494,   495,
     496,   722,   497,   498,   499,   500,   723,   501,   502,   503,
     504,   505,   724,   725,   508,   726,   509,   727,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   728,   729,   520,
     730,   731,   521,   522,   523,   524,   525,   526,   732,   733,
     734,   735,   736,   737,   738,   739,   740,   741,   742,   538,
     539,   540,   541,   584,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   585,   130,   131,   132,   586,   587,   588,   589,   590,
     133,   591,   592,   593,   594,   135,   136,   595,   137,   138,
     139,   596,   141,   142,   143,   597,   598,   599,   600,   601,
     602,   149,   150,   151,   152,   153,   154,   603,   604,   155,
     156,   157,   158,   605,   606,   161,   607,   162,   163,   164,
     165,   608,   609,   610,   611,   612,   169,   170,   171,   172,
     173,   613,   175,   176,   177,   614,   178,   179,   180,   181,
     182,   183,   615,   616,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   618,   196,   197,   619,   199,   620,
     200,   621,   201,   202,   203,   204,   205,   206,   622,   623,
     207,   208,   209,   210,   211,   624,   625,   212,   213,   214,
     215,   216,   217,   218,   626,   219,   220,   221,   627,   222,
     223,   224,   628,   225,   226,   227,   228,   629,   230,   231,
     232,   233,   234,   235,   630,   631,   237,   632,   238,   239,
     633,   241,   634,   242,   635,   243,   636,   637,   638,   246,
     247,   639,   640,   250,   641,   251,   252,   642,   643,   644,
     645,   255,   256,   646,   257,   258,   259,   260,   261,  1037,
     263,   647,   265,   266,   267,   268,   648,   269,   270,   271,
     272,   273,   274,   275,   649,   276,   650,   651,   279,   280,
     281,   282,   283,   652,   653,   654,   655,   656,   287,   657,
     658,   290,   659,   292,   293,   294,   295,   296,   297,   298,
     660,   661,   299,   662,   301,   663,   664,   303,   304,   305,
     306,   307,   308,   309,   310,   665,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   666,   667,   668,   335,
     336,   337,   338,   669,   670,   340,   341,   671,   343,   672,
     673,   345,   674,   347,   348,   349,   675,   350,   351,   676,
     677,   352,   353,   354,   678,   679,   355,   356,   680,   681,
     359,   682,   683,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   684,   685,   686,   687,
     375,   376,   688,   689,   379,   380,   690,   382,   383,   384,
     691,   385,   386,   387,   388,   389,   390,   391,   392,   692,
     393,   394,   395,   396,   397,   693,   399,   400,   401,   402,
     694,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   695,   417,   418,   696,   420,
     421,   422,   697,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   698,   699,   437,   438,
     439,   440,   441,   442,   700,   444,   445,   446,   701,   702,
     448,   449,   703,   451,   704,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   705,   466,
     706,   707,   708,   468,   469,   709,   470,   710,   472,   473,
     474,   475,   476,   711,   477,   712,   713,   714,   480,   715,
     481,   482,   716,   484,   717,   718,   486,   487,   719,   489,
     490,   491,   492,   493,   720,   721,   494,   495,   496,   722,
     497,   498,   499,   500,   723,   501,   502,   503,   504,   505,
     724,   725,   508,   726,   509,   727,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   728,   729,   520,   730,   731,
     521,   522,   523,   524,   525,   526,   732,   733,   734,   735,
     736,   737,   738,   739,   740,   741,   742,   538,   539,   540,
     541,   584,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   585,
     130,   131,   132,   586,   587,   588,   589,   590,   133,   591,
     592,   593,   594,   135,   136,   595,   137,   138,   139,   596,
     141,   142,   143,   597,   598,   599,   600,   601,   602,   149,
     150,   151,   152,   153,   154,   603,   604,   155,   156,   157,
     158,   605,   606,   161,   607,   162,   163,   164,   165,   608,
     609,   610,   611,   612,   169,   170,   171,   172,   173,   613,
     175,   176,   177,   614,   178,   179,   180,   181,   182,   183,
     615,   616,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   618,   196,   197,   619,   199,   620,   200,   621,
     201,   202,   203,   204,   205,   206,   622,   623,   207,   208,
     209,   210,   211,   624,   625,   212,   213,   214,   215,   216,
     217,   218,   626,   219,   220,   221,   627,   222,   223,   224,
     628,   225,   226,   227,   228,   629,   230,   231,   232,   233,
     234,   235,   630,   631,   237,   632,   238,   239,   633,   241,
     634,   242,   635,   243,   636,   637,   638,   246,   247,   639,
     640,   250,   641,   251,   252,   642,   643,   644,   645,   255,
     256,   646,   257,   258,   259,   260,   261,   262,   263,   647,
     265,   266,   267,   268,   648,   269,   270,   271,   272,   273,
     274,   275,   649,   276,   650,   651,   279,   280,   281,   282,
     283,   652,   653,   654,   655,   656,   287,   657,   658,   290,
     659,   292,   293,   294,   295,   296,   297,   298,   660,   661,
     299,   662,   301,   663,   664,   303,   304,   305,   306,   307,
     308,   309,   310,   665,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   666,   667,   668,   335,   336,   337,
     338,   669,   670,   340,   341,   671,   343,   672,   673,   345,
     674,   347,   348,   349,   675,   350,   351,   676,   677,   352,
     353,   354,   678,   679,   355,   356,   680,   681,   359,   682,
     683,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   684,   685,   686,   687,   375,   376,
     688,   689,   379,   380,   690,   382,   383,   384,   691,   385,
     386,   387,   388,   389,   390,   391,   392,   692,   393,   394,
     395,   396,   397,   693,   399,   400,   401,   402,   694,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   695,   417,   418,   696,   420,   421,   422,
     697,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   698,   699,   437,   438,   439,   440,
     441,   442,   700,   444,   445,   446,   701,   702,   448,   449,
     703,   451,   704,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   705,   466,   706,   707,
     708,   468,   469,   709,   470,   710,   472,   473,   474,   475,
     476,   711,   477,   712,   713,   714,   480,   715,   481,   482,
     716,   484,   717,   718,   486,   487,   719,   489,   490,   491,
     492,   493,   720,   721,   494,   495,   496,   722,   497,   498,
     499,   500,   723,   501,   502,   503,   504,   505,   724,   725,
     508,   726,   509,   727,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   728,   729,   520,   730,   731,   521,   522,
     523,   524,   525,   526,   732,   733,   734,   735,   736,   737,
     738,   739,   740,   741,   742,   538,   539,   540,   541,   584,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,  2382,   127,   128,   129,   585,   130,   131,
     132,   586,   587,   588,   589,   590,   133,   591,   592,   593,
     594,   135,   136,   595,   137,   138,   139,   596,   141,   142,
     143,   597,   598,   599,   600,   601,   602,   149,   150,   151,
     152,   153,   154,   603,   604,   155,   156,   157,   158,   605,
     606,   161,   607,   162,   163,   164,   165,   608,   609,   610,
     611,   612,   169,   170,   171,   172,   173,   613,   175,   176,
     177,   614,   178,   179,   180,   181,   182,   183,   615,   616,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     618,   196,   197,   619,   199,   620,   200,   621,   201,   202,
     203,   204,   205,   206,   622,   623,   207,   208,   209,   210,
     211,   624,   625,   212,   213,   214,  2383,   216,   217,   218,
     626,   219,   220,   221,   627,   222,   223,   224,   628,   225,
     226,   227,   228,   629,   230,   231,   232,   233,   234,   235,
     630,   631,   237,   632,   238,   239,   633,   241,   634,   242,
     635,   243,   636,   637,   638,   246,   247,   639,   640,   250,
     641,   251,   252,   642,   643,   644,   645,   255,   256,   646,
     257,   258,   259,   260,   261,   262,   263,   647,   265,   266,
     267,   268,   648,   269,   270,   271,   272,   273,   274,   275,
     649,   276,   650,   651,   279,   280,   281,   282,   283,   652,
     653,   654,   655,   656,   287,   657,   658,   290,   659,   292,
     293,   294,   295,   296,   297,   298,   660,   661,   299,   662,
     301,   663,   664,   303,   304,   305,   306,   307,   308,   309,
     310,   665,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   666,   667,   668,   335,   336,   337,   338,   669,
     670,   340,   341,   671,   343,   672,   673,   345,   674,   347,
     348,   349,   675,   350,   351,   676,   677,   352,   353,   354,
     678,   679,   355,   356,   680,   681,   359,   682,   683,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   684,   685,   686,   687,   375,   376,   688,   689,
     379,   380,   690,   382,   383,   384,   691,   385,   386,   387,
     388,   389,   390,   391,   392,   692,   393,   394,   395,   396,
     397,   693,   399,   400,   401,   402,   694,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   695,   417,   418,   696,   420,   421,   422,   697,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   698,   699,   437,   438,   439,   440,   441,  2384,
     700,   444,   445,   446,   701,   702,   448,   449,   703,   451,
     704,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   705,   466,   706,   707,   708,   468,
     469,   709,   470,   710,   472,   473,   474,   475,   476,   711,
     477,   712,   713,   714,   480,   715,   481,   482,   716,   484,
     717,   718,   486,   487,   719,   489,   490,   491,   492,   493,
     720,   721,   494,   495,   496,   722,   497,   498,   499,   500,
     723,   501,   502,   503,   504,   505,   724,   725,   508,   726,
     509,   727,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   728,   729,   520,   730,   731,   521,   522,   523,   524,
     525,   526,   732,   733,   734,   735,   736,   737,   738,   739,
     740,   741,   742,   538,   539,   540,   541,  1062,     0,   848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,   589,     0,   133,     0,     0,     0,   594,   135,
     136,     0,   137,   138,   139,   596,   141,   142,   143,   597,
     598,   599,   600,   601,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   605,   606,   161,
       0,   162,   163,   164,   165,   608,     0,   610,     0,   612,
     169,   170,   171,   172,   173,   613,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,   616,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   618,   196,
     197,   619,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   629,   230,   231,   232,   233,   234,   235,   630,  1456,
     237,     0,   238,   239,   633,   241,     0,   242,     0,   243,
     636,     0,   638,   246,   247,   639,   640,   250,     0,   251,
     252,     0,     0,   644,   645,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   647,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     650,   651,   279,   280,   281,   282,   283,   652,   653,     0,
     655,     0,   287,   657,   658,   290,   659,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,   662,   301,   663,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   665,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     666,   667,   668,   335,   336,   337,   338,   669,     0,   340,
     341,   671,   343,     0,   673,   345,   674,   347,   348,   349,
       0,   350,   351,  1457,     0,   352,   353,   354,     0,     0,
     355,   356,   680,   681,   359,   682,   683,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   688,   689,   379,   380,
     690,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   693,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   696,   420,   421,   422,   697,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,   699,   437,   438,   439,   440,   441,   442,   700,   444,
     445,   446,     0,   702,   448,   449,   703,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   705,   466,   706,     0,     0,   468,   469,     0,
     470,   710,   472,   473,   474,   475,   476,     0,   477,   712,
     713,     0,   480,     0,   481,   482,   716,   484,   717,  1458,
     486,   487,   719,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   724,   725,   508,     0,   509,   727,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     732,   733,   734,   735,   736,   737,   738,   739,   740,   741,
     742,   538,   539,   540,   541,  1062,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     3,     4,     0,
     589,     0,   133,     0,     0,     0,   594,   135,   136,     0,
     137,   138,   139,   596,   141,   142,   143,   597,   598,   599,
     600,   601,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   605,   606,   161,     0,   162,
     163,   164,   165,   608,     0,   610,     0,   612,   169,   170,
     171,   172,   173,   613,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,   616,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   618,   196,   197,   619,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   629,
     230,   231,   232,   233,   234,   235,   630,     0,   237,     0,
     238,   239,   633,   241,     0,   242,     0,   243,   636,     0,
     638,   246,   247,   639,   640,   250,     0,   251,   252,     0,
       0,   644,   645,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   647,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   650,   651,
     279,   280,   281,   282,   283,   652,   653,     0,   655,     0,
     287,   657,   658,   290,   659,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,   662,   301,   663,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   665,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   666,   667,
     668,   335,   336,   337,   338,   669,     0,   340,   341,   671,
     343,     0,   673,   345,   674,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     680,   681,   359,   682,   683,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   688,   689,   379,   380,   690,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   693,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     696,   420,   421,   422,   697,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,   699,
     437,   438,   439,   440,   441,   442,   700,   444,   445,   446,
       0,   702,   448,   449,   703,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     705,   466,   706,     0,     0,   468,   469,     0,   470,   710,
     472,   473,   474,   475,   476,     0,   477,   712,   713,     0,
     480,     0,   481,   482,   716,   484,   717,     0,   486,   487,
     719,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   724,   725,   508,     0,   509,   727,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   732,   733,
     734,   735,   736,   737,   738,   739,   740,   741,   742,   538,
     539,   540,   541,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,   817,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   818,     0,   819,     0,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   820,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,   300,   301,   302,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,   343,     0,
     823,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,   358,
     359,   360,   825,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   826,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     828,     0,     0,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   829,   484,   830,     0,   486,   487,   831,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,     0,
       0,     0,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,   154,     0,     0,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,   214,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,     0,   237,     0,   238,   239,   240,   241,
       0,   242,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   252,     0,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,   300,   301,   302,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,     0,
       0,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,   478,   479,     0,   480,     0,   481,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,     0,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,  1862,   162,   163,   164,   165,   166,     0,     0,
    1863,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,  1864,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
    1865,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,  1866,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,  1867,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,  1868,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
    1862,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,  1864,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,  1865,   243,
       0,     0,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,  2466,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,  1867,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   478,
     479,     0,   480,     0,   481,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,  1868,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   550,     0,   578,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     3,     4,     0,
       0,     0,   133,     0,     0,     0,     0,   135,   136,     0,
     137,   138,   139,     0,   141,   142,   143,   144,   145,     0,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   168,   169,   170,
     171,   172,   173,     0,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,     0,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,     0,     0,
       0,   246,   247,   551,     0,   250,     0,   251,   252,     0,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,     0,     0,   290,     0,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,     0,   301,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   552,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     334,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,     0,   344,   345,   346,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     357,     0,   359,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   377,     0,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     553,   466,   467,     0,     0,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,   477,   478,   479,     0,
     480,     0,   481,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,     0,   509,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   550,     0,   578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   579,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,     0,   135,   136,     0,   137,   138,
     139,     0,   141,   142,   143,   144,   145,     0,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,     0,     0,     0,   168,   169,   170,   171,   172,
     173,     0,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,     0,     0,     0,   246,
     247,   551,     0,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,     0,
       0,   290,     0,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,     0,   301,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   552,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   334,   335,
     336,   337,   338,   339,     0,   340,   341,     0,   343,     0,
     344,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,     0,
     359,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   377,     0,   379,   380,   381,   580,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   553,   466,
     467,     0,     0,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   550,     0,   578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,     0,
       0,     0,     0,   135,   136,     0,   137,   138,   139,     0,
     141,   142,   143,   144,   145,     0,   147,   148,     0,   149,
     150,   151,   152,   153,   154,     0,     0,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,     0,     0,   168,   169,   170,   171,   172,   173,     0,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,     0,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,   214,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,     0,   237,     0,   238,   239,   240,   241,
       0,   242,     0,   243,     0,     0,     0,   246,   247,   551,
       0,   250,     0,   251,   252,     0,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,     0,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,     0,     0,   290,
       0,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,     0,   301,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   552,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   334,   335,   336,   337,
     338,   339,     0,   340,   341,     0,   343,     0,   344,   345,
     346,   347,   348,   349,     0,   350,   351,     0,   824,   352,
     353,   354,     0,     0,   355,   356,   357,     0,   359,     0,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     377,     0,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   553,   466,   467,     0,
       0,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,   477,   478,   479,     0,   480,     0,   481,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,     0,   509,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   550,
       0,   578,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   990,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,   824,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,   578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,  1035,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,     0,   243,
       0,     0,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   478,
     479,     0,   480,     0,   481,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   550,     0,   578,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,     0,     0,     0,     0,   135,   136,     0,
     137,   138,   139,     0,   141,   142,   143,   144,   145,     0,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   168,   169,   170,
     171,   172,   173,     0,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,     0,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,  1271,   235,   236,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,     0,     0,
       0,   246,   247,   551,     0,   250,     0,   251,   252,     0,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,     0,     0,   290,     0,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,     0,   301,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   552,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     334,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,     0,   344,   345,   346,   347,   348,   349,     0,   350,
     351,     0,   824,   352,   353,   354,     0,     0,   355,   356,
     357,     0,   359,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   377,     0,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     553,   466,   467,     0,     0,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,   477,   478,   479,     0,
     480,     0,   481,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,     0,   509,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   550,  2077,     0,     0,     0,     0,  2078,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,     0,   135,   136,     0,   137,   138,
     139,     0,   141,   142,   143,   144,   145,     0,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,     0,     0,     0,   168,   169,   170,   171,   172,
     173,     0,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,     0,     0,     0,   246,
     247,   551,     0,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,     0,
       0,   290,     0,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,     0,   301,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   552,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   334,   335,
     336,   337,   338,   339,     0,   340,   341,     0,   343,     0,
     344,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,     0,
     359,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   377,     0,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   553,   466,
     467,     0,     0,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   550,     0,   578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,     0,
       0,     0,     0,   135,   136,     0,   137,   138,   139,     0,
     141,   142,   143,   144,   145,     0,   147,   148,     0,   149,
     150,   151,   152,   153,   154,     0,     0,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,     0,     0,   168,   169,   170,   171,   172,   173,     0,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,     0,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,   214,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,     0,   237,     0,   238,   239,   240,   241,
       0,   242,     0,   243,     0,     0,     0,   246,   247,   551,
       0,  2085,     0,   251,   252,     0,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,     0,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,     0,     0,   290,
       0,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,     0,   301,     0,     0,   303,   304,  2086,   306,   307,
     308,   309,   310,   552,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   334,   335,   336,   337,
     338,   339,     0,   340,   341,     0,   343,     0,   344,   345,
     346,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,     0,   359,     0,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     377,     0,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   553,   466,   467,     0,
       0,   468,   469,  2087,   470,     0,   472,  2088,   474,  2089,
     476,     0,   477,   478,   479,     0,   480,     0,   481,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,   495,  2090,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,     0,   509,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   550,
       0,   578,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,   848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,     0,   243,
       0,     0,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   478,
     479,     0,   480,     0,   481,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   550,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   854,   130,   131,   132,     0,     0,     0,
       0,     0,   133,     0,     0,     0,     0,   135,   136,     0,
     137,   138,   139,     0,   141,   142,   143,   144,   145,     0,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   168,   169,   170,
     171,   172,   173,     0,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,     0,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,     0,     0,
       0,   246,   247,   551,     0,   855,     0,   251,   252,     0,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,     0,     0,   290,     0,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,     0,   301,     0,     0,   303,
     304,   856,   306,   307,   308,   309,   310,   552,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     334,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,     0,   344,   345,   346,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     357,     0,   359,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   377,     0,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   857,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     553,   466,   467,     0,     0,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,   477,   858,   479,     0,
     480,     0,   859,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   860,     0,   509,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   550,     0,   578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,     0,   135,   136,     0,   137,   138,
     139,     0,   141,   142,   143,   144,   145,     0,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,     0,     0,     0,   168,   169,   170,   171,   172,
     173,     0,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,     0,     0,     0,   246,
     247,   551,     0,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,     0,
       0,   290,     0,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,     0,   301,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   552,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   334,   335,
     336,   337,   338,   339,     0,   340,   341,     0,   343,     0,
     344,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,     0,
     359,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   377,     0,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   894,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   553,   466,
     467,     0,     0,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   550,     0,   578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,     0,
       0,     0,     0,   135,   136,     0,   137,   138,   139,     0,
     141,   142,   143,   144,   145,     0,   147,   148,     0,   149,
     150,   151,   152,   153,   154,     0,     0,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,     0,     0,   168,   169,   170,   171,   172,   173,     0,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,     0,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,   214,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,     0,   237,     0,   238,   239,   240,   241,
       0,   242,     0,   243,     0,     0,     0,   246,   247,   551,
       0,   250,     0,   251,   252,     0,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   985,   263,     0,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,     0,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,     0,     0,   290,
       0,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,     0,   301,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   552,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   334,   335,   336,   337,
     338,   339,     0,   340,   341,     0,   343,     0,   344,   345,
     346,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,     0,   359,     0,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     377,     0,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   553,   466,   467,     0,
       0,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,   477,   478,   479,     0,   480,     0,   481,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,     0,   509,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   550,
       0,   578,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   988,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,   578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,     0,   243,
       0,     0,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   992,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   478,
     479,     0,   480,     0,   481,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   550,     0,   578,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,     0,     0,     0,     0,   135,   136,     0,
     137,   138,   139,     0,   141,   142,   143,   144,   145,     0,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   168,   169,   170,
     171,   172,   173,     0,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,     0,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,     0,     0,
       0,   246,   247,   551,     0,   250,     0,   251,   252,     0,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,  1023,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,     0,     0,   290,     0,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,     0,   301,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   552,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     334,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,     0,   344,   345,   346,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     357,     0,   359,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   377,     0,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     553,   466,   467,     0,     0,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,   477,   478,   479,     0,
     480,     0,   481,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,     0,   509,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   550,     0,   578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,     0,   135,   136,     0,   137,   138,
     139,     0,   141,   142,   143,   144,   145,     0,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,     0,     0,     0,   168,   169,   170,   171,   172,
     173,     0,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,     0,     0,     0,   246,
     247,   551,     0,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,  1052,
     263,     0,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,     0,
       0,   290,     0,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,     0,   301,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   552,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   334,   335,
     336,   337,   338,   339,     0,   340,   341,     0,   343,     0,
     344,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,     0,
     359,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   377,     0,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   553,   466,
     467,     0,     0,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   550,     0,   578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,     0,
       0,     0,     0,   135,   136,     0,   137,   138,   139,     0,
     141,   142,   143,   144,   145,     0,   147,   148,     0,   149,
     150,   151,   152,   153,   154,     0,     0,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,     0,     0,   168,   169,   170,   171,   172,   173,     0,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,     0,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,   214,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,     0,   237,     0,   238,   239,   240,   241,
       0,   242,     0,   243,     0,     0,     0,   246,   247,   551,
       0,   250,     0,   251,   252,     0,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,  1055,   263,     0,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,     0,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,     0,     0,   290,
       0,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,     0,   301,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   552,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   334,   335,   336,   337,
     338,   339,     0,   340,   341,     0,   343,     0,   344,   345,
     346,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,     0,   359,     0,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     377,     0,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   553,   466,   467,     0,
       0,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,   477,   478,   479,     0,   480,     0,   481,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,     0,   509,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,  1100,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,  1123,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,     0,   243,
       0,     0,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   478,
     479,     0,   480,     0,   481,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   550,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   854,   130,   131,   132,     0,     0,     0,
       0,     0,   133,     0,     0,     0,     0,   135,   136,     0,
     137,   138,   139,     0,   141,   142,   143,   144,   145,     0,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   168,   169,   170,
     171,   172,   173,     0,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,     0,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,     0,     0,
       0,   246,   247,   551,     0,   250,     0,   251,   252,     0,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,     0,     0,   290,     0,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,     0,   301,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   552,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     334,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,     0,   344,   345,   346,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     357,     0,   359,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   377,     0,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     553,   466,   467,     0,     0,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,   477,   858,   479,     0,
     480,     0,   859,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,     0,   509,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   550,     0,   578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,     0,   135,   136,     0,   137,   138,
     139,     0,   141,   142,   143,   144,   145,     0,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,     0,     0,     0,   168,   169,   170,   171,   172,
     173,     0,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,     0,     0,     0,   246,
     247,   551,     0,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,  1412,
     263,     0,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,     0,
       0,   290,     0,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,     0,   301,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   552,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   334,   335,
     336,   337,   338,   339,     0,   340,   341,     0,   343,     0,
     344,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,     0,
     359,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   377,     0,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   553,   466,
     467,     0,     0,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   550,     0,   578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,   133,     0,
       0,     0,     0,   135,   136,     0,   137,   138,   139,     0,
     141,   142,   143,   144,   145,     0,   147,   148,     0,   149,
     150,   151,   152,   153,   154,     0,     0,   155,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,     0,     0,   168,   169,   170,   171,   172,   173,     0,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,     0,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,   214,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,     0,   237,     0,   238,   239,   240,   241,
       0,   242,     0,   243,     0,     0,     0,   246,   247,   551,
       0,   250,     0,   251,   252,     0,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,  1414,   263,     0,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,     0,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,     0,     0,   290,
       0,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,     0,   301,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   552,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   334,   335,   336,   337,
     338,   339,     0,   340,   341,     0,   343,     0,   344,   345,
     346,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,   357,     0,   359,     0,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
     377,     0,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   553,   466,   467,     0,
       0,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,   477,   478,   479,     0,   480,     0,   481,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,     0,   509,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   550,
       0,   578,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,  1417,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   550,     0,   578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,   135,
     136,     0,   137,   138,   139,     0,   141,   142,   143,   144,
     145,     0,   147,   148,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,     0,     0,   168,
     169,   170,   171,   172,   173,     0,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,   214,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
     237,     0,   238,   239,   240,   241,     0,   242,     0,   243,
       0,     0,     0,   246,   247,   551,     0,   250,     0,   251,
     252,     0,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,  1419,   263,     0,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,     0,     0,   290,     0,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,     0,   301,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   552,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   334,   335,   336,   337,   338,   339,     0,   340,
     341,     0,   343,     0,   344,   345,   346,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,   357,     0,   359,     0,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,   377,     0,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   553,   466,   467,     0,     0,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,   477,   478,
     479,     0,   480,     0,   481,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,     0,   509,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   550,     0,   578,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,   133,     0,     0,     0,     0,   135,   136,     0,
     137,   138,   139,     0,   141,   142,   143,   144,   145,     0,
     147,   148,     0,   149,   150,   151,   152,   153,   154,     0,
       0,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,     0,     0,   168,   169,   170,
     171,   172,   173,     0,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,     0,     0,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,     0,   212,
     213,   214,   215,   216,   217,   218,     0,   219,   220,   221,
       0,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,     0,   237,     0,
     238,   239,   240,   241,     0,   242,     0,   243,     0,     0,
       0,   246,   247,   551,     0,   250,     0,   251,   252,     0,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,  1428,   263,     0,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,     0,   276,     0,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,     0,     0,   290,     0,   292,   293,   294,   295,   296,
     297,   298,     0,     0,   299,     0,   301,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   552,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     334,   335,   336,   337,   338,   339,     0,   340,   341,     0,
     343,     0,   344,   345,   346,   347,   348,   349,     0,   350,
     351,     0,     0,   352,   353,   354,     0,     0,   355,   356,
     357,     0,   359,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   375,   376,   377,     0,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,     0,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     553,   466,   467,     0,     0,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,   477,   478,   479,     0,
     480,     0,   481,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,   495,
     496,     0,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,     0,   509,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   520,
       0,     0,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   550,     0,   578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
     133,     0,     0,     0,     0,   135,   136,     0,   137,   138,
     139,     0,   141,   142,   143,   144,   145,     0,   147,   148,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   166,     0,     0,     0,   168,   169,   170,   171,   172,
     173,     0,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,   214,
     215,   216,   217,   218,     0,   219,   220,   221,     0,   222,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,     0,   237,     0,   238,   239,
     240,   241,     0,   242,     0,   243,     0,     0,     0,   246,
     247,   551,     0,   250,     0,   251,   252,     0,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,  2378,
     263,     0,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,     0,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,     0,
       0,   290,     0,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,     0,   301,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   552,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   334,   335,
     336,   337,   338,   339,     0,   340,   341,     0,   343,     0,
     344,   345,   346,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,   357,     0,
     359,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,   377,     0,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   553,   466,
     467,     0,     0,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,   477,   478,   479,     0,   480,     0,
     481,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,     0,   509,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,  1588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,  1589,     0,   133,     0,
    -998,     0,  1590,   135,   136,     0,   137,   138,   139,  1591,
     141,   142,   143,     0,  1592,  1593,  1594,  1595,     0,   149,
     150,   151,   152,   153,   154,     0,     0,   155,   156,   157,
     158,  1596,  1597,   161,     0,   162,   163,   164,   165,     0,
       0,  1598,     0,  1599,   169,   170,   171,   172,   173,  1600,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
       0,  1601,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,  1602,   196,   197,  1603,   199,     0,   200,     0,
     201,   202,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,     0,   212,   213,  1159,   215,   216,
     217,   218,     0,   219,   220,   221,     0,   222,   223,   224,
       0,   225,   226,   227,   228,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   237,     0,   238,   239,  1604,   241,
       0,   242,     0,   243,  1605,     0,  1606,   246,   247,  -998,
    1607,   250,     0,   251,   252,     0,     0,     0,     0,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,  1608,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,     0,   276,  1609,     0,   279,   280,   281,   282,
     283,  1610,  1611,     0,  1612,     0,   287,  1613,  1614,   290,
    1615,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     299,  1616,   301,  1617,     0,   303,   304,   305,   306,   307,
     308,   309,   310,  1618,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1619,  1620,  1621,   335,   336,   337,
     338,     0,     0,   340,   341,  1622,   343,     0,     0,   345,
    1623,   347,   348,   349,     0,   350,   351,     0,     0,   352,
     353,   354,     0,     0,   355,   356,     0,  1624,   359,  1625,
       0,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   375,   376,
       0,  1626,   379,   380,     0,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,  1627,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,  1628,   420,   421,   422,
    1629,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,     0,  1630,   437,   438,   439,   440,
     441,   442,  1631,   444,   445,   446,     0,  1632,   448,   449,
    1633,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,  1634,   466,     0,     0,
       0,   468,   469,     0,   470,  1635,   472,   473,   474,   475,
     476,     0,   477,  1636,  1637,     0,   480,     0,   481,   482,
       0,   484,     0,     0,   486,   487,  1638,   489,   490,   491,
     492,   493,  1639,     0,   494,   495,   496,     0,   497,   498,
     499,   500,     0,   501,   502,   503,   504,   505,     0,  1640,
     508,     0,   509,  1641,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,   520,     0,     0,   521,   522,
     523,   524,   525,   526,   550,     0,   578,     0,     0,     0,
       0,     0,     0,     0,     0,   538,   539,   540,   541,     0,
       0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,   133,     0,     0,     0,     0,   135,   136,     0,   137,
     138,   139,     0,   141,   142,   143,   144,   145,     0,   147,
     148,     0,   149,   150,   151,   152,   153,   154,     0,     0,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,     0,     0,   168,   169,   170,   171,
     172,   173,     0,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,     0,     0,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,     0,   212,   213,
     214,   215,   216,   217,   218,     0,   219,   220,   221,     0,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,     0,   237,     0,   238,
     239,   240,   241,     0,   242,     0,   243,     0,     0,     0,
     246,   247,   551,     0,   250,     0,   251,   252,     0,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
    3217,   263,     0,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,     0,   287,
       0,     0,   290,     0,   292,   293,   294,   295,   296,   297,
     298,     0,     0,   299,     0,   301,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   552,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   334,
     335,   336,   337,   338,   339,     0,   340,   341,     0,   343,
       0,   344,   345,   346,   347,   348,   349,     0,   350,   351,
       0,     0,   352,   353,   354,     0,     0,   355,   356,   357,
       0,   359,     0,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,     0,     0,     0,
       0,   375,   376,   377,     0,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   417,   418,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   553,
     466,   467,     0,     0,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,   477,   478,   479,     0,   480,
       0,   481,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,   495,   496,
       0,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,     0,   509,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,   520,     0,
       0,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   550,     0,   578,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,   133,
       0,     0,     0,     0,   135,   136,     0,   137,   138,   139,
       0,   141,   142,   143,   144,   145,     0,   147,   148,     0,
     149,   150,   151,   152,   153,   154,     0,     0,   155,   156,
     157,   158,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,     0,     0,   168,   169,   170,   171,   172,   173,
       0,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,     0,     0,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,     0,   212,   213,   214,   215,
     216,   217,   218,     0,   219,   220,   221,     0,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,     0,   237,     0,   238,   239,   240,
     241,     0,   242,     0,   243,     0,     0,     0,   246,   247,
     551,     0,   250,     0,   251,   252,     0,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,     0,   287,     0,     0,
     290,     0,   292,   293,  4014,   295,   296,   297,   298,     0,
       0,   299,     0,   301,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   552,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   334,   335,   336,
     337,   338,   339,     0,   340,   341,     0,   343,     0,   344,
     345,   346,   347,   348,   349,     0,   350,   351,     0,     0,
     352,   353,   354,     0,     0,   355,   356,   357,     0,   359,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,     0,     0,     0,     0,   375,
     376,   377,     0,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   417,   418,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   553,   466,   467,
       0,     0,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,   477,   478,   479,     0,   480,     0,   481,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,     0,   494,   495,   496,     0,   497,
     498,   499,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,     0,   509,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,   520,     0,     0,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     550,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,   133,     0,     0,
       0,     0,   135,   136,     0,   137,   138,   139,     0,   141,
     142,   143,   144,   145,     0,   147,   148,     0,   149,   150,
     151,   152,   153,   154,     0,     0,   155,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
       0,     0,   168,   169,   170,   171,   172,   173,     0,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,     0,
       0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,     0,   212,   213,   214,   215,   216,   217,
     218,     0,   219,   220,   221,     0,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,     0,   237,     0,   238,   239,   240,   241,     0,
     242,     0,   243,     0,     0,     0,   246,   247,   551,     0,
     250,     0,   251,   252,     0,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,     0,   287,     0,     0,   290,     0,
     292,   293,   294,   295,   296,   297,   298,     0,     0,   299,
       0,   301,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   552,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   334,   335,   336,   337,   338,
     339,     0,   340,   341,     0,   343,     0,   344,   345,   346,
     347,   348,   349,     0,   350,   351,     0,     0,   352,   353,
     354,     0,     0,   355,   356,   357,     0,   359,     0,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,     0,     0,     0,     0,   375,   376,   377,
       0,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   553,   466,   467,     0,     0,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,   477,   478,   479,     0,   480,     0,   481,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,   495,   496,     0,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
       0,   509,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,   520,     0,     0,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   550,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
     135,   136,     0,   137,   138,   139,     0,   141,   142,   143,
     144,   145,     0,   147,   148,     0,   149,   150,   151,   152,
     153,   154,     0,     0,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,     0,
     168,   169,   170,   171,   172,   173,     0,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,     0,     0,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,     0,   212,   213,   214,   215,   216,   217,   218,     0,
     219,   220,   221,     0,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
       0,   237,     0,   238,   239,   240,   241,     0,   242,     0,
     243,     0,     0,     0,   246,   247,   551,     0,   870,     0,
     251,   252,     0,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,     0,   287,     0,     0,   290,     0,   292,   293,
     294,   295,   296,   297,   298,     0,     0,   299,     0,   301,
       0,     0,   303,   304,   871,   306,   307,   308,   309,   310,
     552,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   334,   335,   336,   337,   338,   339,     0,
     340,   341,     0,   343,     0,   344,   345,   346,   347,   348,
     349,     0,   350,   351,     0,     0,   352,   353,   354,     0,
       0,   355,   356,   357,     0,   359,     0,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,     0,     0,     0,     0,   375,   376,   377,     0,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   417,   418,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   872,   429,   430,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   873,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   553,   466,   467,     0,     0,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,   477,
     874,   479,     0,   480,     0,   481,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,   495,   496,     0,   497,   498,   499,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   875,     0,   509,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,   520,     0,     0,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,   133,     0,     0,     0,     0,   135,   136,
       0,   137,   138,   139,     0,   141,   142,   143,   144,   145,
       0,   147,   148,     0,   149,   150,   151,   152,   153,   154,
       0,     0,   155,   156,   157,   158,   159,   160,   161,     0,
     162,   163,   164,   165,   166,     0,     0,     0,   168,   169,
     170,   171,   172,   173,     0,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,     0,     0,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,     0,   200,     0,   201,   202,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,     0,
     212,   213,   214,   215,   216,   217,   218,     0,   219,   220,
     221,     0,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,     0,   237,
       0,   238,   239,   240,   241,     0,   242,     0,   243,     0,
       0,     0,   246,   247,   551,     0,   250,     0,   251,   252,
       0,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,  1048,   263,     0,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
       0,   287,     0,     0,   290,     0,   292,   293,   294,   295,
     296,   297,   298,     0,     0,   299,     0,   301,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   552,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,   334,   335,   336,   337,   338,   339,     0,   340,   341,
       0,   343,     0,   344,   345,   346,   347,   348,   349,     0,
     350,   351,     0,     0,   352,   353,   354,     0,     0,   355,
     356,   357,     0,   359,     0,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,     0,
       0,     0,     0,   375,   376,   377,     0,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   417,
     418,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   553,   466,   467,     0,     0,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,   477,   478,   479,
       0,   480,     0,   481,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,     0,   494,
     495,   496,     0,   497,   498,   499,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,     0,   509,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
     520,     0,     0,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   550,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,   133,     0,     0,     0,     0,   135,   136,     0,   137,
     138,   139,     0,   141,   142,   143,   144,   145,     0,   147,
     148,     0,   149,   150,   151,   152,   153,   154,     0,     0,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,     0,     0,   168,   169,   170,   171,
     172,   173,     0,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,     0,     0,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,     0,   212,   213,
     214,   215,   216,   217,   218,     0,   219,   220,   221,     0,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,     0,   237,     0,   238,
     239,   240,   241,     0,   242,     0,   243,     0,     0,     0,
     246,   247,   551,     0,   250,     0,   251,   252,     0,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,     0,   287,
       0,     0,   290,     0,   292,   293,   294,   295,   296,   297,
     298,     0,     0,   299,     0,   301,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   552,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   334,
     335,   336,   337,   338,   339,     0,   340,   341,     0,   343,
       0,   344,   345,   346,   347,   348,   349,     0,   350,   351,
       0,     0,   352,   353,   354,     0,     0,   355,   356,   357,
       0,   359,     0,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,     0,     0,     0,
       0,   375,   376,   377,     0,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   417,   418,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   872,   429,
     430,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   553,
     466,   467,     0,     0,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,   477,   874,   479,     0,   480,
       0,   481,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,   495,   496,
       0,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,     0,   509,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,   520,     0,
       0,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   550,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,   133,
       0,     0,     0,     0,   135,   136,     0,   137,   138,   139,
       0,   141,   142,   143,   144,   145,     0,   147,   148,     0,
     149,   150,   151,   152,   153,   154,     0,     0,   155,   156,
     157,   158,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,     0,     0,   168,   169,   170,   171,   172,   173,
       0,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,     0,     0,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,     0,   212,   213,   214,   215,
     216,   217,   218,     0,   219,   220,   221,     0,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,     0,   237,     0,   238,   239,   240,
     241,     0,   242,     0,   243,     0,     0,     0,   246,   247,
     551,     0,   250,     0,   251,   252,     0,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,  1421,   263,
       0,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,     0,   287,     0,     0,
     290,     0,   292,   293,   294,   295,   296,   297,   298,     0,
       0,   299,     0,   301,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   552,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   334,   335,   336,
     337,   338,   339,     0,   340,   341,     0,   343,     0,   344,
     345,   346,   347,   348,   349,     0,   350,   351,     0,     0,
     352,   353,   354,     0,     0,   355,   356,   357,     0,   359,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,     0,     0,     0,     0,   375,
     376,   377,     0,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   417,   418,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   553,   466,   467,
       0,     0,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,   477,   478,   479,     0,   480,     0,   481,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,     0,   494,   495,   496,     0,   497,
     498,   499,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,     0,   509,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,   520,     0,     0,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     550,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,   133,     0,     0,
       0,     0,   135,   136,     0,   137,   138,   139,     0,   141,
     142,   143,   144,   145,     0,   147,   148,     0,   149,   150,
     151,   152,   153,   154,     0,     0,   155,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
       0,     0,   168,   169,   170,   171,   172,   173,     0,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,     0,
       0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,     0,   212,   213,   214,   215,   216,   217,
     218,     0,   219,   220,   221,     0,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,     0,   237,     0,   238,   239,   240,   241,     0,
     242,     0,   243,     0,     0,     0,   246,   247,   551,     0,
     250,     0,   251,   252,     0,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,  1434,   263,     0,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,     0,   276,     0,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,     0,   287,     0,     0,   290,     0,
     292,   293,   294,   295,   296,   297,   298,     0,     0,   299,
       0,   301,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   552,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   334,   335,   336,   337,   338,
     339,     0,   340,   341,     0,   343,     0,   344,   345,   346,
     347,   348,   349,     0,   350,   351,     0,     0,   352,   353,
     354,     0,     0,   355,   356,   357,     0,   359,     0,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,     0,     0,     0,     0,   375,   376,   377,
       0,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   553,   466,   467,     0,     0,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,   477,   478,   479,     0,   480,     0,   481,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,   495,   496,     0,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
       0,   509,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,   520,     0,     0,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   550,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,   133,     0,  1785,     0,     0,
     135,   136,     0,   137,   138,   139,     0,   141,   142,   143,
     144,   145,     0,   147,   148,     0,   149,   150,   151,   152,
     153,   154,     0,     0,   155,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,     0,     0,
     168,   169,   170,   171,   172,   173,     0,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,     0,     0,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,     0,   212,   213,   214,   215,   216,   217,   218,     0,
     219,   220,   221,     0,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
       0,   237,     0,   238,   239,   240,   241,     0,   242,     0,
     243,     0,     0,     0,   246,   247,   551,     0,   250,     0,
     251,   252,     0,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,     0,   287,     0,     0,   290,     0,   292,   293,
     294,   295,   296,   297,   298,     0,     0,   299,     0,   301,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     552,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   334,   335,   336,   337,   338,   339,     0,
     340,   341,     0,   343,     0,   344,   345,   346,   347,   348,
     349,     0,   350,   351,     0,     0,   352,   353,   354,     0,
       0,   355,   356,   357,     0,   359,     0,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,     0,     0,     0,     0,   375,   376,   377,     0,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   417,   418,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,     0,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   553,   466,   467,     0,     0,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,   477,
     478,   479,     0,   480,     0,   481,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,   495,   496,     0,   497,   498,   499,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,     0,   509,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,   520,     0,     0,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,   133,     0,     0,     0,     0,   135,   136,
       0,   137,   138,   139,     0,   141,   142,   143,   144,   145,
       0,   147,   148,     0,   149,   150,   151,   152,   153,   154,
       0,     0,   155,   156,   157,   158,   159,   160,   161,     0,
     162,   163,   164,   165,   166,     0,     0,     0,   168,   169,
     170,   171,   172,   173,     0,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,     0,     0,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,     0,   200,     0,   201,   202,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,     0,
     212,   213,   214,   215,   216,   217,   218,     0,   219,   220,
     221,     0,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,     0,   237,
       0,   238,   239,   240,   241,     0,   242,     0,   243,     0,
       0,     0,   246,   247,   551,     0,   250,     0,   251,   252,
       0,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,  1980,   263,     0,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,     0,   276,     0,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
       0,   287,     0,     0,   290,     0,   292,   293,   294,   295,
     296,   297,   298,     0,     0,   299,     0,   301,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   552,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,   334,   335,   336,   337,   338,   339,     0,   340,   341,
       0,   343,     0,   344,   345,   346,   347,   348,   349,     0,
     350,   351,     0,     0,   352,   353,   354,     0,     0,   355,
     356,   357,     0,   359,     0,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,     0,
       0,     0,     0,   375,   376,   377,     0,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   417,
     418,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   553,   466,   467,     0,     0,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,   477,   478,   479,
       0,   480,     0,   481,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,     0,   494,
     495,   496,     0,   497,   498,   499,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,     0,   509,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
     520,     0,     0,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   550,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,   133,     0,     0,     0,     0,   135,   136,     0,   137,
     138,   139,     0,   141,   142,   143,   144,   145,     0,   147,
     148,     0,   149,   150,   151,   152,   153,   154,     0,     0,
     155,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,     0,     0,   168,   169,   170,   171,
     172,   173,     0,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,     0,     0,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,     0,   212,   213,
     214,   215,   216,   217,   218,     0,   219,   220,   221,     0,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,     0,   237,     0,   238,
     239,   240,   241,     0,   242,     0,   243,     0,     0,     0,
     246,   247,   551,     0,   250,     0,   251,   252,     0,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
    2365,   263,     0,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,     0,   276,     0,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,     0,   287,
       0,     0,   290,     0,   292,   293,   294,   295,   296,   297,
     298,     0,     0,   299,     0,   301,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   552,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   334,
     335,   336,   337,   338,   339,     0,   340,   341,     0,   343,
       0,   344,   345,   346,   347,   348,   349,     0,   350,   351,
       0,     0,   352,   353,   354,     0,     0,   355,   356,   357,
       0,   359,     0,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,     0,     0,     0,
       0,   375,   376,   377,     0,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   417,   418,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   553,
     466,   467,     0,     0,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,   477,   478,   479,     0,   480,
       0,   481,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,   495,   496,
       0,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,     0,   509,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,   520,     0,
       0,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   550,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,   133,
       0,     0,     0,     0,   135,   136,     0,   137,   138,   139,
       0,   141,   142,   143,   144,   145,     0,   147,   148,     0,
     149,   150,   151,   152,   153,   154,     0,     0,   155,   156,
     157,   158,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,     0,     0,   168,   169,   170,   171,   172,   173,
       0,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,     0,     0,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,     0,   212,   213,   214,   215,
     216,   217,   218,     0,   219,   220,   221,     0,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,     0,   237,     0,   238,   239,   240,
     241,     0,   242,     0,   243,     0,     0,     0,   246,   247,
     551,     0,   250,     0,   251,   252,     0,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,  2380,   263,
       0,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,     0,   276,     0,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,     0,   287,     0,     0,
     290,     0,   292,   293,   294,   295,   296,   297,   298,     0,
       0,   299,     0,   301,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   552,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   334,   335,   336,
     337,   338,   339,     0,   340,   341,     0,   343,     0,   344,
     345,   346,   347,   348,   349,     0,   350,   351,     0,     0,
     352,   353,   354,     0,     0,   355,   356,   357,     0,   359,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,     0,     0,     0,     0,   375,
     376,   377,     0,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   417,   418,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   553,   466,   467,
       0,     0,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,   477,   478,   479,     0,   480,     0,   481,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,     0,   494,   495,   496,     0,   497,
     498,   499,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,     0,   509,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,   520,     0,     0,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,  1589,     0,   133,     0,     0,
       0,  1590,   135,   136,     0,   137,   138,   139,  1591,   141,
     142,   143,     0,  1592,  1593,  1594,  1595,     0,   149,   150,
     151,   152,   153,   154,     0,     0,   155,   156,   157,   158,
    1596,  1597,   161,     0,   162,   163,   164,   165,     0,     0,
    1598,     0,  1599,   169,   170,   171,   172,   173,  1600,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,     0,
    1601,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,  1602,   196,   197,  1603,   199,     0,   200,     0,   201,
     202,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,     0,   212,   213,  1159,   215,   216,   217,
     218,     0,   219,   220,   221,     0,   222,   223,   224,     0,
     225,   226,   227,   228,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   237,     0,   238,   239,  1604,   241,     0,
     242,     0,   243,  1605,     0,  1606,   246,   247,     0,  1607,
     250,     0,   251,   252,     0,     0,     0,     0,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,  1608,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,     0,   276,  1609,     0,   279,   280,   281,   282,   283,
    1610,  1611,     0,  1612,     0,   287,  1613,  1614,   290,  1615,
     292,   293,   294,   295,   296,   297,   298,     0,     0,   299,
    1616,   301,  1617,     0,   303,   304,   305,   306,   307,   308,
     309,   310,  1618,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,  1619,  1620,  1621,   335,   336,   337,   338,
       0,     0,   340,   341,  1622,   343,     0,     0,   345,  1623,
     347,   348,   349,     0,   350,   351,     0,     0,   352,   353,
     354,     0,     0,   355,   356,     0,  1624,   359,  1625,     0,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,     0,     0,     0,     0,   375,   376,     0,
    1626,   379,   380,     0,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,  1627,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,  1628,   420,   421,   422,  1629,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,     0,  1630,   437,   438,   439,   440,   441,
     442,  1631,   444,   445,   446,     0,  1632,   448,   449,  1633,
     451,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,  1634,   466,     0,     0,     0,
     468,   469,     0,   470,  1635,   472,   473,   474,   475,   476,
       0,   477,  1636,  1637,     0,   480,     0,   481,   482,     0,
     484,     0,     0,   486,   487,  1638,   489,   490,   491,   492,
     493,  1639,     0,   494,   495,   496,     0,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,     0,  1640,   508,
       0,   509,  1641,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,   520,     0,     0,   521,   522,   523,
     524,   525,   526,  1588,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   538,   539,   540,   541,     0,     0,
       0,     0,   121,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,  1589,     0,
     133,     0,     0,     0,  1590,   135,   136,     0,   137,   138,
     139,  1591,   141,   142,   143,     0,  1592,  1593,  1594,  1595,
       0,   149,   150,   151,   152,   153,   154,     0,     0,   155,
     156,   157,   158,  1596,  1597,   161,     0,   162,   163,   164,
     165,     0,     0,  1598,     0,  1599,   169,   170,   171,   172,
     173,  1600,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,     0,  1601,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,  1602,   196,   197,  1603,   199,     0,
     200,     0,   201,   202,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,     0,   212,   213,  1159,
     215,   216,   217,   218,     0,   219,   220,   221,     0,  1956,
     223,   224,     0,   225,   226,   227,   228,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   237,     0,   238,   239,
    1604,   241,     0,   242,     0,   243,  1605,     0,  1606,   246,
     247,     0,  1607,   250,     0,   251,   252,     0,     0,     0,
       0,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,  1608,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,     0,   276,  1609,     0,   279,   280,
     281,   282,   283,  1610,  1611,     0,  1612,     0,   287,  1613,
    1614,   290,  1615,   292,   293,   294,   295,   296,   297,   298,
       0,     0,   299,  1616,   301,  1617,     0,   303,   304,   305,
     306,   307,   308,   309,   310,  1618,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1619,  1620,  1621,   335,
     336,   337,   338,     0,     0,   340,   341,  1622,   343,     0,
       0,   345,  1623,   347,   348,   349,     0,   350,   351,     0,
       0,   352,   353,   354,     0,     0,   355,   356,     0,  1624,
     359,  1625,     0,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     375,   376,     0,  1626,   379,   380,     0,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,     0,
     393,   394,   395,   396,   397,  1627,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,  1628,   420,
     421,   422,  1629,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,  1630,   437,   438,
     439,   440,   441,   442,  1631,   444,   445,   446,     0,  1632,
     448,   449,  1633,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,  1634,   466,
       0,     0,     0,   468,   469,     0,   470,  1635,   472,   473,
     474,   475,   476,     0,   477,  1636,  1637,     0,   480,     0,
     481,   482,     0,   484,     0,     0,   486,   487,  1638,   489,
     490,   491,   492,   493,  1639,     0,   494,   495,   496,     0,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
       0,  1640,   508,     0,   509,  1641,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,   520,     0,     0,
     521,   522,   523,   524,   525,   526,  3447,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   538,   539,   540,
     541,     0,     0,     0,     0,   121,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,  3135,     0,   133,     0,     0,     0,  3136,   135,   136,
       0,   137,   138,   139,  3137,   141,   142,   143,     0,  1592,
    3138,  1594,  1595,     0,   149,   150,   151,   152,   153,   154,
       0,     0,   155,   156,   157,   158,  1596,  1597,   161,     0,
     162,   163,   164,   165,     0,     0,  3139,     0,  3140,   169,
     170,   171,   172,   173,  3141,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,     0,  3142,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,  1602,   196,   197,
    1603,   199,     0,   200,     0,   201,   202,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,     0,
     212,   213,  1159,   215,   216,   217,   218,     0,   219,   220,
     221,     0,   222,   223,   224,     0,   225,   226,   227,   228,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   237,
       0,   238,   239,  1604,   241,     0,   242,     0,   243,  3143,
       0,  3144,   246,   247,  3145,  3146,   250,     0,   251,   252,
       0,     0,     0,     0,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,  3147,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,     0,   276,  3148,
       0,   279,   280,   281,   282,   283,  1610,  1611,     0,  1612,
       0,   287,  3149,  3150,   290,  3151,   292,   293,   294,   295,
     296,   297,   298,     0,     0,   299,  3152,   301,  3153,     0,
     303,   304,   305,   306,   307,   308,   309,   310,  3448,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,  1619,
    3155,  1621,   335,   336,   337,   338,     0,     0,   340,   341,
    3157,   343,     0,     0,   345,  1623,   347,   348,   349,     0,
     350,   351,     0,     0,   352,   353,   354,     0,     0,   355,
     356,     0,  3159,   359,  3160,     0,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,     0,
       0,     0,     0,   375,   376,     0,  3161,   379,   380,     0,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,  1627,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   417,
     418,  3162,   420,   421,   422,     0,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,     0,
    3163,   437,   438,   439,   440,   441,   442,     0,   444,   445,
     446,     0,  3165,   448,   449,  1633,   451,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,  3449,   466,     0,     0,     0,   468,   469,     0,   470,
    3167,   472,   473,   474,   475,   476,     0,   477,  1636,  1637,
       0,   480,     0,   481,   482,     0,   484,     0,     0,   486,
     487,  3168,   489,   490,   491,   492,   493,     0,     0,   494,
     495,   496,     0,   497,   498,   499,   500,     0,   501,   502,
     503,   504,   505,     0,  1640,   508,     0,   509,  3170,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
     520,     0,     0,   521,   522,   523,   524,   525,   526,   550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     538,   539,   540,   541,     0,     0,     0,     0,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,   133,     0,     0,     0,
       0,   135,   136,     0,   137,   138,   139,     0,   141,   142,
     143,   144,   145,     0,   147,   148,     0,   149,   150,   151,
     152,   153,   154,     0,     0,   155,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,     0,
       0,   168,   169,   170,   171,   172,   173,     0,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,     0,     0,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,     0,   212,   213,   214,   215,   216,   217,   218,
       0,   219,   220,   221,     0,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,     0,   237,     0,   238,   239,   240,   241,     0,   242,
       0,   243,     0,     0,     0,   246,   247,   551,     0,   250,
       0,   251,   252,     0,     0,   253,   254,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
       0,   276,     0,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,     0,     0,   290,     0,   292,
     293,   294,   295,   296,   297,   298,     0,     0,   299,     0,
     301,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   552,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   334,   335,   336,   337,   338,   339,
       0,   340,   341,     0,   343,     0,   344,   345,   346,   347,
     348,   349,     0,   350,   351,     0,     0,   352,   353,   354,
       0,     0,   355,   356,   357,     0,   359,     0,   361,   362,
     363,   364,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   375,   376,   377,     0,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,     0,   393,   394,   395,     0,
     397,   398,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,     0,   420,   421,   422,   423,     0,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   553,   466,   467,     0,     0,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
     477,   478,   479,     0,   480,     0,   481,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,   495,   496,     0,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,     0,
     509,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,   520,     0,     0,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,  1889,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,  1589,     0,   133,     0,     0,     0,  1590,   135,
     136,     0,   137,   138,   139,  1591,   141,   142,   143,     0,
    1592,  1593,  1594,  1595,     0,   149,   150,   151,   152,   153,
     154,     0,     0,   155,   156,   157,   158,  1596,  1597,   161,
       0,   162,   163,   164,   165,     0,     0,  1598,     0,  1599,
     169,   170,   171,   172,   173,  1600,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,     0,  1601,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,  1602,   196,
     197,  1603,   199,     0,   200,     0,   201,   202,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
       0,   212,   213,  1159,   215,   216,   217,   218,     0,   219,
     220,   221,     0,   222,   223,   224,     0,   225,   226,   227,
     228,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     237,     0,   238,   239,  1604,   241,     0,   242,     0,   243,
    1605,     0,  1606,   246,   247,     0,  1607,   250,     0,   251,
     252,     0,     0,     0,     0,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,  1608,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,     0,   276,
    1609,     0,   279,   280,   281,   282,   283,  1610,  1611,     0,
    1612,     0,   287,  1613,  1614,   290,  1615,   292,   293,   294,
     295,   296,   297,   298,     0,     0,   299,  1616,   301,  1617,
       0,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1619,  1620,  1621,   335,   336,   337,   338,     0,     0,   340,
     341,  1622,   343,     0,     0,   345,  1623,   347,   348,   349,
       0,   350,   351,     0,     0,   352,   353,   354,     0,     0,
     355,   356,     0,  1624,   359,  1625,     0,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   375,   376,     0,  1626,   379,   380,
       0,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,     0,   393,   394,   395,   396,   397,  1627,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,  1628,   420,   421,   422,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
       0,  1630,   437,   438,   439,   440,   441,   442,     0,   444,
     445,   446,     0,  1632,   448,   449,  1633,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,     0,   466,     0,     0,     0,   468,   469,     0,
     470,  1635,   472,   473,   474,   475,   476,     0,   477,  1636,
    1637,     0,   480,     0,   481,   482,     0,   484,     0,     0,
     486,   487,  1638,   489,   490,   491,   492,   493,     0,     0,
     494,   495,   496,     0,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,     0,  1640,   508,     0,   509,  1641,
     511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
       0,   520,     0,     0,   521,   522,   523,   524,   525,   526,
     899,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   538,   539,   540,   541,     0,     0,     0,     0,   121,
     122,   123,   124,     0,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,   136,     0,   137,   138,   139,     0,   141,
     142,   143,   900,   901,     0,   902,   903,     0,   149,   150,
     151,   152,   153,   154,     0,     0,   155,   156,   157,   158,
     904,   905,   161,     0,   162,   163,   164,   165,   906,     0,
       0,     0,     0,   169,   170,   171,   172,   173,     0,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
       0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   907,   196,   197,   908,   199,     0,   200,     0,   201,
     202,   203,   204,   205,   206,     0,     0,     0,   208,   209,
     210,   211,     0,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,     0,
     225,   226,   227,   228,   909,   230,   231,   232,   233,   234,
     235,   910,     0,   237,     0,   238,   239,   911,   241,     0,
     242,     0,   243,     0,     0,     0,   246,   247,   912,     0,
     250,     0,   251,     0,     0,     0,   913,   914,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,     0,   276,     0,   915,   279,   280,   281,   282,   283,
     916,   917,     0,   918,     0,   287,     0,     0,   290,     0,
     292,     0,   294,   295,   296,   297,   298,     0,     0,   299,
       0,   301,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   919,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   920,     0,   921,   335,   336,   337,     0,
     922,     0,   340,   341,     0,   343,     0,   923,   345,   924,
     347,   348,   349,     0,   350,   351,     0,     0,   352,   353,
     354,     0,     0,   355,   356,   925,     0,   359,     0,   926,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,   373,   374,     0,     0,     0,     0,   375,   376,   927,
       0,   379,   380,   928,   382,   383,   384,     0,   385,   386,
     387,   388,   389,     0,     0,   392,     0,   393,   394,   395,
     396,   397,   929,   399,   400,   401,   402,     0,   403,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,     0,   420,   421,   422,   930,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   931,   444,   445,     0,     0,     0,     0,   449,   932,
     451,     0,     0,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   933,   466,   934,     0,     0,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,   477,   935,   936,     0,     0,     0,   481,   482,   937,
     484,   938,     0,   486,   487,   939,   489,   490,   491,   492,
     493,     0,     0,   494,   495,   496,     0,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,  1520,   941,   508,
       0,   509,     0,   511,     0,   513,   514,   515,   516,     0,
     518,   519,     0,     0,   520,     0,     0,   521,   522,   523,
     524,   525,   526,   942,   943,   944,   945,   946,   947,   948,
     949,   950,   951,   952,   538,   539,   540,   541,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     3,     4,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     0,     0,     0,     6,     0,
       0,     0,     0,     8,     0,     0,     0,     7,     0,     0,
       0,     0,     0,     0,    10,     0,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,    11,     0,   778,     0,
       0,     0,    10,     0,     0,     0,     0,     0,     0,    13,
       0,     0,     0,     0,    11,     0,   778,     0,     0,     0,
       0,     0,     0,     0,    14,    15,     0,    13,     0,     0,
       0,     0,     0,     0,     0,     0,   779,     0,     0,     0,
       0,     0,    14,    15,    18,     0,     0,     0,     0,     0,
       0,     0,    19,     0,   779,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,     0,     0,     0,     0,    22,
      19,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    22,     0,     0,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1645,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1645,     0,     0,     0,     0,
       0,     0,     0,     0,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,    28,     0,     0,     0,     0,     0,
      29,     0,     0,    30,     0,     0,     0,     0,     0,     0,
      26,    27,    28,     0,     0,     0,     0,     0,    29,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,    33,     0,    32,     0,     0,     0,     0,    34,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,    36,     0,    34,     0,     0,
       0,     0,    35,     0,     0,     0,     0,    37,     0,     0,
       0,    38,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,    38,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
      39,    42,     0,     0,     0,     0,    43,     0,     0,     0,
       0,   780,     0,    40,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,     0,     0,    45,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   781,     0,     0,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   880
};

static const yytype_int16 yycheck[] =
{
       7,     8,   542,   774,     0,    46,    13,   989,     0,    90,
    1071,     0,    19,     0,   773,     0,    23,  1016,    25,    38,
     868,   781,    29,    30,    31,  1090,    46,    34,     0,   842,
      37,    38,     7,     0,    41,  1000,   976,    44,    45,     0,
       0,  1815,     0,     0,  1330,    37,  1329,  1131,    23,  1535,
      92,    93,  1260,    20,  1769,  1343,  1079,    16,  1021,    20,
    1053,  1304,     7,  1741,  1317,  1687,  1741,    20,    23,  1079,
    2278,  2376,  2280,  1179,  2321,  1410,  1079,  2247,    23,  1309,
    1581,  2307,  1306,    94,  1385,    92,    93,  2805,  2805,   893,
    2250,    94,  1920,  1079,  1661,   114,  2490,  2119,  2844,   106,
    1267,     0,     0,     0,   111,   112,   113,   114,   115,  1057,
    1334,    17,     0,     0,   106,  2842,  1071,    92,    93,     0,
       0,  1071,  1187,     0,  2306,     0,     0,    45,  1225,     0,
       0,     0,    23,  1230,  1099,     0,     0,    92,    93,  2244,
       0,     0,     0,  2867,     0,  2642,  2860,    92,    93,     0,
       0,   780,  2443,  1437,   781,  2424,  2425,  2426,  2713,  3210,
    2761,  1722,  1723,   838,  2765,  3341,  1945,  3226,   843,  1773,
       0,     5,     5,    34,     0,  1236,     0,     0,  3229,    17,
    2372,    13,    14,     5,  1833,    57,     0,    40,     5,   799,
    2095,    13,    14,     5,  2062,  2455,     5,     9,    82,  1835,
       5,    92,    93,  2108,     5,  2120,     9,  2456,     9,     3,
    2451,     5,     5,     5,     9,     5,     5,    65,  2455,     5,
      26,    13,    14,    13,    14,     5,     5,     5,     5,     5,
       5,     5,     5,    13,    14,  1939,  1088,    13,    14,     5,
     989,     5,   991,  3452,   993,     5,  1942,    13,    14,    47,
      47,   888,    13,    14,   177,   121,  1206,  1318,    76,     4,
    1321,  1322,    31,    84,     9,   178,     8,    17,  1352,  1082,
      39,  2463,  1271,  1077,    95,    17,   102,  1361,  1243,    11,
      65,    65,    11,    31,    16,    47,  1236,    16,   102,    11,
       3,    39,   144,   971,    16,   835,     3,     4,     5,   177,
    2592,    84,     9,  3182,     5,   177,   126,   109,   305,   177,
      47,  1071,    95,   124,     9,   253,    48,    31,   210,     4,
     124,    65,    35,    36,     9,    39,    48,   109,  3063,  2521,
    2522,   234,  2524,   324,   229,    11,   183,   152,   971,    15,
      16,   305,  1550,   297,  3008,   885,  3010,  1132,   299,   135,
      82,  3340,   167,  3337,   142,  2701,   174,   172,   198,   324,
      82,   300,  2708,  2709,  2710,   178,   285,  2575,  1318,  3685,
      11,  1321,  1322,  1581,    15,    16,  3552,  3553,  1631,   165,
      11,  2689,  1186,  2691,    15,    16,  3327,   152,  3329,   119,
      11,  1726,   383,   405,    15,    16,   300,  1153,  1154,   124,
     121,    11,   249,   282,  3746,  2775,    16,    48,  1083,    31,
     225,   382,   119,   200,  1170,   140,   220,    39,   124,  1418,
    1095,  2690,   169,   109,   474,   267,   268,    48,   169,    11,
      43,   246,   110,  3484,    16,  3932,  1429,   200,    48,  2267,
     122,    82,   450,  1072,    31,  1293,  1294,  3164,   326,   327,
     328,  1236,  1392,   373,    31,   122,   499,   288,   167,   526,
     225,    82,   396,   176,    34,   178,    48,    11,  2032,  2774,
     537,  1132,    82,   299,    11,  3221,    73,    74,  2717,  2718,
     523,   296,   106,   403,   474,   299,  3232,   537,  1157,  1452,
     305,    61,   239,  1297,   502,   387,  3223,   281,   284,  2063,
      82,  3998,  2749,   289,  1173,   318,   398,   171,   294,  1459,
    1460,   188,    84,  2883,   220,   128,   322,   323,   396,   226,
     202,   199,   340,    95,   447,   537,   374,    27,  2633,   177,
     468,  1637,  1317,    33,  1869,   202,  3878,   246,    82,   280,
     305,   532,   249,   435,   541,    82,    25,   537,   135,   375,
     392,   393,   471,  2088,  2089,  2090,   563,   435,   135,   289,
    3549,   375,   569,  3879,   188,   572,   537,   532,   289,  3510,
     562,  3450,  2250,   580,  3558,  2250,   364,   541,  1114,  2771,
     411,  2773,  1118,   537,  3643,   372,   537,    92,   289,   374,
     374,   469,   439,  3257,   441,   281,   488,   410,   537,   537,
     504,   407,   480,   526,   410,   387,   369,   541,   487,  2917,
     476,  2112,   407,  2873,   339,  2856,   539,  1295,   486,   403,
    1863,   468,  2244,  1924,   537,  1410,   447,   132,   422,   423,
     374,  1268,  2881,   435,   432,   432,  2873,  3846,   541,   118,
     140,  2933,   448,   495,  1254,   414,  2668,   465,  3824,   464,
     484,   535,  1192,   548,   474,   539,  1317,   281,   617,   537,
     471,  3396,  1295,  2531,   447,   537,   414,   471,   501,   455,
     432,   335,  1443,   499,  1960,  1527,  1528,  1436,  2327,  3025,
     466,  1533,  1441,  2588,   537,   499,   492,  1771,  1447,  2024,
     523,   529,  2328,   541,  1454,   432,   501,   537,  2320,   464,
     414,  2036,  2894,   537,   537,   537,  2310,  1555,  1992,  2488,
     540,   541,   538,   537,   540,   537,   540,   540,   523,  2007,
     537,  2282,   544,  1571,   538,   537,   540,   544,   537,  1679,
    3789,  2066,   537,   536,  3452,  3452,   537,  1541,  2073,  3790,
     781,  1691,   535,  1693,   537,   537,   539,   537,   537,  1410,
    1715,  1716,  1717,  3467,  2458,   110,   541,   537,   537,   537,
     537,   537,   537,   537,   537,   471,   773,   774,   775,  2465,
    1720,   537,   485,   537,  2109,  3080,   537,   537,  2113,   529,
    3956,    27,   524,   528,   529,   407,  3546,   529,  3548,    42,
    3345,   833,   833,   535,  3033,   537,  3087,   474,   191,   447,
    3401,   533,  3299,   303,   533,  3406,    55,  2142,   815,   816,
     281,   533,   317,   780,   499,   822,  2117,   824,  3212,   780,
     444,   528,   529,    55,  1453,   258,   833,  1454,   781,  3802,
     837,   838,  1893,   528,   529,   842,   843,   299,   523,   880,
    1596,  1597,  1903,   528,   529,  1906,  1631,   822,   855,   856,
     857,   284,    66,   860,   530,   531,   532,   533,   833,    77,
    1664,  1665,    76,   870,   871,  1621,   873,  2075,   875,   888,
    1674,   371,   883,  1548,   121,   346,    26,   822,   833,  3061,
     883,   888,  1832,  1833,  1688,  1969,  2908,   894,   833,   530,
     531,   532,   533,   135,   140,   976,  3642,   528,   529,   530,
     531,   532,   533,   403,  2112,  3109,  1888,   528,   529,   530,
     531,   532,   533,   425,  1718,    13,    14,  2592,   528,   529,
     530,   531,   532,   533,    11,   110,  1682,  1683,   181,  3689,
      38,   822,  3201,   182,  1603,   440,  3660,    85,   891,   435,
     119,  1726,   833,  1893,   537,  3659,   965,  2008,   530,   531,
     532,   533,   201,  1903,  1623,   962,  1906,   206,   965,   966,
     353,    48,  3067,   153,   960,  2987,  3939,   214,   960,   201,
    1631,   960,     0,   960,   206,   960,   894,   477,   490,  1738,
      42,  1921,  1922,  1923,  2268,  2193,  2083,  1950,   960,  1529,
     383,  1660,  2820,   960,  2822,    82,   245,  1990,   177,   960,
     960,  1994,   960,   960,  1997,   153,  1013,  1014,   274,   870,
     871,  2633,   873,   245,   875,  1022,  3208,   207,   108,   253,
     526,   135,  1029,  1030,  1031,  1032,  1033,  2942,  3710,  3711,
    2945,  3644,  2947,   539,   281,   249,    84,   284,  1045,    27,
    1047,  2576,  2577,  2578,  2579,    33,   501,    95,  3114,    76,
     540,  1999,   294,  2008,  3800,  3943,  3122,   303,  2008,  3786,
    1080,   960,   960,   960,  1106,  1726,   332,  2553,   523,   154,
     178,  1113,   960,   960,   172,  1082,  1083,   253,  1085,   960,
     960,  1088,   434,   960,  1869,   960,   960,  1094,  1095,   960,
     960,   960,   119,  1100,  2655,   960,   960,   382,   383,  1106,
     960,   960,   960,  3497,   960,  1072,  1113,  3412,   216,   960,
     960,  1072,  1861,  2399,   485,  1021,  1123,  2284,  4006,   181,
    2287,   473,  3804,   208,   232,   371,  2427,   373,  3846,  3846,
    2697,  1106,  2467,  1140,   313,   243,   532,   221,  1113,  1888,
    1899,   253,  2350,   539,  3871,  1904,  1187,   326,   327,   328,
     183,  1106,   140,   387,    38,   541,   532,   403,  1113,  1908,
     409,  1106,   135,   539,  1913,   253,  3392,   235,  1113,   259,
     284,  2999,   322,   323,   284,  3788,  2126,   409,  3791,   269,
     294,     5,  1189,  2805,  2408,  2037,  2038,  2039,  2040,  2041,
    2042,  3361,   165,  2045,  2046,  2047,  2048,  2049,  2050,  2051,
    2052,  2053,  2054,   537,   119,  3365,  3410,   358,  1869,  2274,
     525,   387,   167,   281,   284,  1106,   249,   396,  1104,   289,
     535,  1665,  1113,   870,   871,  3429,   873,    27,   875,  3251,
    1674,  3977,  1191,    33,   468,  1242,  1122,   354,  1245,  2024,
    1126,   501,  1262,   536,  2474,    13,    14,   398,  2008,  1268,
    2480,  2036,  1259,  1260,   179,   548,   435,   284,  2933,   235,
     410,  1268,   289,   523,   253,  1276,  1277,  2071,  1279,   525,
     378,   110,  2607,  1276,  1277,   387,  1279,   537,   179,   535,
      61,  2066,   352,   198,   435,  1292,   354,   537,  2073,   397,
     469,   246,   468,  1300,   178,   536,  1303,  1304,   448,   387,
    3641,   480,  1109,   537,   186,   281,  3647,   548,  1115,  1316,
     369,   284,  3617,   340,  1333,   303,   289,   135,  3931,     5,
     499,   294,    13,    14,  2109,   183,  1333,   253,  2113,   254,
    1337,  2281,   216,   360,  2119,  1342,   815,   488,   406,  2279,
     140,   296,   492,   394,   523,   501,    84,   165,   232,   535,
    2154,   537,   210,   254,   387,   358,   468,  2142,   537,   243,
       4,   537,   535,  2024,  3465,     9,   539,   523,   847,   284,
     210,  3472,   110,  2225,  2226,  2036,  2326,  2327,   394,   367,
     468,   537,  2590,   371,     4,  2593,  2379,     4,  2381,     9,
     260,   249,     9,   872,  1401,   398,   177,  1404,   387,   439,
     453,   441,     4,   471,  1411,  2066,   439,     9,   441,     4,
    2911,    42,  2073,  1409,     9,   403,  3586,   435,  1425,    11,
    1409,   135,  1409,   542,  1409,   537,  2230,   546,  3588,  1436,
     406,    62,   435,   358,  1441,   468,  1443,  1444,   465,  1446,
    1447,   179,   128,   129,   488,  3067,   304,   474,  2109,   537,
     186,   165,  2113,    13,    14,  2454,    48,   358,  2119,   167,
    1540,   387,  1542,  1543,   172,   538,   284,  1426,   541,   391,
    2805,   289,   210,   398,    13,    14,   294,   108,   109,   468,
     538,  2142,   455,   541,    31,   488,  1453,   966,   119,   477,
      82,   177,  1453,   466,   378,   471,   538,   398,   394,   541,
    2493,  1454,  2788,   303,  2787,   188,   537,  2355,   191,   135,
     435,  2015,  1471,   397,   538,  2019,   254,   541,  2022,  1561,
    1527,  1528,  1564,   439,   537,   441,  1533,  1569,  1535,  2772,
    1572,  2819,  2638,  2639,   435,  1577,    13,    14,   246,   165,
      87,  1548,   468,  1550,  1551,   326,   327,   328,   537,    96,
     181,  1558,   537,  2836,  1561,   535,  2786,  1564,  2788,   539,
    1535,     8,  1569,   488,    11,  1572,   172,   367,    15,    16,
    1577,   371,  1579,   120,  1581,   289,   537,  2642,   209,   167,
     294,   439,   538,   441,   172,   541,  1561,   488,   296,  1564,
    1535,  2614,  1071,   538,  1569,   535,   541,  1572,   537,   539,
    1079,    48,  1577,   403,   537,  2615,  1561,   465,    55,  1564,
     468,   537,  2615,  2616,  1569,   396,  1561,  1572,   537,  1564,
      27,   535,  1577,   537,  1569,   539,    33,  1572,   259,  2615,
    2616,  2617,  1577,   538,   537,    82,   541,   455,   269,   177,
     326,   327,   328,   538,  1535,   499,   541,   501,   466,   387,
     281,   198,   538,   284,   435,   541,    13,    14,   246,  3964,
     398,  2611,  2612,   289,   211,   196,   197,   530,   294,  1661,
    1561,   538,   537,  1564,   541,  3883,   538,   477,  1569,   541,
    1687,  1572,  2467,   314,    13,    14,  1577,  3365,   469,  1661,
    3365,   537,  1699,  3940,  1661,  3942,   439,   435,   441,   480,
    1661,  1661,  2506,  1661,  1661,    13,    14,  3915,   296,  3731,
     396,  3539,   538,  3541,  2698,   541,   537,  1196,  2702,  2703,
    2704,   459,   408,    27,  2382,   538,  2384,  1206,   541,    33,
     537,  1738,    27,   140,  1741,   182,   267,   268,    33,     6,
    2499,   455,   373,    10,   439,   431,   441,  2507,  1227,   435,
     488,    18,   466,  2771,   201,  2773,   537,  1236,  4005,   206,
     538,   538,   523,   541,   541,    32,  1741,   398,   538,    36,
     537,   541,   538,  2738,   538,   541,  1735,   541,  1785,   968,
    1787,   970,  1789,   469,     8,  3993,   538,    11,   419,   541,
     421,    15,    16,   424,   480,  3130,  4004,  1804,   245,  1806,
    1807,  1808,    13,    13,    14,   231,  2467,  1818,    19,   520,
    3832,   539,    27,   499,  1821,  1818,    13,    14,    33,    30,
    2672,  2673,  2607,   538,    48,   538,   541,   299,   541,   455,
    3452,    55,   539,    44,    45,  1788,   140,   523,  3081,  1846,
     466,  1848,  3128,   520,   528,   140,   530,   855,   856,   857,
     538,   537,   860,   541,   301,  2805,  1863,  1864,    82,   543,
     544,   392,   393,   538,    13,    14,   541,  1874,  1875,  1876,
    1877,  2870,  1879,   538,   421,   176,   541,   424,  1885,   538,
    1887,   538,   541,  2668,   541,   538,  2826,  2850,   541,    42,
    3605,   541,  1899,  1900,  2887,   537,   303,  1904,  1905,    13,
      14,   112,  1909,  1910,  1911,  1912,   537,  1914,  1915,    62,
    3588,  3164,    13,  3588,   257,  2763,  3000,  3205,    19,  1878,
     538,  1880,   538,   541,  1931,   140,   150,   538,   538,    30,
     541,  1938,    13,    14,  1941,  1942,  1943,  1944,  1945,    13,
      14,   538,  1949,    44,    45,   538,  2607,   538,   541,   177,
     541,   538,   177,   304,   541,   108,  1963,    61,   182,  3294,
     367,   537,   409,   538,   371,   538,   541,   538,   541,   538,
     541,   538,   541,  1965,   541,   436,   538,   201,  1985,   541,
    1987,   186,   206,   538,    76,   538,   541,   520,   541,   538,
      82,  1470,   541,  2943,   538,   538,   403,   541,   541,   303,
      13,    14,   231,    95,    13,    14,   157,  2668,   303,   183,
     157,   112,    13,    14,   367,  3501,   157,  3352,    13,    14,
    2805,   245,    13,    14,    13,    14,   157,   119,   157,   121,
    2037,  2038,  2039,  2040,  2041,  2042,   210,    42,  2045,  2046,
    2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,    13,    14,
      13,    14,   435,  2905,  2096,   538,   209,   537,  3119,    42,
    2102,    13,    14,   367,    13,    14,   284,   371,  2075,   488,
     477,    91,   367,   157,   521,   249,   371,   301,    13,    14,
    2087,   528,   529,   530,   531,   532,   533,   503,   303,  2096,
     382,   383,   382,   383,   157,  2102,   382,   383,    57,   403,
    2107,   326,   327,   328,   539,  2112,   259,  3881,   403,   271,
     272,  3885,   392,   393,  2121,  2122,   269,  3452,   322,   323,
     157,  2096,   214,  2908,   479,   480,   157,  2102,   281,   299,
     304,  2485,  2486,  2312,  2313,   152,  3893,  3894,  3131,  3132,
     447,  2096,  3949,  3950,  2805,   104,   369,  2102,  1239,  1240,
     167,  2096,   367,   537,   437,   172,   371,  2102,   537,   537,
     537,   314,   538,   227,   232,   309,   125,   537,   537,  3119,
     232,   396,   232,   477,  3124,    42,   306,   244,   537,  2938,
    3463,     5,   477,     5,   336,   409,  2193,   146,   403,  2230,
    2197,   150,   284,   537,     5,  2202,   537,   289,   537,   537,
       5,  3266,  2987,   537,  3978,  2096,     5,   537,   225,     5,
     435,  2102,     9,   387,   173,   537,   537,   176,  2225,  2226,
     373,  3171,  3172,   500,  3846,   311,   541,   106,    38,   246,
     541,   227,   538,    42,    44,   194,   403,  2244,   172,   296,
     172,   294,    61,  2250,   469,   398,   244,  2908,   340,   537,
    3102,   447,   537,    95,   541,   480,   447,    61,    61,   447,
    3746,   447,   477,   274,   110,   439,   419,   441,   360,   548,
    2277,   229,   447,   499,   499,  2250,   447,   186,   394,   296,
    2300,   157,  2289,   537,   102,   459,    42,   284,   305,   537,
     284,   465,   284,   103,   468,  2302,   284,   521,   523,  2306,
    1779,   152,  2277,   284,   528,   529,   530,   531,   532,   533,
     206,   177,   537,   157,   157,  3801,   167,  3525,   539,    13,
     177,   172,  2277,   496,   538,   538,  2987,  2302,  1807,  1808,
     289,   538,  2277,   541,   232,   538,   538,   538,   297,   538,
     232,  3100,   537,  2350,   291,  3130,  2353,  2302,   291,  2356,
     537,  3639,   537,    41,     9,   539,   484,  2302,   541,   537,
     319,   537,   539,   495,    11,  2372,   445,   445,   178,   580,
     369,   537,   537,   465,   225,   445,   537,   537,   188,  3164,
     537,   536,   474,   541,   548,   538,  2277,   541,   289,   545,
     188,   537,  3878,   352,   168,   246,   447,   177,  3250,   541,
     538,   526,   474,   274,   225,   183,   216,   541,   235,   300,
     324,  2302,   324,   406,   541,   541,   188,   538,   537,   227,
    2461,   235,   232,  2382,  2383,  2384,   284,   305,   235,   345,
     488,  3430,   210,   243,   297,   537,  2443,  1916,   537,   157,
     157,   157,   183,  2450,   499,   296,   436,   464,   157,    42,
    1929,  1930,   541,  2449,   305,   157,  2463,  2464,  2465,  2466,
    2449,   541,  2449,     3,  2449,   299,  3251,   277,   537,  3130,
    2477,   249,  2479,     3,   299,  2482,    42,    61,   284,   580,
     177,  2488,    11,    42,   538,  2492,   172,  3247,   538,   299,
    3440,  3441,  2499,   538,   538,   537,   537,   188,   537,   172,
       3,     3,  3452,  3164,    41,   535,   535,   447,   249,  3294,
     447,  3846,   538,   536,  2521,  2522,   326,  2524,   535,   447,
     447,   538,   539,   333,   538,   541,   304,   545,   538,  2008,
     538,  2490,   539,   520,   538,  2014,   520,  3385,   538,   153,
     177,   520,   447,   160,   258,     9,  2553,   325,   496,    42,
     496,    61,   538,   538,   526,   537,  2515,   486,   538,   537,
     537,   537,   537,  3849,   775,   522,  2573,  3352,   378,   347,
     541,   300,   300,   541,  2581,  2582,  2583,   471,  2553,    61,
     252,    61,   274,  2590,   325,  2592,  2593,   397,   447,   284,
    3251,   210,  2599,   537,   157,   157,   157,   447,   447,   447,
    2619,  2642,  2683,  3362,   291,   538,   347,   447,  2553,   387,
     291,   537,  2619,   464,   537,    42,   394,   537,   369,   538,
     541,   297,   299,     8,   499,    42,  2633,   544,   289,   157,
      15,    16,   538,  3294,    19,    20,    21,  2678,   177,   538,
     537,    61,  3607,   538,     8,   538,   387,    11,   537,   193,
     172,    15,    16,   394,    38,    19,    20,    21,    82,   469,
      44,   439,  2553,   441,   474,  2672,  2673,  3452,   538,   538,
     535,   148,   206,   774,   775,  3523,   538,   541,   538,   177,
     548,   459,   537,   894,   535,   538,   310,   465,   539,   541,
     468,  3352,   537,    85,   300,  2715,  2716,   538,   439,   537,
     441,   375,  2722,   542,   188,  2697,   538,  3511,   157,  3513,
     541,   181,   538,  3526,   537,  3528,   459,  3569,  3570,   103,
     537,  2728,  2763,   538,   436,  2697,  2733,   468,   541,    42,
    2697,    88,  2739,    42,    42,   537,  2697,  2697,   538,  2697,
    2697,    42,   537,  2735,   538,   177,   539,   538,   474,  3748,
    2757,  3816,   541,    62,  2761,   537,   498,   538,  2765,  2766,
    2767,   538,   206,   538,  2771,  2772,  2773,   536,  2775,  3709,
     536,   541,     9,   538,   538,  3757,   538,   538,     8,   536,
     538,    11,   528,   536,   311,    15,    16,  2794,   537,  2796,
     538,  3452,   299,   894,   178,   480,   526,    61,   538,   108,
     538,   538,  2809,  2810,  2811,  2812,  2813,  2814,  2815,  2816,
    2817,  2818,   212,   538,   119,   499,     8,    42,    48,    11,
     235,    90,   537,    15,    16,    55,   199,    19,    20,    21,
     289,   289,   216,   539,   539,  2842,   539,   447,  2879,   539,
     539,  2848,   206,  2802,  2851,   447,   539,  2806,   232,  2808,
     539,  2843,    82,  2849,  2861,  3703,    48,   539,   536,   243,
    2849,  3713,  2849,    55,  2849,   229,    42,   526,   539,   539,
     539,   539,   181,   539,   539,   539,  2883,   539,    42,   539,
    2872,   539,  3734,  3735,   536,   539,   539,  2894,   539,  2930,
      82,   539,   538,   277,     8,   539,  3846,    11,  2905,   539,
     209,   539,    16,   539,  2911,    19,    20,    21,   539,   539,
    2389,  2918,  2919,  2920,  2921,   299,   301,   539,   539,   539,
     150,   539,   538,  2930,   537,   284,  2933,   538,   537,   541,
    2937,  2938,   109,   537,    48,   499,   435,   301,   299,  2946,
     537,    55,   326,     9,   349,   368,  3731,   537,   537,   333,
     259,    61,   182,   541,   541,   538,   538,   206,   536,   199,
     269,   542,  2441,   177,   541,  3007,    11,  2974,    82,  2976,
     445,   201,   281,   289,   447,   479,   206,     8,    93,   360,
      11,   541,  2461,     8,    15,    16,    11,   538,   537,    42,
     182,    16,   157,   539,   378,   538,   126,   538,  3005,  1100,
    3007,   346,   236,   157,    42,   314,   538,   383,   383,   201,
      42,   474,   538,   397,   206,   245,  3057,    48,   537,   537,
      42,   541,  1123,    48,    55,   537,   319,   101,  2507,   525,
      55,   520,  3007,  3040,  3041,  3042,  3043,   177,  2517,  3798,
    2519,   447,   537,   537,  2523,   289,  2525,  3832,  1259,   257,
    3057,    82,  3007,   245,  3061,   538,   198,    82,   474,    31,
    3067,  3846,  3007,   459,   373,   206,   537,    76,   182,   302,
    3731,   301,    76,     9,  3081,    82,   538,   538,   385,   536,
    3087,   537,   536,   538,    61,   469,   538,   201,  1189,   398,
     474,   177,   206,  3100,  3101,  3102,   537,   545,    95,   313,
       8,  3108,   136,   281,   526,    13,   299,   459,    16,   301,
     419,    19,   326,   327,   328,    42,  3007,    25,  3125,   150,
     538,    29,    30,    31,   436,   150,    34,    42,    85,    37,
      38,   245,   302,    41,   537,   302,    44,    45,    46,   524,
     525,   526,  3682,   528,   529,   530,   531,   532,   533,   537,
     479,   182,   538,   212,   299,   538,   538,   182,  1259,  1260,
     524,   525,   526,   299,   528,   529,   530,   531,   532,   533,
     201,  3832,   537,   152,   537,   206,   201,   546,   538,   409,
     542,   206,   396,   403,   124,  3846,   471,   301,   537,   153,
      25,   382,   415,   541,    37,   538,   382,  3204,   106,   307,
     537,  3208,   130,   111,   112,   113,   114,   115,   360,   537,
     960,  2789,  3124,  1886,   245,  2377,  3223,   409,  2802,  1789,
     245,   435,  2420,  1341,   816,  3266,  1930,  2447,  2515,  3247,
    2838,  3763,  3224,  1444,     8,  1446,  3243,    11,  3925,  3423,
    3859,    15,    16,  3250,  3850,    19,    20,    21,  3918,  3486,
    2370,  2383,   156,  3212,  4025,   469,    38,  1304,  2861,  3848,
    2781,  3857,    44,  4034,  2367,  2808,   480,  3845,  2485,  3276,
     301,  2486,  1405,   177,  2740,  3282,   301,  1436,  2494,  1999,
    3680,  3609,  3289,  2739,  3801,   499,   128,   129,  3742,  3963,
    2448,   521,  3863,  4027,  4033,   409,  4012,  4035,   528,   529,
     530,   531,   532,   533,  1454,  3998,  3868,  3974,  4030,   523,
     966,  2715,   821,  2299,  3559,  3712,  2300,  3324,  3956,  3336,
    3955,   103,  2722,   537,  2697,  2319,  2805,  2353,  1259,   521,
    1857,  1286,   524,   525,   526,   177,   528,   529,   530,   531,
     532,   533,  1443,  1444,  1285,  1446,  3353,  3354,  3355,  3356,
    3357,  3358,  3359,  1105,  3810,  3362,  3363,  3364,  3365,  2838,
    1105,  3368,  2574,  1821,  3371,  2336,  3691,  3374,  3375,  3376,
    3377,  3378,  3379,  3380,  3381,  3382,  3383,  3515,   409,  3386,
    1856,  1288,    23,  2933,   409,  2302,  2107,  3289,   833,   822,
    3365,  2599,  2553,  1083,  3401,  2552,   178,  3444,  2122,  3406,
    1079,  2008,  3695,  2008,  1079,  2008,  3694,   521,  2202,  2631,
     524,   525,   526,  2320,   528,   529,   530,   531,   532,   533,
    2976,  2156,   326,   327,   328,  3432,  2652,  3050,  2204,  1079,
    1079,   106,   206,  1556,   216,  2115,  1079,  1079,  1079,   879,
    1079,  1788,    -1,    -1,  1079,    -1,  3453,  3454,    -1,  1550,
     232,  3471,    -1,    -1,    -1,   229,    -1,    -1,  3465,    -1,
      -1,   243,    -1,    -1,    -1,  3472,    -1,    -1,    -1,    -1,
    3477,    -1,  3479,    -1,    -1,    -1,  3483,  3469,  1579,    -1,
    1581,    -1,    -1,    -1,   326,   327,   328,    -1,    -1,    -1,
     521,  3498,   396,    -1,  3501,   277,   521,   528,   529,   530,
     531,   532,   533,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,  3521,    -1,    -1,   299,  3525,  3526,
      -1,  3528,    -1,    -1,    -1,    -1,  3501,   301,    -1,    -1,
      -1,   435,  3011,    -1,  1132,    -1,    -1,    -1,  3497,    -1,
      -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,
       8,   333,    -1,    11,   396,    -1,  3501,    15,    16,    -1,
      -1,    -1,  3569,  3570,    -1,   469,   408,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   480,    -1,  3585,    -1,
    3587,  3588,  3589,    -1,    -1,    -1,    -1,    -1,    -1,   431,
      48,    -1,    -1,   435,    -1,   499,   378,    55,    -1,    -1,
      -1,    -1,  3609,    -1,    -1,    -1,    -1,    -1,  1132,  3616,
    3501,    -1,    -1,  3588,  3606,   397,  3608,    -1,    -1,   523,
      -1,    -1,    -1,    -1,    82,    -1,    -1,   469,    -1,    -1,
      -1,  3651,    -1,   537,  3654,    -1,    -1,    -1,   480,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
    3657,    -1,    16,  1864,    -1,   563,    -1,   499,    -1,  3618,
      -1,   569,    -1,  1874,   572,  1876,  3658,    -1,  1879,    -1,
      -1,    -1,   580,    -1,  1885,    -1,  1887,    -1,    -1,    -1,
      -1,   523,  3674,    -1,    48,    -1,    -1,   469,  3695,  1900,
      -1,    55,   150,    -1,  1905,   537,    -1,    -1,  1909,  1910,
    1911,  1912,    -1,  1914,  1915,    -1,  3713,    -1,    -1,   617,
      -1,    -1,    -1,  3720,    -1,    -1,  3723,  3724,    82,  1317,
      -1,    -1,    -1,    -1,   182,  3732,    -1,  3734,  3735,    -1,
      -1,    -1,  3739,    -1,    -1,    -1,    -1,    -1,    -1,  3746,
      -1,  3220,    -1,   201,    -1,    -1,    -1,  1848,   206,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,    -1,  1864,    -1,    -1,    -1,    -1,  3247,    -1,
      -1,  3746,    -1,  1874,    -1,  1876,    -1,  3784,  1879,  3786,
      -1,    -1,    -1,    -1,  1885,    -1,  1887,   245,    -1,    -1,
      -1,  3798,  3799,  1317,  3801,  3802,    -1,    -1,    -1,  1900,
      -1,  3746,    -1,  3810,  1905,    -1,    -1,    -1,  1909,  1910,
    1911,  1912,  1410,  1914,  1915,    -1,    -1,    -1,   182,    -1,
    3827,  3828,    -1,    -1,  3831,    -1,  3801,    -1,  3835,    -1,
      -1,  3838,  3839,    -1,    -1,  3842,    -1,   201,    -1,    -1,
      -1,    -1,   206,   301,    -1,    -1,  3866,    -1,  3868,  3328,
       8,    -1,    -1,    11,    -1,  3746,  3801,    15,    16,    -1,
      -1,    -1,    -1,    -1,  3871,   773,   774,   775,    -1,    -1,
      -1,  3878,  3864,   781,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   245,    -1,    -1,    -1,    -1,  1410,    -1,    -1,  3848,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,  3908,  3909,  3878,    -1,  3912,    -1,   815,   816,    -1,
    3801,    -1,    -1,    -1,    -1,    -1,   824,  3937,    -1,    -1,
      -1,  3913,    -1,    -1,    82,  3932,    -1,    -1,    -1,   837,
     838,    -1,  3939,  3878,   842,   843,    -1,   301,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   855,   856,   857,
      -1,   409,   860,    -1,  3974,    -1,  3963,    -1,    -1,    -1,
      -1,     8,   870,   871,    11,   873,    -1,   875,    15,    16,
      -1,    -1,    -1,  3452,  2075,  3040,  3041,  3042,  3043,    -1,
     888,    -1,    -1,  4003,    -1,    -1,   894,  3878,    -1,    -1,
      -1,  3998,   150,  4000,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    48,    -1,    -1,    -1,    -1,  2107,    -1,    55,    -1,
      -1,  2112,    -1,    -1,    -1,    -1,    -1,    -1,  4025,    -1,
    4027,    -1,  4029,    -1,   182,    -1,    -1,  4034,   128,   129,
      42,    -1,    -1,  1631,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   201,    -1,   409,    -1,    -1,   206,    -1,
      62,    -1,    -1,     8,   962,    -1,    11,   965,   966,    -1,
      15,    16,    -1,   521,    19,    20,    21,    -1,    -1,    -1,
     528,   529,   530,   531,   532,   533,    -1,   177,  2289,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,   245,    -1,    -1,
      -1,   999,  2193,    -1,  1002,    -1,   108,    -1,    -1,    -1,
      -1,  2202,    -1,   150,    -1,  1013,  1014,  1631,    -1,    -1,
      -1,    -1,    -1,    -1,  1022,    -1,    -1,    -1,    -1,    -1,
      -1,  1029,  1030,  1031,  1032,  1033,    -1,    -1,  1726,    -1,
      -1,    -1,    -1,    -1,    -1,   182,    -1,  1045,    -1,  1047,
      -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,  1057,
      -1,    -1,    -1,    -1,   201,    -1,    -1,   521,    -1,   206,
      -1,  3640,    -1,  1071,   528,   529,   530,   531,   532,   533,
      -1,    -1,  1080,    -1,  1082,  1083,    -1,  1085,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1094,  1095,  2289,    -1,
      -1,    -1,  1100,  1132,    -1,    -1,    -1,   209,   245,    -1,
      -1,    -1,  1726,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,  1123,    11,    -1,    -1,    -1,
      -1,    16,    -1,  1131,  1132,    -1,   326,   327,   328,    -1,
       8,    -1,  1140,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,   259,    -1,  2350,
      -1,   409,    -1,    48,   301,  2356,    -1,   269,    -1,    37,
      55,    -1,    -1,    -1,    -1,    -1,  2477,    -1,    -1,   281,
      -1,  1869,    -1,    -1,   229,    -1,    -1,    -1,    -1,    -1,
      -1,  1189,    -1,  1191,    -1,    -1,    -1,    82,  3353,  3354,
    3355,  3356,  3357,  3358,  3359,    -1,   396,    -1,  3363,  3364,
      -1,    -1,   314,  3368,    -1,    -1,  3371,    -1,   408,  3374,
    3375,  3376,  3377,  3378,  3379,  3380,  3381,  3382,  3383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   431,    -1,    -1,  1242,   435,    -1,  1245,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1869,   301,    -1,    -1,    -1,
      -1,  1259,  1260,    -1,  1262,   150,   456,    -1,    41,    -1,
    1268,   373,   409,   521,    -1,    -1,    -1,  3846,    -1,   469,
     528,   529,   530,   531,   532,   533,  2477,    -1,  1317,    -1,
     480,    -1,    -1,    -1,    -1,    -1,   398,   182,    -1,    -1,
       8,    -1,  1300,    11,    -1,  1303,  1304,    15,    16,   499,
      -1,    19,    20,    21,    -1,    -1,   201,   419,  1316,  1317,
      -1,   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,   523,    -1,  1333,  2024,    -1,   111,  1337,
     113,    -1,   115,    -1,  1342,    -1,    -1,   537,  2036,    -1,
      -1,    -1,    -1,    -1,  1352,   156,    -1,    -1,    -1,    -1,
     245,   229,    -1,  1361,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,  2066,    -1,
      -1,  1410,    -1,    -1,   521,  2073,    -1,  1385,    -1,    -1,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,  2590,
      -1,    -1,  2593,  1401,    -1,    -1,  1404,    -1,  2599,    -1,
    2024,    38,  1410,  1411,    -1,    -1,   301,    44,    -1,    -1,
      -1,  2109,  2036,    -1,    -1,  2113,    -1,  1425,  1426,    -1,
    3585,  2119,  3587,   301,  3589,    -1,    -1,    -1,  1436,  1437,
      -1,    -1,    -1,  1441,    -1,  1443,  1444,    -1,  1446,  1447,
      -1,    -1,  2066,    -1,  2142,    -1,  1454,    -1,    -1,  2073,
      -1,    -1,    -1,    -1,    -1,  2766,  2767,    -1,    -1,    -1,
      -1,    -1,    -1,  1471,    -1,    -1,   103,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,  2794,    -1,  2109,    -1,    -1,    -1,  2113,
      -1,    -1,    -1,    -1,    -1,  2119,    -1,    -1,  2809,  2810,
    2811,  2812,  2813,  2814,  2815,  2816,  2817,  2818,    -1,    -1,
      -1,   229,    -1,    -1,   409,   326,   327,   328,  2142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    -1,
    1548,   178,  1550,  1551,    -1,    -1,    -1,    -1,    -1,    -1,
    1558,    -1,    -1,    -1,    -1,  3720,    -1,    -1,  3723,  3724,
    2761,    -1,    -1,    -1,  2765,  2766,  2767,  3732,    -1,    -1,
      48,  1579,    -1,  1581,  3739,    -1,    -1,    55,    -1,   216,
      -1,    -1,    -1,   301,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,  1631,  2794,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,   243,    -1,  2809,  2810,
    2811,  2812,  2813,  2814,  2815,  2816,  2817,  2818,    -1,    -1,
      -1,    -1,    -1,  1631,   435,    -1,   521,    -1,    -1,    -1,
      -1,    -1,    -1,   528,   529,   530,   531,   532,   533,    -1,
     277,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,   469,    -1,
      -1,    -1,  3827,  3828,    -1,    -1,  3831,    -1,    -1,   480,
    3835,    -1,   150,  3838,  3839,    -1,    -1,    -1,    -1,  1687,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1726,   499,   326,
      -1,  1699,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   182,    -1,  1714,    -1,    -1,    -1,
    2911,    -1,   523,    -1,    -1,    -1,    -1,    -1,  1726,    -1,
      -1,    -1,    -1,   201,    -1,    -1,   537,  1735,   206,    -1,
    1738,    -1,    -1,    -1,    -1,    -1,  2937,    -1,    -1,    -1,
      -1,   378,    -1,  3908,  3909,     8,    -1,  3912,    11,    -1,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
     397,    -1,    -1,  1771,    -1,    -1,    -1,   245,    -1,  2467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1785,    -1,  1787,
     563,  1789,    -1,    -1,    -1,    48,   569,    -1,    -1,   572,
    3101,    -1,    55,    -1,    -1,    -1,  1804,    -1,  1806,  1807,
    1808,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,    -1,    82,
      -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,
    1869,    -1,   469,    -1,    -1,    -1,    -1,    -1,  1846,    -1,
    1848,    -1,    -1,  2467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1863,  1864,    -1,    -1,    -1,
      -1,  1869,    -1,    -1,    -1,    -1,  1874,  1875,  1876,  1877,
    1878,  1879,  1880,     8,    -1,    -1,    11,  1885,    -1,  1887,
      -1,    16,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,
      -1,  1899,  1900,    -1,    -1,    -1,  1904,  1905,    -1,    -1,
    3101,  1909,  1910,  1911,  1912,    -1,  1914,  1915,    -1,  2607,
      -1,    -1,    -1,    48,    -1,    -1,  1924,    -1,    -1,   182,
      55,    -1,    -1,  1931,    -1,    -1,    -1,    -1,    -1,    -1,
    1938,   409,    -1,  1941,  1942,  1943,  1944,  1945,   201,    -1,
      -1,  1949,    -1,   206,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1963,    -1,    -1,    -1,    -1,
      -1,  1969,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2668,    -1,    -1,    -1,    -1,    -1,    -1,  1985,    -1,  1987,
      -1,    -1,   245,  2607,  1992,  2024,  1132,    -1,    -1,    -1,
      -1,  1999,    -1,    -1,    -1,    -1,    -1,  2036,    -1,    -1,
    2008,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    19,    20,    21,   150,  2024,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2066,  2036,    -1,
      37,    -1,    -1,    -1,  2073,    -1,    -1,    -1,   301,    -1,
      -1,   824,    -1,   521,  2668,    -1,    -1,   182,    -1,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,  2066,    -1,
      -1,    -1,    -1,    -1,    -1,  2073,   201,  2075,    -1,    -1,
    2109,   206,    -1,    -1,  2113,    -1,    -1,    -1,    -1,  2087,
    2119,  3282,    -1,    -1,     8,    -1,    -1,    11,  3289,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,  2107,
      -1,  2109,    -1,  2142,  2112,  2113,    -1,  2805,    -1,  2117,
     245,  2119,    -1,  2121,  2122,     8,    -1,    -1,    11,    -1,
      -1,  3432,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,  2142,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3453,  3454,    37,    -1,   409,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   301,    -1,    -1,    -1,
      -1,  1317,  3483,    -1,    -1,    -1,    -1,    -1,    -1,   962,
      37,  2805,    -1,    -1,    -1,  2193,    -1,    -1,    -1,  2197,
      -1,    48,    -1,    -1,  2202,   119,    -1,    -1,    55,    -1,
    3401,    -1,    -1,    -1,    -1,  3406,    -1,    -1,    -1,    -1,
    2908,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,   229,    15,    16,    82,    -1,    19,    20,    21,
    1013,  3432,    -1,    -1,    -1,    -1,  2244,    -1,    -1,  1022,
      -1,    -1,    -1,    -1,    -1,    37,  1029,  1030,  1031,  1032,
      -1,    -1,  3453,  3454,    -1,    -1,    48,    -1,   521,    -1,
    2268,    -1,  1045,    55,  1410,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,  2289,  3483,    -1,  2908,    -1,    -1,    -1,    -1,  2987,
      82,    -1,  2300,    -1,   301,    -1,     8,    -1,  2306,    11,
      -1,    -1,  1085,    15,    16,   229,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3525,   182,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   229,    -1,    -1,    -1,
      -1,    -1,  2350,    -1,   201,    -1,    -1,    -1,  2356,   206,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2987,  2372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   229,   230,  2382,  2383,  2384,   301,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,   245,    -1,
     182,    -1,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,   201,
      -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,  2427,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,  2467,    -1,
     287,    -1,  3130,  1132,    -1,  2443,    -1,   229,   230,    -1,
      -1,    -1,  2450,    -1,   301,    -1,    -1,   304,    -1,    -1,
      -1,    -1,    -1,   245,    -1,  2463,  2464,  2465,  2466,  2467,
      -1,    -1,    -1,    -1,    -1,    -1,  3164,    -1,    -1,  2477,
      -1,  2479,    -1,    -1,  2482,    -1,    -1,    -1,    -1,    -1,
    2488,    -1,  2490,    -1,  2492,  1631,    -1,    -1,    -1,    -1,
      -1,  2499,   284,    -1,    -1,   287,    -1,    -1,    -1,  2507,
      -1,    -1,    -1,    -1,    -1,    -1,  3130,  2515,    -1,   301,
      -1,    -1,   304,  2521,  2522,    -1,  2524,   524,   525,   526,
    1303,   528,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,  3842,    -1,  1316,    -1,    -1,    -1,    -1,    -1,    -1,
    3164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,  3251,  1337,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2573,    -1,    -1,  2607,    -1,
      -1,    -1,    -1,  2581,  2582,  2583,    -1,    -1,    -1,    -1,
    1726,    -1,  2590,    -1,    -1,  2593,    -1,    -1,    -1,   301,
      -1,  2599,    -1,    -1,    -1,    -1,  3294,    -1,    -1,  2607,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,  2619,    -1,    -1,    -1,    -1,    -1,   409,  1317,    -1,
      -1,  1404,    -1,    -1,    -1,  2633,    -1,  3251,  1411,  2668,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,  3842,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3352,    -1,    -1,    -1,    -1,    -1,
    2668,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,
    3294,   528,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
      -1,   548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2715,  2716,    -1,
      -1,  1410,    -1,    -1,  2722,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1869,    -1,  2733,    -1,    -1,  3352,   521,
      -1,  2739,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2757,
      -1,    -1,    -1,  2761,  3452,    -1,    -1,  2765,  2766,  2767,
      -1,    -1,    -1,  2771,  2772,  2773,  2805,  2775,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1558,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2794,    -1,  2796,    -1,
      -1,   102,    -1,    -1,  2802,    -1,    -1,  2805,  2806,    -1,
    2808,  2809,  2810,  2811,  2812,  2813,  2814,  2815,  2816,  2817,
    2818,    -1,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,  4025,    -1,    -1,    -1,  3452,    -1,
      -1,    -1,    -1,  4034,  2842,    -1,    -1,    -1,    -1,    -1,
    2848,   152,    -1,  2851,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2861,    -1,    -1,   167,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   177,    -1,    -1,  2908,
      -1,    -1,    -1,    -1,    -1,  2883,    -1,   188,  2024,    -1,
      -1,    -1,   193,    -1,     8,    -1,  2894,    11,    -1,    -1,
    2036,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2908,    -1,    -1,  2911,    -1,    -1,    -1,    -1,    -1,    -1,
    2918,  2919,  2920,  2921,   225,    -1,    -1,    -1,    -1,    -1,
    2066,    -1,    -1,    -1,    48,    -1,    -1,  2073,    -1,  2937,
    2938,    55,  1631,    -1,    -1,   246,    -1,    -1,  2946,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2987,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,  2109,    -1,    -1,  2974,  2113,  2976,    -1,
      -1,    -1,    -1,  2119,    -1,    -1,    -1,    -1,    -1,  2987,
      -1,    -1,    -1,    -1,    -1,   296,    -1,    -1,   299,    -1,
      -1,    -1,  3000,    -1,   305,    -1,  2142,  3005,    -1,    -1,
      -1,    -1,    -1,    -1,  1787,    -1,  1789,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1804,    -1,    -1,    -1,    -1,   150,  1726,    -1,    -1,
      -1,    -1,    -1,  3731,    -1,    -1,    -1,    -1,   349,     8,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,  3057,
      19,    -1,    -1,  3061,    -1,    -1,    25,    -1,   182,  3067,
      29,    30,    31,  1846,   375,    34,    -1,    -1,    37,    38,
      -1,    -1,    41,  3081,     0,    44,    45,   201,    -1,  3087,
      -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3130,  3100,  3101,    -1,    -1,    -1,    -1,    -1,    -1,
    3108,     8,    -1,    -1,    11,    -1,    -1,  3731,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,  3125,    -1,    -1,
      -1,   245,  3130,    -1,   435,  3164,    -1,    -1,    -1,    -1,
      37,     0,    -1,    -1,  3832,    -1,    -1,   106,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,    -1,  3846,    -1,
      -1,    -1,    -1,   464,    -1,  1938,  3164,    -1,  1941,  1942,
    1943,  1944,    -1,   474,    -1,    -1,  1949,    -1,    -1,    -1,
    1869,    -1,    -1,    -1,    -1,    -1,   102,   301,    -1,    -1,
      -1,    -1,    -1,    27,    -1,   496,    -1,   498,   499,    33,
      -1,    -1,    -1,    -1,    -1,    -1,  3204,    -1,    42,    -1,
    3208,    -1,  1985,    -1,  3212,    -1,    -1,    -1,  3832,    -1,
      -1,    -1,  3251,    -1,    -1,  3223,    -1,    -1,    62,    -1,
      -1,    -1,  3846,    -1,   535,    -1,   152,   538,   539,   540,
      -1,    -1,    -1,   102,    -1,  3243,    -1,    -1,    -1,  3247,
      -1,   167,    -1,  3251,    -1,    -1,   172,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,  3294,    -1,    -1,    -1,    -1,
      -1,    -1,   188,    -1,   108,    -1,    -1,   193,  3276,    -1,
      -1,    -1,    -1,    -1,  3282,    -1,    -1,    -1,    -1,    -1,
      -1,  3289,    -1,   152,    -1,   409,  3294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,   167,   225,
      -1,    -1,    -1,   172,  2087,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,  3352,    -1,    -1,  3324,    -1,    -1,   188,
     246,  2467,   229,    -1,   193,  2024,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3341,    -1,    -1,    -1,  2036,    -1,    -1,
      -1,    -1,    -1,    -1,  3352,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3362,    -1,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,  2066,    -1,    -1,
     296,    -1,    -1,   299,  2073,    -1,    -1,   246,  3386,   305,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3401,   301,    -1,    -1,   521,  3406,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,   531,   532,   533,
    2109,    -1,    -1,  3452,  2113,   259,    -1,    -1,    -1,    -1,
    2119,    -1,    -1,   349,  3432,   269,    -1,   296,    -1,    -1,
     299,    -1,    -1,    -1,    -1,    -1,   305,   281,    -1,    -1,
      -1,    -1,    -1,  2142,  3452,  3453,  3454,    -1,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3465,    -1,   303,
      -1,  2607,    -1,  3471,  3472,    -1,    -1,    -1,    -1,  3477,
     314,  3479,    -1,    -1,    -1,  3483,    -1,    -1,    -1,    -1,
     349,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,  3497,
    3498,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,   435,
      -1,    -1,    -1,    37,    -1,    -1,    -1,  3525,  3526,    -1,
    3528,    -1,  2668,   367,    -1,    -1,    -1,   371,    -1,   373,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   464,    -1,
      -1,    -1,    -1,    -1,  3552,  3553,    -1,    -1,   474,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
     496,    -1,   498,   499,     8,   419,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,   563,   464,    -1,    -1,    -1,    -1,
     569,  3609,    -1,   572,    -1,   474,    -1,    -1,  3616,   535,
    3618,   580,   538,   539,   540,    -1,    -1,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,   496,    -1,   498,
     499,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3651,    -1,    -1,  3654,    -1,   617,  3657,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2805,
      -1,    -1,    -1,    -1,    -1,    -1,   535,  2450,    -1,   538,
     539,   540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2464,  2465,  2466,    -1,    -1,    -1,  3695,    -1,    -1,
      -1,    -1,  3731,    -1,    -1,    -1,  2479,    -1,    -1,  2482,
      -1,    -1,    -1,    -1,    -1,   229,    -1,    -1,    -1,  2492,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,  3731,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    -1,  2908,    -1,    -1,    -1,    -1,    -1,  2467,    -1,
      -1,    -1,    -1,    37,    -1,    -1,  3784,   301,  3786,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3798,  3799,    -1,  3832,  3802,   229,    -1,    -1,  2581,  2582,
    2583,    -1,  3810,    -1,   773,   774,   775,  3846,    -1,    -1,
      -1,    -1,   781,    -1,    -1,  3823,  3824,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3832,    -1,    -1,    -1,    92,    93,
      94,    -1,    -1,    -1,  3842,    -1,    -1,    -1,  3846,    -1,
    3848,  2987,   106,    -1,    -1,    -1,   815,   816,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   824,    -1,    -1,  3866,    -1,
    3868,    -1,    -1,  3871,    -1,    -1,    -1,   301,   837,   838,
      -1,    -1,    -1,   842,   843,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,   855,   856,   857,    15,
      16,   860,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,   870,   871,    -1,   873,    -1,   875,    -1,  2607,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   888,
      -1,    -1,    -1,    -1,  3932,   894,    -1,    -1,    -1,  3937,
      -1,  3939,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3955,  3956,    -1,
      -1,    -1,    -1,    -1,    -1,  3963,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3974,    -1,    -1,  2668,
      -1,    -1,    -1,    -1,  2757,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3130,    -1,    -1,    -1,    -1,    -1,
    3998,    -1,  4000,   962,    -1,  4003,   965,   966,    -1,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,   301,    -1,    -1,    -1,    -1,    -1,  4025,  3164,  4027,
      -1,  4029,    -1,    -1,    -1,    -1,  4034,    -1,    -1,    -1,
     999,    -1,    -1,  1002,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1013,  1014,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1022,    -1,    -1,    -1,    -1,    -1,    -1,
    1029,  1030,  1031,  1032,  1033,  2848,    -1,    -1,  2851,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1045,    -1,  1047,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1057,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,  1071,   229,    -1,  3251,  2805,    -1,    -1,    -1,
      -1,    -1,    -1,  1082,  1083,    -1,  1085,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     0,  1094,  1095,    -1,    -1,    -1,
      -1,  1100,    -1,    -1,    -1,  2918,  2919,  2920,  2921,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,  3294,    -1,
      -1,    -1,    -1,    -1,  1123,    -1,    -1,    33,    -1,    35,
      36,    -1,  1131,  1132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1140,    -1,    49,    -1,   301,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    -1,  3352,    -1,    -1,  2908,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1189,    -1,  1191,    -1,   100,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,   113,   528,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,  1242,    -1,    -1,  1245,    -1,    -1,    -1,
     156,    -1,   158,   159,    -1,    -1,    -1,    -1,  2987,    -1,
    1259,  1260,    -1,    -1,    -1,    -1,    -1,   173,   562,  1268,
      -1,   177,    -1,    -1,    -1,    -1,  3452,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3108,    -1,    -1,    -1,   205,
      -1,  1300,    -1,    -1,  1303,  1304,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,    -1,  1316,  1317,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1333,    -1,    -1,    -1,  1337,    -1,
      -1,    -1,   248,  1342,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1361,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3130,  1401,    -1,    -1,  1404,    -1,    -1,    27,    -1,
      -1,  1410,  1411,    -1,    33,    -1,    -1,    -1,    -1,    -1,
     326,   327,   328,    42,    -1,    -1,  1425,  1426,   334,    -1,
      -1,   337,    -1,    -1,    -1,  3164,    -1,  1436,  1437,    -1,
      -1,    -1,  1441,    62,  1443,  1444,    -1,  1446,  1447,    -1,
      -1,    -1,    -1,    -1,    -1,  1454,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,
      -1,    -1,  1471,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   780,   781,    -1,   108,
     396,    -1,    -1,    -1,    -1,    -1,    -1,   403,     8,    -1,
      -1,    11,   408,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,   419,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   140,  3251,    -1,    -1,   431,    -1,    37,   822,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,   833,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,  1548,
     456,  1550,  1551,    -1,    -1,  3731,    -1,    -1,    -1,  1558,
      -1,    -1,    -1,   469,    -1,  3294,   472,    -1,    -1,   475,
      -1,    -1,    82,  3386,   480,    -1,    -1,    -1,    -1,    -1,
    1579,    -1,  1581,    -1,    -1,    -1,   880,    -1,    -1,   883,
     209,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   523,    -1,    -1,
      -1,    -1,    -1,  3352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   537,  1631,    -1,   540,    -1,    -1,    70,    71,    -1,
     259,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     269,    -1,  3465,    -1,    -1,    -1,  3832,    -1,    -1,  3472,
      -1,    -1,   281,    -1,  3477,    -1,   960,    -1,    -1,    -1,
    3846,    -1,   182,    -1,    -1,    -1,    -1,    -1,   111,   112,
      -1,    -1,   115,   116,   303,  3498,    -1,    -1,  1687,    -1,
      -1,   201,    -1,    -1,    -1,   314,   206,    -1,    -1,    -1,
    1699,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1714,    -1,    -1,    -1,   229,
     230,    -1,    -1,  3452,    -1,    -1,    -1,  1726,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   245,  1735,    -1,    -1,  1738,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1771,    -1,   284,    -1,    -1,   287,  1072,   398,
      -1,    -1,    -1,    -1,   403,    -1,  1785,    -1,  1787,    -1,
    1789,   301,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,
     419,    -1,    -1,  3616,    -1,  1804,    -1,  1806,  1807,  1808,
      -1,    -1,  1106,    -1,    -1,    -1,    -1,    -1,    -1,  1113,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,    -1,   271,   272,
      -1,    -1,    -1,    -1,  3657,    -1,    -1,  1846,    -1,  1848,
      -1,    -1,    -1,    -1,  1148,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,  1863,  1864,  1160,    -1,    -1,    -1,
    1869,    -1,    -1,    -1,    -1,  1874,  1875,  1876,  1877,  1878,
    1879,  1880,    -1,    -1,    -1,    -1,  1885,    -1,  1887,    -1,
      -1,    -1,    -1,  1187,    -1,    -1,    -1,    -1,    -1,   409,
    1899,  1900,    -1,    -1,    -1,  1904,  1905,    -1,    -1,    -1,
    1909,  1910,  1911,  1912,    -1,  1914,  1915,   350,   351,    -1,
      -1,    -1,    -1,    -1,    -1,  1924,    -1,    -1,    -1,    -1,
      -1,    -1,  1931,    -1,    -1,    -1,    -1,    -1,    -1,  1938,
      -1,    -1,  1941,  1942,  1943,  1944,  1945,    -1,    -1,    -1,
    1949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,    -1,    -1,    -1,  1963,    -1,    -1,    -1,    -1,    -1,
    1969,  3784,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1276,  1277,    -1,  1279,  1985,    -1,  1987,    -1,
      -1,    -1,    -1,  1992,    -1,    -1,    -1,    -1,    -1,    -1,
    1999,    -1,  3731,    -1,    -1,    -1,    -1,    -1,    -1,  2008,
      -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,  2024,    -1,    -1,    -1,    -1,
       3,   541,    -1,    -1,    -1,     8,    -1,  2036,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     493,   494,    -1,    -1,    37,    -1,    -1,  2066,    -1,    42,
      -1,    -1,    -1,    -1,  2073,    48,  2075,    -1,    -1,    -1,
      -1,    -1,    55,    -1,   517,   518,    -1,    -1,  2087,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,  3832,   537,    -1,    -1,    -1,  2107,    82,
    2109,    -1,    -1,  2112,  2113,    -1,    -1,  3846,  2117,  3932,
    2119,    -1,  2121,  2122,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,  2142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    83,  1453,
      42,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3998,    -1,  4000,    -1,    -1,
      -1,    -1,    -1,    -1,  2193,    -1,    -1,    -1,  2197,    -1,
      82,    -1,    -1,  2202,    -1,    -1,    -1,    -1,    -1,   182,
      -1,    -1,    -1,    -1,  4027,    -1,  4029,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   151,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,   161,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2244,    -1,    -1,    -1,   174,
      -1,    -1,    -1,    -1,   179,    -1,   229,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1561,    -1,  2268,
    1564,    -1,   245,    -1,    -1,  1569,    -1,    -1,  1572,    -1,
      -1,    -1,    -1,  1577,    -1,   210,    -1,    -1,    -1,    -1,
    2289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     182,    -1,    -1,    -1,    -1,    -1,    -1,  2306,    -1,    -1,
      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,   301,   254,
      -1,   304,    -1,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,   230,    -1,
      -1,  2350,    -1,    -1,    -1,    -1,    -1,  2356,    -1,    -1,
      -1,    -1,    -1,   245,    -1,    -1,    -1,  1661,    -1,    -1,
      -1,    -1,    -1,  2372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2382,  2383,  2384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,    -1,   287,   331,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,
      -1,    -1,   304,   348,    -1,    -1,    -1,    -1,  2427,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2443,    -1,    -1,  1741,    -1,    -1,
      -1,  2450,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,    -1,  2463,  2464,  2465,  2466,  2467,    -1,
      -1,    -1,    -1,   398,    -1,    -1,   401,    -1,  2477,    -1,
    2479,    -1,    -1,  2482,    -1,    -1,    -1,    -1,    -1,  2488,
      -1,  2490,    -1,  2492,    -1,    -1,   421,    -1,    -1,    -1,
    2499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2507,    -1,
     435,    -1,    -1,    -1,    -1,    -1,  2515,   442,    -1,    -1,
      -1,    -1,  2521,  2522,  1818,  2524,    -1,   409,   453,    -1,
      -1,    -1,    -1,    -1,   459,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   488,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2573,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2581,  2582,  2583,    -1,    -1,    -1,    -1,    -1,
      -1,  2590,    -1,    -1,  2593,    -1,    -1,    -1,    -1,    -1,
    2599,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2607,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2619,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2633,    -1,    -1,    -1,    -1,   521,
      -1,    -1,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,   538,    -1,    -1,    -1,
      -1,    -1,  1956,    -1,    -1,     8,    -1,    -1,    11,  2668,
      -1,  1965,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2733,    -1,    -1,    -1,    -1,    82,
    2739,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2757,    -1,
      -1,    -1,  2761,    -1,    -1,    -1,  2765,  2766,  2767,    -1,
      -1,    -1,  2771,  2772,  2773,    -1,  2775,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2794,    -1,  2796,    -1,    -1,
      -1,    -1,  2096,  2802,    -1,    -1,  2805,  2806,  2102,  2808,
    2809,  2810,  2811,  2812,  2813,  2814,  2815,  2816,  2817,  2818,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,   182,
      -1,    -1,    -1,  2842,    -1,    -1,    -1,    -1,    -1,  2848,
      -1,    -1,  2851,    -1,    -1,    -1,    -1,    -1,   201,    -1,
      48,    -1,  2861,   206,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2883,    -1,   229,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    82,  2894,    -1,    -1,    -1,    -1,
      -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,  2908,
      -1,    -1,  2911,    -1,    -1,    -1,    -1,    -1,    -1,  2918,
    2919,  2920,  2921,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2230,    -1,  2937,  2938,
      -1,   284,    -1,    -1,   287,    -1,    -1,  2946,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2250,    -1,   301,    -1,
      -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2266,    -1,    -1,  2974,    -1,  2976,    -1,    -1,
      -1,    -1,    -1,  2277,    -1,    -1,    -1,    -1,  2987,    -1,
      -1,    -1,    -1,    -1,   182,    -1,    -1,    -1,    -1,    -1,
      -1,  3000,    -1,   868,   869,    -1,  3005,    -1,  2302,    -1,
       3,    -1,     5,   201,    -1,    -1,    -1,    -1,   206,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   229,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,  3057,    -1,
      -1,    -1,  3061,    -1,    -1,    -1,   409,    -1,  3067,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    -1,
      -1,    -1,  3081,    -1,    -1,    -1,    -1,    -1,  3087,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,
      -1,  3100,  3101,    -1,    -1,    -1,    -1,    -1,    -1,  3108,
      -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,   111,   112,
      -1,    -1,   115,   116,    -1,    -1,  3125,    -1,    -1,    -1,
      -1,  3130,    -1,   998,    -1,    -1,    -1,  1002,  1003,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3164,    -1,  2461,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,  1057,    -1,    -1,   538,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,   197,  3204,    -1,    -1,    -1,  3208,
      -1,  1076,    -1,  3212,    -1,    -1,    -1,    -1,    -1,  1084,
      -1,   409,  1087,    -1,  3223,  1090,  1091,  1092,  1093,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3243,    -1,    -1,    -1,  3247,    -1,
      -1,    -1,  3251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1130,  1131,    -1,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,  3276,   271,   272,
      -1,    -1,    -1,  3282,    -1,    -1,    -1,  1152,    -1,    -1,
    3289,    -1,    -1,    -1,    -1,  3294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,  1184,
      -1,  1186,  1187,    -1,    -1,  3324,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,  2642,    -1,
      -1,    -1,    -1,  3352,    -1,    -1,  1221,   350,   351,    -1,
      -1,    -1,    -1,  3362,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1239,  1240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2678,    -1,    -1,  3386,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,    -1,  3401,  2697,    -1,    -1,    -1,  3406,    -1,    -1,
      -1,    -1,    -1,  1278,    -1,    -1,    -1,  1282,  1283,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1293,  1294,
      -1,    -1,    -1,  3432,    -1,     8,    -1,    -1,    11,    -1,
      -1,  2735,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,  3452,  3453,  3454,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,  3465,    -1,    -1,  2763,
      -1,    -1,    -1,  3472,    -1,    48,    -1,    -1,  3477,    -1,
    3479,    -1,    55,    -1,  3483,    -1,    -1,  1352,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1361,    -1,  3497,  3498,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1385,    -1,    -1,    -1,   517,   518,  3525,  3526,    -1,  3528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2843,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,  2872,    -1,
      -1,    -1,    -1,    -1,    -1,  2879,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,   182,
    3609,  1476,    -1,    -1,    -1,    -1,    -1,  3616,    -1,  3618,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    82,  2930,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   229,   230,  3657,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   245,    -1,    -1,  1540,    -1,  1542,  1543,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1555,  1556,    -1,    -1,    -1,    -1,  3695,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1571,    -1,    -1,    -1,
      -1,   284,    -1,  3007,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    -1,   301,    -1,
      -1,   304,  3731,    -1,    -1,   182,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,  3057,    -1,    -1,   111,   112,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   229,   230,    -1,  3784,    -1,  3786,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,  3798,
    3799,    -1,    -1,  3802,    -1,    -1,    -1,    -1,  1673,    -1,
      -1,  3810,    -1,    -1,    -1,    -1,  1681,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3832,    -1,    -1,   409,   284,    -1,    -1,
     287,    -1,    -1,  3842,    -1,    -1,    -1,  3846,    -1,  3848,
      -1,   196,   197,    -1,   301,    -1,  1721,   304,    -1,    -1,
      -1,    -1,  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1734,
      -1,    -1,  3871,    -1,  1739,  1740,    -1,    -1,    -1,  1744,
      -1,    -1,    -1,  1748,    -1,    -1,  1751,  1752,  1753,  1754,
    1755,  1756,  1757,  1758,  1759,    -1,    -1,  1762,    -1,    -1,
      -1,    -1,    24,    -1,  1769,    -1,  1771,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,  1790,   271,   272,    -1,    -1,
    3224,    -1,    -1,  3932,    -1,    -1,    -1,    -1,    -1,    -1,
    3939,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    83,   409,    -1,  3963,   538,    -1,  1832,  1833,    -1,
      -1,    -1,  3266,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3998,
      -1,  4000,    -1,    -1,    -1,   350,   351,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4025,    -1,  4027,   151,
    4029,    -1,    -1,    -1,    -1,  4034,    -1,    -1,    -1,   161,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,  1088,
      -1,    -1,   174,    -1,    -1,  1920,    -1,   179,    -1,  1924,
      -1,    -1,  1927,  1928,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3365,    -1,    -1,   521,    -1,    -1,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,   210,    -1,
      -1,   538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1969,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   254,    -1,  1999,  2000,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2028,  2029,    -1,  2031,    -1,  1207,    -1,
      -1,    -1,   517,   518,    -1,  3469,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,  2060,  2061,    -1,    -1,  2064,
      -1,    -1,  3496,   325,    -1,    -1,    37,    -1,    -1,   331,
      -1,    -1,    -1,    -1,    -1,    -1,  1255,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,   347,   348,     8,  2093,    -1,
      11,    -1,    -1,  2098,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2115,    82,  2117,  1292,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,   398,    -1,    -1,   401,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2155,    -1,    -1,    -1,  3588,    -1,    -1,    -1,    -1,   421,
      -1,    82,    -1,    -1,    -1,    -1,    -1,  1346,    -1,    -1,
      -1,    -1,  3606,   435,  3608,    -1,    -1,    -1,    -1,   441,
     442,    -1,    -1,    -1,    -1,    -1,    -1,  2192,    -1,    -1,
    2195,   453,    -1,  1088,    -1,  2200,  2201,   459,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   182,  1391,    -1,    -1,    -1,    -1,  1396,    -1,    -1,
      -1,    -1,    -1,    -1,  3658,    -1,   488,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,
    3674,  2246,    -1,    -1,  2249,    -1,  2251,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,   230,
      -1,   182,  2267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1450,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1474,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,   230,
      -1,    -1,    -1,   284,  2319,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,
     301,  2336,  2337,   304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1523,    -1,  1525,    -1,  1527,  1528,
    2355,  1530,    -1,    -1,  1533,    -1,    -1,  1536,    -1,  2364,
    1539,    -1,    -1,   284,    -1,  1544,   287,    -1,  1547,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     301,    -1,    -1,   304,    -1,    -1,    -1,    -1,  1283,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1292,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1584,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2421,    -1,    -1,    -1,
      -1,    -1,  2427,     8,    -1,    -1,    11,    -1,    -1,    -1,
    3864,    16,    17,    18,    19,    20,    21,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3913,
      -1,    -1,  2487,    -1,    -1,    -1,    -1,    -1,   409,    -1,
    1669,     8,    -1,    -1,    11,    -1,    -1,    82,    15,    16,
      17,    18,    19,    20,    21,    -1,  1685,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1695,  1696,  1697,    -1,
      37,    -1,    -1,  1702,    -1,    -1,    -1,  1706,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    -1,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,    82,    -1,   538,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1768,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,    -1,
     521,    -1,    -1,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,  1088,    -1,   201,   538,    -1,  2624,
      -1,   206,    -1,    -1,    -1,  2630,  2631,    -1,    -1,    -1,
      -1,    -1,  1527,  1528,    -1,    -1,  1815,  2642,  1533,    -1,
      -1,    -1,    -1,    -1,   229,   230,    -1,    -1,    -1,    -1,
      -1,  2656,  1831,    -1,  2659,    -1,  2661,  1836,    -1,    -1,
     245,    -1,    -1,    -1,  2669,   182,    -1,    -1,    -1,    -1,
      -1,    -1,  2677,  2678,  1853,    -1,    -1,    -1,    -1,  2684,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,
      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   229,   230,    -1,    -1,   301,    -1,    -1,   304,
      -1,    -1,    -1,    -1,    -1,    -1,  2731,    -1,   245,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2741,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2763,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   301,    -1,    -1,   304,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2820,    -1,  2822,  1292,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2026,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2034,  2035,    -1,  2037,  2038,
    2039,  2040,  2041,  2042,    -1,    -1,  2045,  2046,  2047,  2048,
    2049,  2050,  2051,  2052,  2053,  2054,  2055,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2925,  2926,    -1,    -1,    -1,    -1,  1821,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,    -1,  2960,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2975,    -1,    -1,    -1,    -1,    -1,  2981,  2982,    -1,  2158,
      -1,  2986,  2161,    -1,    -1,    -1,  2991,    -1,    -1,  2994,
    2995,    -1,    -1,    -1,  2999,  3000,    -1,    -1,  3003,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,   538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2208,
      -1,    -1,    -1,  2212,  2213,  2214,  2215,  2216,  2217,  2218,
    2219,    -1,    -1,    -1,    -1,  3050,  2225,  2226,    -1,  2228,
    2229,    -1,    -1,  1527,  1528,    -1,    -1,    -1,    -1,  1533,
      -1,    -1,    -1,  2242,    -1,    -1,  2245,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2253,  2254,  2255,  2256,  2257,  2258,
    2259,  2260,  2261,  2262,    -1,    -1,    -1,    -1,    -1,  3094,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2288,
      -1,    -1,    -1,    -1,    -1,    -1,  3121,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2037,  2038,  2039,  2040,  2041,  2042,    -1,    -1,
    2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,  2422,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,  2432,  2433,    -1,    -1,    -1,    55,    -1,
      -1,  3266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1767,  3299,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3311,  3312,    -1,    -1,
    3315,    -1,  3317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2502,    -1,    -1,    -1,    -1,    -1,    -1,
    2225,  2226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1821,    -1,  2528,
    2529,  2530,    -1,    -1,  2533,  2534,  2535,  2536,  2537,  2538,
      -1,    -1,    -1,  2542,  2543,  2544,  2545,  2546,  2547,  2548,
    2549,  2550,  2551,    -1,    -1,    -1,    -1,  2556,  2557,    -1,
    3385,    -1,    -1,    -1,    -1,   182,    -1,    -1,     8,    -1,
      -1,    11,  3397,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,   201,  2584,    -1,    -1,    -1,   206,
    2589,    -1,    -1,    -1,    -1,    -1,  3421,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,   229,   230,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2623,    -1,    -1,    -1,   245,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2353,    -1,
      -1,  2640,    82,    -1,  2643,    -1,    -1,    -1,    -1,    -1,
    2649,  2650,    -1,    -1,    -1,    -1,    -1,    -1,  2657,  2658,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,
     287,    -1,  2671,  2672,  2673,  2674,    -1,  2676,    -1,    -1,
      -1,  2680,    -1,    -1,   301,    -1,    -1,   304,    -1,    -1,
    3515,    -1,    -1,    -1,  3519,    -1,    -1,    -1,  3523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3534,
      -1,    -1,    -1,    -1,  3539,    -1,  3541,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   182,  2037,  2038,  2039,  2040,  2041,  2042,    -1,
      -1,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,
    2054,   201,    -1,    -1,    -1,    -1,   206,    -1,    -1,  2768,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,
     230,    -1,   409,    -1,    -1,    -1,    -1,    -1,  3623,    -1,
      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3681,    -1,    -1,    -1,
      -1,   301,    -1,    -1,   304,    -1,  3691,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3703,    -1,
      -1,  2880,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   521,    -1,  2905,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    37,    -1,
      -1,   538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,  2225,  2226,    -1,    -1,    -1,    55,    -1,     8,  3764,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,  2672,  2673,    -1,
      -1,    -1,  2961,    82,  2963,    -1,    -1,    37,    -1,   409,
      -1,  2970,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,  2980,    -1,    -1,  2983,    55,  2985,    -1,    -1,    -1,
    2989,    -1,    -1,  2992,  2993,    -1,    -1,  2996,  2997,    -1,
      -1,    -1,    -1,    -1,    -1,  3004,    -1,    -1,    -1,    -1,
      -1,    -1,    82,  2728,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    19,    20,    21,  3044,    -1,    -1,    -1,    -1,
    3049,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2353,
      -1,    -1,    -1,   182,    -1,  3064,    -1,  3892,  3893,  3894,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,   521,   201,    -1,   524,   525,   526,   206,   528,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,   538,    -1,
      -1,    -1,    -1,  3102,    -1,    82,    -1,    -1,    -1,    -1,
     229,   230,   182,    -1,    -1,    -1,    -1,    -1,  3943,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,
      -1,   201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,
     230,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,
      -1,  4006,   301,    -1,    -1,   304,    -1,    -1,    -1,    -1,
    2905,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   182,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   284,  2930,    -1,   287,    -1,    -1,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,   301,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3249,  3250,   229,   230,    -1,    -1,    -1,    -1,    -1,    -1,
    2975,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,
      -1,    -1,    -1,    -1,    -1,  3274,  3275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3298,
      -1,    -1,    -1,  3302,    -1,    -1,  3305,  3306,  3307,    -1,
     287,  3310,    -1,    -1,  3313,  3314,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3322,   301,  3040,  3041,  3042,  3043,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3348,
    3349,  3350,  3351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2672,  2673,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,    -1,  3418,
      -1,    -1,    -1,    -1,    -1,  3424,    -1,    -1,    -1,    -1,
      -1,    -1,   409,    -1,  2728,    -1,    -1,    -1,  3437,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,   538,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3503,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3250,    -1,  3536,  3537,  3538,
      -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,  3561,  3562,  3563,  3564,  3565,  3566,  3567,    -1,
    3569,  3570,    -1,  3572,  3573,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3582,    -1,  3584,    -1,    -1,    -1,    -1,
      -1,    -1,  3591,  3592,  3593,  3594,  3595,  3596,  3597,  3598,
    3599,  3600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2905,    -1,  3612,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3624,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2930,    -1,  3353,  3354,
    3355,  3356,  3357,  3358,  3359,    -1,    -1,    -1,  3363,  3364,
      -1,    -1,    -1,  3368,    -1,    -1,  3371,    -1,    -1,  3374,
    3375,  3376,  3377,  3378,  3379,  3380,  3381,  3382,  3383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3696,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3705,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3713,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3721,  3722,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3733,  3734,  3735,  3736,    -1,  3738,
      -1,    -1,    -1,    -1,    -1,    -1,  3040,  3041,  3042,  3043,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3759,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3797,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3521,    -1,  3102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3821,    -1,    -1,    -1,    -1,  3826,    -1,    -1,
    3829,  3830,    -1,    -1,    -1,  3834,    -1,  3836,  3837,    -1,
      -1,  3840,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3569,  3570,    -1,    -1,    -1,    -1,
      -1,    -1,  3861,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3585,    -1,  3587,    -1,  3589,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3902,  3903,  3904,    -1,    37,  3907,    -1,
      -1,  3910,  3911,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3946,    -1,    -1,
      -1,    -1,    82,    -1,    -1,     8,  3250,    -1,    11,  3958,
    3959,  3960,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,  3713,    -1,
      -1,    -1,    55,    -1,    -1,  3720,    -1,    -1,  3723,  3724,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3732,    -1,  3734,
    3735,    -1,    -1,    -1,  3739,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   182,    -1,    -1,    -1,    -1,    -1,    -1,  3353,
    3354,  3355,  3356,  3357,  3358,  3359,    -1,    -1,    -1,  3363,
    3364,   201,    -1,    -1,  3368,    -1,   206,  3371,    -1,    -1,
    3374,  3375,  3376,  3377,  3378,  3379,  3380,  3381,  3382,  3383,
    3384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3827,  3828,    -1,   245,  3831,    -1,    -1,    -1,
    3835,    -1,    -1,  3838,  3839,    -1,    -1,    -1,    -1,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,   206,   284,    -1,    -1,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   301,    -1,    -1,   304,    -1,   229,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   245,  3908,  3909,    -1,    -1,  3912,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3521,    -1,    -1,
      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3569,  3570,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3585,    -1,  3587,    -1,  3589,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,   538,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3713,
      -1,    -1,    -1,    -1,    -1,    -1,  3720,    -1,    -1,  3723,
    3724,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3732,    -1,
    3734,  3735,    -1,    -1,    -1,  3739,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,   538,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3827,  3828,    -1,    -1,  3831,    -1,    -1,
      -1,  3835,    -1,    -1,  3838,  3839,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,  3908,  3909,    40,    41,  3912,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,   177,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,   523,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,   538,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,    -1,   549,   550,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,   177,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,   523,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,   177,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,   523,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,   538,    -1,
      -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,   549,
     550,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,   177,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,    -1,
      -1,   543,   544,    -1,    -1,    -1,    -1,   549,   550,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,   177,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,   241,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,    -1,   549,   550,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
     538,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    39,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,   549,
     550,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,
      -1,    -1,    -1,   535,    -1,   537,   538,    -1,    -1,    -1,
      -1,   543,   544,    -1,    -1,    -1,    -1,   549,   550,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,    -1,   549,   550,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,   177,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,   549,
     550,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,
      -1,    -1,    -1,   535,    -1,   537,   538,    -1,    -1,    -1,
      -1,   543,   544,    -1,    -1,    -1,    -1,   549,   550,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,   548,   549,   550,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,   496,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,   549,
     550,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,    -1,
      -1,   543,   544,    -1,    -1,    -1,   548,   549,   550,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,    -1,   549,   550,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,   549,
     550,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,    -1,
      -1,   543,   544,    -1,    -1,    -1,    -1,   549,   550,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,    -1,   549,   550,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,   549,
     550,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,    -1,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,    -1,
      -1,   543,   544,    -1,    -1,    -1,    -1,   549,   550,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,    -1,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,    -1,   549,   550,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,    -1,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
      -1,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,   549,
     550,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,    -1,
      -1,   543,   544,    -1,    -1,    -1,    -1,   549,   550,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,   543,
     544,    -1,    -1,    -1,    -1,   549,   550,     3,     4,     5,
       6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,
      -1,    -1,    -1,   549,   550,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,    -1,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,     3,    -1,    -1,   535,    -1,   537,
      -1,    10,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,    -1,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,    -1,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,   287,   288,
      -1,   290,   291,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,   467,   468,
      -1,   470,   471,   472,   473,    -1,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,   535,    -1,   537,    -1,
      -1,    -1,    -1,    -1,   543,   544,    -1,    -1,    -1,    -1,
     549,   550,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,   181,    -1,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
      -1,   231,    -1,   233,    -1,   235,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,    -1,   283,    -1,   285,   286,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,    -1,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,    -1,    -1,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,    -1,
      -1,   411,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,    -1,   486,    -1,   488,   489,
     490,   491,    -1,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,   537,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   547,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,   287,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,   299,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,    -1,    -1,    -1,
      -1,    -1,     3,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,    -1,    -1,    -1,
     544,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    42,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
     181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,   228,    -1,    -1,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,    -1,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,   468,    -1,   470,
     471,   472,   473,    -1,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   538,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,   170,   171,    -1,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,
     183,    -1,   185,   186,    -1,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,    -1,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,   301,   302,
     303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,   467,   468,    -1,   470,   471,   472,
     473,    -1,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   537,   538,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,    -1,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,   287,   288,    -1,   290,   291,   292,   293,   294,
     295,    -1,   297,   298,    -1,   300,   301,   302,   303,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,    -1,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
      -1,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,    -1,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
     287,   288,    -1,   290,   291,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,    -1,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,    -1,     3,   523,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     537,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,   300,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,   287,   288,    -1,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,   523,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,   523,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   537,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
      -1,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,    -1,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,    -1,     3,   523,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,   226,    -1,   228,
      -1,    -1,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,   308,
      -1,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,   467,   468,
      -1,   470,   471,   472,   473,    -1,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,   170,
     171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
     181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
     301,   302,   303,    -1,    -1,   306,   307,   308,    -1,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,    -1,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,   467,   468,    -1,   470,
     471,   472,   473,    -1,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,   170,   171,    -1,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,
     183,    -1,   185,   186,    -1,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,    -1,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,   301,   302,
     303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,   467,   468,    -1,   470,   471,   472,
     473,    -1,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   537,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,
     185,   186,    -1,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
      -1,    -1,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,
      -1,   306,   307,   308,    -1,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,   376,   377,    -1,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,    -1,   470,   471,   472,   473,    -1,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,   170,   171,    -1,   173,    -1,   175,    -1,
      -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,   186,
      -1,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,   226,
      -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,
     307,   308,    -1,   310,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,   376,
     377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
     467,   468,    -1,   470,   471,   472,   473,    -1,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,    -1,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     537,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,   226,    -1,   228,
      -1,    -1,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,   308,
      -1,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,   467,   468,
      -1,   470,   471,   472,   473,    -1,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,   170,
     171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
     181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
     301,   302,   303,    -1,    -1,   306,   307,   308,    -1,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,    -1,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,   467,   468,    -1,   470,
     471,   472,   473,    -1,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,   170,   171,    -1,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,
     183,    -1,   185,   186,    -1,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,    -1,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,   301,   302,
     303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,   467,   468,    -1,   470,   471,   472,
     473,    -1,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   537,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,
     185,   186,    -1,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
      -1,    -1,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,
      -1,   306,   307,   308,    -1,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,   376,   377,    -1,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,    -1,   470,   471,   472,   473,    -1,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    -1,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,    -1,   179,   180,   181,    -1,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,   226,
      -1,   228,    -1,    -1,   231,    -1,   233,    -1,   235,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,    -1,   283,    -1,   285,   286,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,
     307,   308,    -1,   310,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,    -1,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,   376,
     377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,    -1,    -1,   411,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,   435,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,    -1,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,    -1,   486,
      -1,   488,   489,   490,   491,    -1,   493,   494,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,    -1,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
     537,    15,    16,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,    -1,    -1,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,   518,   519,   520,    -1,     3,    -1,
     524,   525,   526,     8,   528,   529,   530,   531,   532,   533,
      15,    16,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,
     185,   186,    -1,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
      -1,    -1,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,
      -1,   306,   307,   308,    -1,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,   376,   377,    -1,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,    -1,   470,   471,   472,   473,    -1,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,    -1,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    37,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,     8,
      -1,    -1,    11,    37,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    82,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,     8,    -1,    -1,    11,    55,    -1,    82,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    37,    -1,    82,    15,    16,    17,    18,    19,    20,
      21,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,     8,    -1,    -1,    11,    37,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    82,    -1,    -1,    -1,
      -1,    37,    -1,   182,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    82,   201,     8,    -1,    -1,    11,   206,   182,    -1,
      -1,    16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,   201,    -1,    -1,
     229,   230,   206,   182,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,   245,    -1,    -1,    -1,
      55,    -1,   201,    -1,    -1,   229,   230,   206,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   245,    -1,    -1,    -1,    -1,   182,    82,    -1,    -1,
     229,   230,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   245,    -1,    -1,    -1,
     206,   182,   301,    -1,    -1,   304,    -1,    -1,    -1,    -1,
     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,
     201,    -1,    -1,   229,   230,   206,   182,   301,    -1,    -1,
     304,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,   245,
      -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,   229,   230,
     206,    -1,   301,    -1,    -1,   304,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   229,   230,    -1,    -1,   182,   284,    -1,
      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,
      -1,    -1,    -1,    -1,    -1,   301,   201,    -1,   304,    -1,
      -1,   206,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     301,    -1,    -1,   304,   229,   230,    -1,    -1,   284,    -1,
      -1,   287,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
     245,    -1,    -1,    -1,    -1,   301,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     409,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,   284,
      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,   301,    -1,    -1,    -1,
      -1,    48,    -1,   409,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,   524,   525,   526,   409,   528,
     529,   530,   531,   532,   533,    82,    -1,    -1,    -1,   538,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,
     524,   525,   526,   409,   528,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,   538,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,   538,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    -1,    -1,
      -1,    -1,   538,    -1,    -1,   182,    -1,    -1,    -1,    -1,
     521,    -1,    -1,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,   201,   536,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    -1,    -1,
     536,    -1,   229,   230,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   301,    -1,    -1,   304,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,   521,    -1,    -1,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   530,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,   299,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,    -1,    -1,     8,    -1,    -1,    11,    -1,
     528,   529,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      43,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,
      -1,    -1,    55,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,
      11,    -1,    -1,    55,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,   128,    -1,    48,    -1,    -1,
      -1,    -1,    -1,     8,    55,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,   182,
      55,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,    82,    -1,    -1,
     172,    -1,    37,    -1,    -1,   177,    -1,    -1,    -1,    -1,
     182,    -1,    -1,    48,    -1,    -1,   229,   230,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
      -1,    -1,   245,    -1,   206,    -1,    -1,    -1,    -1,    -1,
     171,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,
      -1,   182,    -1,    -1,    -1,    -1,    -1,   229,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     201,   284,    -1,   245,   287,   206,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,   304,    -1,    -1,    -1,    -1,    -1,   182,   229,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,   245,   287,   201,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,
      -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   229,   230,    -1,   182,    -1,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,
     245,    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
     301,   206,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   229,   230,   409,    -1,    -1,   284,
      -1,    -1,   287,    -1,   335,    -1,    -1,    -1,    -1,    -1,
     245,    -1,    -1,    -1,    -1,    -1,   301,    -1,    -1,   304,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,   409,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,   284,
      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   474,    37,    -1,    -1,    -1,   301,    42,    -1,   304,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,   409,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     521,    -1,    -1,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    37,    -1,    -1,   182,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    82,
      -1,    -1,    -1,    -1,   229,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     245,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,   284,
      11,    -1,   287,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,   301,    -1,    -1,   304,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    -1,    -1,   177,    -1,    -1,    48,    -1,   182,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   229,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,   245,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,   409,    -1,    11,    37,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    48,    -1,
      -1,   284,    -1,    -1,   287,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,   304,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,   182,    82,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,   229,   230,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   245,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,   182,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     301,   201,    -1,   304,    -1,    -1,   206,   182,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,   229,
     230,   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   229,   230,    -1,    -1,    -1,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     245,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,   206,   284,    -1,    -1,   287,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,   301,    -1,    -1,   304,    -1,   229,   230,   409,   284,
      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   245,    -1,    -1,    -1,   301,    -1,    -1,   304,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,   304,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
     521,    -1,    37,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    48,   409,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,   443,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,   409,    -1,    -1,    -1,
      55,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,    82,    -1,    -1,
      -1,   521,    -1,    37,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    48,   201,    -1,    -1,    -1,    -1,
     206,    55,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,   229,   230,    -1,    -1,   182,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,
      -1,    -1,     8,    -1,    -1,    11,   201,    -1,    -1,    -1,
      16,   206,    -1,    19,    20,    21,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,   229,   230,    -1,   182,   284,    -1,
      -1,   287,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
     245,    -1,    -1,    -1,    -1,   301,   201,    -1,   304,    -1,
      -1,   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    82,    -1,    16,    -1,
      -1,    19,    20,    21,   229,   230,    -1,    -1,   182,   284,
      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    37,
     245,    -1,    -1,    -1,    -1,    -1,   301,   201,    -1,   304,
      48,    -1,   206,    -1,    -1,    -1,    -1,    55,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    -1,
      -1,    19,    20,    21,    -1,   229,   230,    -1,    -1,   284,
      -1,    -1,   287,    -1,    82,    -1,    -1,    -1,    -1,    37,
      -1,   245,    -1,    -1,    -1,    -1,   301,    -1,    -1,   304,
      48,    -1,    -1,   409,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     284,    -1,    -1,   287,    82,   201,    -1,    -1,    -1,    -1,
     206,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   229,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,
      -1,    -1,    -1,    -1,   182,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   201,   409,    -1,    -1,    -1,   206,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,
     526,   287,   528,   529,   530,   531,   532,   533,    -1,    -1,
      -1,   229,   230,    -1,   182,   301,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,
      -1,    -1,    -1,   201,    -1,   409,    -1,    -1,   206,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   229,   230,    -1,    -1,    -1,   284,    -1,    -1,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,
      -1,    -1,    -1,   301,    -1,    -1,   304,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,
     526,   409,   528,   529,   530,   531,   532,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,
      -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,   299,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    35,    36,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,   287,   288,    -1,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
     174,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    35,    36,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,    -1,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
      -1,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,    -1,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,
      -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,    -1,   244,    -1,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,   300,   301,
     302,   303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,   300,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,   300,   301,   302,   303,    -1,    -1,   306,   307,
     308,    -1,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,     4,    -1,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
      -1,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,    -1,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,
      -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,    -1,   244,    -1,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,    -1,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
      -1,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,    -1,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,
      -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,    -1,   244,    -1,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,    -1,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
      -1,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,    -1,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,
      -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,    -1,   244,    -1,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,    -1,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
      -1,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,    -1,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,
      -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,    -1,   244,    -1,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,
     186,    -1,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,   308,    -1,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,   181,    -1,   183,    -1,   185,   186,    -1,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,   226,    -1,
     228,    -1,    -1,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,
     308,    -1,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,   472,   473,    -1,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,    -1,
      -1,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,   308,    -1,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,
      42,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    -1,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,   163,    -1,    -1,   166,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,    -1,    -1,    -1,    -1,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,    -1,   285,   286,   287,   288,    -1,    -1,   291,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,   301,
     302,   303,    -1,    -1,   306,   307,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,    -1,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,   451,
      -1,   453,    -1,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,   468,    -1,   470,   471,
     472,   473,    -1,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,   518,   519,   520,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,   226,    -1,   228,
      -1,    -1,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,   308,
      -1,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,   467,   468,
      -1,   470,   471,   472,   473,    -1,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,   170,
     171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
     181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
     301,   302,   303,    -1,    -1,   306,   307,   308,    -1,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,    -1,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,   467,   468,    -1,   470,
     471,   472,   473,    -1,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,   170,   171,    -1,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,
     183,    -1,   185,   186,    -1,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,    -1,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,   301,   302,
     303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,   467,   468,    -1,   470,   471,   472,
     473,    -1,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,
     185,   186,    -1,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
      -1,    -1,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,
      -1,   306,   307,   308,    -1,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,   376,   377,    -1,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,    -1,   470,   471,   472,   473,    -1,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,   170,   171,    -1,   173,    -1,   175,    -1,
      -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,   186,
      -1,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,   226,
      -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,
     307,   308,    -1,   310,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,   376,
     377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
     467,   468,    -1,   470,   471,   472,   473,    -1,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,    -1,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,   226,    -1,   228,
      -1,    -1,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,   308,
      -1,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,   467,   468,
      -1,   470,   471,   472,   473,    -1,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,   170,
     171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
     181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
     301,   302,   303,    -1,    -1,   306,   307,   308,    -1,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,    -1,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,   467,   468,    -1,   470,
     471,   472,   473,    -1,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,   170,   171,    -1,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,
     183,    -1,   185,   186,    -1,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,    -1,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,   301,   302,
     303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,   467,   468,    -1,   470,   471,   472,
     473,    -1,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,    -1,
     185,   186,    -1,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
      -1,    -1,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,
      -1,   306,   307,   308,    -1,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,   376,   377,    -1,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,    -1,   470,   471,   472,   473,    -1,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,   170,   171,    -1,   173,    -1,   175,    -1,
      -1,    -1,   179,   180,   181,    -1,   183,    -1,   185,   186,
      -1,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,   226,
      -1,   228,    -1,    -1,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,
     307,   308,    -1,   310,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,   376,
     377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
     467,   468,    -1,   470,   471,   472,   473,    -1,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,    -1,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,   181,    -1,   183,    -1,   185,   186,    -1,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,   226,    -1,   228,
      -1,    -1,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,    -1,    -1,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,   301,   302,   303,    -1,    -1,   306,   307,   308,
      -1,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,   467,   468,
      -1,   470,   471,   472,   473,    -1,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,   170,
     171,    -1,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
     181,    -1,   183,    -1,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,   226,    -1,   228,    -1,    -1,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,    -1,    -1,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
     301,   302,   303,    -1,    -1,   306,   307,   308,    -1,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,    -1,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,   467,   468,    -1,   470,
     471,   472,   473,    -1,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    -1,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
     163,    -1,    -1,   166,    -1,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,    -1,   182,
     183,    -1,   185,   186,    -1,    -1,    -1,    -1,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,    -1,   285,   286,   287,   288,    -1,    -1,   291,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,    -1,    -1,    -1,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,    -1,   470,   471,   472,
     473,    -1,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   517,   518,   519,   520,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    -1,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,   163,    -1,    -1,   166,    -1,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,    -1,   185,   186,    -1,    -1,    -1,
      -1,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,    -1,   285,   286,   287,   288,    -1,
      -1,   291,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,   301,   302,   303,    -1,    -1,   306,   307,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
      -1,    -1,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,   451,    -1,   453,    -1,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,   468,    -1,
     470,   471,   472,   473,    -1,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,   518,   519,
     520,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    -1,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,   162,   163,    -1,    -1,   166,
      -1,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
      -1,    -1,    -1,    -1,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,    -1,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,    -1,   285,   286,
     287,   288,    -1,    -1,   291,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,    -1,    -1,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
     467,   468,    -1,   470,   471,   472,   473,    -1,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,   518,   519,   520,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,    -1,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,   183,
      -1,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,    -1,    -1,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,   301,   302,   303,
      -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,   467,   468,    -1,   470,   471,   472,   473,
      -1,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    -1,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,   163,    -1,    -1,
     166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,    -1,   185,
     186,    -1,    -1,    -1,    -1,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
      -1,   247,   248,   249,   250,   251,   252,   253,   254,    -1,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,    -1,   285,
     286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,   301,   302,   303,    -1,    -1,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,    -1,    -1,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,   467,   468,    -1,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   517,   518,   519,   520,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,   170,   171,    -1,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,   181,    -1,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,   226,    -1,   228,    -1,    -1,   231,    -1,
     233,    -1,   235,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,    -1,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,    -1,
     283,    -1,   285,   286,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,   301,   302,
     303,    -1,    -1,   306,   307,   308,    -1,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,    -1,    -1,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,    -1,    -1,    -1,   411,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,   467,   468,    -1,   470,   471,   472,
     473,    -1,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,    -1,   486,    -1,   488,   489,   490,   491,    -1,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    35,    36,    -1,    -1,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,   113,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,   129,    -1,   113,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,
      -1,    -1,   128,   129,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   156,    -1,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     156,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   326,   327,   328,    -1,    -1,    -1,    -1,    -1,
     334,    -1,    -1,   337,    -1,    -1,    -1,    -1,    -1,    -1,
     326,   327,   328,    -1,    -1,    -1,    -1,    -1,   334,    -1,
      -1,   337,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,   380,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,   419,    -1,   403,    -1,    -1,
      -1,    -1,   408,    -1,    -1,    -1,    -1,   431,    -1,    -1,
      -1,   435,    -1,   419,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   431,    -1,    -1,    -1,   435,
      -1,    -1,   456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,
     456,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,    -1,
      -1,   485,    -1,   469,    -1,    -1,    -1,    -1,    -1,   475,
      -1,    -1,    -1,    -1,   480,   499,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,   523,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    -1,   523,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   537
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    77,    86,
      88,   100,   102,   113,   128,   129,   131,   140,   148,   156,
     158,   159,   173,   177,   205,   248,   326,   327,   328,   334,
     337,   371,   380,   396,   403,   408,   419,   431,   435,   456,
     469,   472,   475,   480,   499,   523,   537,   552,   553,   554,
     555,   556,   563,   574,   575,   576,   579,   580,   582,   593,
     611,   659,   671,   680,   683,   687,   689,   692,   693,   697,
     703,   705,   709,   716,   720,   721,   722,   729,   734,   750,
     751,   755,   759,   779,   814,   815,   818,   820,   821,   822,
     823,   825,   827,   828,   832,   885,   886,  1059,  1062,  1063,
    1064,  1065,  1070,  1073,  1079,  1080,  1081,  1085,   450,   502,
    1060,   210,   387,   398,   435,   488,   110,   199,   577,  1060,
       3,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      32,    33,    34,    40,    44,    45,    46,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
      62,    63,    64,    65,    66,    69,    70,    71,    72,    73,
      74,    75,    77,    78,    79,    80,    81,    83,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    96,    97,
      98,    99,   100,   101,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     120,   122,   123,   124,   125,   126,   127,   130,   131,   132,
     133,   134,   137,   138,   139,   140,   141,   142,   143,   145,
     146,   147,   149,   150,   151,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   166,   168,   169,
     170,   171,   173,   175,   176,   178,   179,   180,   181,   182,
     183,   185,   186,   189,   190,   191,   192,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   207,
     208,   209,   210,   211,   212,   213,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   226,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   242,
     243,   244,   245,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     285,   286,   287,   288,   290,   291,   292,   293,   294,   295,
     297,   298,   301,   302,   303,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   341,   342,   343,   344,   345,
     346,   347,   348,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   409,   410,   411,
     412,   413,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   433,   434,
     436,   437,   438,   439,   440,   441,   442,   444,   445,   446,
     448,   450,   451,   452,   453,   454,   456,   457,   458,   459,
     460,   461,   462,   463,   466,   467,   468,   470,   471,   472,
     473,   475,   476,   477,   478,   479,   480,   481,   482,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     497,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   586,   662,   663,   664,   669,   965,  1048,  1052,
       3,   181,   255,   428,   581,   586,   662,   669,   299,  1060,
      57,   177,   537,   606,   183,   249,   304,   325,   347,   387,
     439,   441,   459,   465,   468,   657,   685,   728,     5,    31,
     337,   586,   587,  1047,     3,    31,    35,    36,    37,    38,
      39,    41,    42,    43,    44,    47,    51,    55,    56,    57,
      58,    59,    60,    67,    68,    73,    74,    76,    81,    82,
      83,    84,    85,    91,    95,   102,   103,   110,   114,   117,
     119,   121,   128,   129,   135,   136,   144,   148,   152,   157,
     164,   165,   167,   170,   172,   174,   176,   177,   178,   181,
     182,   184,   187,   188,   189,   190,   193,   201,   206,   214,
     216,   217,   223,   224,   225,   226,   227,   229,   230,   232,
     240,   241,   243,   245,   246,   255,   276,   277,   278,   283,
     284,   287,   289,   290,   292,   296,   299,   300,   304,   305,
     308,   309,   311,   312,   326,   327,   328,   329,   332,   333,
     336,   340,   349,   355,   360,   375,   378,   382,   396,   397,
     404,   408,   409,   412,   414,   428,   430,   431,   432,   435,
     437,   443,   445,   446,   447,   449,   452,   454,   455,   458,
     464,   465,   469,   474,   480,   481,   483,   485,   495,   496,
     498,   499,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   592,   662,   666,   668,   669,    24,    83,
      99,   151,   161,   174,   179,   210,   254,   258,   331,   347,
     348,   384,   387,   398,   401,   421,   435,   441,   442,   453,
     459,   488,   685,   698,   699,   702,  1060,  1047,   102,   140,
     485,   537,   555,   556,   563,   579,   580,   593,   611,   659,
     671,   680,   687,   689,   692,   693,   697,   705,   712,   716,
     722,   729,   750,   814,   815,   818,   820,  1059,  1062,  1063,
    1065,  1070,  1073,  1079,  1085,   110,    77,    68,    81,    83,
     164,   187,   240,   290,   300,   312,   332,   383,   430,   452,
     454,   458,   480,   537,   585,   586,   587,   821,   886,   888,
     890,   900,   907,   908,   965,   967,   968,   110,     5,   586,
     588,   752,   586,  1047,    31,   183,   249,   402,   445,   450,
     482,   586,  1071,  1072,  1083,  1060,    31,   135,   841,   842,
     183,   249,   387,   402,   445,   482,  1074,  1075,  1083,  1060,
     537,   586,   820,   832,  1084,   586,   907,   435,   838,   585,
     178,   537,  1067,   537,   358,   833,   834,  1047,   833,     3,
      55,    56,    58,    59,    73,    74,    81,   114,   117,   157,
     164,   170,   181,   189,   190,   217,   223,   224,   226,   255,
     276,   278,   283,   290,   292,   308,   312,   332,   336,   355,
     382,   404,   412,   428,   430,   445,   446,   452,   454,   458,
     480,   481,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   662,   670,   754,   821,   822,  1079,     0,
     540,   485,   710,   124,   220,   471,   221,   152,   225,   305,
     464,   844,   845,   890,   890,   821,   823,   825,   541,    31,
     347,   445,   450,   820,  1084,   199,   585,  1047,   199,   585,
     199,   907,   199,   585,   284,   588,   354,  1061,   535,   539,
     589,   590,   537,    84,   110,   179,   210,   254,   387,   398,
     435,   459,   488,   584,   110,   820,   585,   439,   441,   439,
     441,   369,   186,   199,   585,   585,   179,   254,   358,   398,
     435,   488,   678,   394,   210,    31,  1047,   199,   592,   260,
     453,   109,   435,   435,   488,   186,   391,   394,   199,   586,
     700,  1054,   199,  1044,  1047,   199,  1047,   537,   708,   304,
     441,   712,     3,   480,   662,   666,   669,   713,   715,   716,
     718,   719,   710,   586,   588,   581,   537,   537,   172,   537,
     537,   779,   821,   908,   537,   537,   585,   537,   537,   177,
     537,   537,   537,   537,   821,   886,   890,   900,   530,   589,
      42,   586,   901,   902,   901,   396,   541,   824,    38,    44,
     103,   178,   216,   232,   243,   277,   326,   333,   378,   397,
     469,   904,   902,    42,   586,   901,   903,   523,   912,   588,
     526,   537,   537,   816,  1072,  1072,  1072,   520,   231,  1072,
     539,   299,     4,     6,     7,     8,     9,    10,    41,    56,
      58,    59,    67,    73,    74,    85,   114,   117,   119,   139,
     157,   165,   170,   189,   190,   223,   224,   226,   255,   276,
     278,   284,   289,   292,   301,   355,   382,   412,   445,   446,
     455,   481,   521,   528,   529,   530,   535,   537,   543,   544,
     549,   550,   586,   588,   821,   875,   924,   927,   930,   931,
     932,   934,   935,   936,   937,   939,   940,   956,   958,   959,
     960,   961,   962,   963,   964,   965,   966,   968,   970,   985,
     986,   997,  1019,  1026,  1034,  1035,  1036,  1048,  1049,  1050,
    1033,  1035,  1074,  1074,   588,  1074,   520,  1074,   177,   447,
     526,  1061,   539,   589,   694,   907,     3,   176,   178,   485,
     716,  1066,  1068,   176,  1069,   956,  1003,  1004,   833,   541,
     537,  1056,   257,   538,   538,   538,   554,   585,   177,   304,
     737,   162,   694,   752,    31,   135,   839,   839,    61,   839,
     167,   172,   246,   296,   850,   852,   853,   878,   880,   881,
     882,   188,   299,   474,   299,   844,   845,   537,   436,  1082,
     186,   520,   231,   157,    27,    33,   140,   303,   367,   371,
     403,   477,   568,   571,   572,   367,   157,    42,    62,   108,
     209,   259,   269,   281,   314,   367,   373,   398,   403,   419,
     557,   560,   571,   157,   367,   403,   571,   157,   367,   403,
     571,   157,    42,   578,   300,   504,   956,  1027,   591,   592,
     590,     3,    31,    38,    44,    51,    57,    83,    85,    91,
     103,   135,   176,   178,   181,   182,   201,   216,   229,   230,
     232,   243,   245,   255,   277,   287,   309,   311,   333,   378,
     397,   409,   428,   437,   458,   483,   485,   538,   662,   667,
     669,   956,  1006,  1007,  1051,  1057,   956,   435,   585,   586,
     538,   537,   646,   347,   387,   657,   685,   585,   284,   681,
      42,   488,   199,   585,   199,   585,   661,   199,   585,   199,
     585,   199,   586,   684,    91,   725,   157,   503,   199,   585,
      92,   132,   317,   440,   199,   586,   157,   539,  1055,    65,
     374,   541,   701,   157,   541,   701,   157,   299,   706,   707,
     956,  1057,   369,   538,   541,     4,   165,   299,   455,   528,
     529,   559,   562,   588,   711,   713,   714,   717,  1050,   712,
     447,   537,   601,   605,   956,  1004,   537,     3,    70,    71,
     111,   112,   115,   116,   196,   197,   261,   262,   263,   264,
     265,   266,   267,   268,   271,   272,   350,   351,   392,   393,
     493,   494,   517,   518,   588,   942,   943,   944,   945,   946,
     947,   948,   949,   950,   951,   952,   953,   954,  1009,  1010,
     480,   902,   903,   956,   585,   956,  1011,   528,   529,   586,
     957,   958,   986,   997,  1013,   537,   956,  1003,  1014,   956,
      60,   177,   241,   449,   956,  1004,  1017,   956,   538,   587,
     537,   437,   858,   859,   859,   841,   842,   890,   227,   836,
      38,   232,   397,   904,   232,   309,   905,   890,   905,   232,
     904,   537,   232,   905,   153,   207,   892,   232,   859,   537,
     587,   537,   859,   306,   956,  1076,  1078,  1006,     3,    38,
      44,    51,    56,    57,    58,    59,    73,    74,    83,    85,
      91,   103,   114,   117,   170,   176,   178,   182,   201,   216,
     223,   224,   226,   229,   230,   232,   243,   245,   255,   276,
     277,   278,   287,   292,   309,   311,   333,   355,   378,   382,
     397,   404,   409,   412,   428,   437,   445,   446,   458,   464,
     481,   485,   662,   665,   669,   918,   920,   921,   923,   925,
     927,   929,   931,   932,   933,   935,   936,   939,   940,  1008,
    1053,    42,   244,   586,   537,   535,   821,   484,   938,   956,
    1023,   938,   938,   537,   537,   926,   926,   336,   821,   537,
     928,   544,    73,    74,   938,   956,   926,   537,   537,   501,
     523,   537,   941,   537,   941,   956,   956,   956,    85,   153,
    1037,  1038,   956,  1004,  1005,   821,   956,  1003,   587,   987,
     988,   989,     9,   592,   539,   589,  1028,   589,   537,   588,
     537,   537,   588,  1050,     3,     8,    11,    15,    16,    17,
      18,    19,    20,    21,    37,    42,    48,    55,    82,   182,
     201,   206,   229,   230,   245,   284,   287,   301,   304,   409,
     521,   524,   525,   526,   528,   529,   530,   531,   532,   533,
     995,   996,   997,   999,  1031,   500,   971,   311,   956,   541,
     836,   537,   588,   836,     3,   119,   249,   559,   588,   940,
    1077,   106,  1078,  1078,   586,    42,   586,   538,   541,   710,
     541,   538,   834,  1044,  1045,    42,   754,   783,   787,   788,
    1056,   694,   200,   369,   227,   646,   403,   177,   486,   753,
     823,   823,    31,   846,   847,   956,    61,   823,   840,   169,
     280,   866,   235,   281,   354,   406,   471,     4,     9,    31,
     861,   956,   528,   529,   862,   863,   956,   958,   878,   879,
     853,   852,   850,   851,   172,   881,   294,   883,    61,   829,
     830,   831,   893,   957,  1035,  1035,   850,   878,  1004,   586,
     244,   585,    76,    84,    95,   174,   199,   340,   465,   586,
     628,   638,   653,    84,    95,   819,    95,   819,   537,   447,
     537,   626,   253,   468,   626,    95,   541,   447,   585,     3,
     923,   559,    61,   561,   559,   559,   108,   259,   269,    61,
     447,   499,   523,   558,   274,   387,   558,   560,   907,    95,
     447,   819,   387,   585,   447,   387,   577,   586,   601,   536,
     548,  1006,  1006,  1007,   541,   844,   845,    13,    14,   229,
     229,   447,   447,   586,   645,   650,   499,   604,   186,   585,
     358,   398,   435,   488,   678,   394,   282,   487,   756,   157,
     102,   611,   682,   687,   722,  1085,   149,   920,   585,   284,
     557,   688,   284,   537,   646,    42,   284,   646,   284,   537,
     672,   673,   674,   675,   676,   677,   679,   284,   206,   686,
     199,   586,   640,   726,   592,   157,   701,   157,   177,   704,
     700,   591,   539,  1054,  1044,  1047,  1047,  1054,   538,   541,
      13,   712,   718,     4,  1050,     4,  1050,   588,   592,   603,
     610,    57,   104,   125,   146,   150,   173,   176,   194,   289,
     297,   319,   352,   607,    42,   538,   956,   538,   177,   541,
     538,   329,  1012,   538,   957,   957,    11,    15,    16,    19,
      20,    21,   206,   229,   301,   524,   525,   526,   528,   529,
     530,   531,   532,   533,   997,   957,   538,   909,   910,   967,
     172,   177,  1015,  1016,   541,   538,    42,  1017,  1004,  1017,
    1017,   177,   538,    42,   901,   537,  1045,     4,     9,   586,
     854,   856,   857,  1035,  1033,   183,   249,   435,   439,   441,
     468,   585,   837,   496,   913,   890,   232,   890,   299,   474,
     906,   890,   232,  1035,   890,   291,   291,   537,   890,   587,
     914,   915,   537,   587,   914,   541,   538,   541,   539,   537,
     923,   537,   537,   539,    41,   922,   537,   942,   943,   944,
     945,   946,   947,   948,   949,   950,   951,   952,   953,   954,
     955,   538,   541,   926,   593,   693,   729,   734,   817,   820,
    1062,  1079,  1004,  1005,   537,   495,  1020,  1021,   956,  1005,
    1050,   956,   990,   991,   992,   993,   938,   938,     8,    15,
      16,    19,    20,    21,   524,   525,   526,   528,   529,   530,
     531,   532,   533,   586,   995,  1000,   538,  1004,   445,   445,
    1050,  1050,   537,   537,   586,   369,  1042,   172,   536,   538,
     541,   548,   541,   545,   530,   590,  1004,  1050,   956,   955,
     955,   920,   956,   956,   956,   956,   956,   956,   956,   956,
       5,   592,  1058,   445,    47,   432,  1032,  1054,   956,   956,
     537,   821,   961,  1018,  1026,   135,   165,   284,   289,   294,
     455,   466,   956,   289,   537,   956,   447,    55,   182,   201,
     206,   245,   409,   956,   956,   956,   956,   956,   956,   956,
     956,   956,   956,    31,    39,   414,   994,   535,   539,  1030,
     188,   168,   972,   382,   537,   986,  1036,   177,   887,  1006,
     887,   537,   588,   586,   585,  1066,   574,   585,   956,   541,
     538,   258,   284,   835,   526,    31,    39,   407,   786,   234,
     541,   780,   474,   696,   585,   731,   537,   586,   736,   746,
     747,   749,   586,   588,   586,   588,    43,   128,   848,   541,
     474,   848,   274,   823,   382,   383,   528,   529,   863,   865,
     958,   406,   235,   300,   324,   324,   541,   532,     4,   864,
    1050,   864,   382,   383,   865,   585,  1043,   288,   411,   884,
     537,  1045,  1046,   541,   188,   474,   206,   188,   227,   879,
     851,   538,   367,   571,   537,   199,   638,  1047,   235,   284,
     235,   474,   537,   631,   919,   920,  1047,   586,   199,  1047,
     199,   586,    27,   140,   403,   567,   570,   592,   622,   636,
    1047,   592,   630,   649,  1047,   568,  1047,   367,   403,   557,
     571,   559,  1054,  1047,   559,  1054,  1047,   559,   367,   403,
     571,  1047,  1047,  1047,  1047,   367,   403,   571,  1047,  1047,
     588,   529,   956,  1027,   844,   844,   844,   483,  1007,   200,
     372,   843,   956,   956,   289,   583,   588,   289,   583,   586,
     345,   600,   538,   541,   297,   177,   447,   595,   585,   681,
     488,   585,   585,   661,   585,   585,   684,   436,   585,   304,
     657,   537,   821,   537,   157,   157,   245,   586,   628,   638,
     641,   644,   654,   656,   499,   501,   633,   156,   820,   157,
     499,   727,   157,   538,  1006,   541,   541,    42,   157,     3,
     537,   284,   299,   585,   586,     3,   701,   591,   701,   299,
     701,   706,   956,   601,   255,   530,   535,   537,   559,   602,
     717,   962,   963,   964,   538,   541,    42,   599,   588,   599,
     284,   289,   352,   599,    61,   599,   920,   538,   956,   956,
     956,  1015,   920,   957,   957,   957,   957,   957,   957,   135,
     284,   294,   957,   957,   957,   957,   957,   957,   957,   957,
     957,   957,   538,   541,    42,   911,   956,   956,  1016,  1015,
     920,   538,   538,   538,  1004,   920,  1045,   538,   324,   532,
     324,   383,   532,   537,   537,   836,   439,   441,   439,   441,
     585,   838,   838,   838,   956,   188,   867,   906,   890,   956,
     537,   890,   172,   537,   587,   897,   906,   920,   538,   541,
     914,   538,  1076,     3,  1008,    41,   922,   586,   917,   917,
       3,   535,   535,  1050,   447,   447,   447,   447,   920,   471,
     538,   536,  1004,   956,   144,  1021,  1022,   538,   538,   538,
     548,   541,   545,   539,   538,   538,   520,   520,   538,   538,
     956,  1045,   537,   956,  1039,   586,   969,  1024,  1025,   956,
     956,   987,  1038,   538,   538,   538,   520,   957,   957,   150,
    1004,   177,   135,   165,   289,   294,   455,   466,   537,   150,
    1000,   956,   432,  1032,   956,  1018,   956,   447,   537,   821,
     956,  1027,   591,   537,   537,   160,   973,   888,   889,   913,
     844,   913,  1050,   955,  1056,  1056,   258,   537,    26,   322,
     323,   407,   410,   448,   492,   781,   784,     9,   407,   785,
       9,     8,    17,   524,   529,   535,   537,   796,   797,   798,
     799,   806,   807,   808,   811,   812,   786,   788,   496,   776,
     889,   496,   695,    42,    61,   732,   742,   749,  1028,   541,
     887,   526,   753,   753,   522,   849,   847,   301,   995,   998,
     849,     4,  1050,   865,   300,   471,   862,   541,   252,  1045,
     829,    61,  1035,   537,   587,    61,   274,   447,   956,   284,
     653,   537,   157,   537,   631,   210,   650,   651,   612,    42,
     181,   621,   647,   612,    27,   140,   371,   373,   403,   564,
     565,   566,   572,   573,   157,   701,   157,   701,   622,   636,
     622,   538,   541,   588,   615,   526,   539,   538,   541,   447,
     387,    95,   447,   819,   387,   447,   447,   447,   387,   578,
     548,   536,   548,   843,   843,   843,  1007,   291,   291,   538,
     537,   594,     3,   422,   423,   588,   609,   645,   600,   756,
     585,   688,   537,    42,   646,   675,   677,   686,   537,   681,
     369,   435,   588,   690,   691,   650,   585,   585,   661,   585,
     538,   541,   297,   626,   297,   299,   625,  1047,   499,   660,
     585,   626,    42,   585,   538,   673,   679,   676,   679,   435,
     956,   684,   610,   157,   585,   701,   704,  1054,   597,   608,
     717,   603,   588,   588,   289,   650,   530,   650,   588,   530,
     650,   588,   538,   538,  1016,   177,   135,   294,   537,   912,
     909,   537,   538,   538,   538,   586,   854,   913,   838,   838,
     838,   838,   585,   585,   585,    61,   193,   876,   906,  1045,
     537,   894,   895,   896,   959,   961,  1045,   172,    82,   916,
     915,   538,   538,   535,   920,   538,   541,   538,  1050,   536,
    1050,   538,   943,   945,   946,   947,   946,   947,   947,   538,
     443,   956,   148,   956,   990,  1000,   941,   941,   538,   538,
     956,  1039,  1040,  1041,    42,   206,   541,   538,  1042,   955,
     956,    37,    37,   956,   538,   956,   177,   537,  1008,   956,
     538,   150,   957,   957,   150,   150,   956,   956,   536,   548,
     537,  1029,   845,   496,   956,   310,   977,   541,   867,   843,
     867,   538,   817,   781,   784,   781,   781,   781,   784,   784,
     784,   529,   806,   525,   535,   783,   795,   754,   809,   810,
     798,   798,   542,   789,   810,   528,   530,   543,   544,   791,
     284,   521,   528,   529,   813,   958,   986,    85,   778,   956,
     375,   740,   586,   274,   332,   119,   313,   537,   730,   820,
     538,   541,   736,   695,   956,   169,   239,   537,   849,   300,
     585,   538,  1046,   188,   821,   822,  1035,  1046,  1047,  1047,
     538,   157,   651,   638,   651,   612,   640,   541,   538,   121,
     214,   281,   284,   637,   537,    34,    61,   658,   647,    76,
      82,    95,   119,   121,   214,   284,   289,   340,   360,   465,
     474,   617,   618,   632,   181,   119,   198,   284,   626,   558,
     109,   119,   181,   284,   421,   424,   560,   626,   403,   566,
     459,  1047,   586,   570,     3,    38,    44,    51,    57,    83,
      85,    91,   103,   176,   178,   181,   182,   201,   216,   229,
     230,   232,   243,   245,   255,   277,   283,   287,   301,   309,
     311,   333,   378,   397,   404,   409,   428,   437,   458,   464,
     485,   528,   529,   559,   588,   613,   652,   662,   668,   669,
     920,   998,  1051,   592,   649,  1047,  1047,  1047,  1047,  1047,
    1047,  1047,  1047,  1047,  1047,   601,  1027,  1027,   538,   538,
     538,   844,   109,   387,   539,   558,   609,   436,   537,   644,
     820,   727,   537,   585,   766,   771,   657,   199,   585,   538,
     541,   538,   688,   537,    42,   635,   633,   641,    88,   708,
     109,   281,   646,   820,   675,   677,    42,    42,   821,   822,
     686,   538,   640,   474,   724,   701,   538,   541,   650,   957,
     177,   537,  1008,   914,   538,   541,   538,   867,   585,   585,
     585,   585,    31,   105,   189,   381,   537,   868,   869,   870,
     871,   872,   873,   874,   956,   956,   498,   974,   538,   958,
    1001,  1002,   206,   188,   891,   895,   538,   897,   898,   899,
    1054,   922,  1050,   922,   586,   922,   536,   536,   956,   541,
     538,   586,   956,   958,  1025,   956,   956,   956,  1008,   538,
     956,    37,    37,   956,   956,   150,   538,   529,  1027,   538,
    1006,   538,   956,   538,   537,   586,   978,   876,   538,   876,
     588,   538,   188,   191,   782,   535,   784,   536,   229,   548,
     804,   805,   538,   528,   798,   536,     9,   790,   813,   813,
     813,   813,    11,    16,    17,    18,    19,    20,    21,    37,
      48,    55,    82,   182,   201,   206,   229,   230,   245,   284,
     287,   304,   409,   521,   524,   525,   526,   528,   529,   530,
     531,   532,   533,   997,   311,   537,   538,  1034,   480,   434,
     473,   741,   586,   735,   745,   299,   738,   526,   749,   740,
    1000,    61,   538,   538,   479,   480,   826,   612,   638,   538,
     538,   499,   643,   122,   202,   212,   121,   476,   956,   119,
      42,   537,  1054,  1047,   957,   122,   202,   121,   289,   235,
     585,   643,    90,   658,   199,   289,   559,   956,   658,   289,
     528,   529,   562,   586,   920,   701,   701,     3,   255,   428,
    1051,  1055,   526,   447,   447,   536,   536,   843,   538,   538,
     586,   601,   474,   596,   598,   537,   650,   538,   660,    42,
     610,    42,   541,   760,   281,   346,   775,   435,   284,   537,
     588,   727,   644,   156,   820,   154,   208,   625,   124,   140,
     339,   660,   109,   727,   499,  1086,   435,   537,   299,   586,
     723,   537,   608,   957,  1008,   538,   538,     9,   368,   860,
     876,   537,   405,   537,   538,   541,   586,   975,   976,   349,
     877,   541,   538,   537,   587,    61,   538,   206,   538,   898,
     536,   920,  1039,   536,   199,   538,   956,   956,   956,   548,
     536,   548,   538,   538,   586,   979,   974,   588,   974,   799,
     791,   776,   537,   547,   754,   803,   542,   529,   806,   541,
     920,   813,   813,   813,   813,   813,   813,   813,   445,   432,
    1032,  1054,   813,   813,  1018,   135,   165,   284,   289,   294,
     455,   466,   813,   289,   813,   447,    55,   201,   206,   245,
     409,   813,   813,   813,   813,   813,   813,   813,   813,   813,
     813,   986,  1035,   585,   777,   541,   479,  1028,   538,   541,
      93,   740,   956,   538,  1046,  1046,   360,   643,   537,   634,
     612,   538,   198,   537,   956,   284,   618,   643,   646,  1047,
      42,   157,   916,  1055,   532,   613,  1047,  1047,   538,   558,
     126,   766,   538,   633,   820,   538,   754,   766,   538,   346,
      40,   537,   769,   774,   236,   764,   585,   157,    42,   538,
    1047,   660,    31,    87,    96,   120,   198,   211,   421,   424,
     629,   629,   383,   383,    42,    66,    76,   249,   821,   610,
     585,   537,   586,   739,   748,   967,   538,   538,   537,   974,
    1004,   537,  1004,   870,    42,   541,   956,   474,   855,   958,
    1035,  1045,   902,   537,   902,   956,  1027,  1027,   319,   980,
     877,   877,   776,   101,   794,   802,   803,   803,   791,   790,
     520,   957,   957,   150,   177,   135,   165,   289,   294,   455,
     466,   537,   150,   813,   432,  1032,   813,  1018,   813,   447,
     538,   820,   313,   820,   735,   299,   537,   733,   585,   612,
     592,   639,   642,   425,   490,   619,   620,   537,   614,   956,
     538,   257,   655,   198,   474,   569,   532,   459,   601,   588,
     760,   727,   625,  1086,   760,   142,   364,   757,   758,   754,
     770,   772,    31,   754,   206,   765,   537,   585,   820,   633,
     708,   820,    76,   302,    76,   538,   724,   956,    82,   743,
     538,   541,   743,     9,   877,   538,   869,   538,   978,   976,
     385,   538,  1035,   536,   536,   536,    61,   844,   855,   855,
     794,   957,   538,   542,   546,   545,   813,    37,    37,   813,
     813,   177,   537,  1008,   813,   150,   957,   957,   150,   150,
     813,   741,    95,   748,   136,   646,   526,   538,   541,   557,
     538,   281,   627,   178,   318,   410,   299,   623,   624,   648,
     614,   956,   459,   538,    42,   436,    42,   538,   541,    85,
     585,   537,  1086,   625,   660,  1086,   302,   302,   537,   538,
    1054,   744,  1054,   727,   739,   744,   538,   855,   538,   857,
     538,  1003,   191,   353,   383,   981,   119,   793,   800,   803,
     801,   803,   813,   813,   813,  1008,   538,   813,    37,    37,
     813,   813,   150,   479,  1047,   538,   285,   471,   655,   613,
     642,   538,   620,   212,   124,   471,   299,   648,   299,   623,
     758,   820,   537,   754,   770,   152,   773,   537,   748,   743,
     848,   913,   848,    55,   106,   461,   956,   982,   983,   982,
     982,   538,     4,     9,   792,   542,   546,   538,   813,   813,
     813,   820,   913,   403,   624,    65,   281,   374,   403,   616,
     616,  1086,   768,   771,   537,   754,   763,   538,   744,   849,
     849,   983,   382,   171,   335,   171,   335,   153,   984,   984,
     984,   800,   801,   747,   612,    25,   119,   289,   541,   767,
     415,   772,   538,   541,   727,   848,    37,   106,   188,   281,
     444,   913,   768,   538,   235,   585,   762,   538,   754,   913,
     849,   983,   382,   307,   767,   537,   761,   130,  1044,   360,
     762,   538,   585,   775,   537,   764,  1044,   765,   538
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   551,   552,   553,   553,   554,   554,   554,   554,   554,
     554,   554,   554,   554,   554,   554,   554,   554,   554,   554,
     554,   554,   554,   554,   554,   554,   554,   554,   554,   554,
     554,   554,   554,   554,   554,   554,   554,   554,   554,   554,
     554,   554,   554,   554,   554,   554,   554,   554,   554,   554,
     563,   563,   563,   563,   563,   563,   563,   563,   564,   564,
     565,   565,   566,   566,   566,   566,   567,   567,   568,   568,
     568,   568,   568,   568,   568,   568,   568,   568,   568,   568,
     568,   568,   568,   568,   568,   568,   568,   568,   568,   568,
     568,   568,   568,   568,   568,   568,   568,   569,   569,   570,
     570,   570,   570,   571,   571,   572,   573,   573,   573,   692,
     692,   692,   692,   585,   585,   586,   586,   586,   586,   587,
     587,   588,   589,   589,   590,   591,   592,   592,   592,   592,
     592,   818,   818,   818,   818,   818,   818,   818,   818,   818,
     818,   818,   818,   818,   819,   819,   729,   730,   730,   730,
     730,   730,   731,   731,   732,   732,   732,   733,   733,   733,
     734,   734,   735,   736,   736,   737,   737,   737,   738,   738,
     738,   739,   739,   739,   740,   740,   741,   741,   742,   742,
     743,   743,   744,   744,   745,   745,   746,   746,   747,   747,
     748,   748,   749,   689,   689,   689,   690,   690,   691,   691,
     814,   814,   814,   687,   687,   687,   688,   688,   683,   683,
     683,   684,   684,   685,   685,   685,   686,   686,  1063,   705,
     705,   705,   706,   706,   707,   707,   708,   708,   556,   556,
     557,   557,   558,   558,   558,   559,   559,   559,   559,   560,
     560,   560,   560,   560,   560,   560,   560,   560,   560,   560,
     560,   560,   560,   561,   561,   562,   562,   562,   703,   703,
     704,   704,  1059,  1059,  1059,  1059,  1059,  1059,  1060,  1060,
    1060,  1061,  1061,  1061,  1064,   754,   754,   754,   755,   755,
     756,   756,   757,   757,   758,   758,   759,   759,   760,   760,
     761,   762,   762,   763,   763,   764,   764,   765,   765,   766,
     767,   767,   768,   769,   769,   770,   770,   771,   771,   772,
     772,   773,   773,   774,   774,   775,   775,   775,   776,   776,
     777,   777,   778,   778,   779,   780,   780,   781,   781,   781,
     782,   782,   782,   783,   783,   784,   784,   784,   784,   784,
     785,   785,   786,   786,   786,   786,   786,   786,   787,   787,
     788,   789,   789,   790,   790,   791,   791,   791,   791,   791,
     792,   792,   793,   793,   794,   794,   795,   796,   797,   797,
     798,   798,   798,   799,   799,   800,   800,   801,   801,   802,
     802,   802,   803,   803,   803,   804,   804,   805,   805,   806,
     806,   806,   807,   807,   808,   808,   809,   809,   810,   811,
     811,   811,   812,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   611,   611,   611,   612,   612,   613,
     613,   613,   613,   613,   613,   614,   614,   615,   616,   616,
     616,   616,   616,   617,   617,   617,   617,   618,   618,   618,
     618,   618,   618,   618,   618,   619,   619,   620,   620,   621,
     621,   621,   622,   623,   624,   624,   624,   624,   624,   625,
     625,   625,   625,   626,   627,   627,   628,   628,   629,   629,
     629,   629,   629,   629,   629,   629,   630,   630,   631,   632,
     632,   632,   632,   633,   633,   633,   633,   634,   635,   635,
     635,   636,   637,   637,   637,   637,   637,   637,   638,   638,
     639,   639,   640,   641,   641,   641,   642,   642,   643,   643,
     644,   644,   644,   645,   646,   646,   647,   647,   648,   649,
     649,   649,   649,   650,   650,   651,   651,   652,   652,   652,
     653,   653,   653,   653,   653,   653,   654,   654,   655,   655,
     655,   655,   656,   657,   657,   657,   657,   657,   657,   657,
     657,   658,   658,   697,   697,   697,   697,   697,   697,   698,
     698,   698,   698,   698,   698,   698,   698,   698,   698,   698,
     698,   698,   698,   698,   698,   698,   698,   699,   699,   699,
     699,   699,   699,   700,   700,   701,   701,   701,   702,   702,
     702,   671,   671,   671,   671,   671,   671,   672,   673,   674,
     674,   675,   675,   676,   677,   677,   678,   678,   679,   679,
    1062,   593,   593,   593,   594,   594,   594,   595,   595,   596,
     596,   597,   597,   598,   598,   599,   599,   600,   600,   601,
     601,   602,   602,   602,   602,   602,   602,   602,   602,   603,
     604,   604,   605,   605,   606,   606,   607,   607,   607,   607,
     607,   607,   607,   607,   607,   607,   607,   607,   607,   607,
     607,   607,   608,   609,   609,   609,   609,   609,   610,   610,
     820,   820,   821,   821,   821,   822,   822,   822,   822,   822,
     822,   822,   822,   823,   823,   824,   824,   825,   825,   825,
     825,   825,   825,   825,   825,   825,   825,   825,   825,   825,
     825,   825,   825,   825,   825,   825,   826,   826,   827,   827,
     828,   828,   829,   829,   829,   830,   830,   831,   831,   832,
     832,   832,   833,   833,   834,   835,   835,   835,   836,   836,
     837,   837,   837,   837,   837,   837,   837,   837,   837,   838,
     838,   839,   839,   839,   840,   841,   841,   842,   842,   843,
     843,   843,   844,   844,   845,   845,   846,   846,   847,   847,
     848,   848,   848,   849,   849,   849,   850,   850,   850,   850,
     851,   851,   852,   852,   852,   852,   853,   853,   854,   854,
     854,   854,   854,   854,   855,   855,   856,   856,   857,   857,
     857,   857,   858,   859,   859,   860,   860,   861,   861,   861,
     861,   861,   862,   863,   863,   863,   864,   864,   865,   865,
     866,   866,   867,   867,   867,   868,   868,   869,   869,   870,
     870,   870,   870,   870,   871,   872,   873,   874,   875,   875,
     876,   876,   877,   877,   878,   878,   879,   879,   880,   880,
     881,   882,   882,   882,   882,   883,   883,   884,   884,   884,
     885,   885,   886,   886,   887,   887,   888,   888,   889,   889,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   891,   891,   892,   892,   892,   893,   893,   894,   894,
     894,   894,   895,   895,   896,   896,   897,   897,   898,   899,
     899,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   901,   901,   901,   901,   902,   902,   903,   903,
     903,   903,   903,   904,   904,   904,   904,   904,   904,   905,
     905,   906,   906,   907,   907,   907,   907,   908,   908,   909,
     910,   910,   911,   911,   912,   912,   913,   913,   914,   914,
     915,   916,   916,   917,   917,   918,   918,   919,   919,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   921,
     921,   922,   922,   922,   923,   923,   923,   923,   923,   923,
     923,   924,   924,   924,   924,   925,   926,   926,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   928,
     928,   929,   929,   930,   930,   931,   932,   933,   933,   934,
     934,   935,   936,   937,   937,   937,   937,   937,   937,   938,
     938,   939,   939,   939,   939,   940,   941,   941,   941,   942,
     942,   943,   943,   944,   944,   945,   945,   946,   946,   947,
     947,   948,   948,   949,   949,   950,   950,   951,   951,   952,
     952,   953,   953,   954,   954,   955,   955,   955,   955,   955,
     955,   955,   955,   955,   955,   955,   955,   955,   955,   955,
     955,   955,   955,   955,   955,   955,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   957,   957,   957,
     957,   957,   957,   957,   957,   957,   957,   957,   957,   957,
     957,   957,   957,   957,   957,   957,   957,   957,   957,   957,
     957,   957,   958,   958,   959,   959,   959,   959,   959,   959,
     960,   960,   960,   961,   961,   961,   961,   961,   961,   961,
     961,   961,   961,   961,   961,   962,   963,   964,   965,   965,
     965,   965,   965,   965,   966,   966,   967,   967,   968,   968,
     968,   968,   968,   968,   968,   968,   968,   968,   968,   968,
     968,   968,   969,   970,   970,   971,   971,   972,   972,   972,
     973,   973,   974,   974,   975,   975,   976,   977,   977,   977,
     978,   979,   979,   980,   980,   981,   981,   981,   981,   982,
     982,   983,   983,   983,   983,   983,   984,   984,   984,   984,
     984,   985,   985,   986,   986,   987,   988,   988,   989,   989,
     990,   991,   991,   992,   992,   993,   993,   994,   994,   994,
     995,   995,   996,   996,   996,   996,   996,   996,   996,   996,
     996,   996,   996,   996,   996,   996,   997,   997,   998,   998,
     999,   999,   999,   999,   999,   999,   999,   999,  1000,  1000,
    1001,  1001,  1002,  1002,  1003,  1003,  1004,  1004,  1005,  1005,
    1006,  1006,  1007,  1007,  1007,  1008,  1008,  1009,  1009,  1010,
    1010,  1010,  1010,  1010,  1010,  1010,  1010,  1010,  1010,  1010,
    1010,  1010,  1010,  1010,  1011,  1011,  1012,  1013,  1013,  1014,
    1014,  1014,  1014,  1014,  1014,  1015,  1016,  1017,  1017,  1017,
    1018,  1018,  1018,  1018,  1019,  1020,  1020,  1021,  1022,  1022,
    1023,  1023,  1024,  1024,  1025,  1026,  1026,   590,   590,   590,
     590,  1027,  1027,  1028,  1028,  1029,  1029,  1029,  1030,  1030,
    1030,  1030,  1030,  1031,  1031,  1032,  1032,  1033,  1033,  1034,
    1034,  1035,  1035,  1036,  1036,  1036,  1037,  1037,  1038,  1038,
    1039,  1040,  1040,  1041,  1041,  1042,  1042,  1042,  1043,  1043,
    1044,  1044,  1045,  1045,  1046,  1046,  1047,  1048,  1048,  1049,
    1049,  1049,  1049,  1049,  1049,  1049,  1049,  1049,  1049,  1049,
    1049,  1049,  1049,  1050,  1051,  1051,  1051,  1051,  1052,  1052,
    1052,  1052,  1053,  1053,  1053,  1053,  1054,  1054,  1055,  1055,
    1056,  1056,  1057,  1058,  1058,   815,   816,   816,   817,   817,
     817,   817,   817,   817,   680,   680,   680,   681,   681,   682,
     682,   682,   682,   722,   722,   723,   724,   724,   725,   725,
     726,   726,   727,   727,   728,   728,   555,   555,   555,   555,
     555,   555,   580,   580,   581,   581,   582,   582,   583,   583,
     584,   584,   584,   584,   584,   584,   584,   584,   584,   584,
     720,   720,   721,   709,   709,   709,   709,   710,   710,   711,
     711,   711,   712,   712,   712,   712,   712,   712,   712,   712,
     712,   712,   712,   712,   712,   712,   712,   712,   712,   712,
     712,   712,   712,   712,   712,   712,   712,   712,   712,   712,
     712,   712,   712,   713,   713,   713,   713,   714,   714,   715,
     715,   716,   716,   717,   717,   717,   717,   718,   719,   719,
    1073,  1073,  1073,  1073,  1073,  1074,  1074,  1074,  1074,  1075,
    1075,  1076,  1077,  1077,  1077,  1077,  1077,  1077,  1077,  1078,
    1078,   750,   750,   750,   750,   751,   751,   752,   752,   753,
     753,   753,  1065,  1065,  1065,  1065,  1065,  1066,  1066,  1066,
    1066,  1066,  1067,  1067,  1068,  1068,  1069,  1069,   693,   693,
     694,   694,   694,   695,   695,   696,   696,   574,   574,   575,
     575,   576,   576,   576,   577,   577,   578,   578,  1070,  1070,
    1070,  1070,  1070,  1071,  1071,  1072,  1072,  1072,  1079,  1079,
    1079,  1079,  1079,  1079,  1079,  1079,  1079,  1080,  1080,  1081,
    1081,  1082,  1082,  1083,  1083,  1084,  1084,   579,  1085,  1085,
    1085,  1085,  1085,  1086,  1086,  1086,  1086,   659,   659,   659,
     660,   660,   660,   661,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
       3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
       3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
       3,     2,     3,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     6,     6,     8,     6,     8,     6,     8,     6,     8,
       8,    10,     8,    10,     1,     0,     9,     1,     4,     4,
       7,     2,     1,     3,     2,     2,     0,     4,     3,     0,
       1,     0,     2,     3,     5,     2,     2,     0,     8,     5,
       0,     5,     5,     7,     2,     0,     1,     1,     1,     3,
       2,     0,     1,     0,     1,     3,     1,     3,     1,     2,
       1,     3,     2,     6,     8,     5,     1,     0,     1,     3,
       2,     4,     5,     5,     8,     7,     1,     0,     8,    11,
      10,     0,     1,     0,     1,     1,     0,     2,     4,     3,
       9,    12,     1,     3,     1,     3,     3,     0,     4,     6,
       1,     2,     1,     1,     0,     1,     2,     2,     1,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     3,     3,
       3,     1,     3,     1,     0,     1,     2,     2,     5,     7,
       0,     2,     2,     3,     3,     2,     2,     2,     1,     1,
       0,     2,     2,     0,     2,     1,     1,     1,     5,     7,
       1,     1,     1,     1,     6,     0,    11,    13,     3,     0,
       3,     7,     1,     1,     3,     2,     0,     5,     0,     4,
       3,     0,     8,     1,     0,     1,     3,     1,     3,     1,
       3,     4,     0,     4,     3,     2,     2,     0,     2,     0,
       1,     0,     4,     0,     9,     2,     0,     1,     1,     0,
       1,     1,     0,     2,     0,     2,     2,     2,     2,     1,
       1,     0,     3,     4,     3,     2,     3,     0,     1,     3,
       3,     1,     3,     1,     0,     1,     1,     1,     5,     0,
       1,     1,     2,     0,     3,     0,     5,     4,     1,     1,
       2,     2,     0,     1,     3,     1,     3,     1,     3,     1,
       3,     3,     1,     2,     3,     2,     0,     1,     1,     1,
       2,     1,     2,     3,     2,     1,     1,     0,     4,     2,
       5,     1,     3,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     3,     3,     3,     3,     4,
       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,
       6,     7,     3,     4,     9,    12,    11,     0,     2,     1,
       1,     1,     1,     1,     1,     3,     0,     1,     2,     1,
       1,     2,     2,     3,     1,     1,     2,     2,     1,     2,
       3,     5,     3,     2,     5,     1,     1,     1,     0,     5,
       7,     5,     2,     3,     1,     1,     2,     2,     0,     3,
       4,     4,     0,     3,     2,     0,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     1,
       2,     2,     2,     2,     2,     2,     0,     3,     3,     3,
       0,     1,     2,     1,     2,     2,     2,     2,     3,     4,
       1,     3,     1,     1,     1,     1,     3,     1,     2,     0,
       1,     2,     0,     1,     3,     0,     2,     0,     3,     3,
       1,     5,     3,     1,     3,     1,     2,     1,     4,     5,
       5,     6,     3,     7,     4,    11,     1,     3,     2,     2,
       2,     0,     3,     1,     1,     2,     2,     2,     2,     1,
       0,     1,     2,     6,     4,     6,     4,     6,     8,     1,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     1,     2,     2,     1,
       3,     1,     1,     1,     3,     1,     1,     0,     1,     1,
       1,     5,     8,     7,     5,     8,     7,     4,     4,     1,
       3,     1,     1,     3,     1,     3,     1,     1,     2,     3,
       8,    11,     9,     7,     0,     3,     3,     1,     1,     3,
       0,     1,     3,     1,     0,     1,     0,     1,     0,     1,
       3,     1,     1,     1,     1,     3,     1,     1,     0,     2,
       2,     0,     2,     0,     1,     0,     1,     1,     1,     3,
       3,     1,     1,     3,     3,     3,     3,     3,     3,     4,
       3,     2,     1,     1,     1,     1,     3,     1,     1,     3,
       1,     1,     3,     3,     3,     1,     2,     4,     4,     2,
       3,     5,     5,     1,     1,     3,     0,    11,    11,    10,
      12,     1,     2,     5,     4,     4,     4,     4,     7,     5,
       4,     7,     6,     9,     9,     4,     1,     1,     1,     1,
       1,     1,     1,     5,     1,     1,     3,     1,     2,     2,
       2,     3,     1,     3,     7,     1,     2,     0,     2,     0,
       3,     3,     4,     4,     4,     4,     3,     2,     1,     1,
       0,     1,     1,     0,     2,     1,     5,     1,     0,     2,
       2,     0,     1,     0,     3,     5,     1,     3,     4,     3,
       1,     1,     0,     2,     2,     0,     2,     2,     1,     1,
       1,     0,     2,     4,     5,     4,     2,     3,     2,     2,
       2,     2,     1,     2,     3,     0,     1,     0,     5,     1,
       4,     6,     2,     1,     0,     4,     0,     1,     1,     2,
       2,     2,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     3,     3,     0,     1,     3,     1,     2,     1,
       1,     1,     1,     1,     2,     4,     4,     5,     1,     1,
       2,     0,     2,     0,     1,     3,     1,     0,     1,     2,
       3,     2,     4,     2,     3,     2,     0,     1,     2,     0,
       4,     5,     1,     2,     2,     0,     1,     3,     1,     2,
       3,     3,     3,     3,     3,     3,     1,     4,     2,     9,
       9,     3,     0,     2,     2,     0,     5,     3,     0,     1,
       1,     3,     5,     3,     1,     2,     1,     3,     5,     1,
       2,     3,     4,     5,     4,     5,     4,     6,     5,     4,
       5,     5,     5,     2,     4,     1,     1,     0,     1,     4,
       5,     4,     0,     2,     2,     2,     1,     1,     1,     1,
       0,     4,     2,     1,     2,     2,     4,     2,     6,     2,
       1,     3,     4,     0,     2,     0,     2,     0,     1,     3,
       3,     2,     0,     2,     4,     1,     1,     1,     0,     2,
       3,     5,     6,     2,     3,     1,     5,     5,     5,     3,
       3,     3,     4,     0,     1,     1,     1,     1,     1,     2,
       4,     1,     1,     1,     1,     2,     3,     0,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     1,     3,
       0,     1,     1,     1,     1,     5,     2,     1,     1,     1,
       1,     4,     1,     2,     2,     1,     3,     3,     2,     1,
       0,     5,     2,     5,     2,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     0,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
       3,     2,     2,     3,     3,     5,     4,     6,     3,     5,
       4,     6,     4,     6,     5,     7,     3,     2,     4,     3,
       2,     3,     3,     3,     3,     4,     3,     4,     3,     4,
       5,     6,     6,     7,     6,     7,     6,     7,     3,     4,
       4,     6,     1,     5,     4,     3,     5,     1,     3,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     5,     6,
       6,     7,     1,     2,     1,     1,     1,     2,     2,     4,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     4,     2,     2,     3,     3,     4,     3,     6,
       7,     9,     7,     7,     5,     1,     1,     1,     5,     6,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     1,     7,     9,     5,     0,     5,     4,     0,
       1,     0,     2,     0,     1,     3,     3,     2,     2,     0,
       6,     1,     0,     3,     0,     3,     3,     3,     0,     1,
       4,     2,     2,     2,     2,     2,     3,     2,     2,     3,
       0,     4,     3,     1,     5,     3,     1,     3,     1,     2,
       3,     1,     3,     1,     2,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     4,
       1,     4,     1,     2,     1,     2,     1,     2,     1,     3,
       1,     3,     1,     2,     1,     3,     1,     2,     1,     0,
       1,     3,     1,     3,     3,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     1,     1,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     3,     1,     1,     2,     3,     5,     7,
       7,     1,     0,     0,     2,     0,     2,     3,     3,     3,
       5,     7,     7,     0,     2,     1,     0,     1,     0,     1,
       3,     1,     2,     3,     2,     1,     4,     2,     1,     0,
       3,     1,     3,     1,     2,     4,     2,     0,     1,     3,
       1,     3,     1,     2,     1,     3,     1,     1,     2,     1,
       1,     2,     1,     1,     2,     7,     2,     5,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     5,     3,     0,     1,     1,
       1,     1,     1,     1,     4,     7,     6,     2,     0,     1,
       1,     1,     1,    13,    16,     1,     2,     0,     1,     0,
       1,     0,     2,     0,     1,     0,     6,     8,     6,     8,
       6,     8,     3,     2,     1,     0,     6,     6,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       4,     6,     3,     2,     4,     3,     5,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     3,     1,     3,     3,     2,     3,
       3,     1,     1,     1,     3,     5,     1,     1,     1,     1,
       3,     2,     4,     6,     6,     0,     1,     1,     1,     0,
       2,     2,     4,     6,     5,     4,     6,     1,     1,     1,
       1,     1,     1,     0,     1,     3,     1,     0,     7,     3,
       1,     2,     3,     2,     0,     2,     0,     2,     4,     5,
       8,     2,     3,     5,     1,     0,     2,     0,     2,     3,
       3,     3,     3,     1,     1,     1,     2,     3,     2,     2,
       2,     2,     3,     4,     3,     1,     4,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     3,     2,     9,    12,
      11,    12,    14,     3,     4,     4,     0,     7,    10,     9,
       2,     3,     0,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 570 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 21315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 586 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 21331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 598 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 21342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* stmt: %empty  */
#line 651 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 21348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 21476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 21515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 21625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 21661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 21681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 21761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 21904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 21921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 21938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 21962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 21968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 21974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 22004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 22014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 22022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* ColId: pgq_unreserved_keyword  */
#line 47 "third_party/libpg_query/grammar/statements/common.y"
                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* ColIdOrString: ColId  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColIdOrString: SCONST  */
#line 52 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* Sconst: SCONST  */
#line 56 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* indirection: indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* indirection: indirection indirection_el  */
#line 61 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* indirection_el: '.' attr_name  */
#line 66 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* attr_name: ColLabel  */
#line 71 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* ColLabel: IDENT  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* ColLabel: other_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* ColLabel: unreserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* ColLabel: reserved_keyword  */
#line 79 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* ColLabel: pgq_unreserved_keyword  */
#line 80 "third_party/libpg_query/grammar/statements/common.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 22339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 22345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 22359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 22411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 22419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 22428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 22434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 22440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 22446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 22458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 22470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 22478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 22484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 22490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 22511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 22536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 22544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 22560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 22573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 22586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 22594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 22651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 22657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 22663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 22675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 22723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 22747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 22804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 22810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 22824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 22832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 22969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 22975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 23024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 23096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 23124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 23213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 23237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 23269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 23324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 23330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 23342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 23348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 23380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* TransactionStmt: BEGIN_P opt_transaction opt_transaction_type  */
#line 11 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 23409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* TransactionStmt: START opt_transaction opt_transaction_type  */
#line 18 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 23420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* TransactionStmt: COMMIT opt_transaction  */
#line 25 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 23432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* TransactionStmt: END_P opt_transaction  */
#line 33 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 23444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 41 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 23456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* opt_transaction: WORK  */
#line 51 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* opt_transaction: TRANSACTION  */
#line 52 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 23468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* opt_transaction: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* opt_transaction_type: READ_P ONLY  */
#line 57 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_ONLY; }
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* opt_transaction_type: READ_P WRITE_P  */
#line 58 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_WRITE; }
#line 23486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* opt_transaction_type: %empty  */
#line 59 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                { (yyval.transactiontype) = PG_TRANS_TYPE_DEFAULT; }
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				n->missing_ok = false;
				(yyval.node) = (PGNode *)n;
			}
#line 23532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH IF_P EXISTS qualified_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
        				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
        				n->name = (yyvsp[-1].range);
        				n->behavior = (yyvsp[0].dbehavior);
        				n->missing_ok = true;
        				(yyval.node) = (PGNode *)n;
        			}
#line 23544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* EdgeTablesClauseOptional: EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 86 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                    { (yyval.list) = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node)); }
#line 23550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* EdgeTablesClauseOptional: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                    { (yyval.list) = NULL; }
#line 23556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeTablesClauseOptional  */
#line 95 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-7].range);
				n->vertex_tables = (yyvsp[-2].list)?lappend((yyvsp[-2].list),(yyvsp[-3].node)):list_make1((yyvsp[-3].node));
				n->edge_tables = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 23569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* CreatePropertyGraphStmt: CREATE_P OR REPLACE PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeTablesClauseOptional  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
        				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
        				n->name = (yyvsp[-7].range);
        				n->vertex_tables = (yyvsp[-2].list)?lappend((yyvsp[-2].list),(yyvsp[-3].node)):list_make1((yyvsp[-3].node));
        				n->edge_tables = (yyvsp[0].list);
        				n->onconflict = PG_REPLACE_ON_CONFLICT;
        				(yyval.node) = (PGNode *)n;
        			}
#line 23582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 121 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 23588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* VertexTableDefinitionList: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* KeySpecification: '(' name_list ')'  */
#line 127 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* KeyReference: KEY KeySpecification REFERENCES qualified_name '(' name_list ')'  */
#line 132 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				/* Case where both KEY (id) and REFERENCES (id) are provided */
				PGKeyReference *key_ref = makeNode(PGKeyReference);
				key_ref->key_columns = (yyvsp[-5].list);
				key_ref->ref_table = (yyvsp[-3].range);
				key_ref->ref_columns = (yyvsp[-1].list);
				(yyval.node) = (PGNode *) key_ref;
			}
#line 23613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* KeyReference: qualified_name  */
#line 142 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				/* Case where neither KEY (id) nor REFERENCES (id) are provided */
				PGKeyReference *key_ref = makeNode(PGKeyReference);
				key_ref->key_columns = NULL;
				key_ref->ref_table = (yyvsp[0].range);
				key_ref->ref_columns = NULL;
				(yyval.node) = (PGNode *) key_ref;
			}
#line 23626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* LabelList: PGQ_IDENT  */
#line 153 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 154 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 23638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* LabelOptional: LABEL PGQ_IDENT  */
#line 158 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = (yyvsp[0].str); }
#line 23644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* LabelOptional: %empty  */
#line 159 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = NULL; }
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 164 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 23661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* Discriminator: %empty  */
#line 172 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 23672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LabelOptional Discriminator  */
#line 183 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-3].list);
				n->properties = (yyvsp[-2].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 23687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 23693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* EdgeTableDefinitionList: %empty  */
#line 199 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference DESTINATION KeyReference PropertiesClause LabelOptional Discriminator  */
#line 207 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-7].list);
				n->is_vertex_table = false;
				PGKeyReference *src_key_ref = (PGKeyReference *) (yyvsp[-5].node);
                n->src_fk = src_key_ref->key_columns;
                n->src_name = src_key_ref->ref_table;
                n->src_pk = src_key_ref->ref_columns;
                PGKeyReference *dst_key_ref = (PGKeyReference *) (yyvsp[-3].node);
				n->dst_fk = dst_key_ref->key_columns;
				n->dst_name = dst_key_ref->ref_table;
				n->dst_pk = dst_key_ref->ref_columns;
				n->properties = (yyvsp[-2].list);
				/* Handle labels and discriminator as before */
				if (n->labels) n->labels = lappend(n->labels, makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 23722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* IdentOptionalAs: PGQ_IDENT  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 236 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 23734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* QualifiednameOptionalAs: qualified_name  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 23740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 242 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 23746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* PropertiesList: IdentOptionalAs  */
#line 246 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 249 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 254 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* ExceptOptional: %empty  */
#line 256 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 23770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 261 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 23779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 266 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* PropertiesClause: NO PROPERTIES  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 23791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 273 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* PropertiesClause: %empty  */
#line 275 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 284 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 23809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* GraphTableWhereOptional: %empty  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 23815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* GraphTableNameOptional: qualified_name  */
#line 290 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.range) = (yyvsp[0].range); }
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* GraphTableNameOptional: %empty  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.range) = NULL; }
#line 23827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* ColumnsOptional: COLUMNS '(' target_list_opt_comma ')'  */
#line 296 "third_party/libpg_query/grammar/statements/pgq.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 23833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* ColumnsOptional: %empty  */
#line 299 "third_party/libpg_query/grammar/statements/pgq.y"
            {
                PGAStar *star = makeNode(PGAStar);
                (yyval.list) = list_make1(star);
            }
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional ColumnsOptional ')' GraphTableNameOptional  */
#line 309 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-7].str);
				n->paths = (yyvsp[-5].list);
				if ((yyvsp[-4].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-4].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-3].node);
				n->columns = (yyvsp[-2].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 23868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* KeepOptional: KEEP PathPrefix  */
#line 344 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* KeepOptional: %empty  */
#line 346 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 23880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* GroupOrGroupsOptional: GROUP_P  */
#line 354 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* GroupOrGroupsOptional: GROUPS  */
#line 356 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* GroupOrGroupsOptional: %empty  */
#line 358 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 23898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* PathVariableOptional: PGQ_IDENT '='  */
#line 362 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 23904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* PathVariableOptional: %empty  */
#line 364 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 23910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 368 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 23916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 370 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 23922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 372 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 23928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 374 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 23934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* PathModeOptional: PathOrPathsOptional  */
#line 376 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 23940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* TopKOptional: ICONST  */
#line 380 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* TopKOptional: %empty  */
#line 382 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 23952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 387 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 23982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 411 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 23997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* PathPrefix: ALL PathModeOptional  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 24012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 435 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 24027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* PathPrefix: %empty  */
#line 447 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 24042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* PathPatternList: PathPattern  */
#line 461 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 464 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 469 "third_party/libpg_query/grammar/statements/pgq.y"
    {
        PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
        PGList *l = (PGList *) (yyvsp[0].list);

        /* Check if the list is not empty and retrieve the first element */
        if (l != NULL && list_length(l) > 0) {
            PGNode *node = (PGNode *) lfirst(list_head(l));

            (yyval.node) = (PGNode*) n;

            /* Check if the node is a PGSubPath and not NULL */
            if ((yyvsp[-2].keyword) == NULL) {
                n->path = (yyvsp[0].list);
            } else if (list_length(l) == 1 && node != NULL && node->type == T_PGSubPath && !((PGSubPath*)node)->path_var) {
                PGSubPath *p = (PGSubPath*) node;
                p->path_var = (yyvsp[-2].keyword);
                (yyval.node) = (PGNode*) p;
            }
            /* If the node is not a PGSubPath or the node is NULL, create a new subpath */
            else {
                PGSubPath *p = makeNode(PGSubPath);
                p->mode = n->mode;
                p->lower = p->upper = p->single_bind = 1;
                p->path_var = (yyvsp[-2].keyword);
                p->path = (yyvsp[0].list);
                n->path = list_make1(p);
            }
        } else {
            /* Handle the case where the list is NULL or empty */
            (yyval.node) = (PGNode*) n; /* Or appropriate fallback */
        }
    }
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* PatternUnion: '|'  */
#line 504 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 24097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* PatternUnion: '|' '+' '|'  */
#line 506 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 24103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* KleeneQuantifierOptional: ICONST  */
#line 510 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 24109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* KleeneQuantifierOptional: %empty  */
#line 512 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 24115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* KleeneOptional: '*'  */
#line 518 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 24127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* KleeneOptional: '+'  */
#line 527 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 24139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* KleeneOptional: '?'  */
#line 536 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 24151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 545 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 24163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* KleeneOptional: %empty  */
#line 554 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 24175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* CostNum: ICONST  */
#line 564 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 24181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* CostNum: FCONST  */
#line 566 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 24187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* CostDefault: DEFAULT CostNum  */
#line 570 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 24193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* CostDefault: %empty  */
#line 572 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 24199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* CostOptional: COST b_expr CostDefault  */
#line 577 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 24212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* CostOptional: %empty  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 24223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 597 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 24236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 609 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 24246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* PathElement: VertexPattern  */
#line 617 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* PathElement: EdgePattern  */
#line 619 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* PathSequence: EnclosedSubPath PathSequence  */
#line 624 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 24284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* PathSequence: PathElement PathSequence  */
#line 646 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 24290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* PathSequence: %empty  */
#line 648 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* PathConcatenation: PathSequence  */
#line 652 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 655 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 24314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* OrLabelExpression: LabelExpression  */
#line 665 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 668 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 24332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* AndLabelExpression: LabelExpression  */
#line 678 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 681 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 24350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* ComposedLabelExpression: LabelExpression  */
#line 691 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 694 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 703 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 24380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* LabelExpression: PGQ_IDENT  */
#line 714 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 24391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* LabelExpression: '!' LabelExpression  */
#line 722 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 24403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 730 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 734 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 24415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* LabelExpressionOptional: %empty  */
#line 736 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 24421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* ArrowRight: '-'  */
#line 748 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 24427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* ArrowRight: '-' '>'  */
#line 750 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 24433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* ArrowRight: LAMBDA_ARROW  */
#line 752 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 24439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* ArrowLeftBracket: '-' '['  */
#line 756 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* ArrowLeftBracket: '<' '-' '['  */
#line 758 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* AbbreviatedEdge: '<' ArrowRight  */
#line 763 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 24460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* AbbreviatedEdge: ArrowRight  */
#line 769 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 24469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* VariableOptional: PGQ_IDENT  */
#line 776 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* VariableOptional: %empty  */
#line 778 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 24481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 783 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 24493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 794 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 810 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 24540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* EdgePattern: Op  */
#line 834 "third_party/libpg_query/grammar/statements/pgq.y"
             {
                    PGPathElement *n = makeNode(PGPathElement);
                    int lower = 1;
                    int upper = 1;
                    char* op = (yyvsp[0].str);
                    switch (op) {
                    case "->*":
                        n->match_type = (PGMatchType)PG_MATCH_EDGE_RIGHT;
                        lower = 0;
                        upper = (1<<30);
                    case "->+":
                        n->match_type = (PGMatchType)PG_MATCH_EDGE_RIGHT;
                        lower = 1;
                        upper = (1<<30);
                    case "<->*":
                        n->match_type = (PGMatchType)PG_MATCH_EDGE_LEFT_RIGHT;
                        lower = 0;
                        upper = (1<<30);
                    case "<->+":
                        n->match_type = (PGMatchType)PG_MATCH_EDGE_LEFT_RIGHT;
                        op = "<->";
                        lower = 1;
                        upper = (1<<30);
                    case "<-+":
                        n->match_type = (PGMatchType)PG_MATCH_EDGE_LEFT;
                        lower = 1;
                        upper = (1<<30);
                    case "<-*":
                        n->match_type = (PGMatchType)PG_MATCH_EDGE_LEFT;
                        lower = 0;
                        upper = (1<<30);
                    default:
                        parser_yyerror("Illegal operator %s", op);
                    }

                    n->label_expr = NULL;
                    n->element_var = NULL;
                    (yyval.list) = list_make1(n);
                    if (lower != 1 || upper != 1) {
                        PGSubPath *p = makeNode(PGSubPath);
                        p->single_bind = 0;
                        p->lower = lower;
                        p->upper = upper;
                        /* return a subpath consisting of one edge (element) */
                        p->path = n;
                        p->path_var = NULL;

                        (yyval.list) = list_make1(p);
                    }
                }
#line 24595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* VertexPattern: '(' FullElementSpec ')'  */
#line 888 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: c_expr  */
#line 920 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 922 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 24632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 924 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 932 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 24654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: '+' pgq_expr  */
#line 947 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: '-' pgq_expr  */
#line 949 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 951 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 953 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 955 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 957 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 959 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 961 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 963 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 965 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 967 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 969 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 971 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 973 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 975 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 978 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 980 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 982 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* pgq_expr: NOT pgq_expr  */
#line 984 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 24768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* pgq_expr: NOT_LA pgq_expr  */
#line 986 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 24774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 988 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 993 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 998 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 24803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 1005 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 24812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 1010 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 24823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 1017 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 1022 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 24843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 1029 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 24852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 1034 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 24863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 1042 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 24875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 1050 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 24887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 1058 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 24899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 1066 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 24911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* pgq_expr: pgq_expr IS NULL_P  */
#line 1084 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* pgq_expr: pgq_expr ISNULL  */
#line 1092 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 1100 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 1108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* pgq_expr: pgq_expr NOTNULL  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 1124 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 24983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1132 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 24991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* pgq_expr: row OVERLAPS row  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 25011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1152 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1160 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1168 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1176 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1184 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1192 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1200 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 25091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1204 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 25099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1208 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1212 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 25115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1216 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1224 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 25139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1232 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1240 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 25163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1248 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 25187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1268 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 25213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 25270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 25304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 25310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 25316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 25322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 25328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 25334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 25352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 25358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 25364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 25370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 25376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 25382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 25393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 25538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 25544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 25550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 25556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 25569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 25596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 25610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 25624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 25642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 25648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 25654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 25660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 25666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 25672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 25678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 25690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 25696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 25707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 25719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 25725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 25731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 25737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 25749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 25755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 25761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 25773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 25835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 25841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 25847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 25859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 25865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 25871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 25883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 25889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 25895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 25901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 25907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 25913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 25936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 25978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 26010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 26018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 26048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 26056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 26074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 26086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 26094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 26102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 26111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 26119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 26187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 26279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 26303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 26315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 26323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 26331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 26342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 26377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 26388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 26394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 26400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 26406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 26412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 26482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 26496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 26502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 26508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 26514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 26520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 26526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 26532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 26538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 26544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 26550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 26556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 26562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 26568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 26574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 26580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 26586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 26592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 26598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 26604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 26610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 26616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 26622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 26628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 26634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 26640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 26658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 26664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 26670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 26676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 26682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 26688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name table_macro_list  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 26701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name table_macro_list  */
#line 19 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 26715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name table_macro_list  */
#line 30 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 26728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name macro_definition_list  */
#line 40 "third_party/libpg_query/grammar/statements/create_function.y"
             {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
             }
#line 26741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name macro_definition_list  */
#line 50 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name macro_definition_list  */
#line 60 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* table_macro_definition: param_list AS TABLE select_no_parens  */
#line 72 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 26778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* table_macro_definition_parens: param_list AS TABLE select_with_parens  */
#line 82 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 26789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* table_macro_list_internal: table_macro_definition_parens  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 26797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* table_macro_list_internal: table_macro_list_internal ',' table_macro_definition_parens  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 26805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* table_macro_list: table_macro_definition  */
#line 103 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 26813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* macro_definition: param_list AS a_expr  */
#line 111 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 26824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* macro_definition_list: macro_definition  */
#line 120 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* macro_definition_list: macro_definition_list ',' macro_definition  */
#line 124 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* param_list: '(' ')'  */
#line 136 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 26848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* param_list: '(' func_arg_list ')'  */
#line 140 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 26856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 26871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 26903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 26926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 26938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 26944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 26950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 26956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 26962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 26968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 26976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 26982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 27010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 27016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 27022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 27028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 27034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 27052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 27058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 27064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 27070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 27076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 27082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* copy_generic_opt_arg: map_expr  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                            { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 27088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* copy_generic_opt_arg: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 27094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* opt_oids: WITH OIDS  */
#line 137 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 27110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* opt_oids: %empty  */
#line 140 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 27116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 27122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* copy_opt_list: %empty  */
#line 146 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 27128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* opt_binary: BINARY  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 27136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* opt_binary: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* copy_opt_item: BINARY  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 27150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* copy_opt_item: OIDS  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 27158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* copy_opt_item: FREEZE  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 27166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 27174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 27182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* copy_opt_item: CSV  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 27190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* copy_opt_item: HEADER_P  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 27198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 27206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 27214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* copy_opt_item: FORCE QUOTE columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 27222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* copy_opt_item: FORCE QUOTE '*'  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 27230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* copy_opt_item: PARTITION BY columnList  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 27238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* copy_opt_item: PARTITION BY '*'  */
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 27246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 213 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 27254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* copy_opt_item: FORCE NULL_P columnList  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 27262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* copy_opt_item: ENCODING Sconst  */
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 27270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 228 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 27276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* copy_file_name: Sconst  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* copy_file_name: STDIN  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 27288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* copy_file_name: STDOUT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 27294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* copy_file_name: IDENT '.' ColId  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 27300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* copy_file_name: IDENT  */
#line 237 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 244 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 27314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 248 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 27322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 27334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 27342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 27371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 27383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 27395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 27419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 27431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 27451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 27460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 27478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 27497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* simple_select: values_clause_opt_comma  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* simple_select: TABLE relation_expr  */
#line 243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 27565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 27573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 27581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 27589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 27597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* pivot_column_entry: b_expr  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 27758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* pivot_column_entry: single_pivot_value  */
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* pivot_column_list_internal: pivot_column_entry  */
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* pivot_column_list: pivot_column_list_internal  */
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* pivot_column_list: pivot_column_list_internal ','  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* with_clause: WITH cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 27799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* with_clause: WITH_LA cte_list  */
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 27810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* with_clause: WITH RECURSIVE cte_list  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 27821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* cte_list: common_table_expr  */
#line 457 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* cte_list: cte_list ',' common_table_expr  */
#line 458 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 27847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* opt_materialized: MATERIALIZED  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 27853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* opt_materialized: NOT MATERIALIZED  */
#line 475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 27859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_materialized: %empty  */
#line 476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 27865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* into_clause: INTO OptTempTableName  */
#line 481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 27879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* into_clause: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 27885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* OptTempTableName: TABLE qualified_name  */
#line 541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 27963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* OptTempTableName: qualified_name  */
#line 546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 27972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* opt_table: TABLE  */
#line 552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 27978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* opt_table: %empty  */
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 27984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* all_or_distinct: ALL  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 27990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* all_or_distinct: DISTINCT  */
#line 558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* all_or_distinct: %empty  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* by_name: BY NAME_P  */
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 28008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* distinct_clause: DISTINCT  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 28014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* opt_all_clause: ALL  */
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 28026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* opt_all_clause: %empty  */
#line 576 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* opt_ignore_nulls: %empty  */
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 28050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* opt_sort_clause: sort_clause  */
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 28056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_sort_clause: %empty  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* sort_clause: ORDER BY sortby_list  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 28085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* sortby_list: sortby  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 28091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* sortby_list: sortby_list ',' sortby  */
#line 609 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 28097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 28110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 28123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* opt_asc_desc: ASC_P  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 28129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* opt_asc_desc: DESC_P  */
#line 633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 28135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* opt_asc_desc: %empty  */
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 28141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 28147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 638 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 28153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* opt_nulls_order: %empty  */
#line 639 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 28159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* select_limit: limit_clause offset_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 28165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* select_limit: offset_clause limit_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 28171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* select_limit: limit_clause  */
#line 645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 28177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* select_limit: offset_clause  */
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 28183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* opt_select_limit: select_limit  */
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* opt_select_limit: %empty  */
#line 651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 28195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* limit_clause: LIMIT select_limit_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 658 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 28214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 28220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 28226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* offset_clause: OFFSET select_offset_value  */
#line 681 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 684 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 28238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* sample_count: FCONST '%'  */
#line 692 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 28246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* sample_count: ICONST '%'  */
#line 696 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 28254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* sample_count: FCONST PERCENT  */
#line 700 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 28262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* sample_count: ICONST PERCENT  */
#line 704 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 28270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* sample_count: ICONST  */
#line 708 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 28278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* sample_count: ICONST ROWS  */
#line 712 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 28286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* sample_clause: %empty  */
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 28300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* opt_sample_func: ColId  */
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* opt_sample_func: %empty  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 28312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 28321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* tablesample_entry: sample_count  */
#line 741 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 28329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 745 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 28337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 28346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* opt_tablesample_clause: tablesample_clause  */
#line 763 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* opt_tablesample_clause: %empty  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 28366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 28372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_repeatable_clause: %empty  */
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 28378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* select_limit_value: a_expr  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* select_limit_value: ALL  */
#line 776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* select_limit_value: a_expr '%'  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* select_limit_value: FCONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 28405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* select_limit_value: ICONST PERCENT  */
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 28411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* select_offset_value: a_expr  */
#line 789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* select_fetch_first_value: c_expr  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* select_fetch_first_value: '+' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* select_fetch_first_value: '-' I_or_F_const  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* I_or_F_const: Iconst  */
#line 817 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 28441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* I_or_F_const: FCONST  */
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 28447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* row_or_rows: ROW  */
#line 822 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 28453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* row_or_rows: ROWS  */
#line 823 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 28459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* first_or_next: FIRST_P  */
#line 826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 28465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* first_or_next: NEXT  */
#line 827 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 28471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* group_clause: GROUP_P BY ALL  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 28486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* group_clause: %empty  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* group_by_list: group_by_item  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* group_by_list: group_by_list ',' group_by_item  */
#line 863 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 28504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* group_by_list_opt_comma: group_by_list  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* group_by_list_opt_comma: group_by_list ','  */
#line 868 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* group_by_item: a_expr  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* group_by_item: empty_grouping_set  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* group_by_item: cube_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* group_by_item: rollup_clause  */
#line 875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* group_by_item: grouping_sets_clause  */
#line 876 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* empty_grouping_set: '(' ')'  */
#line 881 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 28554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 908 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* grouping_or_grouping_id: GROUPING  */
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 28584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* grouping_or_grouping_id: GROUPING_ID  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 28590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* having_clause: HAVING a_expr  */
#line 919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* having_clause: %empty  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* qualify_clause: QUALIFY a_expr  */
#line 924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* qualify_clause: %empty  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* for_locking_clause: for_locking_items  */
#line 929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* for_locking_clause: FOR READ_P ONLY  */
#line 930 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* opt_for_locking_clause: for_locking_clause  */
#line 934 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* opt_for_locking_clause: %empty  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* for_locking_items: for_locking_item  */
#line 939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* for_locking_items: for_locking_items for_locking_item  */
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 28662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* for_locking_strength: FOR UPDATE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 28668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 28674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* for_locking_strength: FOR SHARE  */
#line 957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 28680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* for_locking_strength: FOR KEY SHARE  */
#line 958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 28686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* locked_rels_list: OF qualified_name_list  */
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* locked_rels_list: %empty  */
#line 963 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_nowait_or_skip: NOWAIT  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 28704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 969 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 28710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* opt_nowait_or_skip: %empty  */
#line 970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 28716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* values_clause_opt_comma: values_clause  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* values_clause_opt_comma: values_clause ','  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* from_clause: FROM from_list_opt_comma  */
#line 1008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* from_clause: %empty  */
#line 1009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* from_list: table_ref  */
#line 1013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* from_list: from_list ',' table_ref  */
#line 1014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* from_list_opt_comma: from_list  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* from_list_opt_comma: from_list ','  */
#line 1019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1032 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1040 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 28819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 28857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* table_ref: joined_table  */
#line 1075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 28865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 28874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1084 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 28882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 28897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1099 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 28912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 28918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* opt_pivot_group_by: %empty  */
#line 1113 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 28924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 28930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 28936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* opt_include_nulls: %empty  */
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 28942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1122 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1130 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 28964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* pivot_header: d_expr  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* pivot_header: indirection_expr  */
#line 1140 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1153 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 29004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* pivot_value_list: pivot_value  */
#line 1162 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* unpivot_header: ColIdOrString  */
#line 1172 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1173 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 29032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1178 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 29043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* unpivot_value_list: unpivot_value  */
#line 1187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* joined_table: '(' joined_table ')'  */
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 29067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 29084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 29102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 29121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 29137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 29154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 29172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 29190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 29207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1343 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 29246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 29256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* alias_clause: AS ColIdOrString  */
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 29265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 29275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* alias_clause: ColId  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 29284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* opt_alias_clause: alias_clause  */
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 29290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* opt_alias_clause: %empty  */
#line 1386 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 29296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* func_alias_clause: alias_clause  */
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 29304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 29312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 29322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 29332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* func_alias_clause: %empty  */
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 29340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* join_type: FULL join_outer  */
#line 1420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 29346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* join_type: LEFT join_outer  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 29352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* join_type: RIGHT join_outer  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 29358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* join_type: SEMI  */
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 29364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* join_type: ANTI  */
#line 1424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 29370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* join_type: INNER_P  */
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 29376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* join_outer: OUTER_P  */
#line 1429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 29382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* join_outer: %empty  */
#line 1430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 29394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* join_qual: ON a_expr  */
#line 1443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* relation_expr: qualified_name  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 29411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* relation_expr: qualified_name '*'  */
#line 1456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 29422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* relation_expr: ONLY qualified_name  */
#line 1463 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 29433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1470 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 29444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* func_table: func_expr_windowless opt_ordinality  */
#line 1502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 29459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1526 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 29480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* rowsfrom_list: rowsfrom_item  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1531 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* opt_col_def_list: %empty  */
#line 1535 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 29510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* opt_ordinality: %empty  */
#line 1539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* where_clause: WHERE a_expr  */
#line 1544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* where_clause: %empty  */
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* TableFuncElementList: TableFuncElement  */
#line 1551 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 29566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* opt_collate_clause: COLLATE any_name  */
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 29578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* opt_collate_clause: %empty  */
#line 1589 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 29584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* colid_type_list: ColId Typename  */
#line 1602 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 29592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 29600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* opt_Typename: Typename  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* opt_Typename: %empty  */
#line 1613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 29612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* Typename: SimpleTypename opt_array_bounds  */
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 29621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1621 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 29631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 29640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 29650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* Typename: SimpleTypename ARRAY  */
#line 1639 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 29659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 29669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* Typename: qualified_typename  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 29677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 29688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 29699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1668 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 29710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* qualified_typename: IDENT '.' IDENT  */
#line 1677 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 29716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1678 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 29728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 29734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* opt_array_bounds: %empty  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 29740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* SimpleTypename: GenericType  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* SimpleTypename: Numeric  */
#line 1692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* SimpleTypename: Bit  */
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* SimpleTypename: Character  */
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* SimpleTypename: ConstDatetime  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* SimpleTypename: ConstInterval opt_interval  */
#line 1697 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 29779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 29789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* ConstTypename: Numeric  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* ConstTypename: ConstBit  */
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* ConstTypename: ConstCharacter  */
#line 1723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* ConstTypename: ConstDatetime  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* GenericType: type_name_token opt_type_modifiers  */
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* opt_type_modifiers: %empty  */
#line 1750 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* Numeric: INT_P  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* Numeric: INTEGER  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* Numeric: SMALLINT  */
#line 1767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* Numeric: BIGINT  */
#line 1772 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* Numeric: REAL  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* Numeric: FLOAT_P opt_float  */
#line 1782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* Numeric: DOUBLE_P PRECISION  */
#line 1787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* Numeric: DEC opt_type_modifiers  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* Numeric: BOOLEAN_P  */
#line 1810 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* opt_float: '(' Iconst ')'  */
#line 1817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 29962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* opt_float: %empty  */
#line 1838 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 29970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* Bit: BitWithLength  */
#line 1848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* Bit: BitWithoutLength  */
#line 1852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* ConstBit: BitWithLength  */
#line 1860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* ConstBit: BitWithoutLength  */
#line 1864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 30003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 30016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* BitWithoutLength: BIT opt_varying  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 30034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* Character: CharacterWithLength  */
#line 1905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 30042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* Character: CharacterWithoutLength  */
#line 1909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 30050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* ConstCharacter: CharacterWithLength  */
#line 1915 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 30058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* ConstCharacter: CharacterWithoutLength  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 30073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 30083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* CharacterWithoutLength: character  */
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 30095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* character: CHARACTER opt_varying  */
#line 1950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 30101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* character: CHAR_P opt_varying  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 30107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* character: VARCHAR  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 30113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* character: NATIONAL CHARACTER opt_varying  */
#line 1956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 30119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* character: NATIONAL CHAR_P opt_varying  */
#line 1958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 30125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* character: NCHAR opt_varying  */
#line 1960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 30131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* opt_varying: VARYING  */
#line 1964 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 30137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* opt_varying: %empty  */
#line 1965 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 30143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1973 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 30156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 30168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 30181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* ConstDatetime: TIME opt_timezone  */
#line 1999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 30193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* ConstInterval: INTERVAL  */
#line 2010 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 30202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 30208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 30214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* opt_timezone: %empty  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 30220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* opt_interval: year_keyword  */
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 30226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* opt_interval: month_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 30232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* opt_interval: day_keyword  */
#line 2067 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 30238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* opt_interval: hour_keyword  */
#line 2069 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 30244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* opt_interval: minute_keyword  */
#line 2071 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 30250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* opt_interval: second_keyword  */
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 30256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* opt_interval: millisecond_keyword  */
#line 2075 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 30262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* opt_interval: microsecond_keyword  */
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 30268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* opt_interval: week_keyword  */
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 30274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* opt_interval: quarter_keyword  */
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(QUARTER), (yylsp[0]))); }
#line 30280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* opt_interval: decade_keyword  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 30286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* opt_interval: century_keyword  */
#line 2085 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 30292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* opt_interval: millennium_keyword  */
#line 2087 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 30298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* opt_interval: year_keyword TO month_keyword  */
#line 2089 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 30307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* opt_interval: day_keyword TO hour_keyword  */
#line 2094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 30316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* opt_interval: day_keyword TO minute_keyword  */
#line 2099 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 30326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* opt_interval: day_keyword TO second_keyword  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 30337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 30346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* opt_interval: hour_keyword TO second_keyword  */
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 30356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* opt_interval: minute_keyword TO second_keyword  */
#line 2123 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 30365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* opt_interval: %empty  */
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 30371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* a_expr: c_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* a_expr: a_expr TYPECAST Typename  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 30383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* a_expr: a_expr COLLATE any_name  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 30395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 30405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* a_expr: '+' a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 30411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* a_expr: '-' a_expr  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 30417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* a_expr: a_expr '+' a_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* a_expr: a_expr '-' a_expr  */
#line 2193 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* a_expr: a_expr '*' a_expr  */
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* a_expr: a_expr '/' a_expr  */
#line 2197 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* a_expr: a_expr '%' a_expr  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* a_expr: a_expr '^' a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* a_expr: a_expr POWER_OF a_expr  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* a_expr: a_expr '<' a_expr  */
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* a_expr: a_expr '>' a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* a_expr: a_expr '=' a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* a_expr: a_expr qual_Op a_expr  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* a_expr: qual_Op a_expr  */
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 30513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* a_expr: a_expr qual_Op  */
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 30519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* a_expr: a_expr AND a_expr  */
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* a_expr: a_expr OR a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* a_expr: NOT a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 30537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* a_expr: NOT_LA a_expr  */
#line 2233 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 30543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* a_expr: a_expr GLOB a_expr  */
#line 2235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 30552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* a_expr: a_expr LIKE a_expr  */
#line 2240 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 30561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 30572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 30581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 30592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* a_expr: a_expr ILIKE a_expr  */
#line 2264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 30601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 30612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 30621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 30632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 30644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 30656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 30668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 30680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* a_expr: a_expr IS NULL_P  */
#line 2331 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 30692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* a_expr: a_expr ISNULL  */
#line 2339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* a_expr: a_expr IS NOT NULL_P  */
#line 2347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 30716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* a_expr: a_expr NOT NULL_P  */
#line 2355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 30728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* a_expr: a_expr NOTNULL  */
#line 2363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2371 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 30752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2379 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 30760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* a_expr: row OVERLAPS row  */
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 30780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* a_expr: a_expr IS TRUE_P  */
#line 2399 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2407 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* a_expr: a_expr IS FALSE_P  */
#line 2415 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* a_expr: a_expr IS UNKNOWN  */
#line 2431 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 30860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 30868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 30876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 30884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2463 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 30896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 30908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 30920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 30932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* a_expr: a_expr IN_P in_expr  */
#line 2495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 30956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 30982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 30997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 31008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* a_expr: DEFAULT  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 31026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* a_expr: '*' COLUMNS '(' a_expr ')'  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->unpacked = true;
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 31039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 31051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 31063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 31076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* b_expr: c_expr  */
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 31082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* b_expr: b_expr TYPECAST Typename  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 31088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* b_expr: '+' b_expr  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 31094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* b_expr: '-' b_expr  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 31100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* b_expr: b_expr '+' b_expr  */
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* b_expr: b_expr '-' b_expr  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* b_expr: b_expr '*' b_expr  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* b_expr: b_expr '/' b_expr  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* b_expr: b_expr '%' b_expr  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* b_expr: b_expr '^' b_expr  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* b_expr: b_expr POWER_OF b_expr  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* b_expr: b_expr '<' b_expr  */
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* b_expr: b_expr '>' b_expr  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* b_expr: b_expr '=' b_expr  */
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* b_expr: b_expr qual_Op b_expr  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 31190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* b_expr: qual_Op b_expr  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 31196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* b_expr: b_expr qual_Op  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 31202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 31210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2660 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 31218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 31234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 31250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* d_expr: columnref_opt_indirection  */
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 31256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* d_expr: AexprConst  */
#line 2697 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 31262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* d_expr: select_with_parens  */
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 31277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* d_expr: select_with_parens indirection  */
#line 2710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 31305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* d_expr: EXISTS select_with_parens  */
#line 2734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 31320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 31331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 31339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 31347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* indirection_expr_or_a_expr: row  */
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 31356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* indirection_expr: '?'  */
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 31364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* indirection_expr: PARAM  */
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 31375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* indirection_expr: struct_expr  */
#line 2781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 31383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* indirection_expr: map_expr  */
#line 2785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 31391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* indirection_expr: func_expr  */
#line 2789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 31399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* indirection_expr: case_expr  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 31405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* indirection_expr: list_expr  */
#line 2794 "third_party/libpg_query/grammar/statements/select.y"
                                     {
                (yyval.node) = (yyvsp[0].node);
			}
#line 31413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* indirection_expr: list_comprehension  */
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 31421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* indirection_expr: ARRAY select_with_parens  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 31436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2811 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 31446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* indirection_expr: '#' ICONST  */
#line 2817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 31457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* indirection_expr: '$' ColLabel  */
#line 2824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 31465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2829 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 31474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 31483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* map_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2843 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGList *key_list = NULL;
                    PGList *value_list = NULL;
                    PGListCell *lc;
                    PGList *entry_list = (yyvsp[-1].list);
                    foreach(lc, entry_list)
                    {
                        PGList *l = (PGList *) lc->data.ptr_value;
                        key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
                        value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
                    }
                    PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
                    PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
                    PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
                    (yyval.node) = (PGNode *) f;
                }
#line 31504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* func_application: func_name '(' ')'  */
#line 2863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 31512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 31523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 31535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 31547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 31562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 31614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* func_expr: func_expr_common_subexpr  */
#line 2957 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 31620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* func_expr_windowless: func_application  */
#line 2967 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 31626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 31632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 31642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2982 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 31648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2984 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 31654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 31662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 31675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 31684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 31695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 3011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 31714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 31749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 31757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 31768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* list_comprehension_lhs: columnrefList  */
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
			(yyval.node) = (PGNode *) n;
		}
#line 31777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P a_expr ']'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-3].node);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 31790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P c_expr IF_P a_expr ']'  */
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-5].node);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = (yyvsp[-5].node);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 31809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* within_group_clause: %empty  */
#line 3098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 31827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3103 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 31833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* filter_clause: %empty  */
#line 3104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 31839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* export_clause: EXPORT_STATE  */
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 31845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* export_clause: %empty  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 31851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* window_clause: WINDOW window_definition_list  */
#line 3116 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* window_clause: %empty  */
#line 3117 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* window_definition_list: window_definition  */
#line 3121 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 31869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3123 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 31875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* window_definition: ColId AS window_specification  */
#line 3128 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 31885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* over_clause: OVER window_specification  */
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 31891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* over_clause: OVER ColId  */
#line 3138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 31908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* over_clause: %empty  */
#line 3151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 31914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 31932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* opt_existing_window_name: ColId  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* opt_existing_window_name: %empty  */
#line 3182 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 31944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3185 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* opt_partition_clause: %empty  */
#line 3186 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* opt_frame_clause: %empty  */
#line 3219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 32005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* frame_extent: frame_bound  */
#line 3230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 32027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3248 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 32069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 32082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 32095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* frame_bound: CURRENT_P ROW  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 32108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* frame_bound: a_expr PRECEDING  */
#line 3321 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 32121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* frame_bound: a_expr FOLLOWING  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 32134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 32140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 32146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 32152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 32158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* opt_window_exclusion_clause: %empty  */
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 32164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 32170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* qualified_row: ROW '(' ')'  */
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 32176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* row: qualified_row  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 32182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* row: '(' expr_list ',' a_expr ')'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 32188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 32201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* dict_arguments: dict_arg  */
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 32207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 32213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* dict_arguments_opt_comma: dict_arguments  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 32225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* map_arg: a_expr ':' a_expr  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 32233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* map_arguments: map_arg  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 32239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* map_arguments: map_arguments ',' map_arg  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 32245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* map_arguments_opt_comma: map_arguments  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* map_arguments_opt_comma: map_arguments ','  */
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* opt_map_arguments_opt_comma: %empty  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 32269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* sub_type: ANY  */
#line 3412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 32275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* sub_type: SOME  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 32281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* sub_type: ALL  */
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 32287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* all_Op: Op  */
#line 3417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* all_Op: MathOp  */
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 32299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* MathOp: '+'  */
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 32305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* MathOp: '-'  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 32311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* MathOp: '*'  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 32317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* MathOp: '/'  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 32323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* MathOp: INTEGER_DIVISION  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 32329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* MathOp: '%'  */
#line 3426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 32335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* MathOp: '^'  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 32341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* MathOp: POWER_OF  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 32347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* MathOp: '<'  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 32353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* MathOp: '>'  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 32359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* MathOp: '='  */
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 32365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* MathOp: LESS_EQUALS  */
#line 3432 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 32371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* MathOp: GREATER_EQUALS  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 32377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* MathOp: NOT_EQUALS  */
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 32383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* qual_Op: Op  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* qual_all_Op: all_Op  */
#line 3445 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3447 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* subquery_Op: all_Op  */
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3454 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* subquery_Op: LIKE  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 32425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* subquery_Op: NOT_LA LIKE  */
#line 3458 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 32431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* subquery_Op: GLOB  */
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 32437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* subquery_Op: NOT_LA GLOB  */
#line 3462 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 32443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* subquery_Op: ILIKE  */
#line 3464 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 32449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* subquery_Op: NOT_LA ILIKE  */
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 32455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* any_operator: all_Op  */
#line 3480 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* any_operator: ColId '.' any_operator  */
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 32467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* c_expr_list: c_expr  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 32475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 32483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* c_expr_list_opt_comma: c_expr_list  */
#line 3498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 32491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 32499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* expr_list: a_expr  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 32507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* expr_list: expr_list ',' a_expr  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 32515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* expr_list_opt_comma: expr_list  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 32523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* expr_list_opt_comma: expr_list ','  */
#line 3525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 32531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 32539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* opt_expr_list_opt_comma: %empty  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 32547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* func_arg_list: func_arg_expr  */
#line 3545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 32555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 32563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* func_arg_expr: a_expr  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 32571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 32584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 32597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* type_list: Typename  */
#line 3578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 32603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* type_list: type_list ',' Typename  */
#line 3579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 32609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* extract_list: extract_arg FROM a_expr  */
#line 3584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 32617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* extract_list: %empty  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 32623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* extract_arg: IDENT  */
#line 3594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* extract_arg: year_keyword  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 32635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* extract_arg: month_keyword  */
#line 3596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 32641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* extract_arg: day_keyword  */
#line 3597 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 32647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* extract_arg: hour_keyword  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 32653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* extract_arg: minute_keyword  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 32659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* extract_arg: second_keyword  */
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 32665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* extract_arg: millisecond_keyword  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 32671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* extract_arg: microsecond_keyword  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 32677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* extract_arg: week_keyword  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 32683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* extract_arg: quarter_keyword  */
#line 3604 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "quarter"; }
#line 32689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* extract_arg: decade_keyword  */
#line 3605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 32695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* extract_arg: century_keyword  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 32701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* extract_arg: millennium_keyword  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 32707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* extract_arg: Sconst  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 32721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 32729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* overlay_placing: PLACING a_expr  */
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 32735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* position_list: b_expr IN_P b_expr  */
#line 3636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 32741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* position_list: %empty  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 32747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* substr_list: a_expr substr_from substr_for  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 32755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* substr_list: a_expr substr_for substr_from  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 32764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* substr_list: a_expr substr_from  */
#line 3663 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 32772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* substr_list: a_expr substr_for  */
#line 3667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 32791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* substr_list: expr_list  */
#line 3682 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 32799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* substr_list: %empty  */
#line 3686 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 32805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* substr_from: FROM a_expr  */
#line 3690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* substr_for: FOR a_expr  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 32823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* trim_list: FROM expr_list_opt_comma  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* trim_list: expr_list_opt_comma  */
#line 3698 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* in_expr: select_with_parens  */
#line 3702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 32846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 32852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* in_expr: indirection_expr  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                           { (yyval.node) = (PGNode *)(yyvsp[0].node); }
#line 32858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 32872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* when_clause_list: when_clause  */
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 32878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* when_clause_list: when_clause_list when_clause  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 32884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 32896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* case_default: ELSE a_expr  */
#line 3750 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* case_default: %empty  */
#line 3751 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* case_arg: a_expr  */
#line 3754 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* case_arg: %empty  */
#line 3755 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* columnrefList: columnref  */
#line 3759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 32926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* columnrefList: columnrefList ',' columnref  */
#line 3760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 32932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* columnref: ColId  */
#line 3764 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
		}
#line 32940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* columnref_opt_indirection: ColId  */
#line 3770 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 32948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* columnref_opt_indirection: ColId indirection  */
#line 3774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 32956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* indirection_el: '[' a_expr ']'  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3796 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 32993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3804 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 33005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* opt_slice_bound: a_expr  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 33011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_slice_bound: %empty  */
#line 3815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 33017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_indirection: %empty  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 33023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_indirection: opt_indirection indirection_el  */
#line 3821 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 33029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_func_arguments: %empty  */
#line 3825 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 33035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_func_arguments: '(' ')'  */
#line 3826 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 33041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3827 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 33047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 33060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* extended_indirection_el: '[' a_expr ']'  */
#line 3841 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 33072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 33084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 33097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3865 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 33109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* opt_extended_indirection: %empty  */
#line 3880 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 33115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3881 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 33121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3897 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 33127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* opt_target_list_opt_comma: %empty  */
#line 3898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 33133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* target_list: target_el  */
#line 3902 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 33139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* target_list: target_list ',' target_el  */
#line 3903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 33145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* target_list_opt_comma: target_list  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 33151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* target_list_opt_comma: target_list ','  */
#line 3908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 33157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* target_el: a_expr AS ColLabelOrString  */
#line 3912 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 33169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* target_el: a_expr IDENT  */
#line 3928 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 33181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* target_el: a_expr  */
#line 3936 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 33193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3945 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 33199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* except_list: EXCLUDE ColId  */
#line 3946 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 33205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* opt_except_list: except_list  */
#line 3949 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 33211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* opt_except_list: %empty  */
#line 3950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 33217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* replace_list_el: a_expr AS ColId  */
#line 3953 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 33223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* replace_list: replace_list_el  */
#line 3957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 33229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* replace_list: replace_list ',' replace_list_el  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 33235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* replace_list_opt_comma: replace_list  */
#line 3962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 33241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* replace_list_opt_comma: replace_list ','  */
#line 3963 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 33247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3966 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 33253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* opt_replace_list: REPLACE replace_list_el  */
#line 3967 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 33259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* opt_replace_list: %empty  */
#line 3968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 33265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* qualified_name_list: qualified_name  */
#line 3978 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 33271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3979 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 33277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* name_list: name  */
#line 3984 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 33283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* name_list: name_list ',' name  */
#line 3986 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 33289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* name_list_opt_comma: name_list  */
#line 3991 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 33295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* name_list_opt_comma: name_list ','  */
#line 3992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 33301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3996 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 33307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 33313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* name: ColIdOrString  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* func_name: function_name_token  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 33325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* func_name: ColId indirection  */
#line 4015 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 33334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* AexprConst: Iconst  */
#line 4026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 33342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* AexprConst: FCONST  */
#line 4030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 33350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* AexprConst: Sconst opt_indirection  */
#line 4034 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 33366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* AexprConst: BCONST  */
#line 4046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 33374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* AexprConst: XCONST  */
#line 4050 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 33387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* AexprConst: func_name Sconst  */
#line 4059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 33398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 33440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* AexprConst: ConstTypename Sconst  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 33448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4108 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 33456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 33464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 33472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* AexprConst: TRUE_P  */
#line 4120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 33480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* AexprConst: FALSE_P  */
#line 4124 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 33488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* AexprConst: NULL_P  */
#line 4128 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 33496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* Iconst: ICONST  */
#line 4133 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 33502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* type_function_name: IDENT  */
#line 4150 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* type_function_name: unreserved_keyword  */
#line 4151 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* type_function_name: type_func_name_keyword  */
#line 4152 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* type_function_name: pgq_unreserved_keyword  */
#line 4153 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* function_name_token: IDENT  */
#line 4157 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* function_name_token: unreserved_keyword  */
#line 4158 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* function_name_token: func_name_keyword  */
#line 4159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* function_name_token: pgq_unreserved_keyword  */
#line 4160 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* type_name_token: IDENT  */
#line 4164 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* type_name_token: unreserved_keyword  */
#line 4165 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* type_name_token: type_name_keyword  */
#line 4166 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* type_name_token: pgq_unreserved_keyword  */
#line 4167 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* any_name: ColId  */
#line 4171 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 33580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* any_name: ColId attrs  */
#line 4172 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 33586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* attrs: '.' attr_name  */
#line 4176 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 33592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* attrs: attrs '.' attr_name  */
#line 4178 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 33598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4182 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 33604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_name_list: %empty  */
#line 4183 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 33610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* ColLabelOrString: ColLabel  */
#line 4190 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* ColLabelOrString: SCONST  */
#line 4191 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 33634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 33640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 33646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 33669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 33697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 33720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 33730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 33736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 33763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 33790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 33808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 33814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 33820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 33832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 33838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 33844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 33850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 33856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 33968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 33980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 33992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 33998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 34004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 34010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 34016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 34022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 34028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 34034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 34040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 34046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 34052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 34058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 34064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 34079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 34094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 34115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 34129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 34140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 34151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 34157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 34163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 34169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 34175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 34181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1603: /* NonReservedWord: IDENT  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 34187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1604: /* NonReservedWord: unreserved_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 34193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1605: /* NonReservedWord: other_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 34199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1606: /* NonReservedWord: pgq_unreserved_keyword  */
#line 94 "third_party/libpg_query/grammar/statements/explain.y"
                                                            { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 34205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1607: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 34211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1608: /* NonReservedWord_or_Sconst: Sconst  */
#line 100 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 34217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1609: /* explain_option_list: explain_option_elem  */
#line 106 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 34225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1610: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 34233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1611: /* analyze_keyword: ANALYZE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 34239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1612: /* analyze_keyword: ANALYSE  */
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 34245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1613: /* opt_boolean_or_string: TRUE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 34251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1614: /* opt_boolean_or_string: FALSE_P  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 34257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1615: /* opt_boolean_or_string: ON  */
#line 125 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 34263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1616: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 131 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 34269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1617: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 137 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 34277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1618: /* explain_option_name: NonReservedWord  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 34283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1619: /* explain_option_name: analyze_keyword  */
#line 145 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 34289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1620: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 34299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1621: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 34309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1622: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 34319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1623: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 34329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1624: /* VariableSetStmt: SET VARIABLE_P set_rest  */
#line 35 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) n;
				}
#line 34339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1625: /* set_rest: generic_set  */
#line 44 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 34345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1626: /* set_rest: var_name FROM CURRENT_P  */
#line 46 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 34356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1627: /* set_rest: TIME ZONE zone_value  */
#line 54 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 34371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1628: /* set_rest: SCHEMA Sconst  */
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 34383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1629: /* generic_set: var_name TO var_list  */
#line 77 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 34395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1630: /* generic_set: var_name '=' var_list  */
#line 85 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 34407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1631: /* var_value: a_expr  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 34413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1632: /* zone_value: Sconst  */
#line 102 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 34421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1633: /* zone_value: IDENT  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 34429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1634: /* zone_value: ConstInterval Sconst opt_interval  */
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 34448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1635: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 34459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1636: /* zone_value: NumericOnly  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 34465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1637: /* zone_value: DEFAULT  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 34471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1638: /* zone_value: LOCAL  */
#line 133 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 34477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1639: /* var_list: var_value  */
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 34483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1640: /* var_list: var_list ',' var_value  */
#line 138 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 34489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1641: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = NULL;
					n->repo_is_alias = false;
					n->version = NULL;
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 34503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1642: /* LoadStmt: opt_force INSTALL file_name opt_ext_version  */
#line 17 "third_party/libpg_query/grammar/statements/load.y"
                                                                            {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-1].str);
                    n->repository = NULL;
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-3].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 34517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1643: /* LoadStmt: opt_force INSTALL file_name FROM ColId opt_ext_version  */
#line 26 "third_party/libpg_query/grammar/statements/load.y"
                                                                                       {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = true;
                    n->filename = (yyvsp[-3].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 34531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1644: /* LoadStmt: opt_force INSTALL file_name FROM Sconst opt_ext_version  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-3].str);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 34545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1645: /* opt_force: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_INSTALL; }
#line 34551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1646: /* opt_force: FORCE  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_FORCE_INSTALL; }
#line 34557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1647: /* file_name: Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 34563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1648: /* file_name: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 34569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1649: /* opt_ext_version: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = NULL; }
#line 34575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1650: /* opt_ext_version: VERSION_P Sconst  */
#line 54 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 34581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1651: /* opt_ext_version: VERSION_P ColId  */
#line 55 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 34587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1652: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 34605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1653: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 34623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1654: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 34639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1655: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 34651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1656: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 34665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1657: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 34671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1658: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 34677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1659: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 34683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1660: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 34689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1661: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 34703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1662: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 34709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1663: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 34715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1664: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 34721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1665: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 34727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1666: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 34733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1667: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 34739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1668: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 34753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1669: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 34767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1670: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 34775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1671: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 34786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1672: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 34797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1673: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 34803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1674: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 34809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1675: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 34815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1676: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 34821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1677: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 34835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1678: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 34849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1679: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 34862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1680: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 34875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1681: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1682: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1683: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1684: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 34914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1685: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 34920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1686: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 34926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1687: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 34932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1688: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 34941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1689: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1690: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1691: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1692: /* VariableResetStmt: RESET VARIABLE_P reset_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1693: /* generic_reset: var_name  */
#line 32 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 34988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1694: /* generic_reset: ALL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 34998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1695: /* reset_rest: generic_reset  */
#line 48 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 35004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1696: /* reset_rest: TIME ZONE  */
#line 50 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 35015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1697: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 57 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 35026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1698: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 35038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1699: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 35050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1700: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 35061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1701: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 35072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1702: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 35083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1703: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 35094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1704: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 35105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1705: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 35116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1706: /* VariableShowStmt: show_or_describe PROPERTY GRAPH ColId  */
#line 60 "third_party/libpg_query/grammar/statements/variable_show.y"
            {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
            }
#line 35127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1713: /* var_name: ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 35133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1714: /* var_name: var_name '.' ColId  */
#line 76 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 35139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1715: /* table_id: ColId  */
#line 79 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 35145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1716: /* table_id: table_id '.' ColId  */
#line 81 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 35151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1717: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 35161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1718: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 35177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1719: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 35193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1720: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 35209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1721: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 35230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1722: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 35251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1723: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 35257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1724: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 35263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1725: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 35269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1726: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 35275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1727: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 35292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1728: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 35309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1729: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 35326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1730: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 35332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1731: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 35338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1732: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 35344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1733: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 35358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 35362 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = larg;
	n->rarg = rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
